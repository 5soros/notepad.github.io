<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>unicode-and-javascript/</title>
      <link href="/2024/10/22/unicode-yu-javascript/"/>
      <url>/2024/10/22/unicode-yu-javascript/</url>
      
        <content type="html"><![CDATA[<h1 id="ES5-中的字符操作"><a href="#ES5-中的字符操作" class="headerlink" title="ES5 中的字符操作"></a>ES5 中的字符操作</h1><p>es5 中提供了一些跟字符相关的操作，在某些需要精细化处理字符串的场所可能有帮助哦哦哦哦哦哦。</p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a><a href="#%E5%AD%97%E7%AC%A6%E8%BD%AC%E4%B9%89" title="字符转义"></a>字符转义</h2><p>可以使用<code>\u</code>来转义各种十六进制数为相应字符：</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>&#96;&#96;&#96;</td><td></td></tr><tr><td>1</td><td></td></tr><tr><td>2</td><td></td></tr><tr><td>3</td><td></td></tr><tr><td>4</td><td></td></tr><tr><td>&#96;&#96;&#96;</td><td>&#96;&#96;&#96;</td></tr><tr><td>‘\u0041’; &#x2F;&#x2F; A</td><td></td></tr><tr><td>‘\u0061’; &#x2F;&#x2F; a</td><td></td></tr><tr><td>‘\u4E25’; &#x2F;&#x2F; 严</td><td></td></tr><tr><td>‘\u2603’; &#x2F;&#x2F; ☃</td><td></td></tr></tbody></table><pre class="line-numbers language-|" data-language="|"><code class="language-|">## [](#fromCharCode、charCodeAt、charAt、length &quot;fromCharCode、charCodeAt、charAt、length&quot;)fromCharCode、charCodeAt、charAt、length1. &#96;String.fromCharcode&#96; - 可以基于『代码点』创建字符串，暂时可以把『代码点』理解为就是一串十六进制数   |             |                                                                             |   | ----------- | --------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   String.fromCharCode(0x0041); &#x2F;&#x2F; A   String.fromCharCode(0x4e25); &#x2F;&#x2F; 严   &#96;&#96;&#96; |2. &#96;String.prototype.charAt(position)&#96; 获取字符串在特定位置的字符   |             |                                                       |   | ----------- | ----------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   &#39;ABCDE&#39;.charAt(2); &#x2F;&#x2F; C   &#39;万几皮&#39;.charAt(2); &#x2F;&#x2F; 皮   &#96;&#96;&#96; |3. &#96;String.prototype.charCodeAt(position)&#96;，与&#96;charAt&#96;类似，只不过是获取在特定位置的那个字符的『代码点』。同时可以很容易看出来这个方法是&#96;fromCharCode&#96;的反向操作。   |                   |                                                                                                                                                               |   | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   3   4   5   &#96;&#96;&#96; | &#96;&#96;&#96;   &#39;ABCDE&#39;.charCodeAt(2).toString(16); &#x2F;&#x2F; 0x0043   &#39;万几皮&#39;.charCodeAt(2).toString(16); &#x2F;&#x2F; 0x76AE   &#x2F;&#x2F; 验证反向操作   String.fromCharCode(&#39;万几皮&#39;.charCodeAt(2)); &#x2F;&#x2F; &quot;皮&quot;   &#96;&#96;&#96; |4. &#96;length&#96;属性很熟悉了，就是计算长度呗   |             |                                                 |   | ----------- | ----------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   &#39;ABCDE&#39;.length; &#x2F;&#x2F; 5   &#39;万几皮&#39;.length; &#x2F;&#x2F; 3   &#96;&#96;&#96; |# [](#遇到-Unicode-字符时遇到的问题 &quot;遇到 Unicode 字符时遇到的问题&quot;)遇到 Unicode 字符时遇到的问题到目前为准都没什么问题，配合&#96;String.prototype&#96;上的各种工具方法，可以处理各种各样常见字符串操作。不过随着&#96;emoji&#96;表情的盛行，慢慢就会发现已有的工具出现各种各样的问题。## [](#fromCharCode、charCodeAt-的反向操作 &quot;fromCharCode、charCodeAt 的反向操作&quot;)fromCharCode、charCodeAt 的反向操作先看看上面的反向操作还能不能工作：|           |                                                         || --------- | ------------------------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;String.fromCharCode(&#39;💩&#39;.charCodeAt(0)); &#x2F;&#x2F; &quot;�&quot;&#96;&#96;&#96; |结果是乱码？？？那么再看看&#96;length&#96;：|           |                           || --------- | ------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#39;💩&#39;.length; &#x2F;&#x2F; 2&#96;&#96;&#96; |因吹丝停，看来遇到了一些奇怪的问题，如果继续尝试，可以发现一些其他的『BUG』：## [](#翻转字符串 &quot;翻转字符串&quot;)翻转字符串翻转字符串可能是一个比较常见的字符串操作，通常可能有一个如下的工具函数：|                           |                                                                                                                                                || ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123456789&#96;&#96;&#96; | &#96;&#96;&#96;function reverse(str) &#123;  return str    .split(&#39;&#39;)    .reverse()    .join(&#39;&#39;);&#125;reverse(&#39;abc&#39;); &#x2F;&#x2F; &#39;cba&#39;reverse(&#39;万几皮&#39;); &#x2F;&#x2F; &quot;皮几万&quot;&#96;&#96;&#96; |如果用来操作表情呢？|             |                                || ----------- | ------------------------------ || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;reverse(&#39;💩&#39;);(&#39;��&#39;);&#96;&#96;&#96; |感觉好像表情被拆散成了 2 个奇怪的字符。在正则匹配时，也有奇怪的事情发生## [](#正则匹配 &quot;正则匹配&quot;)正则匹配### [](#范围匹配 &quot;范围匹配&quot;)范围匹配正则表达式中经常会用到范围匹配：|             |                                                             || ----------- | ----------------------------------------------------------- || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;[a-c]&#x2F;.test(&#39;a&#39;) &#x2F;&#x2F; true&#x2F;[我-皮]&#x2F;.test(&#39;皮&#39;) &#x2F;&#x2F; true&#96;&#96;&#96; |但是这种方法在遇到表情时可能会出问题：|             |                                                                                                                          || ----------- | ------------------------------------------------------------------------------------------------------------------------ || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;[💩-💫]&#x2F;;&#x2F;&#x2F; Uncaught SyntaxError: Invalid regular expression: &#x2F;[💩-💫]&#x2F;: Range out of order in character class&#96;&#96;&#96; |囧，竟然直接就报错了。。### [](#数量匹配 &quot;数量匹配&quot;)数量匹配正则中可以用一些量词来匹配某个选项多次,如&#96;*&#96;,&#96;+&#96;, &#96;?&#96;, &#96;&#123;n&#125;&#96;, &#96;&#123;n,&#125;&#96;, &#96;&#123;n,m&#125;&#96;，这些在处理『常见普通』字符时没问题：|             |                                                           || ----------- | --------------------------------------------------------- || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;a&#123;2&#125;&#x2F;.test(&#39;aa&#39;) &#x2F;&#x2F;true&#x2F;皮&#123;2&#125;&#x2F;.test(&#39;皮皮&#39;) &#x2F;&#x2F;true&#96;&#96;&#96; |不出意料，遇到表情也会出问题：|           |                                        || --------- | -------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;💩&#123;2&#125;&#x2F;.test(&#39;💩💩&#39;); &#x2F;&#x2F; false&#96;&#96;&#96; |种种奇怪的现象都表明，js 在处理 emoji 时有问题，而这种现象在普通英文字母和汉字上不会存在，而脑海里跟 emoji 最相关的就是 Unicode 了，看来有必要了解下 Unicode。那 Unicode 到底是个啥？# [](#Unicode-简介 &quot;Unicode 简介&quot;)Unicode 简介Unicode 是一个字符集（注意不是编码方式，时不时听到有人说 Unicode 编码，实际上是不正确的说法），它把目前世界上所有字符包含在内了。每个符号都与一个称为代码点（&#96;Code Point&#96;）的十六进制数对应，代码点通常有一个&#96;U+&#96;前缀，例如：|               |                                                  || ------------- | ------------------------------------------------ || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;U+0041 &#x3D;&gt;  AU+0061 &#x3D;&gt;   aU+2603 &#x3D;&gt;   ☃&#96;&#96;&#96; |[codepoints](https:&#x2F;&#x2F;codepoints.net&#x2F;)上可以浏览各种各样的 Unicode 字符，我们 💩 先生的代码点是&#96;U+1F4A9&#96;\~\~\~Code Point 的取值范围是&#96;U+0000&#96;\~&#96;U+10FFFF&#96;，大约有 110 万个。 为了好组织，所有&#96;Code Point&#96;被分为了 17 个&#96;Plane&#96;，每个&#96;Plane&#96;中大约包含 65K 个&#96;Code Point&#96;。 见[维基百科](https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode)[![](https:&#x2F;&#x2F;hellogithub2014.github.io&#x2F;images&#x2F;Unicode&#x2F;Unicode-Panel.png)](https:&#x2F;&#x2F;hellogithub2014.github.io&#x2F;images&#x2F;Unicode&#x2F;Unicode-Panel.png)其中第一个&#96;Plane&#96;（U+0000\~ U+FFFF）被称为&#96;BMP&#96;（&#96;Basic Multilingual Plane&#96;）,包含了几乎所有的常用字符。剩下的其他&#96;Plane&#96;（U+10000\~ U+10FFFF）被称为&#96;supplementary planes（SMP）&#96;或者 &#96;astral planes&#96;，对应的字符通常称为&#96;SMP字符&#96;。另： 汉字的 Unicode 码点范围[可以参照这里](http:&#x2F;&#x2F;www.qqxiuzi.cn&#x2F;zh&#x2F;hanzi-unicode-bianma.php)关于 Unicode 先介绍这么多，我们关心的是，这个跟上面遇到的那些 BUG 有什么关系呢？这就要从 js 内部对字符的表示说起了。# [](#js-内部的字符表示 &quot;js 内部的字符表示&quot;)js 内部的字符表示上面说到 Unicode 只是字符集，在计算机内部不会直接存储字符集中的字符，而是会通过某种编码把它转换为一个个字节。对于大部分常见的字符，都是用 2 个字节表示的；而对于 emoji 表情，可能有人已经猜到了，是用 4 个字节表示的。更具体的来说： 对于&#96;SMP字符&#96;，JavaScript 实际上把它拆成了上下两半（&#96;H&#96;、&#96;L&#96;）分别来表示，&#96;H&#96; 和 &#96;L&#96;都是 2 个字节的。H、L 的计算公式：|             |                                                                                               || ----------- | --------------------------------------------------------------------------------------------- || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;H &#x3D; Math.floor((C - 0x10000) &#x2F; 0x400) + 0xd800;L &#x3D; ((C - 0x10000) % 0x400) + 0xdc00;&#96;&#96;&#96; |因为 &#96;SMP字符&#96; 的范围是&#96;U+010000 → U+10FFFF&#96;，故&#96;H&#96;的范围就是 &#96;0xD800&#96;\~&#96;0xDBFF&#96;， 一共 2^10 个字符\&#96;L&#96;的范围就是 &#96;0xDC00&#96; \~ &#96;0xDFFF&#96;，一共 2^10 个字符貌似很巧合的是：因为&#96;SMP字符&#96;的范围是&#96;U+10000&#96;\~&#96;U+10FFFF&#96;,一共 2^20 个字符，所以 H 和 L 结合起来，正巧能表示全部的&#96;SMP字符&#96;。而 BMP 中&#96;U+D800&#96;到&#96;U+DFFF&#96;是一个空段，里面不对应任何字符。例如对于”💩”(0x1F4A9)，通过上面公式计算可以得到&#96;H &#x3D; 0xD83D&#96;、&#96;L &#x3D; 0xDCA9&#96;，也就是说 js 内部会使用&#96;0xD83D&#96;和&#96;0xDCA9&#96;一共 4 个字节来表示它。同时，对于 BMP 区间的代码点，js 中会直接将码点转为十六进制形式的 2 字节：|           |                           || --------- | ------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;U+4E25  &#x3D;&gt; 0x4E25&#96;&#96;&#96; |我们上面碰到的所有&#96;SMP字符&#96;BUG 都是因为 H、L 导致，理解了这个也就知道该如何解决了。 不过在想办法解决它之前，我们来正面回答一下，**js 内部是使用什么编码方式处理字符的？**## [](#js-中的字符编码 &quot;js 中的字符编码&quot;)js 中的字符编码好吧，这块的知识是从[阮老师的这篇博客](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2014&#x2F;12&#x2F;unicode.html)了解到的，我直接说结论吧。js 使用的其实是&#96;UCS-2&#96;编码，由于这种编码被整合进了&#96;UTF-16&#96;编码，也可以认为 js 使用的是&#96;UTF-16&#96;编码处理字符。不过在细节上这两种编码还是有一些区别的：**UTF-16 编码对于基本平面的字符占用 2 个字节，对于辅助平面的字符占用 4 个字节；** 也就是说：对于”💩”，&#96;UTF-16&#96;会认为它是一个字符，占用 4 个字节。**而 UCS-2 认为所有字符都是 2 个字节**，而对于辅助平面的字符例如 💩，就比较尴尬了，UCS-2 认为它是 2 个字符（H 和 L），每个字符占 2 个字节。### [](#UTF-16-编码 &quot;UTF-16 编码&quot;)UTF-16 编码再稍微说一下&#96;UTF-16&#96;编码，知道了 H、L，理解&#96;UTF-16&#96;就很容易了。上面提到它是一种变长的编码，结果可能是 2 个字节，也可能是 4 个字节。具体来说：1. 如果是 BMP 字符，那么其代码点就是编码结果，如&#96;U+4E25 &#x3D;&gt; 0x4E25&#96;2. 如果是 SMP 字符，那么计算 H、L，H 和 L 拼凑起来的 4 个字节，就是最终结果，如&#96;0x1F4A9&#96;的结果就是&#96;0xD83DDCA9&#96;# [](#es5-中处理SMP字符 &quot;es5 中处理SMP字符&quot;)es5 中处理&#96;SMP字符&#96;1. **length**：💩 的&#96;length&#96;为 2 应该可以理解了，实际上它是 H、L 两个字符，可以看出&#96;length&#96;的结果并不是肉眼所看到的字符个数。2. **&#96;charCodeAt&#96;**： 如果猜测的没错，对于 💩，可以分别得出&#96;charCodeAt(0)&#96;和&#96;charCodeAt(1)&#96;，它们的结果正好就是 H 和 L：   |             |                                                                                               |   | ----------- | --------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   &#39;💩&#39;.charCodeAt(0).toString(16); &#x2F;&#x2F; 0xD83D   &#39;💩&#39;.charCodeAt(1).toString(16); &#x2F;&#x2F; 0xDCA9   &#96;&#96;&#96; |3. **&#96;fromCharcode&#96;** - 只能处理位于 BMP 区间(&#96;U+0000&#96;\~&#96;U+FFFF&#96;)的&#96;BMP&#96;字符,会直接截断&#96;SMP字符&#96;的高位字节:   |             |                                                                                                     |   | ----------- | --------------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   String.fromCharCode(0x0041); &#x2F;&#x2F; A   String.fromCharCode(0x1f4a9); &#x2F;&#x2F; &#39;&#39;  U+F4A9, not U+1F4A9   &#96;&#96;&#96; |   解决的办法是根据上面计算 &#96;H、L&#96; 的公式先计算出 &#96;H、L&#96;,然后再传入&#96;String.fromCharCode&#96;：   |           |                                                      |   | --------- | ---------------------------------------------------- |   | &#96;&#96;&#96;   1   &#96;&#96;&#96; | &#96;&#96;&#96;   String.fromCharCode(0xd83d, 0xdca9); &#x2F;&#x2F; &quot;💩&quot;   &#96;&#96;&#96; |4. **数量匹配&#96;SMP字符&#96;**: 匹配失败的原因是 &#96;SMP字符&#96;被打散成了 H、L   |           |                                                         |   | --------- | ------------------------------------------------------- |   | &#96;&#96;&#96;   1   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;💩&#123;2&#125;&#x2F;   &#x3D;&gt; &#x2F;\uD83D\uDCA9&#123;2&#125;&#x2F;  &#x2F;&#x2F; 其实匹配的是 H+L*2   &#96;&#96;&#96; |   一个可行的方案是直接采用括号包裹对应的&#96;&lt;H，L&gt;&#96;来写正则   |           |                                                   |   | --------- | ------------------------------------------------- |   | &#96;&#96;&#96;   1   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;(\uD83D\uDCA9)&#123;2&#125;&#x2F;.test(&#39;💩💩&#39;); &#x2F;&#x2F; true   &#96;&#96;&#96; |5. **范围匹配&#96;SMP字符&#96;**： 报错的原因也是&#96;H、L&#96;：   |           |                                                       |   | --------- | ----------------------------------------------------- |   | &#96;&#96;&#96;   1   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;[💩-💫]&#x2F;  &#x3D;&gt;   &#x2F;[\uD83D\uDCA9-\uD83D\uDCAB]&#x2F;   &#96;&#96;&#96; |   上面的&#96;\uDCA9-\uD83D&#96;左边的值比右边大，导致报错。一个很挫的解决方案是提供他们的 H、L 公共范围并精简表达式：   |             |                                                                                               |   | ----------- | --------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;\uD83D[\uDCA9-\uDCAB]&#x2F;.test(&#39;💩&#39;) &#x2F;&#x2F; true   &#x2F;\uD83D[\uDCA9-\uDCAB]&#x2F;.test(&#39;💫&#39;) &#x2F;&#x2F; true   &#96;&#96;&#96; |   这种方法的缺点也很明显，对于两个跨度很大的&#96;SMP&#96;字符，需要精心的分段，稍不留神就会出错：   |                   |                                                                                                                        |   | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |   | &#96;&#96;&#96;   1   2   3   4   5   &#96;&#96;&#96; | &#96;&#96;&#96;   &#x2F;[𐄑-💫]&#x2F;   &#x3D;&gt;   &#x2F;\uD800[\uDD11-\uDFFF]|[\uD801-\uD83C][\uDC00-\uDFFF]|\uD83D[\uDC00-\uDCAB]&#x2F;.test(&#39;💪&#39;) &#x2F;&#x2F; true   &#96;&#96;&#96; |6. **&#96;reverse&#96;函数**：遇到&#96;SMP字符&#96;会直接把 H、L 颠倒，而每个独立的 H、L 都是『乱码』，只有二者结合在一起才有意义。如果要解决问题，需要知道在碰到 H 的时候，下一个字符会是 L，不要把二者颠倒就行。   不过[esrever](https:&#x2F;&#x2F;github.com&#x2F;mathiasbynens&#x2F;esrever)提供了一个更巧妙的思路：先将 H、L 颠倒一次，然后再执行一次普通的 reverse 即可：   |                                       |                                                                                                                                                                                                                                                                                                                          |   | ------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |   | &#96;&#96;&#96;   1   2   3   4   5   6   7   8   9   10   11   12   13   &#96;&#96;&#96; | &#96;&#96;&#96;   const regexSurrogatePair &#x3D; &#x2F;([\uD800-\uDBFF])([\uDC00-\uDFFF])&#x2F;g;   function reverse(string) &#123;     const tempStr &#x3D; string.replace(regexSurrogatePair, &#39;$2$1&#39;);     return tempStr       .split(&#39;&#39;)       .reverse()       .join(&#39;&#39;);   &#125;   console.log(reverse(&#39;abcd&#39;)); &#x2F;&#x2F; dcba   console.log(reverse(&#39;💩万几皮&#39;)); &#x2F;&#x2F; 皮几万💩​​​​​   &#96;&#96;&#96; |# [](#ES6-中如何解决-Unicode-问题 &quot;ES6 中如何解决 Unicode 问题&quot;)ES6 中如何解决 Unicode 问题在 es5 中处理 SMP 字符需要时刻记住 H、L 的存在，既麻烦又容易出错。好在 es6 中新增了一系列特性来专门处理 SMP 字符，下面逐一说明。## [](#字符转义-1 &quot;字符转义&quot;)字符转义es5 中的&#96;\u&#96;字符转义不能正确处理 SMP 字符，例如 😄(&#96;U+1F604, H&#x3D;0xD83D L&#x3D;0xDE04&#96;)：|           |                                             || --------- | ------------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#39;\u1F604&#39;; &#x2F;&#x2F; &quot;ὠ4&quot;   &#39;\u1F60&#39; + &#39;4&#39;&#96;&#96;&#96; |除非使用 H、L 的形式：|           |                               || --------- | ----------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#39;\uD83D\uDE04&#39;; &#x2F;&#x2F; 😄&#96;&#96;&#96; |es6 中提供了更好的方法，使用&#96;&#123;&#125;&#96;包裹代码点即可：|           |                            || --------- | -------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#39;\u&#123;1f604&#125;&#39;; &#x2F;&#x2F; 😄&#96;&#96;&#96; |## [](#codePointAt &quot;codePointAt&quot;)codePointAt&#96;charCodeAt&#96;只能正确获取 BMP 字符的代码点，对于 SMP 字符只能获取 H 或 L；es6 中新增的&#96;codePointAt&#96;,他能统一处理好 BMP 以及 SMP 字符：|               |                                                                                                                                                || ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;&#39;😄&#39;.codePointAt(0).toString(16); &#x2F;&#x2F; 0x1f604&#39;abc&#39;.codePointAt(0).toString(16); &#x2F;&#x2F; 0x0061&#39;呵呵哒&#39;.codePointAt(2).toString(16); &#x2F;&#x2F; 0x54D2&#96;&#96;&#96; |## [](#fromCodePoint &quot;fromCodePoint&quot;)fromCodePoint同样的，&#96;fromCharcode&#96;也只能正确处理 BMP 字符； es6 新增的&#96;fromCodePoint&#96;解决了这个问题：|               |                                                                                                                    || ------------- | ------------------------------------------------------------------------------------------------------------------ || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;String.fromCodePoint(0x1f604); &#x2F;&#x2F; 😄String.fromCodePoint(0x0061); &#x2F;&#x2F; aString.fromCodePoint(0x54d2); &#x2F;&#x2F; 哒&#96;&#96;&#96; |## [](#正则匹配-1 &quot;正则匹配&quot;)正则匹配ES6 对正则表达式添加了**&#96;u&#96;**修饰符，含义为“Unicode 模式”，用来正确处理大于&#96;U+FFFF&#96;的 SMP 字符。也就是说：我们可以直接用&#96;u&#96;修饰符加上原始的代码点或字符就能正确匹配所有的 Unicode 字符了。### [](#单字符匹配 &quot;单字符匹配&quot;)单字符匹配若没有&#96;u&#96;修饰符，即使使用 es6 中的字符转义也不能正确匹配 SMP 字符：|           |                                          || --------- | ---------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;\u&#123;1f604&#125;&#x2F;.test(&#39;😄&#39;); &#x2F;&#x2F; false&#96;&#96;&#96; |由于 H、L 的存在，即使&#96;.&#96;点号也不能匹配 SMP 字符：|           |                                              || --------- | -------------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;foo.bar&#x2F;.test(&#39;foo😄bar&#39;); &#x2F;&#x2F; false&#96;&#96;&#96; |使用&#96;u&#96;修饰符可以处理这个问题：|             |                                                                               || ----------- | ----------------------------------------------------------------------------- || &#96;&#96;&#96;12&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;\u&#123;1f604&#125;&#x2F;u.test(&#39;😄&#39;); &#x2F;&#x2F; true&#x2F;foo.bar&#x2F;u.test(&#39;foo😄bar&#39;); &#x2F;&#x2F; true&#96;&#96;&#96; |### [](#范围匹配-1 &quot;范围匹配&quot;)范围匹配上面已经提到过，在 es5 中 SMP 范围匹配会直接报错：|           |                                                                                                                             || --------- | --------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;[💩-💫]&#x2F;; &#x2F;&#x2F; &#x2F;&#x2F; Uncaught SyntaxError: Invalid regular expression: &#x2F;[💩-💫]&#x2F;: Range out of order in character class&#96;&#96;&#96; |&#96;u&#96;在这里扮演了救世主：|                       |                                                                                                                                                                                                                || --------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;1234567&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;&#x2F; 💩 0x1f4a9 &#x3D;&gt; H&#x3D;0xD83D ,L&#x3D;0xDCA9&#x2F;&#x2F; 💪 0x1f4aa &#x3D;&gt; H&#x3D;0xD83D ,L&#x3D;0xDCAA&#x2F;&#x2F; 💫 0x1f4ab &#x3D;&gt; H&#x3D;0xD83D ,L&#x3D;0xDCAB&#x2F;[💩-💫]&#x2F;u.test(&#39;💩&#39;) &#x2F;&#x2F; true&#x2F;[💩-💫]&#x2F;u.test(&#39;💪&#39;) &#x2F;&#x2F; true&#x2F;[💩-💫]&#x2F;u.test(&#39;💫&#39;) &#x2F;&#x2F; true&#96;&#96;&#96; |直接使用 H、L 的形式来写正则也不会报错了：|               |                                                                                                                                                               || ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;[\uD83D\uDCA9-\uD83D\uDCAB]&#x2F;u.test(&#39;💩&#39;) &#x2F;&#x2F; true&#x2F;[\uD83D\uDCA9-\uD83D\uDCAB]&#x2F;u.test(&#39;💪&#39;) &#x2F;&#x2F; true&#x2F;[\uD83D\uDCA9-\uD83D\uDCAB]&#x2F;u.test(&#39;💫&#39;) &#x2F;&#x2F; true&#96;&#96;&#96; |### [](#数量匹配-1 &quot;数量匹配&quot;)数量匹配复习一下 es5 在数量匹配 SMP 时的问题：|           |                                        || --------- | -------------------------------------- || &#96;&#96;&#96;1&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;😄&#123;2&#125;&#x2F;.test(&#39;😄😄&#39;); &#x2F;&#x2F; false&#96;&#96;&#96; |继续看看&#96;u&#96;的作用：|               |                                                                                                                                 || ------------- | ------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123&#96;&#96;&#96; | &#96;&#96;&#96;&#x2F;😄&#123;2&#125;&#x2F;u.test(&#39;😄😄&#39;) &#x2F;&#x2F; true&#x2F;\u&#123;1f604&#125;&#123;2&#125;&#x2F;u.test(&#39;😄😄&#39;) &#x2F;&#x2F; true&#x2F;\uD83D\uDE04&#123;2&#125;&#x2F;u.test(&#39;😄😄&#39;) &#x2F;&#x2F; true ， 注意这里没有使用括号&#96;&#96;&#96; |## [](#表单校验中的-pattern &quot;表单校验中的 pattern&quot;)表单校验中的 pattern在表单校验中，&#96;input&#96;元素有一个规则属性是&#96;pattern&#96;，可以给它设置一个正则表达式，若表单项的值匹配了&#96;pattern&#96;，会默认添加一个&#96;valid&#96;的伪类，反之添加&#96;invalid&#96;伪类。|                         |                                                                                            || ----------------------- | ------------------------------------------------------------------------------------------ || &#96;&#96;&#96;12345678&#96;&#96;&#96; | &#96;&#96;&#96;&lt;style&gt;  :invalid &#123;    color: red;  &#125;  :valid &#123;    color: green;  &#125;&lt;&#x2F;style&gt;&#96;&#96;&#96; ||                     |                                                                                                                                                                            || ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123456&#96;&#96;&#96; | &#96;&#96;&#96;&lt;form action&#x3D;&quot;&quot;&gt;  &lt;input type&#x3D;&quot;text&quot; pattern&#x3D;&quot;\d+&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;  &lt;!-- 界面上显示绿色 --&gt;  &lt;input type&#x3D;&quot;text&quot; pattern&#x3D;&quot;\d+&quot; value&#x3D;&quot;abc&quot; &#x2F;&gt;  &lt;!-- 界面上显示红色 --&gt;&lt;&#x2F;form&gt;&#96;&#96;&#96; |幸运的是，不需要我们做什么 hack 操作，&#96;u&#96;修饰符已经默认附加在了 pattern 上：|                     |                                                                                                                                                                                         || ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123456&#96;&#96;&#96; | &#96;&#96;&#96;&lt;form action&#x3D;&quot;&quot; class&#x3D;&quot;form&quot;&gt;  &lt;input type&#x3D;&quot;text&quot; pattern&#x3D;&quot;😄&#123;2&#125;&quot; value&#x3D;&quot;😄😄&quot; &#x2F;&gt;  &lt;!-- green --&gt;  &lt;input type&#x3D;&quot;text&quot; pattern&#x3D;&quot;💩-💫&quot; value&#x3D;&quot;💫&quot; &#x2F;&gt;  &lt;!-- green --&gt;&lt;&#x2F;form&gt;&#96;&#96;&#96; |## [](#兼容性 &quot;兼容性&quot;)兼容性&#96;u&#96;修饰符的兼容性参考[test-RegExp\_y\_and\_u\_flags](http:&#x2F;&#x2F;kangax.github.io&#x2F;compat-table&#x2F;es6&#x2F;#test-RegExp_y_and_u_flags)[![](https:&#x2F;&#x2F;hellogithub2014.github.io&#x2F;images&#x2F;Unicode&#x2F;u-flag-compatiable.png)](https:&#x2F;&#x2F;hellogithub2014.github.io&#x2F;images&#x2F;Unicode&#x2F;u-flag-compatiable.png)## [](#Array-from &quot;Array.from&quot;)Array.from可能有时候需要计算字符串中的『字数』(即肉眼见到的字符数)，例如界面提示用户输入了多少字。如上所述，这个时候不能简单的使用&#96;length&#96;属性，因为对于一个&#96;SMP&#96;字符它会返回 2.在 es5 中我们可以这么做：|                         |                                                                                                                                                                                                                            || ----------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;12345678&#96;&#96;&#96; | &#96;&#96;&#96;var regexSMP &#x3D; &#x2F;[\uD800-\uDBFF][\uDC00-\uDFFF]&#x2F;g;&#x2F;&#x2F; 将每个SMP字符转换成一个BMP字符，然后直接计算最终结果的length即可。function countSymbols(string) &#123;  return string.replace(regexSMP, &#39;_&#39;).length;&#125;countSymbols(&#39;😄你好阿，test©&#39;); &#x2F;&#x2F; 10&#96;&#96;&#96; |es6 中借助&#96;Array.from&#96;或者扩散运算符&#96;...&#96;可以更简便，他会帮助我们处理好 Unicode 字符：|                                 |                                                                                                                                                                                                                           || ------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;1234567891011&#96;&#96;&#96; | &#96;&#96;&#96;function countSymbols2(string) &#123;  return Array.from(string).length;&#125;countSymbols2(&#39;😄你好阿，test©&#39;); &#x2F;&#x2F; 10function countSymbols3(string) &#123;  return [...string].length;&#125;countSymbols3(&#39;😄你好阿，test©&#39;); &#x2F;&#x2F; 10&#96;&#96;&#96; |同样&#96;reverse&#96;函数也能用&#96;Array.from&#96;：|                     |                                                                                                                                           || ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------- || &#96;&#96;&#96;123456&#96;&#96;&#96; | &#96;&#96;&#96;function reverse2(string) &#123;  return Array.from(string)    .reverse()    .join(&#39;&#39;);&#125;reverse2(&#39;😄你好阿，test©&#39;); &#x2F;&#x2F; &quot;©tset，阿好你😄&quot;&#96;&#96;&#96; |# [](#参考 &quot;参考&quot;)参考1. [javascript-unicode](https:&#x2F;&#x2F;mathiasbynens.be&#x2F;notes&#x2F;javascript-unicode)2. [谈谈 Unicode 编码](http:&#x2F;&#x2F;pcedu.pconline.com.cn&#x2F;empolder&#x2F;gj&#x2F;other&#x2F;0505&#x2F;616631_all.html#content_page_1)3. [Unicode 与 JavaScript 详解](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2014&#x2F;12&#x2F;unicode.html)4. [wiki unicode](https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Unicode)5. [The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets](https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2003&#x2F;10&#x2F;08&#x2F;the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses&#x2F;)6. [Unicode-aware regular expressions in ES2015](https:&#x2F;&#x2F;mathiasbynens.be&#x2F;notes&#x2F;es6-unicode-regex)7. [es6 字符串的扩展](http:&#x2F;&#x2F;es6.ruanyifeng.com&#x2F;#docs&#x2F;string)8. [es6 正则的扩展](http:&#x2F;&#x2F;es6.ruanyifeng.com&#x2F;#docs&#x2F;regex)9. [ASCII，Unicode 和 UTF-8](http:&#x2F;&#x2F;www.ruanyifeng.com&#x2F;blog&#x2F;2007&#x2F;10&#x2F;ascii_unicode_and_utf-8.html)# 为什么有些字符的 length 不是 1？谈谈 JavaScript 中的字符串编码原文：https:&#x2F;&#x2F;juejin.cn&#x2F;post&#x2F;7084062127677243428## 由 String.fromCodePoint 与 String.fromCharCode 谈起&#96;String.fromCodePoint&#96; 与 &#96;String.fromCharCode&#96; 这两个方法名称相似。如果你之前未使用过，让我们来先看 MDN 上的介绍。&gt; [String.fromCodePoint](https:&#x2F;&#x2F;link.juejin.cn?target&#x3D;https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FString%2FfromCodePoint &quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;String&#x2F;fromCodePoint&quot;)&gt;&gt; String.fromCodePoint() 静态方法返回使用指定的代码点序列创建的字符串。&gt; [String.fromCodePoint](https:&#x2F;&#x2F;link.juejin.cn?target&#x3D;https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FString%2FfromCharCode &quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Global_Objects&#x2F;String&#x2F;fromCharCode&quot;)&gt;&gt; 静态 String.fromCharCode() 方法返回由指定的 UTF-16 代码单元序列创建的字符串。读完以上介绍，你的困惑可能又多了一些。「代码点」，「UTF-16 代码单元序列」分别指的是什么意思？为了更好地理解这些概念，让我们从 Unicode 编码谈起。## Unicode 编码Unicode 编码给全世界上所有的字符分配了唯一的数字编号，即 code point（下文统一称代码点）。Unicode 字符共计 110 多万，一个 unsigned int32 来表示完全够了。| 字符 | 代码点    || -- | ------ || a  | 97     || 金  | 37329  || 😝 | 128541 |通过调用字符串的 &#96;codePointAt&#96; 方法可以获取指定位置字符的代码点，调用 &#96;String.fromCodePoint&#96; 可以将代码点转为字符，&#96;codePointAt&#96; 与 &#96;fromCodePoint&#96; 可以归为一类。&#96;&#96;&#96;jsjs复制代码&quot;😝&quot;.codePointAt(0); &#x2F;&#x2F; 128541String.fromCodePoint(128541); &#x2F;&#x2F; &#39;😝&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="UTF-8-与-UTF-16"><a href="#UTF-8-与-UTF-16" class="headerlink" title="UTF-8 与 UTF-16"></a>UTF-8 与 UTF-16</h3><p>Unicode 编码只是定义了代码点，但并未规定二进制数据存储的格式。用四个字节来存储最方便，但是过于浪费存储空间。实践中，往往采用变长编码，比如 UTF-8 与 UTF-16 格式来存储数据。</p><p>UTF-8 编码占用字节数 1 - 4，UTF-16 编码占用字节数为 2 或者 4。借助 Node 中的 <code>Buffer</code> 对象可以观察字符对应二进制数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"😝"</span><span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0xf0, 0x9f, 0x98, 0x9d]</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"😝"</span><span class="token punctuation">,</span> <span class="token string">"utf16le"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0x3d, 0xd8, 0x1d, 0xde]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript-字符的缺陷"><a href="#JavaScript-字符的缺陷" class="headerlink" title="JavaScript 字符的缺陷"></a>JavaScript 字符的缺陷</h2><p>JavaScript 虽然遵循 Unicode 编码，但采用的是废弃的 UCS-2 编码格式。该方案的缺陷是对于 4 个<strong>字节</strong>的字符，比如 emoji 表情，会拆分 2 个<strong>字符</strong>，即 2 个 UTF-16 字符。获取字符的长度与调用 <code>charCodeAt</code> 方法可看出这一点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token string">"😝"</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 2</span><span class="token string">"😝"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ['\uD83D', '\uDE1D']</span><span class="token string">"😝"</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 55357 === 0xD83D</span><span class="token string">"😝"</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 56861 === 0xDE1D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将编码数转成 16 进制数，加上 <code>\u</code> 也可用以表示该字符。使用 <code>String.fromCharCode</code> 可以将单元序列转成字符。<code>fromCharCode</code> 与 <code>charCodeAt</code> 可以归为一组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">55357</span><span class="token punctuation">,</span> <span class="token number">56861</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '😝'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>经过上面的介绍，我们发现对于由一个 UTF-16 代码单元构成的字符，<code>charCodeAt</code> 与 <code>codePointAt</code> 的结果一致。</p><h2 id="ES6-的改进"><a href="#ES6-的改进" class="headerlink" title="ES6 的改进"></a>ES6 的改进</h2><p>日常开发中，字符串的操作是如此常见。我们想用更好的方式来处理字符串。好在 ES6 改进了字符串的操作。使用 <code>for...of</code> 来遍历字符串，使用 <code>Array.from</code> 来准确的计算字符串长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ch <span class="token keyword">of</span> <span class="token string">"😝"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"😝"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 4 字节的字符，也支持了 Unicode 码表示。「😝」的这几种写法是等效。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token string">"😝"</span> <span class="token operator">===</span> <span class="token string">"\uD83D\uDE1D"</span><span class="token punctuation">;</span><span class="token string">"😝"</span> <span class="token operator">===</span> <span class="token string">"\u&#123;1F61D&#125;"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Buffer-与字符串的转换"><a href="#Buffer-与字符串的转换" class="headerlink" title="Buffer 与字符串的转换"></a>Buffer 与字符串的转换</h2><p>前文中提到，字符在存储占据的空间是不一样的。在 Buffer 拼接时，尤其要注意避免隐式地调用 <code>toString</code>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token keyword">const</span> buf <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"😝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4 字节</span>buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '���'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码片段的结果跟预期完全不一致。在调用 <code>toString</code> 时，Buffer 并不完整，错误地被转化成 <a href="https://link.juejin.cn/?target=https://www.fileformat.info/info/unicode/char/fffd/index.htm" title="https://www.fileformat.info/info/unicode/char/fffd/index.htm"><strong>� (Unicode replacement character)</strong></a>。正确的方式使用 <code>Buffer.concat</code> 或者 <code>StringDecoder</code> 来去实现拼接。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token comment">// 1</span>Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> StringDecoder <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"string_decoder"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> decoder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>decoder<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>decoder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '😝'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文：<a href="https://hellogithub2014.github.io/2018/08/23/unicode-and-javascript/">https://hellogithub2014.github.io/2018/08/23/unicode-and-javascript/</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p><code>String.fromCodePoint</code> 与 <code>codePointAt</code> 归为一组，处理的是 Unicode 编码中的代码点。</p></li><li><p><code>String.fromCharCode</code> 与 <code>charCodeAt</code> 归为一组，处理的是 UTF-16 代码单元序列。部分字符由两个 UTF-16 代码单元序列构成。</p></li><li><p>尽量使用 ES6 的新方法来处理字符串。</p></li><li><p>Buffer 与字符串转化时，需要注意保证 Buffer 的完整性。</p></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://link.juejin.cn/?target=https://es6.ruanyifeng.com/%23docs/string" title="https://es6.ruanyifeng.com/#docs/string">字符串的扩展</a></li><li><a href="https://link.juejin.cn/?target=https://nodejs.org/dist/latest-v14.x/docs/api/buffer.html%23buffer_buffers_and_character_encodings" title="https://nodejs.org/dist/latest-v14.x/docs/api/buffer.html#buffer_buffers_and_character_encodings">Node 中的 Buffer 对象</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何判断元素是否在可视区域内</title>
      <link href="/2024/04/25/ru-he-pan-duan-yuan-su-shi-fou-zai-ke-shi-qu-yu-nei/"/>
      <url>/2024/04/25/ru-he-pan-duan-yuan-su-shi-fou-zai-ke-shi-qu-yu-nei/</url>
      
        <content type="html"><![CDATA[<h1 id="如何判断元素是否在可视区域内呢？然后搞一些事情"><a href="#如何判断元素是否在可视区域内呢？然后搞一些事情" class="headerlink" title="如何判断元素是否在可视区域内呢？然后搞一些事情"></a>如何判断元素是否在可视区域内呢？然后搞一些事情</h1><p>在学习判断元素是否在可视区域时，我们首先的了解一些元素的位置值和大小值。</p><h2 id="元素的位置信息和大小"><a href="#元素的位置信息和大小" class="headerlink" title="元素的位置信息和大小"></a>元素的位置信息和大小</h2><p>大部分属性都是对应的，所以下面都只写一个。</p><ul><li><p><code>clientWidth</code>：元素内容区宽度加上左右内边距宽度，即<code>clientWidth = content + padding</code></p></li><li><p><code>offsetTop</code>，元素的上外边框至包含元素的上内边框之间的像素距离。 <em>&#x2F;&#x2F; 元素的偏移量不会随着滚动条的滚动而发生改变。并且是相对于定位父元素的位置计算的。如果没有定位的父元素就获取的是到窗口的距离，从元素的外边框计算到父元素的内边框</em></p></li><li><p><code>document.documentElement.scrollHeight</code>： 获取浏览器窗口的总高度 <strong>。包括滚动条的隐藏高度。</strong>,如果没有滚动条，则他就等于<code>document.documentElement.clientWidth</code>。</p></li><li><p><code>document.documentElement.clientWidth</code>：获取视口宽度。就是浏览器窗口的宽度。</p></li><li><p><code>getBoundingClientRect()</code>返回元素的大小及其相对于视口的位置。 <strong>这里获取的大小包括边框，内容和内边距。</strong> <strong>获取相对于视口的位置时，都是视口到外边框的距离。</strong></p></li><li><p>document.documentElement.scrollTop：获取滚动条滚动的高度。<strong>这个值是可以设置的。</strong></p></li></ul><p>了解了上面的一些属性，我们就可以学习第一种判断方法了</p><h2 id="通过元素的位置信息和滚动条滚动的高度来判断了"><a href="#通过元素的位置信息和滚动条滚动的高度来判断了" class="headerlink" title="通过元素的位置信息和滚动条滚动的高度来判断了"></a>通过元素的位置信息和滚动条滚动的高度来判断了</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获取可视窗口的盖度。</span>    <span class="token keyword">const</span> screenHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>    <span class="token comment">// 获取滚动条滚动的高度</span>    <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token comment">// 获取元素偏移的高度。就是距离可视窗口的偏移量。</span>    <span class="token keyword">const</span> offsetTop <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>    <span class="token keyword">return</span> offsetTop <span class="token operator">-</span> scrollTop <span class="token operator">&lt;=</span> screenHeight<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过getBoundingClientRect方法来获取元素的位置信息，然后加以判断-这种方法是我之前没有见过的"><a href="#通过getBoundingClientRect方法来获取元素的位置信息，然后加以判断-这种方法是我之前没有见过的" class="headerlink" title="通过getBoundingClientRect方法来获取元素的位置信息，然后加以判断(这种方法是我之前没有见过的)"></a>通过getBoundingClientRect方法来获取元素的位置信息，然后加以判断(这种方法是我之前没有见过的)</h2><p>首先来介绍一下getBoundingClientRect方法。</p><p>他是dom对象的一个方法。返回一个DOMRect对象。该对象拥有<code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>x</code>, <code>y</code>, <code>width</code>, 和 <code>height</code>属性。</p><p>当页面发生滚动的时候，<code>top</code>, <code>left</code>, <code>right</code>, <code>bottom</code>属性值都会随之改变。</p><blockquote><p>top：就是元素上外边框到视口顶端距离。</p><p>left：就是元素左外边框到视口左端距离。</p><p>bottom：就是元素下外边框到视口顶端距离。</p><p>right：就是元素右外边框到视口左端距离。 如果想要判断子元素是否在可视区域内，只需要：</p></blockquote><ul><li>top 大于等于 0</li><li>left 大于等于 0</li><li>bottom 小于等于视窗高度</li><li>right 小于等于视窗宽度</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码    <span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> totalHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>      <span class="token keyword">const</span> totalWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>      <span class="token comment">// 当滚动条滚动时，top, left, bottom, right时刻会发生改变。</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left <span class="token punctuation">&#125;</span> <span class="token operator">=</span> dom<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>top <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;=</span> totalWidth <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">&lt;=</span> totalHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通过webAPI，Intersection-Observer来实现监听。"><a href="#通过webAPI，Intersection-Observer来实现监听。" class="headerlink" title="通过webAPI，Intersection Observer来实现监听。"></a>通过webAPI，Intersection Observer来实现监听。</h2><blockquote><p>详细讲解，可以参考mdn：<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API" title="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;…</a> Intersection Observer API 会注册一个回调函数，每当被监视的元素进入或者退出另外一个元素时(或者 viewport)，或者两个元素的相交部分大小发生变化时，该回调方法会被触发执行。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token comment">// 用于检查目标的可见性。必须是目标元素的祖先节点。</span>    <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">"上右下左"</span> <span class="token comment">// 给祖先节点设置margin，等同于css中的margin。用来扩展或缩小`rootBounds`这个矩形的大小，从而影响`intersectionRect`交叉区域的大小。</span>    <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token comment">//表示当子元素和父元素覆盖多少时触发回调函数。</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当满足条件是搞一些事情</span>    <span class="token comment">// 这里通过判断entries[0].isIntersecting来判断是否在可视区域</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>dom<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="下面就是三种方法判断的例子了"><a href="#下面就是三种方法判断的例子了" class="headerlink" title="下面就是三种方法判断的例子了"></a>下面就是三种方法判断的例子了</h2><p>该例子就是如果子元素没有显示在当前可是窗口中时，窗口的背景颜色显示为绿色，反之显示为蓝色。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">html复制代码  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.div</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 2000px<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">p</span> <span class="token punctuation">&#123;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>p<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我出现啦<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 通过元素位置关系方法--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 获取可视窗口的盖度。</span>      <span class="token keyword">const</span> screenHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>      <span class="token comment">// 获取滚动条滚动的高度</span>      <span class="token keyword">const</span> scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>      <span class="token comment">// 获取元素偏移的高度。就是距离可视窗口的偏移量。</span>      <span class="token keyword">const</span> offsetTop <span class="token operator">=</span> dom<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>      <span class="token keyword">return</span> offsetTop <span class="token operator">-</span> scrollTop <span class="token operator">&lt;=</span> screenHeight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isContain</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'blue'</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'green'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 通过 getBoundingClientRect方法--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 只有当子元素全部出现在父元素中时，才会返回true。</span>    <span class="token keyword">function</span> <span class="token function">isContain</span><span class="token punctuation">(</span><span class="token parameter">dom</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> totalHeight <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>      <span class="token keyword">const</span> totalWidth <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>      <span class="token comment">// 当滚动条滚动时，top, left, bottom, right时刻会发生改变。</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left <span class="token punctuation">&#125;</span> <span class="token operator">=</span> dom<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> right<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>top <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;=</span> totalWidth <span class="token operator">&amp;&amp;</span> bottom <span class="token operator">&lt;=</span> totalHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isContain</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'blue'</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'green'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- 通过new IntersectionObserver();  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"blue"</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"green"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">.2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span>    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算符在JS中的妙用</title>
      <link href="/2024/04/25/wei-yun-suan-fu-zai-js-zhong-de-miao-yong/"/>
      <url>/2024/04/25/wei-yun-suan-fu-zai-js-zhong-de-miao-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="位运算符在JS中的妙用"><a href="#位运算符在JS中的妙用" class="headerlink" title="位运算符在JS中的妙用"></a>位运算符在JS中的妙用</h1><p><a href="https://juejin.cn/post/6844903568906911752">singcl</a></p><blockquote><ul><li>所有 <code>JavaScript</code> 数字存储为根为10的64（8比特）浮点数。<code>JavaScrip</code>t不是类型语言。与许多其他编程语言不同，<code>JavaScript</code>不定义不同类型的数字，比如整数、短、长、浮点等等。</li><li>整数精度（不使用小数点或指数计数法）最多为15位。小数精度的最大位数是17，但是浮点运算并不总是100% 准确。</li><li>位运算直接对二进制位进行计算，位运算直接处理每一个比特位，是非常底层的运算，好处是速度极快，缺点是很不直观，许多场合不能够使用。</li><li>位运算只对整数起作用，如果一个运算数不是整数，会自动转为整数后再运行。</li><li>在<code>JavaScript</code>内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。</li></ul></blockquote><h2 id="JS中常用的7个位运算符"><a href="#JS中常用的7个位运算符" class="headerlink" title="JS中常用的7个位运算符"></a>JS中常用的7个位运算符</h2><h3 id="1-按位与-AND"><a href="#1-按位与-AND" class="headerlink" title="1. 按位与(AND) &amp;"></a>1. 按位与(AND) <code>&amp;</code></h3><p><code>&amp;</code>以特定的方式组合操作二进制数中对应的位，如果对应的位都为1，那么结果就是1， 如果任意一个位是0 则结果就是0。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001console.log(1 &amp; 3)     &#x2F;&#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-按位或-OR"><a href="#2-按位或-OR" class="headerlink" title="2. 按位或(OR) |"></a>2. 按位或(OR) <code>|</code></h3><p><code>|</code> 运算符跟 <code>&amp;</code> 的区别在于如果对应的位中任一个操作数为1 那么结果就是1。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011console.log(1 | 3)     &#x2F;&#x2F; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-按位异或-XOR"><a href="#3-按位异或-XOR" class="headerlink" title="3. 按位异或(XOR) ^"></a>3. 按位异或(XOR) <code>^</code></h3><p><code>^</code> 如果对应两个操作位有且仅有一个1时结果为1，其他都是0。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 2的二进制表示为: 00000000 00000000 00000000 00000010console.log(1 ^ 3)     &#x2F;&#x2F; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-按位非-NOT"><a href="#4-按位非-NOT" class="headerlink" title="4. 按位非(NOT) ~"></a>4. 按位非(NOT) <code>~</code></h3><p><code>~</code> 运算符是对位求反，1变0, 0变1，也就是求二进制的反码。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; 3的二进制表示为: 00000000 00000000 00000000 00000011&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 1反码二进制表示: 11111111 11111111 11111111 11111110&#x2F;&#x2F; 由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 1的反码减1：     11111111 11111111 11111111 11111101&#x2F;&#x2F; 反码取反：       00000000 00000000 00000000 00000010&#x2F;&#x2F; 表示为10进制加负号：-2console.log(~ 1)     &#x2F;&#x2F; -2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>简单记忆：一个数与自身的取反值相加等于-1</strong>。</li></ul><h3 id="5-左移（Left-shift）"><a href="#5-左移（Left-shift）" class="headerlink" title="5. 左移（Left shift）&lt;&lt;"></a>5. 左移（Left shift）<code>&lt;&lt;</code></h3><p><code>&lt;&lt;</code>运算符使指定值的二进制数所有位都左移指定次数，其移动规则：<strong>丢弃高位，低位补0</strong>即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 2的二进制表示为: 00000000 00000000 00000000 00000010console.log(1 &lt;&lt; 1)     &#x2F;&#x2F; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-有符号右移"><a href="#6-有符号右移" class="headerlink" title="6. 有符号右移&gt;&gt;"></a>6. 有符号右移<code>&gt;&gt;</code></h3><p><code>&gt;&gt;</code>该操作符会将指定操作数的二进制位向右移动指定的位数。<strong>向右被移出的位被丢弃，拷贝最左侧的位以填充左侧</strong>。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“符号传播”。</p><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 1的二进制表示为: 00000000 00000000 00000000 00000001&#x2F;&#x2F; -----------------------------&#x2F;&#x2F; 0的二进制表示为: 00000000 00000000 00000000 00000000console.log(1 &gt;&gt; 1)     &#x2F;&#x2F; 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-无符号右移"><a href="#7-无符号右移" class="headerlink" title="7. 无符号右移&gt;&gt;&gt;"></a>7. 无符号右移<code>&gt;&gt;&gt;</code></h3><p><code>&gt;&gt;&gt;</code>该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。）</p><p>对于非负数，有符号右移和无符号右移总是返回相同的结果。例如， <code>9 &gt;&gt;&gt; 2</code> 得到 <code>2 和 9 &gt;&gt; 2</code> 相同。</p><h2 id="位运算符在js中的妙用"><a href="#位运算符在js中的妙用" class="headerlink" title="位运算符在js中的妙用"></a>位运算符在js中的妙用</h2><ol><li>使用&amp;运算符判断一个数的奇偶</li></ol><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;&#x2F; 偶数 &amp; 1 &#x3D; 0&#x2F;&#x2F; 奇数 &amp; 1 &#x3D; 1console.log(2 &amp; 1)    &#x2F;&#x2F; 0console.log(3 &amp; 1)    &#x2F;&#x2F; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用<code>~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;, |</code>来取整</li></ol><pre class="line-numbers language-none"><code class="language-none">复制代码console.log(~~ 6.83)    &#x2F;&#x2F; 6console.log(6.83 &gt;&gt; 0)  &#x2F;&#x2F; 6console.log(6.83 &lt;&lt; 0)  &#x2F;&#x2F; 6console.log(6.83 | 0)   &#x2F;&#x2F; 6&#x2F;&#x2F; &gt;&gt;&gt;不可对负数取整console.log(6.83 &gt;&gt;&gt; 0)   &#x2F;&#x2F; 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用<code>^</code>来完成值交换</li></ol><pre class="line-numbers language-none"><code class="language-none">复制代码var a &#x3D; 5var b &#x3D; 8a ^&#x3D; bb ^&#x3D; aa ^&#x3D; bconsole.log(a)   &#x2F;&#x2F; 8console.log(b)   &#x2F;&#x2F; 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>使用<code>&amp;, &gt;&gt;, |</code>来完成rgb值和16进制颜色值之间的转换</li></ol><pre class="line-numbers language-none"><code class="language-none">复制代码&#x2F;** * 16进制颜色值转RGB * @param  &#123;String&#125; hex 16进制颜色字符串 * @return &#123;String&#125;     RGB颜色字符串 *&#x2F;  function hexToRGB(hex) &#123;    var hexx &#x3D; hex.replace(&#39;#&#39;, &#39;0x&#39;)    var r &#x3D; hexx &gt;&gt; 16    var g &#x3D; hexx &gt;&gt; 8 &amp; 0xff    var b &#x3D; hexx &amp; 0xff    return &#96;rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)&#96;&#125;&#x2F;** * RGB颜色转16进制颜色 * @param  &#123;String&#125; rgb RGB进制颜色字符串 * @return &#123;String&#125;     16进制颜色字符串 *&#x2F;function RGBToHex(rgb) &#123;    var rgbArr &#x3D; rgb.split(&#x2F;[^\d]+&#x2F;)    var color &#x3D; rgbArr[1]&lt;&lt;16 | rgbArr[2]&lt;&lt;8 | rgbArr[3]    return &#39;#&#39;+ color.toString(16)&#125;&#x2F;&#x2F; -------------------------------------------------hexToRGB(&#39;#ffffff&#39;)               &#x2F;&#x2F; &#39;rgb(255,255,255)&#39;RGBToHex(&#39;rgb(255,255,255)&#39;)      &#x2F;&#x2F; &#39;#ffffff&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;JavaScript&#x2F;Reference&#x2F;Operators&#x2F;Bitwise_Operators</li><li>http:&#x2F;&#x2F;javascript.ruanyifeng.com&#x2F;grammar&#x2F;operator.html</li><li>http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;js&#x2F;js_obj_number.asp</li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS方法大全</title>
      <link href="/2024/04/19/js-fang-fa-da-quan/"/>
      <url>/2024/04/19/js-fang-fa-da-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-方法大全"><a href="#JavaScript-方法大全" class="headerlink" title="JavaScript 方法大全"></a>JavaScript 方法大全</h1><p><a href="https://juejin.cn/user/783303009380040/posts">Shrimpsss</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文针对JavaScript常用的数组与字符串对象方法进行总结</p><h2 id="一、增删查改"><a href="#一、增删查改" class="headerlink" title="一、增删查改"></a>一、增删查改</h2><h3 id="1-1-push"><a href="#1-1-push" class="headerlink" title="1.1 push"></a>1.1 push</h3><blockquote><p><code>push()</code> 方法将一个或多个元素添加到数组的末尾，并返回新数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span class="token operator">*</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@params</span><span class="token template-punctuation string">`</span></span>：数组要新增的元素（任意数据类型，一次可添加多个，用逗号隔开）<span class="token operator">*</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">@return</span><span class="token template-punctuation string">`</span></span>：返回数组新增元素后的长度<span class="token operator">*</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">是否改变原数组</span><span class="token template-punctuation string">`</span></span>：改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123678</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-unshift"><a href="#1-2-unshift" class="headerlink" title="1.2 unshift"></a>1.2 unshift</h3><blockquote><p><code>unshift()</code> 方法将一个或多个元素添加到数组的开头，并返回该数组的新长度。此方法更改数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>element1<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> elementN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：数组要新增的元素（任意数据类型，一次可添加多个，用逗号隔开）</li><li><code>@return</code>：返回数组新增元素后的长度</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 78 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-pop"><a href="#1-3-pop" class="headerlink" title="1.3 pop"></a>1.3 pop</h3><blockquote><p><code>pop()</code> 方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：无</li><li><code>@return</code>：返回数组被删除的元素</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1, 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-shift"><a href="#1-4-shift" class="headerlink" title="1.4 shift"></a>1.4 shift</h3><blockquote><p><code>shift()</code> 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js复制代码<span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：无</li><li><code>@return</code>：返回数组被删除的元素</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2, 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-5-splice"><a href="#1-5-splice" class="headerlink" title="1.5 splice"></a>1.5 splice</h3><blockquote><p><code>splice()</code> 方法</p><ol><li>通过删除或替换现有元素</li><li>或者原地添加新的元素来修改数组</li><li>并以数组形式返回被修改的内容。此方法会改变原数组。</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>array<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> howmany<span class="token punctuation">,</span> item1<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>itemX<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：不限参数，第一个参数是 <strong>必选</strong> 规定从何处添加&#x2F;删除元素（数组的下标，代表从第n个元素起），第二个参数 <strong>可选</strong> 表示要删除（或被替代，取决于第三个参数是否有值）的元素个数，第三个参数 <strong>可选</strong><br>起，表示要添加（或替代）的元素</li><li><code>@return</code>：返回值是一个数组，里面是删除项</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 删除</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 只传第一个参数，表示删除从下标为 1 的元素起，到最后一个元素</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 1 ]</span><span class="token comment">// arr.splice(0)：可以清空数组，把原始数组中的内容基于新数组储存起来（有点类似于数组克隆）</span><span class="token comment">// arr.splice(arr.length-1)：删除最后一项</span><span class="token comment">// arr.splice(0, 1)：删除第一项</span><span class="token comment">// 增加</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 第二个参数为0，表示不删除，之后的参数表示插进数组，下标从1开始，之前的元素往后挪</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// []</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 8,9,2,3]</span><span class="token comment">// 改（替代）</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 第二个参数为1，表示替代掉下标为1的元素</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,8,9,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、截取拼接"><a href="#二、截取拼接" class="headerlink" title="二、截取拼接"></a>二、截取拼接</h2><h3 id="2-1-slice-startIndex-endIndex"><a href="#2-1-slice-startIndex-endIndex" class="headerlink" title="2.1 slice [startIndex, endIndex)"></a>2.1 slice [startIndex, endIndex)</h3><blockquote><p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝。原始数组不会被改变。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">[</span>begin<span class="token punctuation">[</span><span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>注意：复制的数组包含 start 下标元素，不包含 end 下标元素</strong></p><ul><li><code>@params</code>：第一个参数start表示起始下标与第二个参数end表示结束下标，起始 start 必传，end 不传默认复制到数组结束位置，可使用负值从数组的尾部选取元素。</li><li><code>@return</code>：返回复制的子数组</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 6]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-concat"><a href="#2-2-concat" class="headerlink" title="2.2 concat"></a>2.2 concat</h3><blockquote><p><code>concat()</code> 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span><span class="token keyword">var</span> new_array <span class="token operator">=</span> old_array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>value1<span class="token punctuation">[</span><span class="token punctuation">,</span> value2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token punctuation">,</span> valueN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：多个任意项，可以是数组，可以是单个项</li><li><code>@return</code>：返回合并后的新数组</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 1, 0, 0]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、查找判断"><a href="#三、查找判断" class="headerlink" title="三、查找判断"></a>三、查找判断</h2><h3 id="3-1-includes"><a href="#3-1-includes" class="headerlink" title="3.1 includes"></a>3.1 includes</h3><blockquote><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>valueToFind<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：参数一必选，表示要查询的元素，参数二可选，表示从指定位置查起（若为负数，从后查起，负数超过数组长度，则置为 0）</li><li><code>@return</code>：返回布尔值</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-find"><a href="#3-2-find" class="headerlink" title="3.2 find"></a>3.2 find</h3><blockquote><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">javascript复制代码<span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：<code>[函数]</code> thisAr表示执行回调时this指向的对象</li><li><code>@return</code>：第一个满足条件的元素或 undefined</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> found <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> item <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 12, 8, 130, 44];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-findIndex"><a href="#3-3-findIndex" class="headerlink" title="3.3 findIndex"></a>3.3 findIndex</h3><blockquote><p><code>findIndex()</code> 方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>callback<span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：函数，thisAr表示执行回调时this指向的对象</li><li><code>@return</code>：第一个满足条件的索引或 -1</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> found <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> element <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 12, 8, 130, 44];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-indexOf"><a href="#3-4-indexOf" class="headerlink" title="3.4 indexOf"></a>3.4 indexOf</h3><blockquote><p><code>indexOf()</code> 方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：参数一必传，表示要查询的元素，参数二可选，表示从指定位置查起</li><li><code>@return</code>：如若检索项存在，返回其下标，没有就返回 -1</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-lastIndexOf"><a href="#3-5-lastIndexOf" class="headerlink" title="3.5 lastIndexOf"></a>3.5 lastIndexOf</h3><blockquote><p><code>lastIndexOf()</code> 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 <code>fromIndex</code> 处开始。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>searchElement<span class="token punctuation">[</span><span class="token punctuation">,</span> fromIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：参数一必传，表示要查询的元素，参数二可选，表示从指定位置查起</li><li><code>@return</code>：如若检索项存在，返回其下标，没有就返回 -1</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-sort"><a href="#4-1-sort" class="headerlink" title="4.1 sort"></a>4.1 sort</h3><blockquote><p><code>sort()</code> 方法用原地算法对数组的元素进行排序，并返回数组。排序不一定是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">[</span>compareFunction<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><p><code>@params</code>：<code>[函数]</code> <strong>可选</strong></p></li><li><p><code>@return</code>：排序后的数组</p></li><li><p><code>是否改变原数组</code>：改变</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> res1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span> <span class="token comment">// [1,3,9,2,5,3,7,4,5]</span><span class="token keyword">var</span> res2 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span> <span class="token comment">// [9,7,5,5,4,3,3,2,1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 留给你们自己思考 (●'◡'●)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-reverse"><a href="#4-2-reverse" class="headerlink" title="4.2 reverse"></a>4.2 reverse</h3><blockquote><p><code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：无</li><li><code>@return</code>：倒转排序后的数组</li><li><code>是否改变原数组</code>：改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// [5, 4, 3, 3, 2, 1]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 留给你们自己思考 (●'◡'●)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、转字符串"><a href="#五、转字符串" class="headerlink" title="五、转字符串"></a>五、转字符串</h2><h3 id="5-1-join"><a href="#5-1-join" class="headerlink" title="5.1 join"></a>5.1 join</h3><blockquote><p><code>join()</code> 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span>separator<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：指定的分隔符 （字符串得加””包裹 不然会报语法错误）</li><li><code>@return</code>：转换后的字符串</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1-3-9 (type:string)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 3, 9];</span><span class="token comment">// 以+分隔</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1+3+9 (type:string)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-toString"><a href="#5-2-toString" class="headerlink" title="5.2 toString"></a>5.2 toString</h3><blockquote><p><code>toString()</code> 返回一个字符串，表示指定的数组及其元素。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><ul><li><code>@params</code>：无</li><li><code>@return</code>：转换后的字符串</li><li><code>是否改变原数组</code>：不改变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2,3,3,4,5 (type:string)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 3, 4, 5];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六、遍历映射"><a href="#六、遍历映射" class="headerlink" title="六、遍历映射"></a>六、遍历映射</h2><h3 id="6-1-for"><a href="#6-1-for" class="headerlink" title="6.1 for"></a>6.1 for</h3><blockquote><p>for 循环性能最佳，内部可以阻塞</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 长度一般尽量先用赋值于变量，提升性能</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>asas<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ... continue; // 打断当次循环，进入下次循环 break; // 直接打断循环，跳出循环 &#125; ``` ### 6.2 forEach></span>    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">forEach()</span><span class="token template-punctuation string">`</span></span> 方法对数组的每个元素执行一次给定的函数。    <span class="token operator">></span>    <span class="token operator">></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">javascript        > // 基础语法    > arr.forEach(function(currentValue, index, arr), thisvalue)        * </span><span class="token template-punctuation string">`</span></span>@params<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">：</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">[</span>函数 必传<span class="token punctuation">]</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"> 第一个参数是 **必选** 表示数组的下标，从第n个元素起，第二个参数 **可选** 表示要删除（或被替代，取决于第三个参数是否有值）的元素个数，第三个参数 **可选**    表示要添加（或替代）的元素 第四个参数 **可选** 表示传递给函数的值一般用 "this" 值。_如果这个参数为空， "undefined" 会传递给 "this" 值_    * </span><span class="token template-punctuation string">`</span></span>@<span class="token keyword">return</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">：无/undefined    * </span><span class="token template-punctuation string">`</span></span>是否改变原数组`：改变    <span class="token operator">**</span>注意：除了抛出异常以外，没有办法中止或跳出 <span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 循环，即<span class="token keyword">break</span>、<span class="token keyword">continue</span>、async<span class="token operator">/</span><span class="token keyword">await</span>都无效<span class="token operator">**</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: "a"</span><span class="token comment">// expected output: "b"</span><span class="token comment">// expected output: "c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 6.3 map&gt; `map()` 方法创建一个新数组，其结果是该数组中的每个元素是调用一次提供的函数后的返回值。&gt;&gt; <pre class="line-numbers language-c" data-language="c"><code class="language-c">c复制代码<span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数是 **必选** 表示当前元素的值，第二个参数 **可选** 表示当前元素的索引值，第三个参数 **可选** 表示当前元素属于的数组对象， 第四个参数 **可选**表示对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。 _如果省略了 thisValue，或者传入 null、undefined，那么回调函数的 this 为全局对象_。* `@return`：新的数组* `是否改变原数组`：不改变(数组中全是基本类别) 改变(数组中元素是引用类型)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> map1 <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 8, 18, 20]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 6.4 filter&gt; `filter()` 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数是 **必选** 表示当前元素的值，第二个参数 **可选** 表示当前元素的索引值，第三个参数 **可选** 起，表示当前元素属于的数组对象， 第四个参数 **可选**表示对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。如果省略了 thisValue ，_&quot;this&quot; 的值为 &quot;undefined&quot;_* `@return`：满足条件的元素组成的新数组* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 6, 10 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>### 6.5 every&gt; `every()` 方法测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thisValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数 **必选** 表示当前元素的值，第二个参数 **可选** 表示当前元素的索引值，第三个参数 **可选** 表示当前元素属于的数组对象， 第四个参数 **可选**表示对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。 _如果省略了 thisValue ，&quot;this&quot; 的值为 &quot;undefined&quot;_* `@return`：Boolean 值* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrs <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>### 6.6 some&gt; `some()` 测试一个数组内的是不是至少有一个元素是否都能通过某个指定函数的测试。它返回一个布尔值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>element<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> thisArg<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数是 **必选** 表示当前元素的值，第二个参数 **可选** 表示当前元素的索引值，第三个参数 **可选** 表示当前元素属于的数组对象， 第四个参数 **可选**表示对象作为该执行回调时使用，传递给函数，用作 &quot;this&quot; 的值。 _如果省略了 thisValue ，&quot;this&quot; 的值为 &quot;undefined&quot;_* `@return`：Boolean 值* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrs <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> item <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrs<span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>### 6.7 reduce&gt; `reduce()` 方法对数组中的每个元素执行一个由您提供的 `reducer` 函数(升序执行)，将其结果汇总为单个返回值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">[</span><span class="token punctuation">,</span> index<span class="token punctuation">[</span><span class="token punctuation">,</span> array<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数 **必选** 表示_初始值_, 或者计算结束后的返回值，第二个参数 **可选** 表示当前元素，第三个参数 **可选** 表示当前元素的索引， 第四个参数 **可选**表示元素所属的数组对象，第五个参数 **可选** 表示传递给函数的初始值* `@return`：函数累计处理的结果* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**常用三种reduce写法*/</span><span class="token comment">// 1. 数组求和</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> accumulator <span class="token operator">+</span> currentValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6 (type:number)</span><span class="token comment">// 2. 数组去重</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> newArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span class="token comment">// 3. 数组扁平化</span><span class="token keyword">let</span> flat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>prev<span class="token punctuation">,</span> <span class="token operator">...</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 6.8 reduceRight&gt; `reduceRight()` 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">   <span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> currentValue<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initialValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：`[函数 必传]` 第一个参数 **必选** 表示_初始值_, 或者计算结束后的返回值，第二个参数 **可选** 表示当前元素，第三个参数 **可选** 表示当前元素的索引， 第四个参数 **可选**表示元素所属的数组对象，第五个参数 **可选** 表示传递给函数的初始值* `@return`：函数累计处理的结果* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> accumulator<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [4, 5, 2, 3, 0, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>## 七、获取键值### 7.2 keys&gt; `keys()` 方法返回一个包含数组中每个索引键的 `Array Iterator` 对象。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个迭代器对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">of</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 1 2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 7.3 values&gt; `values()` 方法返回一个新的 `Array Iterator` 对象，该对象包含数组每个索引的值。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> array1<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个迭代器对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> value <span class="token keyword">of</span> iterator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a b c</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>## 八、其他方法### 8.1 fill&gt; `fill()` 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>start<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：第一个参数 **必选** 表示填充的值，第二个参数 **可选** 表示开始填充位置，第三个参数 **可选** 表示停止填充位置* `@return`：指定位置被填充为固定值的原数组* `是否改变原数组`：改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// arr = [0, 0, 0, 0]</span><span class="token comment">// 多用于创建指定长度的空数组填充</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>arr1<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// arr1 = [1, 1, 1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 8.2 flat&gt; `flat()` 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。不改变原数组。_数组扁平化_&gt;&gt; <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 基础语法</span><span class="token keyword">var</span> newArray <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>* `@params`：可选深度\[类型为数字]* `@return`：函数累计处理的结果* `是否改变原数组`：不改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 扁平化数组</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6]</span><span class="token comment">//使用 Infinity，可展开任意深度的嵌套数组</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr3 <span class="token operator">=</span> arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span> newArr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><span class="token comment">// 去除空项</span><span class="token keyword">let</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>newArr4 <span class="token operator">=</span> arr4<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 留给你们自己思考 (●'◡'●)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>### 8.4 copyWithin&gt; `copyWithin()` 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。&gt;&gt; <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">sql</span>复制代码arr<span class="token punctuation">.</span>copyWithin<span class="token punctuation">(</span>target<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">start</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">end</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>* `@params`：第一个参数 **必选** 表示复制到指定目标索引位置，第二个参数 **可选** 表示元素复制得起始位置，第三个参数 **可选** 表示停止复制的索引位置。_如果为负值，表示倒数。_* `@return`：改变后的数组，长度不变* `是否改变原数组`：改变<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (5) ['d', 'b', 'c', 'd', 'e']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">copyWithin</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 留给你们自己思考 (●'◡'●)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token comment">// (5) ['d', 'd', 'e', 'd', 'e']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS常识</title>
      <link href="/2024/04/19/js-chang-shi/"/>
      <url>/2024/04/19/js-chang-shi/</url>
      
        <content type="html"><![CDATA[<pre><code>1.document.write(&quot;&quot;); 输出语句</code></pre><p>　　2.JS中的注释为&#x2F;&#x2F; 和&#x2F;* *&#x2F;<br>　　3.传统的HTML文档顺序是:document-&gt;html-&gt;(head,body)<br>　　4.一个浏览器窗口中的DOM顺序是:window-&gt;(navigator,screen,history,location,document)<br>　　5.得到表单中元素的名称和值:document.getElementById(“表单中元素的ID号”).name(或value)<br>　　6.一个小写转大写的JS: document.getElementById(“output”).value &#x3D; document.getElementById(“input”).value.toUpperCase();<br>　　7.JS中的值类型:String,Number,Boolean,Null,Object,Function<br>　　8.JS中的字符型转换成数值型:parseInt(),parseFloat()<br>　　9.JS中的数字转换成字符型:(“”+变量)<br>　　10.JS中的取字符串长度是:(length)<br>　　11.JS中的字符与字符相连接使用+号.<br>　　12.JS中的比较操作符有:&#x3D;&#x3D;等于,!&#x3D;不等于,&gt;,&gt;&#x3D;,&lt;.&lt;&#x3D;<br>　　13.JS中声明变量一般使用 let 来进行声明<br>　　14.JS中的判断语句结构:if(condition){}else{}<br>　　15.JS中的循环结构:for([initial e­xpression];[condition];[upadte e­xpression]) {inside loop}<br>　　16.循环中止的命令是:break<br>　　17.JS中的函数定义:function functionName([parameter],…){statement[s]}<br>　　18.当文件中出现多个form表单时.可以用document.forms[0],document.forms[1]来代替.<br>　　19.窗口:打开窗口window.open(), 关闭一个窗口:window.close(), 窗口本身:self<br>　　20.状态栏的设置:window.status&#x3D;”字符”;<br>　　21.弹出提示信息:window.alert(“字符”);<br>　　22.弹出确认框:window.confirm();<br>　　23.弹出输入提示框:window.prompt();<br>　　24.指定当前显示链接的位置:window.kk&#x3D;”URL”<br>　　25.取出窗体中的所有表单的数量:document.forms.length<br>　　26.关闭文档的输出流:document.close();<br>　　27.字符串追加连接符:+&#x3D;<br>　　28.创建一个文档元素:document.createElement(),document.createTextNode()<br>　　29.得到元素的方法:document.getElementById()<br>　　30.设置表单中所有文本型的成员的值为空:<br>　　var form &#x3D; window.document.forms[0]<br>　　for (var i &#x3D; 0; i&lt;form.elements.length;i++){<br>　　 if (form.elements[i].type &#x3D;&#x3D; “text”){<br>　　 form.elements[i].value &#x3D; “”;<br>　　 }<br>　　}<br>　　31.复选按钮在JS中判断是否选中:document.forms[0].checkThis.checked (checked属性代表为是否选中返回TRUE或FALSE)<br>　　32.单选按钮组(单选按钮的名称必须相同):取单选按钮组的长度document.forms[0].groupName.length<br>　　33.单选按钮组判断是否被选中也是用checked.<br>　　34.下拉列表框的值:document.forms[0].selectName.options[n].value (n有时用下拉列表框名称加上.selectedIndex来确定被选中的值)<br>　　35.字符串的定义:var myString &#x3D; new String(“This is lightsword”);<br>　　36.字符串转成大写:string.toUpperCase(); 字符串转成小写:string.toLowerCase();<br>　　37.返回字符串2在字符串1中出现的位置:String1.indexOf(“String2”)!&#x3D;-1则说明没找到.<br>　　38.取字符串中指定位置的一个字符:StringA.charAt(9);<br>　　39.取出字符串中指定起点和终点的子字符串:stringA.substring(2,6);<br>　　40.数学函数:Math.PI(返回圆周率),Math.SQRT2(返回开方),Math.max(value1,value2)返回两个数中的最在值,Math.pow(value1,10)返回value1的十次方,Math.round(value1)四舍五入函数,Math.floor(Math.random()*(n+1))返回随机数<br>　　41.定义日期型变量:var today &#x3D; new Date();<br>　　42.日期函数列表:dateObj.getTime()得到时间,dateObj.getYear()得到年份,dateObj.getFullYear()得到四位的年份,dateObj.getMonth()得到月份,dateObj.getDate()得到日,dateObj.getDay()得到日期几,dateObj.getHours()得到小时,dateObj.getMinutes()得到分,dateObj.getSeconds()得到秒,dateObj.setTime(value)设置时间,dateObj.setYear(val)设置年,dateObj.setMonth(val)设置月,dateObj.setDate(val)设置日,dateObj.setDay(val)设置星期几,dateObj.setHours设置小时,dateObj.setMinutes(val)设置分,dateObj.setSeconds(val)设置秒 [注意:此日期时间从0开始计]<br>　　43.FRAME的表示方式: [window.]frames[n].ObjFuncVarName,frames[“frameName”].ObjFuncVarName,frameName.ObjFuncVarName<br>　　44.parent代表父亲对象,top代表最顶端对象<br>　　45.打开子窗口的父窗口为:opener<br>　　46.表示当前所属的位置:this<br>　　47.当在超链接中调用JS函数时用:(Javascript:)来开头后面加函数名<br>　　48.在老的浏览器中不执行此JS:<!-- //--><br>　　49.引用一个文件式的JS:<script type="text/Javascript" src="aaa.js"></script><br>　　50.指定在不支持脚本的浏览器显示的HTML:<noscript></noscript><br>　　51.当超链和ONCLICK事件都有时,则老版本的浏览器转向a.html,否则转向b.html.例:<a href="a.html" onclick="kk='b.html';return false">dfsadf</a><br>　　52.JS的内建对象有:Array,Boolean,Date,Error,EvalError,Function,Math,Number,Object,RangeError,ReferenceError,RegExp,String,SyntaxError,TypeError,URIError<br>　　53.JS中的换行:\n<br>　　54.窗口全屏大小:<script>function fullScreen(){ this.moveTo(0,0);this.outerWidth=screen.availWidth;this.outerHeight=screen.availHeight;}window.maximize=fullScreen;</script><br>　　55.JS中的all代表其下层的全部元素<a href="http://bizhi.knowsky.com/">http://bizhi.knowsky.com/</a><br>　　56.JS中的焦点顺序:document.getElementByid(“表单元素”).tabIndex &#x3D; 1<br>　　57.innerHTML的值是表单元素的值:如<p id="para">“how are <em>you</em>“</p>,则innerHTML的值就是:how are <em>you</em><br>　　58.innerTEXT的值和上面的一样,只不过不会把<em>这种标记显示出来.<br>　　59.contentEditable可设置元素是否可被修改,isContentEditable返回是否可修改的状态.<br>　　60.isDisabled判断是否为禁止状态.disabled设置禁止状态<br>　　61.length取得长度,返回整型数值<br>　　62.addBehavior()是一种JS调用的外部函数文件其扩展名为.htc<br>　　63.window.focus()使当前的窗口在所有窗口之前.<br>　　64.blur()指失去焦点.与FOCUS()相反.<br>　　65.select()指元素为选中状态.<br>　　66.防止用户对文本框中输入文本:onfocus&#x3D;”this.blur()”<br>　　67.取出该元素在页面中出现的数量:document.all.tags(“div(或其它HTML标记符)”).length<br>　　68.JS中分为两种窗体输出:模态和非模态.window.showModaldialog(),window.showModeless()<br>　　69.状态栏文字的设置:window.status&#x3D;’文字’,默认的状态栏文字设置:window.defaultStatus &#x3D; ‘文字.’;<br>　　70.添加到收藏夹:external.AddFavorite(“<a href="http://www.xrss.cn","jaskdlf/">http://www.xrss.cn&quot;,&quot;jaskdlf</a>“);<br>　　71.JS中遇到脚本错误时不做任何操作:window.onerror &#x3D; doNothing; 指定错误句柄的语法为:window.onerror &#x3D; handleError;<br>　　72.JS中指定当前打开窗口的父窗口:window.opener,支持opener.opener…的多重继续.<br>　　73.JS中的self指的是当前的窗口<br>　　74.JS中状态栏显示内容:window.status&#x3D;”内容”<br>　　75.JS中的top指的是框架集中最顶层的框架<br>　　76.JS中关闭当前的窗口:window.close();<br>　　77.JS中提出是否确认的框:if(confirm(“Are you sure?”)){alert(“ok”);}else{alert(“Not Ok”);}<br>　　78.JS中的窗口重定向:window.navigate(“<a href="http://www.sina.com.cn/">http://www.sina.com.cn</a>“);<br>　　79.JS中的打印:window.print()<br>　　80.JS中的提示输入框:window.prompt(“message”,”defaultReply”);<br>　　81.JS中的窗口滚动条:window.scroll(x,y)<br>　　82.JS中的窗口滚动到位置:window.scrollby<br>　　83.JS中设置时间间隔:setInterval(“expr”,msecDelay)或setInterval(funcRef,msecDelay)或setTimeout<br>　　84.JS中的模态显示在IE4+行,在NN中不行:showModalDialog(“URL”[,arguments][,features]);<br>　　85.JS中的退出之前使用的句柄:function verifyClose(){event.returnValue&#x3D;”we really like you and hope you will stay longer.”;}} window.onbeforeunload&#x3D;verifyClose;<br>　　86.当窗体第一次调用时使用的文件句柄:onload()<br>　　87.当窗体关闭时调用的文件句柄:onunload()<br>　　88.window.location的属性: protocol(http:),hostname(<a href="http://www.example.com),port(80),host(www.example.com:80),pathname("/a/a.html"),hash("#giantGizmo",指跳转到相应的锚记),href(全部的信息)">www.example.com),port(80),host(www.example.com:80),pathname(&quot;/a/a.html&quot;),hash(&quot;#giantGizmo&quot;,指跳转到相应的锚记),href(全部的信息)</a><br>　　89.window.location.reload()刷新当前页面.<br>　　89-1.parent.location.reload()刷新父亲对象（用于框架）<br>　　89-2.opener.location.reload()刷新父窗口对象（用于单开窗口）<br>　　89-3.top.location.reload()刷新最顶端对象（用于多开窗口）<br>　　90.window.history.back()返回上一页,window.history.forward()返回下一页,window.history.go(返回第几页,也可以使用访问过的URL)<br>　　91.document.write()不换行的输出,document.writeln()换行输出<br>　　92.document.body.noWrap&#x3D;true;防止链接文字折行.<br>　　93.变量名.charAt(第几位),取该变量的第几位的字符.<br>　　94.”abc”.charCodeAt(第几个),返回第几个字符的ASCii码值.<br>　　95.字符串连接:string.concat(string2),或用+&#x3D;进行连接<br>　　96.变量.indexOf(“字符”,起始位置),返回第一个出现的位置(从0开始计算)<br>　　97.string.lastIndexOf(searchString[,startIndex])最后一次出现的位置.<br>　　98.string.match(regExpression),判断字符是否匹配.<br>　　99.string.replace(regExpression,replaceString)替换现有字符串.<br>　　100.string.split(分隔符)返回一个数组存储值.<br>　　101.string.substr(start[,length])取从第几位到指定长度的字符串.<br>　　102.string.toLowerCase()使字符串全部变为小写.<br>　　103.string.toUpperCase()使全部字符变为大写.<br>　　104.parseInt(string[,radix(代表进制)])强制转换成整型.<br>　　105.parseFloat(string[,radix])强制转换成浮点型.<br>　　106.isNaN(变量):测试是否为数值型.<br>　　107.定义常量的关键字:const,定义变量的关键字:var， let</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 常用简写技巧</title>
      <link href="/2024/04/19/js-chang-yong-jian-xie-ji-qiao/"/>
      <url>/2024/04/19/js-chang-yong-jian-xie-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="js-常用简写技巧（干货满满）"><a href="#js-常用简写技巧（干货满满）" class="headerlink" title="js 常用简写技巧（干货满满）"></a>js 常用简写技巧（干货满满）</h1><p><a href="https://juejin.cn/user/2450127265999335/posts">lwlcode</a></p><p>分享一些自己常用的js简写技巧，长期更新，会着重挑选一些实用的简写技巧，使自己的代码更简洁优雅~</p><blockquote><p>这里只会收集一些大多数人不知道的用法，但是确实能提高自己的编码技巧，像ES6那些基础的简写语法或者是三目运算符代替<code>if else</code>那些我觉得是基础，没必要写在这里浪费精力。</p></blockquote><p><strong>注意本篇内容涉及到的语法从ES6到ES11不等，具体使用需要考虑项目兼容性问题！</strong></p><p>另外推荐一个只用一行代码实现一个方法的实用网站<a href="https://link.juejin.cn/?target=https://1loc.dev/" title="https://1loc.dev/">1loc.dev</a>，<a href="https://link.juejin.cn/?target=https://github.com/phuocng/1loc" title="https://github.com/phuocng/1loc">github</a></p><h3 id="If-Else-用-或-运算符进行简化"><a href="#If-Else-用-或-运算符进行简化" class="headerlink" title="If-Else 用 || 或 ?? 运算符进行简化"></a>If-Else 用 || 或 ?? 运算符进行简化</h3><p>逻辑或操作符<code>||</code>，这里要注意的是<code>0</code>和<code>&#39;&#39;</code>也会认为是false</p><p>如果<code>||</code>前面的值是<code>0 &#39;&#39; false null undefined NaN</code>其中的任意一种，则直接返回<code>||</code>后面的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> obj <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价于 =>></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span><span class="token function">isNaN</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>a <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">空值合并操作符</a><code>??</code>如果没有定义左侧返回右侧。如果是，则返回左侧。</p><p>这种方法非常实用，有时候仅仅只是想判断一个字段有没有值，而不是把空字符串或者0也当做false处理</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> obj <span class="token operator">??</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价于 =>></span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>a <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入框非空的判断（有时候不想把0当成false可以用此方法。比如分数0也是个值，这种情况就不能认为是false）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 等价于 ==></span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value <span class="token operator">??</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="includes的正确使用姿势"><a href="#includes的正确使用姿势" class="headerlink" title="includes的正确使用姿势"></a>includes的正确使用姿势</h3><p>在上面逻辑或操作符<code>||</code>代码段里有一个if判断比较长，这时候就可以用<code>includes</code>去简化代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span>obj <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用includes简化</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防止崩溃的可选链"><a href="#防止崩溃的可选链" class="headerlink" title="防止崩溃的可选链(?.)"></a>防止崩溃的可选链(?.)</h3><p><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining">可选链操作符</a><code>?.</code><br>如果访问未定义的属性，则会产生错误。这就是可选链的用武之地。 在未定义属性时使用可选链运算符，undefined将返回而不是错误。这可以防止你的代码崩溃。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lwl"</span><span class="token punctuation">,</span><span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">state</span><span class="token operator">:</span> <span class="token string">"New York"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 一层一层判断</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student <span class="token operator">&amp;&amp;</span> student<span class="token punctuation">.</span>address <span class="token operator">&amp;&amp;</span> student<span class="token punctuation">.</span>address<span class="token punctuation">.</span>ZIPCode<span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span><span class="token comment">// 使用可选链操作符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>student<span class="token operator">?.</span>address<span class="token operator">?.</span>ZIPCode<span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可选链运算符也可以用于方法调用。如果方法存在，它将被调用，否则将返回 <code>undefined</code>。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello from foo!'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span>foo<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出：'Hello from foo!'</span>obj<span class="token punctuation">.</span>bar<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 输出：undefined，因为 bar 方法不存在</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，数组也可以使用。例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span><span class="token comment">// 使用可选链运算符</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出：undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出：'1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑空赋值"><a href="#逻辑空赋值" class="headerlink" title="逻辑空赋值(??&#x3D;)"></a>逻辑空赋值(??&#x3D;)</h3><p><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment">逻辑空赋值</a><code>??=</code><br>逻辑空赋值运算符<code>(x ??= y)</code>仅在 x 是 nullish (null 或 undefined) 时对其赋值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>duration <span class="token operator">??=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>duration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 50</span>a<span class="token punctuation">.</span>speed <span class="token operator">??=</span> <span class="token number">25</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>speed<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// expected output: 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速生成1-10的数组"><a href="#快速生成1-10的数组" class="headerlink" title="快速生成1-10的数组"></a>快速生成1-10的数组</h3><p>生成0-9，利用了数组的下标值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法一</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">// 方法二</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> k<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成1-10，通过map的特性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="快速生成10个0的数组"><a href="#快速生成10个0的数组" class="headerlink" title="快速生成10个0的数组"></a>快速生成10个0的数组</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="快速生成10个-的数组（二维数组）"><a href="#快速生成10个-的数组（二维数组）" class="headerlink" title="快速生成10个[]的数组（二维数组）"></a>快速生成10个[]的数组（二维数组）</h3><p><strong>注意：</strong> 二维数组不能直接写成<code>new Array(10).fill([])</code>（也就是fill方法不能传引用类型的值，<code>[]</code>换成<code>new Array()</code>也不行）,因为<code>fill</code>里传入引用类型值会导致每一个数组都指向同一个地址，改变一个数据的时候其他数据也会随之改变，详见<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill">mdn</a>官方说明</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 错误写法</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 注意这是错误写法，不要这么写</span><span class="token comment">// 正确写法</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组降维"><a href="#数组降维" class="headerlink" title="数组降维"></a>数组降维</h3><p>你是否还在用递归给一个多维数组降维？如果是，那你应该知道一下es6的<br><a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">flat()</a> 方法。</p><p>如果不确定需要降维的数组有多深，可以传入最大值作为参数<code>Infinity</code>，默认值深度为1</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">const</span> flatArr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token comment">// 输出 [1, 2, 3, 4, 5, 6]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你是否在使用<code>map</code>的时候想要对数组降维？大概像这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 [1, 2, 2, 4, 3, 6, 4, 8]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其实js也提供了更简便的方法，那就是<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap">flatMap()</a>，可以改成这样：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">[</span>v<span class="token punctuation">,</span> v <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Set集合实践：数组去重、交集、并集、差集"><a href="#Set集合实践：数组去重、交集、并集、差集" class="headerlink" title="Set集合实践：数组去重、交集、并集、差集"></a>Set集合实践：数组去重、交集、并集、差集</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1.数组去重</span><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">let</span> result1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 2, 4]</span><span class="token comment">// 2.交集</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span> <span class="token comment">// [3, 4]</span><span class="token comment">// 3.并集</span><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span> <span class="token comment">// [1, 3, 2, 4, 7]</span><span class="token comment">// 4.差集</span><span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result4<span class="token punctuation">)</span> <span class="token comment">// [1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在没有第三个变量的情况下交换两个变量"><a href="#在没有第三个变量的情况下交换两个变量" class="headerlink" title="在没有第三个变量的情况下交换两个变量"></a>在没有第三个变量的情况下交换两个变量</h3><p>在 JavaScript 中，你可以使用解构从数组中拆分值。这可以应用于交换两个变量而无需第三个</p><p>比较简单，es6语法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// 交换变量</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>y<span class="token punctuation">,</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将对象的值收集到数组中"><a href="#将对象的值收集到数组中" class="headerlink" title="将对象的值收集到数组中"></a>将对象的值收集到数组中</h3><p>用于<code>Object.values()</code>将对象的所有值收集到一个新数组中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Matt"</span><span class="token punctuation">,</span> <span class="token literal-property property">country</span><span class="token operator">:</span> <span class="token string">"Finland"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">35</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// LONGER FORM</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// SHORTHAND</span><span class="token keyword">const</span> data <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指数运算符（用的不多）"><a href="#指数运算符（用的不多）" class="headerlink" title="指数运算符（用的不多）"></a>指数运算符（用的不多）</h3><p>你<code>Math.pow()</code>习惯把一个数字提高到一个幂吗？你知道你也可以使用<code>**</code>运算符吗？</p><p>虽然可以简写，不过我还是建议写成<code>Math.pow()</code>方法，代码更有语义化。</p><p><strong>注意：<code>**</code>运算符要求操作数为数值类型，不过在js里也能正常运行。</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 8</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 8</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span><span class="token number">4</span> <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 2</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0.1111111111111111</span><span class="token number">3</span> <span class="token operator">**</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 0.1111111111111111</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 8 (参数被自动转换为数字)</span><span class="token string">'2'</span> <span class="token operator">**</span> <span class="token string">'3'</span><span class="token punctuation">;</span> <span class="token comment">// js中输出: 8，其他语言可能报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Math-floor-简写（用的不多）"><a href="#Math-floor-简写（用的不多）" class="headerlink" title="Math.floor() 简写（用的不多）"></a>Math.floor() 简写（用的不多）</h3><p>向下取整<code>Math.floor()</code>并不是什么新鲜事。但是你知道你也可以使用<code>~~</code>运算符吗？</p><p>同上虽然可以简写，不过我还是建议写成<code>Math.floor()</code>方法，代码更有语义化。</p><p><strong>注意：对于正数而言两者都是直接去掉小数位，但对于负数来说<code>Math.floor()</code>是向下取整，<code>~~</code>依然是只去掉小数位，整数位不变。</strong> 请看下面输出结果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">5.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: -3</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span><span class="token operator">~</span><span class="token operator">~</span><span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 3</span><span class="token operator">~</span><span class="token operator">~</span><span class="token number">5.7</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 5</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: -2</span><span class="token operator">~</span><span class="token operator">~</span><span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 输出: 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逗号运算符"><a href="#逗号运算符" class="headerlink" title="逗号运算符(,)"></a>逗号运算符(,)</h3><blockquote><p><strong>逗号</strong>（ <strong><code>,</code></strong><br>）运算符对它的每个操作数从左到右求值，并返回最后一个操作数的值。这让你可以创建一个复合表达式，其中多个表达式被评估，复合表达式的最终值是其成员表达式中最右边的值。这通常用于为 <a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for"><code>for</code></a> 循环提供多个参数。</p></blockquote><p>这里只说一下函数return的时候用逗号运算符简化代码的技巧，其他用法请直接点击查看<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_operator" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_operator">官方文档</a>。</p><p>举一个简单的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简化前</span><span class="token keyword">const</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出：[1, 2, 'a']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码需要返回修改后的数组，不能直接<code>return arr.push(&#39;a&#39;)</code>，因为<code>push</code>的返回值是修改后数组的长度，这时候可以用逗号运算符简化成一行代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 简化后</span><span class="token keyword">const</span> <span class="token function-variable function">result</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 输出：[1, 2, 'a']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Array-map-的简写"><a href="#Array-map-的简写" class="headerlink" title="Array.map()的简写"></a>Array.map()的简写</h3><p>比如想要拿到接口返回的特定字段的值，可以用解构赋值和对象的简写方法对map方法简写，详细解释请移步<a href="https://juejin.cn/post/7236655739090927672" title="https://juejin.cn/post/7236655739090927672">js map方法应用场景 处理对象数组</a>。</p><p>比如接口返回数据，此时如果只想要数据里的<code>id</code>和<code>name</code>，就可以用下面的简写方式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 接口返回数据</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment">// 第一种方法：箭头函数、 解构赋值</span><span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>id<span class="token punctuation">,</span> name<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>id<span class="token punctuation">,</span> name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 第二种方法：箭头函数、返回对象（相对更容易理解）</span><span class="token keyword">const</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span> v<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> v<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文字排序"><a href="#文字排序" class="headerlink" title="文字排序"></a>文字排序</h3><p>我们知道数组方法<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">sort()</a>默认是按照<code>UTF-16</code>码元值升序排序</p><blockquote></blockquote><p>我们可以使用<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt">charCodeAt()</a>方法获取<code>UTF-16</code>码元</p><p>对于中文或者其他语言按照拼音排序（字典顺序排序）则需要用到<a href="https://link.juejin.cn/?target=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare" title="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare">localeCompare()</a>方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'赵五'</span><span class="token punctuation">,</span> <span class="token string">'王二'</span><span class="token punctuation">,</span> <span class="token string">'陈六'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 输出：['张三', '李四', '王二', '赵五', '陈六']</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token string">'赵五'</span><span class="token punctuation">,</span> <span class="token string">'王二'</span><span class="token punctuation">,</span> <span class="token string">'陈六'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">'zh-Hans-CN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 输出：['陈六', '李四', '王二', '张三', '赵五']</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'apricot'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 输出：['Banana', 'Banana', 'Date', 'apple', 'apricot', 'cherry']</span><span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">,</span> <span class="token string">'cherry'</span><span class="token punctuation">,</span> <span class="token string">'Date'</span><span class="token punctuation">,</span> <span class="token string">'apricot'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">'en'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 输出：['apple', 'apricot', 'Banana', 'Banana', 'cherry', 'Date']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>&#39;zh&#39;</code> 表示主语言标记，代表中文。</li><li><code>&#39;Hans&#39;</code> 是脚本子标记，表示简体汉字。</li><li><code>&#39;CN&#39;</code> 是区域子标记，表示中国。</li></ul><blockquote><p>如果您不提供<code>locales</code>参数（第二个参数），<code>localeCompare</code>方法通常会默认使用浏览器或操作系统的当前语言环境</p></blockquote><h3 id="at-方法获取数组最后一位值"><a href="#at-方法获取数组最后一位值" class="headerlink" title="at()方法获取数组最后一位值"></a>at()方法获取数组最后一位值</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 获取arr的最后一位值</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token comment">// 一般写法</span><span class="token keyword">const</span> last <span class="token operator">=</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">// 二般写法</span><span class="token keyword">const</span> last <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">// 终极写法</span><span class="token keyword">const</span> last <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><ul><li>2023-11-30 <a href="#heading-16" title="#heading-16">at()方法获取数组最后一位值</a>：新增内容</li><li>2023-11-1 <a href="#heading-15" title="#heading-15">文字排序</a>：新增内容</li><li>2023-9-7 <a href="#heading-8" title="#heading-8">Set集合实践：数组去重、交集、并集、差集</a>：补充交集、并集、差集的案例</li><li>2023-7-7 <a href="#heading-14" title="#heading-14">Array.map()的简写</a>：新增内容</li><li>2023-6-27 <a href="#heading-2" title="#heading-2">防止崩溃的可选链(?.)</a>：补充方法和数组的使用</li><li>2023-6-21 <a href="#heading-13" title="#heading-13">逗号运算符(,)</a>：新增内容</li><li>2023-6-16 <a href="#heading-11" title="#heading-11">指数运算符和Math.floor() 简写</a>：补充两者区别</li><li>2023-5-30 <a href="#heading-7" title="#heading-7">数组降维</a>：新增内容</li><li>2023-5-27 <a href="#heading-0" title="#heading-0">If-Else 用 || 或 ?? 运算符进行简化</a>：补充上NaN</li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习 CSS @media 媒体查询</title>
      <link href="/2024/04/19/xue-xi-css-media-mei-ti-cha-xun/"/>
      <url>/2024/04/19/xue-xi-css-media-mei-ti-cha-xun/</url>
      
        <content type="html"><![CDATA[<h1 id="学习-CSS-media-媒体查询"><a href="#学习-CSS-media-媒体查询" class="headerlink" title="学习 CSS @media 媒体查询"></a>学习 CSS @media 媒体查询</h1><p><a href="https://juejin.cn/post/6971013190524076069">https://juejin.cn/post/6971013190524076069</a></p><h2 id="属性简介"><a href="#属性简介" class="headerlink" title="属性简介"></a>属性简介</h2><ol><li>基于一个或多个 <strong>媒体查询</strong> 的结果来应用样式表的一部分。就是可以根据不同的媒体类型定义不同的样式。</li><li>当页面需要响应式布局时，<code>@media</code> 是非常有用的。因为浏览器重置大小时，页面也会根据浏览器的宽度和高度重新渲染页面，使<code>@media</code>重新计算是否加载样式。 样例：</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* screen 当设备是 电脑屏幕，平板电脑，智能手机等。并且 width > 900px 使用 .article 样式块 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 900px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.article</span> <span class="token punctuation">&#123;</span><span class="token property">padding</span><span class="token punctuation">:</span> 1rem 3rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><code>@media</code><br>规则可置于您代码的顶层或位于其它任何<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule#%E6%9D%A1%E4%BB%B6%E8%A7%84%E5%88%99%E7%BB%84" title="https://developer.mozilla.org/zh-CN/docs/Web/CSS/At-rule#%E6%9D%A1%E4%BB%B6%E8%A7%84%E5%88%99%E7%BB%84"><code>@条件规则组</code></a>内。</li></ol><h3 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h3><ul><li>描述了设备的类别。媒体类型是可选的，默认是<code>all</code>类型。</li></ul><ol><li><code>all</code> 所有设备上都加载。</li><li><code>print</code> 在打印预览模式下在屏幕上查看的分页材料和文档中加载。</li><li><code>screen</code> 电脑屏幕，平板电脑，智能手机等，中加载。</li><li><code>speech</code> 屏幕阅读器等发声设备中加载。</li></ol><ul><li><code>CSS2.1和媒体查询3</code>定义了几种其他媒体类型<code>（tty，tv，projection，handheld，braille，embossed，和aural）</code>，现在基本上已经弃用。</li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ul><li>逻辑运算符 <code>not</code>，<code>and</code>以及<code>only</code>可以被用于组成一个复杂的媒体查询。还可以通过用逗号分隔多个媒体查询来将它们合并为一个规则。</li></ul><ol><li><code>not</code> 用于<strong>媒体查询</strong>取反值，如果<strong>媒体查询</strong>返回 <code>false</code>，则返回 <code>true</code>。如果出现在以逗号分隔的查询列表中，它只会在当前范围中取反。如果使用<code>not</code>运算符，还必须指定媒体类型。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 在 screen 类型 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen</span> <span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 取反 */</span><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">not</span> screen</span> <span class="token punctuation">&#123;</span><span class="token selector">.box1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c01d66f535e4f41ad67d7d1bac81471~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><ol start="2"><li><code>and</code> 用于将多个媒体特征组合到一个<strong>媒体查询</strong>中。它还用于将<strong>媒体功能</strong>与<strong>媒体类型</strong>连接起来。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 在 screen 类型 大于560px 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 560px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 在 screen 类型 大于560px 小于 700px 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 560px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.box1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0435e0a0996a47c8896883133c2fd1a3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="1.gif"></p><ol start="3"><li><code>only</code> 是为了在不支持媒体查询的浏览器中不添加样式。浏览器处理以<code>only</code>开头的关键词时将会忽略<code>only</code>。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">only</span> screen</span><span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>// 浏览器中等同于<span class="token atrule"><span class="token rule">@media</span> screen</span><span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><code>, （逗号)</code> 逗号用于将多个媒体查询组合成一个规则。逗号分隔列表中的每个查询都与其他查询分开处理。因此，如果列表中的任何查询为真，则整个媒体语句返回真。换句话说，列表的行为就像一个逻辑or运算符。</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 在 screen 类型 小于240px 或 大于240px 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 560px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.box</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 在 screen 类型 小于 240px 或 大于360px 小于 700px 加载 */</span><span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 240px<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 360px<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span><span class="token selector">.box1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ae25e9689544dffa688a132e04503d8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="1.gif"></p><h3 id="媒体功能-https-developer-mozilla-org-en-US-docs-Web-CSS-Media-Queries-Using-media-queries-media-features"><a href="#媒体功能-https-developer-mozilla-org-en-US-docs-Web-CSS-Media-Queries-Using-media-queries-media-features" class="headerlink" title="[媒体功能](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features"></a>[媒体功能](<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features">https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features</a></h3><p>“<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features">https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries#media_features</a>“)</p><ul><li>根据属性判断当前使用 <code>css</code> 所在的设备，或是浏览环境的具体特征。表达式是可选的，它负责判断这些特性或特征是否存在、值为多少。每条媒体特性表达式都必须用括号括起来。 常用媒体：</li></ul><ol><li><code>height</code> 输出设备中的页面可见区域高度。</li><li><code>width</code> 输出设备中的页面可见区域宽度。</li><li><code>max-aspect-ratio</code> 输出设备的屏幕可见宽度与高度的最大比率。</li><li><code>max-device-aspect-ratio</code> 输出设备的屏幕可见宽度与高度的最大比率。</li><li><code>max-device-height</code> 输出设备的屏幕可见的最大高度。</li><li><code>max-device-width</code> 输出设备的屏幕最大可见宽度。</li><li><code>max-height</code> 输出设备中的页面最大可见区域高度。</li><li><code>max-width</code> 输出设备中的页面最大可见区域宽度。</li><li><code>min-height</code> 输出设备中的页面最小可见区域高度。</li><li><code>min-width</code> 输出设备中的页面最小可见区域宽度。</li></ol><h2 id="其他加载方式"><a href="#其他加载方式" class="headerlink" title="其他加载方式"></a>其他加载方式</h2><h3 id="style标签上加载"><a href="#style标签上加载" class="headerlink" title="style标签上加载"></a><code>style</code>标签上加载</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style media="(min-width: 500px)">    .box</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token selector">&lt;/style>&lt;style media="(max-width: 500px">    .box</span> <span class="token punctuation">&#123;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> burlywood<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>根据<code>media属性</code>定义的<strong>媒体查询</strong>判断加载那个样式。</li></ul><h3 id="import-使用时加载"><a href="#import-使用时加载" class="headerlink" title="@import 使用时加载"></a>@import 使用时加载</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./index.css<span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span>350px<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>./home.css<span class="token punctuation">)</span></span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>750px<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在加载最后添加<code>()</code>定义<strong>媒体查询</strong>判断加载那个样式。</li></ul><h3 id="标签"><a href="#标签" class="headerlink" title="&lt;picture&gt;标签"></a><code>&lt;picture&gt;</code>标签</h3><pre><code><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">html复制代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 650px)<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo1.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(min-width: 465px)<span class="token punctuation">"</span></span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img_girl.jpg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>* 根据屏幕匹配的不同尺寸显示不同图片，如果没有匹配到或浏览器不支持 `picture` 属性则使用 `img` 元素：</code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS水平垂直居中</title>
      <link href="/2024/04/19/css-shui-ping-chui-zhi-ju-zhong/"/>
      <url>/2024/04/19/css-shui-ping-chui-zhi-ju-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="文本垂直居中"><a href="#文本垂直居中" class="headerlink" title="文本垂直居中"></a>文本垂直居中</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.text</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">line-height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/afcb97e60c4f4a32877fc9a925816eb5~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h2 id="元素垂直居中"><a href="#元素垂直居中" class="headerlink" title="元素垂直居中"></a>元素垂直居中</h2><h3 id="1-绝对性定位-利用-calc-计算偏移量"><a href="#1-绝对性定位-利用-calc-计算偏移量" class="headerlink" title="1.绝对性定位 利用 calc 计算偏移量"></a>1.绝对性定位 利用 calc 计算偏移量</h3><p>使用绝对性定位，已知盒子自身宽高，利用 calc 计算偏移量进行定位📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">body</span> <span class="token punctuation">&#123;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.calc</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>100% - 200px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>100% - 200px<span class="token punctuation">)</span>/2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>        <span class="token comment">/* 方便看效果 */</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>calc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>元素垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86e23e9dfb36495b988e28fab0f69a2b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="2-绝对定位-利用-margin-auto-属性"><a href="#2-绝对定位-利用-margin-auto-属性" class="headerlink" title="2.绝对定位 利用 margin:auto 属性"></a>2.绝对定位 利用 margin:auto 属性</h3><p>使用绝对定位，利用 margin:auto 属性，对已知宽高的盒子进行自动偏移定位📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 绝对性定位 */</span>    <span class="token selector">.div</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>margin: auto;元素垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/381342739c4044efaf6a3f4e7af0e9a0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="3-绝对定位-利用-margin-负值属性"><a href="#3-绝对定位-利用-margin-负值属性" class="headerlink" title="3.绝对定位 利用 margin 负值属性"></a>3.绝对定位 利用 margin 负值属性</h3><p>使用绝对定位，利用 margin 负值属性，对已知宽高的盒子进行计算偏移量进行定位📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.div</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> -100px<span class="token punctuation">;</span>        <span class="token comment">/*margin-left: -100px 0 0 -100px;*/</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>margin: -100px;元素垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdf1b1c30cc844d48b19b3c430ce4b04~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="4-绝对定位-利用-transform-属性"><a href="#4-绝对定位-利用-transform-属性" class="headerlink" title="4.绝对定位 利用 transform 属性"></a>4.绝对定位 利用 transform 属性</h3><p>使用绝对定位，利用 transform 属性，对未知宽高的盒子进行自动偏移定位📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">.div</span> <span class="token punctuation">&#123;</span>        <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>        <span class="token comment">/* 相对定位或绝对定位均可 */</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>利用 transform 进行垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83ced57ffffe474e962bed9fd9464596~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="5-Flex布局"><a href="#5-Flex布局" class="headerlink" title="5.Flex布局"></a>5.Flex布局</h3><p>使用Flex布局，利用 <code>align-items: center;</code> 与 <code>justify-content: center; </code>属性，对未知宽高的盒子进行自动偏移定位，<code>父元素需要设置高度</code>📌</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* 利用 flex 布局 不需要盒子本身宽高 但需要父级盒子高度*/</span>    <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token comment">/* 垂直居中 */</span>        <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token comment">/* 水平居中 */</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span>        <span class="token comment">/* 父元素高度需设置 */</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.container div</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token comment">/* 宽高可以不设置 */</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> greenyellow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>利用 flex 布局进行水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a82aa25499d4bc5994210256db2e819~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p><h3 id="6-table-cell-布局"><a href="#6-table-cell-布局" class="headerlink" title="6.table-cell 布局"></a>6.table-cell 布局</h3><p>使用 table-cell 布局，利用 <code>display: table-cell;</code> 、 <code>vertical-align: middle; </code>与 <code>text-align: center;</code><br>属性，对未知宽高的盒子进行自动偏移定位，<code>父元素需要设置宽高</code>📌，适合有父元素元素的定位</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- css 样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* table-cell 不需要盒子本身宽高*/</span>    <span class="token selector">.table-cell</span> <span class="token punctuation">&#123;</span>        <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>        <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">.table-cell div</span> <span class="token punctuation">&#123;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- html 结构 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>table-cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>利用 table-cell 进行水平垂直居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c2f80adac5048a3967848c7a490bb2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12个可能你没见过，但非常实用的 HTML 标签</title>
      <link href="/2024/04/19/12-ge-ke-neng-ni-mei-jian-guo-dan-fei-chang-shi-yong-de-html-biao-qian/"/>
      <url>/2024/04/19/12-ge-ke-neng-ni-mei-jian-guo-dan-fei-chang-shi-yong-de-html-biao-qian/</url>
      
        <content type="html"><![CDATA[<h1 id="12个可能你没见过，但非常实用的-HTML-标签"><a href="#12个可能你没见过，但非常实用的-HTML-标签" class="headerlink" title="12个可能你没见过，但非常实用的 HTML 标签"></a>12个可能你没见过，但非常实用的 HTML 标签</h1><p><a href="https://juejin.cn/post/7232667260166029372">写bug写bug</a></p><p>关注</p><h2 id="一、center"><a href="#一、center" class="headerlink" title="一、center"></a>一、center</h2><p>让你实现水平居中，用这个标签就对了，标签名也非常得语义化</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>零一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6d9e43e84e2441f6be5d26d6bbe9e872~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>原理也很简单，其实就是这个标签自带了 <code>text-align: center</code> 的样式</p><h2 id="二、abbr"><a href="#二、abbr" class="headerlink" title="二、abbr"></a>二、abbr</h2><p>abbr 全称是 <strong>abbreviations</strong>，意思是缩写。应用场景也很简单，为一些文章中的缩写增加注释</p><p>以前在文章中对于缩写的解释经常会这么做：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">sql</span>复制代码DAU（Daily Active <span class="token keyword">User</span>），日活跃用户数 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那我们用 <code>abbr</code> 标签呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>abbr title<span class="token operator">=</span><span class="token string">"Daily Active User"</span><span class="token operator">></span>        <span class="token constant">DAU</span><span class="token operator">&lt;</span><span class="token operator">/</span>abbr<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>，日活跃用户数 <span class="token operator">...</span><span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>展示的效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bd8a15640ac46aebc127cb9736a010c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>这个标签就可以把全称隐藏掉，弱化信息量，让真正不知道该缩写的用户主动去获取缩写的具体意思，这个在 <code>markdown</code> 里经常会出现</p><h2 id="三、mark"><a href="#三、mark" class="headerlink" title="三、mark"></a>三、mark</h2><p><code>&lt;mark /&gt;</code> 在 markdown 中也是很常用的，用于将包裹的文本高亮展示</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">css复制代码&lt;mark>高亮文本&lt;/mark><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/802a1940f2a941bda735e8b30c228b45~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>如果全文统一高亮样式，可以专门对 mark 标签进行样式重置，这样就不用对你用的每个 <code>div</code> 加一个 <code>highlight</code> 的类名了，又不语义化，又徒增文档大小</p><h2 id="四、sup、sub"><a href="#四、sup、sub" class="headerlink" title="四、sup、sub"></a>四、sup、sub</h2><p><code>&lt;sup /&gt;</code>和<code>&lt;sub /&gt;</code>分别表示上标和下标，在 markdown 中出现得也很频繁，比如数学公式和引用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">3</span><span class="token operator">&lt;</span>sup<span class="token operator">></span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">/</span>sup<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">4</span><span class="token operator">&lt;</span>sub<span class="token operator">></span><span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>sub<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4056b93ee0545d6ba7bb82b76bc9ab9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>上标和下标的样式原理也比较简单，主要就是利用了 <code>vertical-align</code> 的 <code>top</code> 和 <code>sub</code> 属性值，然后将字号缩小，不过有现成的标签，干嘛不用呢？</p><h2 id="五、figure"><a href="#五、figure" class="headerlink" title="五、figure"></a>五、figure</h2><p><code>figure</code> 是用于包裹其它标签的内容的，然后再利用另一个标签 <code>figcaption</code> ，可以对包裹的内容进行一个文本描述，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> /media/cc0-images/elephant-660-480.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>大象<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figcaption</span><span class="token punctuation">></span></span>这是一张大象的照片<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figcaption</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5d1e358999434cdaa0e543282f80056d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>那要是图片挂了呢？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/666ec236ee3b4684b010da78dd2136d2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>再友好点处理，我们把 <code>img</code> 标签的 <code>alt</code> 属性去掉</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecb11331b37443a7bc72d08ed4393e6b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>漂亮，终于把我一直厌烦的图裂icon给干掉了，样式还巨好看</p><p>当然不止能包裹 <code>img</code> 标签，其它任何都是可以的</p><p>嘿嘿，给大家在本文来个实战👇，下面这个可以点击，样式也是利用了 <code>figure</code> 这个标签</p><p><a href="https://link.juejin.cn/?target=https://mp.weixin.qq.com/s?__biz=MzkxMjI3MTA1Mg==&mid=2247515122&idx=1&sn=b150e432c8045be68cbe54a9cba75c4d&chksm=c10d8851f67a0147e8d9c4bf041e4c922d7f5c9da423e0730d4ecfb085ed49be3f14e4492a5b&token=1941016612&lang=zh_CN&scene=21%23wechat_redirect" title="https://mp.weixin.qq.com/s?__biz=MzkxMjI3MTA1Mg==&amp;mid=2247515122&amp;idx=1&amp;sn=b150e432c8045be68cbe54a9cba75c4d&amp;chksm=c10d8851f67a0147e8d9c4bf041e4c922d7f5c9da423e0730d4ecfb085ed49be3f14e4492a5b&amp;token=1941016612&amp;lang=zh_CN&amp;scene=21#wechat_redirect"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d073645fc764b549edd230d8a2fdf23~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></a></p><p>我是figure标签产生的</p><h2 id="六、progress"><a href="#六、progress" class="headerlink" title="六、progress"></a>六、progress</h2><p>说到 <code>&lt;progress /&gt;</code> 这个标签就很有意思了，去年有段时间我做的业务里涉及到了进度条，当时是前同事做的，然后有一些性能问题，我就在研究如何优化，减少进度条改变带来的性能问题。</p><p>虽然最后问题时解决了，但是也有幸收到了张鑫旭大佬的评论，他告诉我 <code>progress</code> 这个标签就足够了，既有语义化，又有进度条的功能，性能还好，兼容性也很不错。后来经过一番尝试，还真是，当时是我孤陋寡闻了，也安利给大家</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 进度条最大值为<span class="token number">100</span>，当前进度为<span class="token number">60</span>，即<span class="token number">60</span><span class="token operator">%</span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>progress max<span class="token operator">=</span><span class="token string">"100"</span> value<span class="token operator">=</span><span class="token string">"60"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>浏览器自带的样式就已经很好看了，效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/04060f954e4546bf8124a019bb472a56~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>业务中我们也就可以通过控制 <code>value</code> 属性，来改变进度条的进度了</p><h2 id="七、area"><a href="#七、area" class="headerlink" title="七、area"></a>七、area</h2><p><code>area</code> 这个标签也非常有意思，它的作用是为图片提供点击热区，可以自己规定一张图的哪些区域可点击，且点击后跳转的链接，也可以设置成点击下载文件，我们来举个例子：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>example.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,0,100,50<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>baidu<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https: //www.baidu.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0,50,100,100<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sougou<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https: //www.sogou.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>area</code> 一般要搭配 <code>map</code> 标签一起使用，每个 <code>area</code> 标签表示一个热区，例如上面代码中，我们定义了两个热区，热区形状都为<code>rect</code>（矩形），他们的热区分别是：</p><ul><li><p>坐标 <code>(0,0)</code> 到 坐标 <code>(100,50)</code> 的一个矩形</p></li><li><p>坐标 <code>(0,50)</code> 坐标 <code>(100,100)</code> 的一个矩形</p></li></ul><p>我们都知道，默认的坐标轴是这样的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15ba92abe02b42cabb0f6ff41ff2cdab~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>因此，我们划分的两个热区就是:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6abf9c250e47424486329d455c136714~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>最后再来看一下我们的实际效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06ffce8720ba4bb9bacb62f6fdc22667~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p><code>i</code></p><h2 id="八、details"><a href="#八、details" class="headerlink" title="八、details"></a>八、details</h2><p><code>details</code> 字面意思是 “详情”，在markdown里也经常用，用该标签包裹了的内容默认会被隐藏，只留下一个简述的文字，我们点击以后才会展示详细的内容</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">css复制代码&lt;details>      &lt;p>我是一段被隐藏的内容&lt;/p>&lt;/details><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0635e9c505624517b95510dc60b3e9c0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>这还没有加任何一行的 <code>js</code> 代码，我们点击后，<code>details</code> 标签上会多一个 <code>open</code> 的属性，被隐藏的内容就展示出来了</p><p>默认情况下，简要文字为 <code>&quot;详情&quot;</code>，想要修改这个文字，要搭配 <code>summary</code> 标签来使用</p><pre class="line-numbers language-css" data-language="css"><code class="language-css">css复制代码&lt;details>      &lt;summary>点击查看更多&lt;/summary>      &lt;p>我是一段被隐藏的内容&lt;/p>&lt;/details><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就搞定了</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28db38693ea44af8a06ec2a8bf68d047~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><h2 id="九、dialog"><a href="#九、dialog" class="headerlink" title="九、dialog"></a>九、dialog</h2><p>浏览器自带弹窗方法 <code>alert</code>、<code>confirm</code>、<code>prompt</code>，样式固定且每个浏览器不同，同时还会阻塞页面运行，除了这个还提供了一个 <code>dialog</code> 标签，它的使用方式有点类似于现在各大组件库的 <code>Modal</code><br>组件了，浏览器还为该标签提供了原生的 <code>dom</code> 方法：<code>showModal</code>、<code>close</code>，可以直接控制弹窗的展示和隐藏</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>dialog id<span class="token operator">=</span><span class="token string">"dialog"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dialog<span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"openBtn"</span><span class="token operator">></span>打开弹框<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">const</span> dialog <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'dialog'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> openBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'openBtn'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> closeBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">)</span>    openBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 打开弹框</span>        dialog<span class="token punctuation">.</span><span class="token function">showModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    closeBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 隐藏弹框</span>        dialog<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ff6504761404aeaa03397816842eb54~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>细心的你有没有发现，这原生的弹框还自带背景蒙层，点击是关闭不掉的，但起码它不会阻塞页面</p><p>然后我们在弹窗展示时，也可以通过 <code>esc</code> 键来关闭弹窗</p><h2 id="十、datalist"><a href="#十、datalist" class="headerlink" title="十、datalist"></a>十、datalist</h2><p><code>datalist</code> 是用于给输入框提供可选值的一个列表标签，类似咱们常用的 <code>Select</code> 组件</p><p>我可以用其实现一个 <strong>“输入联想”</strong> 的功能</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span> 输入C开头的英文单词：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_words<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>c_words<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>China<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Click<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Const<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来试一试：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/13c73f23052f42c686689393daac6a5d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>刚点击时会把所有推荐的选项都列出来，然后根据后面输入的内容，会过滤掉不匹配了的选项，比如我输入 <code>cl</code>，会过滤掉不是 <code>cl</code> 开头的单词，最后只剩下 <code>Click</code> 和 <code>Close</code> 了</p><p>最后我发现，他这个下拉框有点好看啊？为啥这原生的 input 框默认样式那么丑，啥时候改改</p><h2 id="十一、fieldset"><a href="#十一、fieldset" class="headerlink" title="十一、fieldset"></a>十一、fieldset</h2><p><code>fieldset</code> 标签是用于分组管理 <code>form</code> 表单内的元素的，若 <code>fieldset</code> 设置了 <code>disabled</code> 属性，则被其包裹的所有表单元素都会被禁用置灰，且不会随着表单一起提交上去，是的就成了摆设</p><p>什么意思呢？看个例子：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span> /example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>被禁用区域<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>ID：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1234567@163.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>名字：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们把 <code>ID</code> 和 <code>邮箱</code> 的表单包裹了起来，且设置了 <code>disabled</code>，只开放了一个 <code>name</code> 的输入控件，此时界面如下：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a99953b3ef6f46d8877f1910dbdd249f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>可以看到除了 <code>name</code> 输入框，其它的两个输入框都被禁用了，此时点提交会是什么样子呢？</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8a9ac7ea8c2f496eac8dc9965b9100e4~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>嗯，只提交了 <code>name</code> 字段</p><h2 id="十二、noscript"><a href="#十二、noscript" class="headerlink" title="十二、noscript"></a>十二、noscript</h2><p>这个标签是在浏览器不支持或禁用了 <code>javascript</code> 时才展示的，大多用于对 js 强依赖的应用，比如现在大部分的 SPA 页面，一旦不支持 <code>javascript</code>，页面基本上什么内容都没了，此时可以靠这个标签做友好提示</p><p>一般我们不需要特地去使用，大多都是在打包过程中自动插入到 <code>html</code> 静态文件里去了的，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// init.jsconst root = document.getElementById('root')const button = document.createElement('button')button.innerText = '点击出弹窗'root.appendChild(button)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> index<span class="token punctuation">.</span>html <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script defer src<span class="token operator">=</span><span class="token string">". /init.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>noscript<span class="token operator">></span>      不好意思，你的浏览器不支持或禁用了 JavaScript，请更换浏览器或启用 JavaScript<span class="token operator">&lt;</span><span class="token operator">/</span>noscript<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未禁用 <code>javascript</code> 时，页面时这样的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed2c8cf5a42246a1ad52e0ad96153530~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p><p>禁用了 <code>javascript</code> 时，是这样的：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc585cb9a38e4559a9135c90b3a405d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不为人知的 JavaScript 技巧</title>
      <link href="/2024/04/19/bu-wei-ren-zhi-de-javascript-ji-qiao/"/>
      <url>/2024/04/19/bu-wei-ren-zhi-de-javascript-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="不为人知的-JavaScript-技巧"><a href="#不为人知的-JavaScript-技巧" class="headerlink" title="不为人知的 JavaScript 技巧"></a>不为人知的 JavaScript 技巧</h1><p><a href="https://juejin.cn/post/6976761925170364446">gyx_这个杀手不太冷静</a></p><h2 id="什么是-JavaScript-？"><a href="#什么是-JavaScript-？" class="headerlink" title="什么是 JavaScript ？"></a>什么是 JavaScript ？</h2><p>Javascript 是一种脚本语言，用于创建动态更新的内容、控制多媒体、动画图像等等。</p><h2 id="1-“返回”按钮"><a href="#1-“返回”按钮" class="headerlink" title="1. “返回”按钮"></a>1. “返回”按钮</h2><p>使用 <code>history.back()</code> 可以创建一个浏览器“返回”按钮。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    返回<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-数字分隔符"><a href="#2-数字分隔符" class="headerlink" title="2. 数字分隔符"></a>2. 数字分隔符</h2><p>为了提高数字的可读性，您可以使用下划线作为分隔符：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> largeNumber <span class="token operator">=</span> <span class="token number">1_000_000_000</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>largeNumber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-事件监听器只运行一次"><a href="#3-事件监听器只运行一次" class="headerlink" title="3. 事件监听器只运行一次"></a>3. 事件监听器只运行一次</h2><p>如果你想添加一个事件监听器并且只运行一次，你可以使用 <code>once</code> 选项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'I run only once'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">once</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-console-log-变量包装"><a href="#4-console-log-变量包装" class="headerlink" title="4. console.log 变量包装"></a>4. console.log 变量包装</h2><p>您在 <code>console.log()</code> 的时候，将参数用大括号括起来，这样可以同时看到变量名和变量值。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fe76faf08be4955a6a870f75cd542aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="捕获1.PNG"></p><h2 id="5-从数组中获取最小值-最大值"><a href="#5-从数组中获取最小值-最大值" class="headerlink" title="5. 从数组中获取最小值&#x2F;最大值"></a>5. 从数组中获取最小值&#x2F;最大值</h2><p>您可以使用 <code>Math.min()</code> 或 <code>Math.max()</code> 结合扩展运算符来查找数组中的最小值或最大值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 9</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-检查-Caps-Lock-是否打开"><a href="#6-检查-Caps-Lock-是否打开" class="headerlink" title="6. 检查 Caps Lock 是否打开"></a>6. 检查 Caps Lock 是否打开</h2><p>您可以使用 <code>KeyboardEvent.getModifierState()</code> 来检测是否 <code>Caps Lock</code> 打开。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> passwordInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>passwordInput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getModifierState</span><span class="token punctuation">(</span><span class="token string">'CapsLock'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// CapsLock 已经打开了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-复制到剪贴板"><a href="#7-复制到剪贴板" class="headerlink" title="7. 复制到剪贴板"></a>7. 复制到剪贴板</h2><p>您可以使用 <code>Clipboard</code> API 创建“复制到剪贴板”功能：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">copyToClipboard</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-获取鼠标位置"><a href="#8-获取鼠标位置" class="headerlink" title="8. 获取鼠标位置"></a>8. 获取鼠标位置</h2><p>您可以使用 <code>MouseEvent</code> 对象下 clientX 和 clientY 的属性值，获取鼠标的当前位置坐标信息。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Mouse X: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>e<span class="token punctuation">.</span>clientX<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, Mouse Y: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>e<span class="token punctuation">.</span>clientY<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="9-缩短数组"><a href="#9-缩短数组" class="headerlink" title="9. 缩短数组"></a>9. 缩短数组</h2><p>您可以设置 length 属性来缩短数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>numbers<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-简写条件判断语句"><a href="#10-简写条件判断语句" class="headerlink" title="10. 简写条件判断语句"></a>10. 简写条件判断语句</h2><p>如果仅在判断条件为 <code>true</code> 时才执行函数，则可以使用 <code>&amp;&amp;</code> 简写。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 普通写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 简写</span>condition <span class="token operator">&amp;&amp;</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-console-table-打印特定格式的表格"><a href="#11-console-table-打印特定格式的表格" class="headerlink" title="11. console.table() 打印特定格式的表格"></a>11. console.table() 打印特定格式的表格</h2><p>语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// [] 里面指的是可选参数</span>console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">,</span> columns<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数：</p><ul><li>data 表示要显示的数据。必须是数组或对象。</li><li>columns 表示一个包含列的名称的数组。</li></ul><p>实例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 一个对象数组，只打印 firstName</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> john <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> jane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Jane"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> emily <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Emily"</span><span class="token punctuation">,</span> <span class="token string">"Jones"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">[</span>john<span class="token punctuation">,</span> jane<span class="token punctuation">,</span> emily<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"firstName"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打印结果如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ce9af326b66477ba50bf1249284fcae~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="wecom-temp-2011eb3f18e5331bc41b513bfd5e67f6.png"></p><h2 id="12-数组去重"><a href="#12-数组去重" class="headerlink" title="12. 数组去重"></a>12. 数组去重</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 3, 4]           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-将字符串转换为数字"><a href="#13-将字符串转换为数字" class="headerlink" title="13. 将字符串转换为数字"></a>13. 将字符串转换为数字</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'404'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>str<span class="token punctuation">)</span> <span class="token comment">// 404;           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="14-将数字转换为字符串"><a href="#14-将数字转换为字符串" class="headerlink" title="14. 将数字转换为字符串"></a>14. 将数字转换为字符串</h2><p>连接空字符串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myNumber <span class="token operator">=</span> <span class="token number">403</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myNumber <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// '403'           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="15-从数组中过滤所有虚值"><a href="#15-从数组中过滤所有虚值" class="headerlink" title="15. 从数组中过滤所有虚值"></a>15. 从数组中过滤所有虚值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">'@denicmarko'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, "@denicmarko", true, 3]     </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="16-妙用-includes"><a href="#16-妙用-includes" class="headerlink" title="16. 妙用 includes"></a>16. 妙用 includes</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myTech <span class="token operator">=</span> <span class="token string">'JavaScript'</span><span class="token punctuation">;</span><span class="token keyword">const</span> techs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'HTML'</span><span class="token punctuation">,</span> <span class="token string">'CSS'</span><span class="token punctuation">,</span> <span class="token string">'JavaScript'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 普通写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>myTech <span class="token operator">===</span> <span class="token string">'HTML'</span> <span class="token operator">||</span> myTech <span class="token operator">===</span> <span class="token string">'CSS'</span> <span class="token operator">||</span> myTech <span class="token operator">===</span> <span class="token string">'JavaScript'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something</span><span class="token punctuation">&#125;</span><span class="token comment">// includes 写法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>techs<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>myTech<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do something </span><span class="token punctuation">&#125;</span>           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-妙用-reduce-对数组求和"><a href="#17-妙用-reduce-对数组求和" class="headerlink" title="17. 妙用 reduce 对数组求和"></a>17. 妙用 reduce 对数组求和</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> myArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> currentValue</span><span class="token punctuation">)</span> <span class="token operator">=></span> total <span class="token operator">+</span> currentValue<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myArray<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100           </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-console-log-样式"><a href="#18-console-log-样式" class="headerlink" title="18. console.log() 样式"></a>18. <code>console.log()</code> 样式</h2><p>您知不知道可以使用 CSS 语句在 DevTools 中设置 <code>console.log</code> 输出的样式：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b4a87ff258c47e188aabbdafde98596~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="捕获.PNG"></p><h2 id="19-元素的-dataset"><a href="#19-元素的-dataset" class="headerlink" title="19. 元素的 dataset"></a>19. 元素的 dataset</h2><p>使用 <code>dataset</code> 属性访问元素的自定义数据属性 (<code>data-*</code>)：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">data-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>John Doe<span class="token punctuation">"</span></span> <span class="token attr-name">data-age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>29<span class="token punctuation">"</span></span> <span class="token attr-name">data-something</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Some Data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    John Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> user <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>dataset<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &#123; name: "John Doe", age: "29", something: "Some Data" &#125;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "John Doe"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "29"</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Some Data"</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h2><ul><li><a href="https://juejin.cn/post/6975148293990907934" title="https://juejin.cn/post/6975148293990907934">不为人知的 HTML 技巧</a> 🔥</li><li><a href="https://juejin.cn/post/6978469579508940831" title="https://juejin.cn/post/6978469579508940831">不为人知的 CSS 技巧</a> 🔥</li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://markodenic.com/javascript-tips/" title="https://markodenic.com/javascript-tips/">JavaScript Tips</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML标签嵌套规则</title>
      <link href="/2024/04/19/html-biao-qian-qian-tao-gui-ze/"/>
      <url>/2024/04/19/html-biao-qian-qian-tao-gui-ze/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML标签嵌套规则"><a href="#HTML标签嵌套规则" class="headerlink" title="HTML标签嵌套规则 "></a><a href="https://www.cnblogs.com/xiyangbaixue/p/4090511.html">HTML标签嵌套规则 </a></h1><h1 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h1><p>　　 最近在整理项目时发现有些同事写的页面代码嵌套的太多，而且有些嵌套不对，比如<a><div>内容</div></a>。虽然功能实现了，但是对于浏览器渲染引擎的性能还是有些影响。所以就大体上的整理了下HTML标签的嵌套规则，也希望读者提出不对之处。</p><p>众所周知，HTML标签有两类：</p><ol><li>块级元素<br>div、h1~h6、address、blockquote、center、dir、dl、dt、dd、fieldset、form、hr、isindex、menu、noframes、noscript、ol、p、pre、table、ul …<br><strong>特点：</strong>总是在新行上开始，高度、行高以及顶和底边距都可控制，宽度缺省是它的容器的100%，除非设定一个宽度<br><strong>功能：</strong>主要用来搭建网站架构、页面布局、承载内容</li><li>行内元素<br>span、a、abbr、acronym、b、bdo、big、br、cite、code、dfn、em、font、i、img、input、kbd、label、q、s、samp、select、small、strike、strong、sub、sup、textarea、tt、u、var …<br><strong>特点：</strong>和其他元素都在一行上，高、行高及顶和底边距不可改变，宽度就是它的文字或图片的宽度，不可改变<br><strong>功能：</strong>用于加强内容显示,控制细节，例如：加粗、斜体等等</li></ol><p>举个例子：</p><ul><li>块级元素</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  显示效果如下：</p><p>  one</p><p>  two</p><ul><li>行内元素</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>two<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  显示效果如下：</p><p>  onetwo</p><p>块级元素与行内元素并不是一成不变的，我们可以通过CSS来改变他的特性</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> display: inline; //行内元素>> display: block; //块级元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>虽然HTML标签有很多并且我们在制作页面的时候可以无限的嵌套，但是嵌套也有规则，不能随意的嵌套。有些标签是固定的嵌套规则，比如ul包含li、ol包含li、dl包含dt和dd等等。还有很多是独立的标签，我们如何来使用它编写更优秀的页面，下面就说说</p><ol><li>块级元素与块级元素平级、内嵌元素与内嵌元素平级</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  //span是行内元素，p是块级元素，所以这个是错误的嵌套>> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  //对的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>块元素可以包含内联元素或某些块元素，但内联元素不能包含块元素，它只能包含其它的内联元素</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>>> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>有几个特殊的块级元素只能包含内嵌元素，不能再包含块级元素</p><blockquote><p>h1、h2、h3、h4、h5、h6、p、dt</p></blockquote></li><li><p>块级元素不能放在标签p里面</p></li><li><p>li 标签可以包含 div 标签，因为li 和 div 标签都是装载内容的容器</p></li></ol><h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p>    ​虽然我们可以嵌套标签，但是为了提高浏览器的渲染效率，我们应该尽少的嵌套标签，扁平化</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人收藏的前端学习资料</title>
      <link href="/2024/04/19/ge-ren-shou-cang-de-qian-duan-xue-xi-zi-liao/"/>
      <url>/2024/04/19/ge-ren-shou-cang-de-qian-duan-xue-xi-zi-liao/</url>
      
        <content type="html"><![CDATA[<h1 id="分享一些个人收藏的前端学习资料"><a href="#分享一些个人收藏的前端学习资料" class="headerlink" title="分享一些个人收藏的前端学习资料"></a>分享一些个人收藏的前端学习资料</h1><p>为了方便，以后相关资料会第一时间更新在此repo：<a href="https://github.com/jCodeLife/quality-front-end-resources" title="https://github.com/jCodeLife/quality-front-end-resources">quality-front-end-resources</a></p><h2 id="一、文章"><a href="#一、文章" class="headerlink" title="一、文章"></a>一、文章</h2><h3 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h3><ol><li><a href="https://es6.ruanyifeng.com/" title="https://es6.ruanyifeng.com">ECMAScript 6 入门</a></li><li><a href="https://juejin.cn/post/6968713283884974088" title="https://juejin.cn/post/6968713283884974088">最全的手写JS面试题</a></li><li><a href="https://juejin.cn/post/6994594642280857630" title="https://juejin.cn/post/6994594642280857630">看了就会，手写Promise原理，最通俗易懂的版本！！！</a></li><li><a href="https://juejin.cn/post/6844903512845860872" title="https://juejin.cn/post/6844903512845860872">这一次，彻底弄懂 JavaScript 执行机制</a></li><li><a href="https://juejin.cn/post/6844904200917221389" title="https://juejin.cn/post/6844904200917221389">由浅入深，66条JavaScript面试知识点</a></li><li><a href="https://juejin.cn/post/6844903479429824526" title="https://juejin.cn/post/6844903479429824526">JavaScript深入系列15篇正式完结！</a></li><li><a href="https://juejin.cn/post/6844903809206976520" title="https://juejin.cn/post/6844903809206976520">「中高级前端面试」JavaScript手写代码无敌秘籍</a></li><li><a href="https://zh.javascript.info/" title="https://zh.javascript.info/">现代 JavaScript 教程</a></li></ol><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><ol><li><a href="https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/" title="https://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/">Rem布局的原理解析</a></li><li><a href="https://juejin.cn/post/6908879198933221383" title="https://juejin.cn/post/6908879198933221383">8个硬核技巧带你迅速提升CSS技术</a></li><li><a href="https://juejin.cn/post/6994678354200756238" title="https://juejin.cn/post/6994678354200756238">你不可能知道的骨架屏玩法</a></li></ol><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ol><li><a href="https://github.com/vuejs/rfcs" title="https://github.com/vuejs/rfcs">Vue RFCs</a></li><li><a href="https://www.vue3js.cn/docs/zh/guide/introduction.html" title="https://www.vue3js.cn/docs/zh/guide/introduction.html">Vue3中文文档</a></li><li><a href="https://juejin.cn/post/6844904191744278542" title="https://juejin.cn/post/6844904191744278542">如何参加开源项目-如何给Vue3.0提PR</a></li><li><a href="https://juejin.cn/post/6987349513836953607" title="https://juejin.cn/post/6987349513836953607">史上最全 Vue 前端代码风格指南</a></li><li><a href="https://juejin.cn/post/7007710727725121566" title="https://juejin.cn/post/7007710727725121566">101张脑图，从零开始学完Vue3（包括Vue3.2最新语法）</a></li><li><a href="https://github.com/cuixiaorui/mini-vue" title="https://github.com/cuixiaorui/mini-vue">实现最简 vue3 模型</a></li><li><a href="https://juejin.cn/post/6911897255087702030" title="https://juejin.cn/post/6911897255087702030">[Vue官方教程笔记]- 尤雨溪手写mini-vue</a></li><li><a href="https://juejin.cn/post/6844904150082256903" title="https://juejin.cn/post/6844904150082256903">10分钟体验Vue3全家桶(Vue3 + VueRouter4 + Vuex4)</a></li><li><a href="https://juejin.cn/post/7022137486407106591" title="https://juejin.cn/post/7022137486407106591">10.23尤雨溪在早早聊直播分享总结：vue3生态发展现状和展望</a></li><li><a href="https://juejin.cn/post/6926822933721513998" title="https://juejin.cn/post/6926822933721513998">2021必知必会的vite+vue3项目最佳实践</a></li></ol><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ol><li><a href="https://juejin.cn/post/6844903975112671239" title="https://juejin.cn/post/6844903975112671239">这可能是最通俗的 React Fiber(时间分片) 打开方式</a></li><li><a href="https://juejin.cn/post/6950063294270930980" title="https://juejin.cn/post/6950063294270930980">React全部api解读+基础实践大全(夯实基础2万字总结)</a></li><li><a href="https://mp.weixin.qq.com/s/WUVVpEoXdhVOlwtjgpLX5A" title="https://mp.weixin.qq.com/s/WUVVpEoXdhVOlwtjgpLX5A">公众号| React Concurrent Mode 初识&amp;探秘</a></li></ol><h3 id="TS"><a href="#TS" class="headerlink" title="TS"></a>TS</h3><ol><li><a href="https://juejin.cn/post/6926794697553739784" title="https://juejin.cn/post/6926794697553739784">TypeScript 高级用法</a></li><li><a href="https://juejin.cn/post/6844904184894980104" title="https://juejin.cn/post/6844904184894980104">一文读懂 TypeScript 泛型及应用</a></li><li><a href="https://juejin.cn/post/6872111128135073806" title="https://juejin.cn/post/6872111128135073806">一份不可多得的 TS 学习指南（1.8W字）</a></li></ol><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ol><li><a href="https://juejin.cn/post/6844904116972421128" title="https://juejin.cn/post/6844904116972421128">http缓存机制</a></li><li><a href="https://juejin.cn/post/6844904119136698381" title="https://juejin.cn/post/6844904119136698381">从0到1搭建前端异常监控系统</a></li><li><a href="https://learngitbranching.js.org/?demo=&locale=zh_CN" title="https://learngitbranching.js.org/?demo=&amp;locale=zh_CN">可视化Git</a></li><li><a href="https://juejin.cn/post/7016911648656982024" title="https://juejin.cn/post/7016911648656982024">字节跳动是如何落地微前端的</a></li><li><a href="https://zhuanlan.zhihu.com/p/386607009" title="https://zhuanlan.zhihu.com/p/386607009">迈入现代 Web 开发</a></li><li><a href="https://yjhjstz.gitbooks.io/deep-into-node/content/" title="https://yjhjstz.gitbooks.io/deep-into-node/content/">深入理解Node.js</a></li></ol><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" title="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的Git教程</a></li><li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html" title="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">图解Git</a></li><li><a href="https://learngitbranching.js.org/?demo=&locale=zh_CN" title="https://learngitbranching.js.org/?demo=&amp;locale=zh_CN">可视化Git</a></li></ol><h3 id="开发小技巧"><a href="#开发小技巧" class="headerlink" title="开发小技巧"></a>开发小技巧</h3><ol><li><a href="https://juejin.cn/post/6986485485765918733" title="https://juejin.cn/post/6986485485765918733">让你 vscode 写代码效率更高的技巧</a></li><li><a href="https://juejin.cn/post/6992024002113847332" title="https://juejin.cn/post/6992024002113847332">前端 debug 的奇淫技巧</a></li></ol><h3 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h3><ol><li><a href="https://juejin.cn/post/6844903896637259784" title="https://juejin.cn/post/6844903896637259784">一个合格(优秀)的前端都应该阅读这些文章</a></li><li><a href="https://juejin.cn/post/6986436944913924103" title="https://juejin.cn/post/6986436944913924103">专有钉钉前端面试指南</a></li><li><a href="https://juejin.cn/post/6844903776512393224" title="https://juejin.cn/post/6844903776512393224">中高级前端大厂面试秘籍，为你保驾护航金三银四，直通大厂(上)</a></li><li><a href="https://juejin.cn/post/6844903928442667015" title="https://juejin.cn/post/6844903928442667015">面试分享：两年工作经验成功面试阿里P6总结</a></li><li><a href="https://juejin.cn/post/6844904115428917255" title="https://juejin.cn/post/6844904115428917255">写给女朋友的中级前端面试秘籍（含详细答案，15k级别）</a></li><li><a href="https://juejin.cn/post/6844903809206976520" title="https://juejin.cn/post/6844903809206976520">「中高级前端面试」JavaScript手写代码无敌秘籍</a></li><li><a href="https://yuchengkai.cn/" title="https://yuchengkai.cn/">Github| 前端进阶之道</a></li><li><a href="https://github.com/haizlin/fe-interview" title="https://github.com/haizlin/fe-interview">Github| 前端3+1面试题库</a></li></ol><h3 id="行业杂谈"><a href="#行业杂谈" class="headerlink" title="行业杂谈"></a>行业杂谈</h3><ol><li><a href="https://jishuin.proginn.com/p/763bfbd6fe5f" title="https://jishuin.proginn.com/p/763bfbd6fe5f">2021 年 JavaScript 大事记</a></li><li><a href="https://juejin.cn/post/7007048306438176799" title="https://juejin.cn/post/7007048306438176799">谈谈我这些年对前端框架的理解</a></li><li><a href="https://www.zhihu.com/question/34892985/answer/60466608" title="https://www.zhihu.com/question/34892985/answer/60466608">jQuery会过时吗？</a></li></ol><h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><ol><li><a href="https://juejin.cn/post/6910014283707318279" title="https://juejin.cn/post/6910014283707318279">vite工程化实践，建议收藏</a></li><li><a href="https://zhuanlan.zhihu.com/p/386607009" title="https://zhuanlan.zhihu.com/p/386607009">迈入现代 Web 开发</a></li><li><a href="https://juejin.cn/post/6982215543017193502" title="https://juejin.cn/post/6982215543017193502">前端工程化实战 - 企业级 CLI 开发</a></li><li><a href="https://juejin.cn/post/6892003555818143752" title="https://juejin.cn/post/6892003555818143752">手把手带你入门前端工程化</a></li></ol><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ol><li><a href="https://juejin.cn/post/6981673766178783262" title="https://juejin.cn/post/6981673766178783262">浏览器的渲染写给中高级前端关于性能优化的9大策略和6大指标</a></li><li><a href="https://juejin.cn/post/6911472693405548557" title="https://juejin.cn/post/6911472693405548557">聊一聊前端性能优化</a></li></ol><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><ol><li><a href="https://coolshell.cn/articles/9666.html" title="https://coolshell.cn/articles/9666.html">浏览器的渲染原理间接</a></li><li><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" title="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/">浏览器的工作原理</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part1" title="https://developers.google.com/web/updates/2018/09/inside-browser-part1">现代浏览器工作原理 (part 1)</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part2" title="https://developers.google.com/web/updates/2018/09/inside-browser-part2">现代浏览器工作原理 (part 2)</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part3" title="https://developers.google.com/web/updates/2018/09/inside-browser-part3">现代浏览器工作原理 (part 3)</a></li><li><a href="https://developers.google.com/web/updates/2018/09/inside-browser-part4" title="https://developers.google.com/web/updates/2018/09/inside-browser-part4">现代浏览器工作原理 (part 4)</a></li><li><a href="https://docs.google.com/presentation/d/1boPxbgNrTU0ddsc144rcXayGA_WF53k96imRH8Mp34Y/edit#slide=id.g60f92a5151_40_1445" title="https://docs.google.com/presentation/d/1boPxbgNrTU0ddsc144rcXayGA_WF53k96imRH8Mp34Y/edit#slide=id.g60f92a5151_40_1445">Life of a Pixel</a></li></ol><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><ol><li><a href="https://juejin.cn/post/6844903670589423623" title="https://juejin.cn/post/6844903670589423623">近两万字小程序攻略发布了</a></li></ol><h3 id="算法数据结构"><a href="#算法数据结构" class="headerlink" title="算法数据结构"></a>算法数据结构</h3><ol><li><a href="https://visualgo.net/zh" title="https://visualgo.net/zh">可视化算法</a></li><li><a href="https://www.yuque.com/wubinhp/uxiv5i" title="https://www.yuque.com/wubinhp/uxiv5i">语雀| 设计模式</a></li></ol><h2 id="二、视频"><a href="#二、视频" class="headerlink" title="二、视频"></a>二、视频</h2><h3 id="JS-1"><a href="#JS-1" class="headerlink" title="JS"></a>JS</h3><ol><li><a href="https://ke.qq.com/course/231577?taid=2841395744442521" title="https://ke.qq.com/course/231577?taid=2841395744442521">Web前端开发JavaScript权威课堂</a></li><li><a href="https://www.bilibili.com/video/BV1kf4y1U7Ln?from=search&seid=2734638953578049157" title="https://www.bilibili.com/video/BV1kf4y1U7Ln?from=search&amp;seid=2734638953578049157">2分钟了解 JavaScript Event Loop</a></li><li><a href="https://ke.qq.com/course/421133?taid=3532215464389901" title="https://ke.qq.com/course/421133?taid=3532215464389901">ES6经典入门到进阶</a></li><li><a href="https://www.bilibili.com/video/BV1vh411Z7QG" title="https://www.bilibili.com/video/BV1vh411Z7QG">8分钟带你了解JS运行原理</a></li><li><a href="https://www.bilibili.com/video/BV1y3411r71u?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1y3411r71u?spm_id_from=333.999.0.0">天天造轮子-防抖节流</a></li></ol><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><ol><li><a href="https://www.bilibili.com/video/BV17W41137jn?from=search&seid=14022360126928211379" title="https://www.bilibili.com/video/BV17W41137jn?from=search&amp;seid=14022360126928211379">jQuery+Ajax从放弃到知根知底</a></li></ol><h3 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h3><ol><li><a href="https://www.bilibili.com/video/BV17x411J73h" title="https://www.bilibili.com/video/BV17x411J73h">Vue.js精讲</a></li><li><a href="https://space.bilibili.com/389008815?spm_id_from=333.788.b_765f7570696e666f.2" title="https://space.bilibili.com/389008815?spm_id_from=333.788.b_765f7570696e666f.2">Vue3快速上手指南-CompositionAPI</a></li><li><a href="https://www.bilibili.com/video/BV1d4411v7UX?p=1" title="https://www.bilibili.com/video/BV1d4411v7UX?p=1">尤雨溪教你写vue 高级vue教程 源码分析</a></li><li><a href="https://space.bilibili.com/478692215/channel/detail?cid=194210&ctype=0" title="https://space.bilibili.com/478692215/channel/detail?cid=194210&amp;ctype=0">手把手教你学Vue3</a></li><li><a href="https://www.bilibili.com/video/BV1my4y1m7sz?p=1" title="https://www.bilibili.com/video/BV1my4y1m7sz?p=1">Composition API + 深度解读</a></li><li><a href="https://www.bilibili.com/video/BV1az4y127Ga/" title="https://www.bilibili.com/video/BV1az4y127Ga/">React 与 Vue 框架的设计思路大 PK</a></li><li><a href="https://www.bilibili.com/video/BV1Zy4y1J73E?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1Zy4y1J73E?spm_id_from=333.999.0.0">阮一峰推荐最佳学习 vue3 源码的利器 - mini-vue</a></li><li><a href="https://www.bilibili.com/video/BV1xy4y1178G?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1xy4y1178G?spm_id_from=333.999.0.0">8年老前端独家分享阅读 Vue3 源码技巧</a></li><li><a href="https://www.bilibili.com/video/BV1Wh411X7Xp?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1Wh411X7Xp?spm_id_from=333.999.0.0">【全网首发】Vue3.0光速上手「持续更新中」</a></li><li><a href="https://www.bilibili.com/video/BV1vX4y1K7bQ?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1vX4y1K7bQ?spm_id_from=333.999.0.0">【备战2021】Vite2 + Vue3项目最佳实践「持续更新中」</a></li><li><a href="https://www.bilibili.com/video/BV1no4y1k7kJ?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1no4y1k7kJ?spm_id_from=333.999.0.0">Vue3+Typescript从整合到项目实战</a></li><li><a href="https://space.bilibili.com/480140591/channel/collectiondetail?sid=30497" title="https://space.bilibili.com/480140591/channel/collectiondetail?sid=30497">Vue DevUI开源指南</a></li></ol><h3 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h3><ol><li><a href="https://www.bilibili.com/video/BV1az4y127Ga/" title="https://www.bilibili.com/video/BV1az4y127Ga/">React 与 Vue 框架的设计思路大 PK</a></li><li><a href="https://www.bilibili.com/video/BV1JU4y1E73v?from=search&seid=1480540993076541477" title="https://www.bilibili.com/video/BV1JU4y1E73v?from=search&amp;seid=1480540993076541477">9分钟掌握React Hooks正确认知</a></li><li><a href="https://www.bilibili.com/video/BV1rK411F7x3" title="https://www.bilibili.com/video/BV1rK411F7x3">你必须要掌握的React知识点</a></li><li><a href="https://www.bilibili.com/video/BV14b4y1R7hk" title="https://www.bilibili.com/video/BV14b4y1R7hk">从0到1开发可视化拖拽H5编辑器(React)</a></li></ol><h3 id="Node-1"><a href="#Node-1" class="headerlink" title="Node"></a>Node</h3><ol><li><a href="https://space.bilibili.com/476967789/channel/detail?cid=136330" title="https://space.bilibili.com/476967789/channel/detail?cid=136330">Web前端会客厅|个人推荐看前9个视频</a></li><li><a href="https://www.bilibili.com/video/BV1oZ4y1V7tx" title="https://www.bilibili.com/video/BV1oZ4y1V7tx">前端阶段进阶（已完结）</a></li><li><a href="https://www.bilibili.com/video/BV13s411M7Ab?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV13s411M7Ab?spm_id_from=333.999.0.0">Node.js经典教程</a></li><li><a href="https://www.bilibili.com/video/BV1dV411p7gp" title="https://www.bilibili.com/video/BV1dV411p7gp">手写webpack</a></li><li><a href="https://www.bilibili.com/video/BV1Df4y1n777?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1Df4y1n777?spm_id_from=333.999.0.0">然叔天天造轮子-Vite</a></li></ol><h3 id="JS引擎"><a href="#JS引擎" class="headerlink" title="JS引擎"></a>JS引擎</h3><ol><li><a href="https://www.bilibili.com/video/BV1zV411z7RX" title="https://www.bilibili.com/video/BV1zV411z7RX">8分钟带你了解V8引擎是如何运行JS</a></li></ol><h3 id="学习线路"><a href="#学习线路" class="headerlink" title="学习线路"></a>学习线路</h3><ol><li><a href="https://www.bilibili.com/video/BV1ZZ4y1H7rU/?spm_id_from=333.788.b_636f6d6d656e74.6" title="https://www.bilibili.com/video/BV1ZZ4y1H7rU/?spm_id_from=333.788.b_636f6d6d656e74.6">前端学习路线分享</a></li></ol><h3 id="面试-1"><a href="#面试-1" class="headerlink" title="面试"></a>面试</h3><ol><li><a href="https://www.bilibili.com/video/BV1av411w7oa" title="https://www.bilibili.com/video/BV1av411w7oa">程序员简历点评第二期：能吃苦和能吃</a></li><li><a href="https://www.bilibili.com/video/BV1g54y1p7yV?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1g54y1p7yV?spm_id_from=333.999.0.0">现场点评9个程序员简历 – 有喷有夸</a></li><li><a href="https://www.bilibili.com/video/BV1FB4y1T7CP?spm_id_from=333.999.0.0" title="https://www.bilibili.com/video/BV1FB4y1T7CP?spm_id_from=333.999.0.0">想进大厂？简历要这么写</a></li></ol><h3 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h3><ol><li><a href="https://www.bilibili.com/video/BV1rU4y1J785" title="https://www.bilibili.com/video/BV1rU4y1J785">手把手带你从0搭建个人网站，小白可懂的保姆级教程</a></li><li><a href="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.8" title="https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.recommend_more_video.8">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a></li></ol><h3 id="浏览器-1"><a href="#浏览器-1" class="headerlink" title="浏览器"></a>浏览器</h3><ol><li><a href="https://www.bilibili.com/video/av35265997/" title="https://www.bilibili.com/video/av35265997/">像素的一生Life of a Pixel</a></li><li><a href="https://www.bilibili.com/video/BV1x54y1B7RE/" title="https://www.bilibili.com/video/BV1x54y1B7RE/">浏览器是如何运作的？</a></li></ol><h3 id="小程序-1"><a href="#小程序-1" class="headerlink" title="小程序"></a>小程序</h3><ol><li><a href="https://www.bilibili.com/video/BV1y3411i7VK" title="https://www.bilibili.com/video/BV1y3411i7VK">uniCloud开发实战：拍照识别垃圾分类应用 跨端云开发 uniapp </a></li></ol><h2 id="三、书籍"><a href="#三、书籍" class="headerlink" title="三、书籍"></a>三、书籍</h2><h3 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h3><ol><li><a href="https://book.douban.com/subject/30450258/" title="https://book.douban.com/subject/30450258/">精通 CSS</a></li><li><a href="https://book.douban.com/subject/2308234/" title="https://book.douban.com/subject/2308234/">CSS 权威指南</a></li><li><a href="https://book.douban.com/subject/35021471/" title="https://book.douban.com/subject/35021471/">深入解析 CSS</a></li><li><a href="https://book.douban.com/subject/26745943/" title="https://book.douban.com/subject/26745943/">CSS 揭秘</a></li></ol><h3 id="JS-2"><a href="#JS-2" class="headerlink" title="JS"></a>JS</h3><ol><li><a href="https://book.douban.com/subject/6038371/" title="https://book.douban.com/subject/6038371/">Javascript编程艺术</a></li><li><a href="https://book.douban.com/subject/10546125/" title="https://book.douban.com/subject/10546125/">JavaScript高级程序设计（第4版）</a></li><li><a href="https://book.douban.com/subject/10549733/" title="https://book.douban.com/subject/10549733/">Javascript犀牛书第七版</a></li><li><a href="https://book.douban.com/subject/26351021/" title="https://book.douban.com/subject/26351021/">你不知道的javascript 上</a></li><li><a href="https://book.douban.com/subject/26854244/" title="https://book.douban.com/subject/26854244/">你不知道的javascript 中</a></li><li><a href="https://book.douban.com/subject/35446937/" title="https://book.douban.com/subject/35446937/">Javasript二十年</a></li><li><a href="https://book.douban.com/subject/35085910/" title="https://book.douban.com/subject/35085910/">JavaScript语言精髓与编程实践（第3版）</a></li><li><a href="https://book.douban.com/subject/35218831/" title="https://book.douban.com/subject/35218831/">前端开发核心知识进阶</a></li></ol><h3 id="Vue-2"><a href="#Vue-2" class="headerlink" title="Vue"></a>Vue</h3><ol><li><a href="https://book.douban.com/subject/32581281/" title="https://book.douban.com/subject/32581281/">深入浅出Vue.js</a></li><li><a href="https://book.douban.com/subject/33338290/" title="https://book.douban.com/subject/33338290/">Testing Vue.js Applications</a></li></ol><h3 id="TS-1"><a href="#TS-1" class="headerlink" title="TS"></a>TS</h3><ol><li><a href="https://ts.xcatliu.com/" title="https://ts.xcatliu.com/">TypeScript 入门教程</a></li><li><a href="https://jkchao.github.io/typescript-book-chinese/#why" title="https://jkchao.github.io/typescript-book-chinese/#why">深入理解 TypeScript</a></li></ol><h3 id="Node-2"><a href="#Node-2" class="headerlink" title="Node"></a>Node</h3><ol><li><a href="https://11111-1252105172.cos.ap-shanghai.myqcloud.com/understand-nodejs%EF%BC%88%E5%B8%A6%E6%A0%87%E7%AD%BE%E7%89%88%EF%BC%89.pdf" title="https://11111-1252105172.cos.ap-shanghai.myqcloud.com/understand-nodejs%EF%BC%88%E5%B8%A6%E6%A0%87%E7%AD%BE%E7%89%88%EF%BC%89.pdf">Node源码解析</a></li><li><a href="https://book.douban.com/subject/25768396/" title="https://book.douban.com/subject/25768396/">深入浅出Node.js(进阶)</a></li><li><a href="https://book.douban.com/subject/30329536/" title="https://book.douban.com/subject/30329536/">设计数据密集型应用</a></li></ol><h3 id="浏览器-2"><a href="#浏览器-2" class="headerlink" title="浏览器"></a>浏览器</h3><ol><li><a href="https://book.douban.com/subject/25910556/" title="https://book.douban.com/subject/25910556/">WebKit 技术内幕</a></li></ol><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol><li><a href="https://book.douban.com/subject/19952400/" title="https://book.douban.com/subject/19952400/">算法（第4版）</a></li><li><a href="https://book.douban.com/subject/26979890/" title="https://book.douban.com/subject/26979890/">算法图解</a></li><li><a href="https://book.douban.com/subject/25894685/" title="https://book.douban.com/subject/25894685/">啊哈!算法</a></li><li><a href="https://book.douban.com/subject/1885170/" title="https://book.douban.com/subject/1885170/">算法导论</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能让你早点下班的36个JavaScript实用函数</title>
      <link href="/2024/04/19/neng-rang-ni-zao-dian-xia-ban-de-36-ge-javascript-shi-yong-han-shu/"/>
      <url>/2024/04/19/neng-rang-ni-zao-dian-xia-ban-de-36-ge-javascript-shi-yong-han-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="2022年能让你早点下班的36个JavaScript实用函数！"><a href="#2022年能让你早点下班的36个JavaScript实用函数！" class="headerlink" title="2022年能让你早点下班的36个JavaScript实用函数！"></a>2022年能让你早点下班的36个JavaScript实用函数！</h1><p><a href="https://juejin.cn/post/7132019982644772901">代码与野兽</a></p><p>之前在掘金写了一篇介绍 JavaScript 小技巧的文章，很受大家欢迎。但是有朋友说还是不够用，于是我决定再写一篇更多更全的文章。<br>原文：<a href="https://juejin.cn/post/7127278574033174542" title="https://juejin.cn/post/7127278574033174542">你需要知道的 12 个常用的 JavaScript 函数</a><br>原来是 12 个函数，现在直接乘以 3 倍，搞 36 个函数！<br>JavaScript 是一个很复杂的语言，很多新手在使用它开发应用的时候会发现很多功能无从下手。有了我根据功能分类总结的 36 个 JavaScript 技巧，复制粘贴一键搞定！<br>帮助你提高开发效率、快速解决问题，早点下班，早点摸鱼！</p><h1 id="生成随机颜色"><a href="#生成随机颜色" class="headerlink" title="生成随机颜色"></a>生成随机颜色</h1><p>你的网站是否需要生成随机颜色？下面一行代码就可以实现。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">generateRandomHexColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">generateRandomHexColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="数组重排序"><a href="#数组重排序" class="headerlink" title="数组重排序"></a>数组重排序</h1><p>对数组的元素进行重新排序是一项非常重要的技巧，但是原生 Array 中并没有这项功能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shuffle</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="复制到剪切板"><a href="#复制到剪切板" class="headerlink" title="复制到剪切板"></a>复制到剪切板</h1><p>复制到剪切板是一项非常实用且能够提高用户便利性的功能。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">copyToClipboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigator<span class="token punctuation">.</span>clipboard <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span>writeText <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token function">copyToClipboard</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检测暗色主题"><a href="#检测暗色主题" class="headerlink" title="检测暗色主题"></a>检测暗色主题</h1><p>暗色主题日益普及，很多用户都会在设备中启用该模式，我们将应用程序切换到暗色主题可以提高用户体验度。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isDarkMode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">"(prefers-color-scheme: dark)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isDarkMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="滚动到顶部"><a href="#滚动到顶部" class="headerlink" title="滚动到顶部"></a>滚动到顶部</h1><p>将元素滚动到顶部最简单的方法是使用 scrollIntoView。设置 block 为 start 可以滚动到顶部；设置 behavior 为 smooth 可以开启平滑滚动。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">scrollToTop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span>   element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">"smooth"</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">"start"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="滚动到底部"><a href="#滚动到底部" class="headerlink" title="滚动到底部"></a>滚动到底部</h1><p>与滚动到顶部一样，滚动到底部只需要设置 block 为 end 即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">scrollToBottom</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">element</span><span class="token punctuation">)</span> <span class="token operator">=></span>   element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">"smooth"</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">"end"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="检测元素是否在屏幕中"><a href="#检测元素是否在屏幕中" class="headerlink" title="检测元素是否在屏幕中"></a>检测元素是否在屏幕中</h1><p>检查元素是否在窗口中最好的方法是使用 IntersectionObserver。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// `entry.target` is the dom element</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> is visible</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bottomBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bottom-btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>btn<span class="token punctuation">)</span><span class="token punctuation">;</span>observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>bottomBtn<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检测设备"><a href="#检测设备" class="headerlink" title="检测设备"></a>检测设备</h1><p>使用 navigator.userAgent 来检测网站运行在哪种平台设备上。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">detectDeviceType</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>    navigator<span class="token punctuation">.</span>userAgent  <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Mobile"</span> <span class="token operator">:</span> <span class="token string">"Desktop"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">detectDeviceType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h1><p>我们可以将元素的 style.visibility 设置为 hidden，隐藏元素的可见性，但元素的空间仍然会被占用。如果设置元素的 style.display 为 none，会将元素从渲染流中删除。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hideElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> removeFromFlow <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  removeFromFlow <span class="token operator">?</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span><span class="token punctuation">)</span>  <span class="token operator">:</span> <span class="token punctuation">(</span>el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>visibility <span class="token operator">=</span> <span class="token string">'hidden'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="从-URL-中获取参数"><a href="#从-URL-中获取参数" class="headerlink" title="从 URL 中获取参数"></a>从 URL 中获取参数</h1><p>JavaScript 中有一个 URL 对象，通过它可以非常方便的获取 URL 中的参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getParamByUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span>  <span class="token keyword">return</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="深拷贝对象"><a href="#深拷贝对象" class="headerlink" title="深拷贝对象"></a>深拷贝对象</h1><p>深拷贝对象非常简单，先将对象转换为字符串，再转换成对象即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">deepCopy</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>除了利用 JSON 的 API，还有更新的深拷贝对象的 structuredClone API，但并不是在所有的浏览器中都支持。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">structuredClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="等待函数"><a href="#等待函数" class="headerlink" title="等待函数"></a>等待函数</h1><p>JavaScript 提供了 setTimeout 函数，但是它并不返回 Promise 对象，所以我们没办法使用 async 作用在这个函数上，但是我们可以封装等待函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">wait</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">ms</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span><span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">asyncFn</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'等待异步函数执行结束'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">asyncFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>感谢你的阅读，如果本文对你有所帮助，不妨点个赞吧。</p><h1 id="DOM-相关"><a href="#DOM-相关" class="headerlink" title="DOM 相关"></a>DOM 相关</h1><h2 id="1-检测某个元素是否聚焦"><a href="#1-检测某个元素是否聚焦" class="headerlink" title="1. 检测某个元素是否聚焦"></a>1. 检测某个元素是否聚焦</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hasFocus</span> <span class="token operator">=</span> <span class="token parameter">el</span> <span class="token operator">=></span> el <span class="token operator">===</span> document<span class="token punctuation">.</span>activeElement<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-获取某个元素所有的兄弟元素"><a href="#2-获取某个元素所有的兄弟元素" class="headerlink" title="2. 获取某个元素所有的兄弟元素"></a>2. 获取某个元素所有的兄弟元素</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=></span> child <span class="token operator">!==</span> el<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-获取当前选择的文本"><a href="#3-获取当前选择的文本" class="headerlink" title="3. 获取当前选择的文本"></a>3. 获取当前选择的文本</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getSelectedText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-返回上一个页面"><a href="#4-返回上一个页面" class="headerlink" title="4. 返回上一个页面"></a>4. 返回上一个页面</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">goBack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-获取所有-cookie-并转为对象"><a href="#5-获取所有-cookie-并转为对象" class="headerlink" title="5. 获取所有 cookie 并转为对象"></a>5. 获取所有 cookie 并转为对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getCookies</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>cookie  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>acc<span class="token punctuation">[</span>k<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span>v<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> acc<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-清除所有-cookie"><a href="#6-清除所有-cookie" class="headerlink" title="6. 清除所有 cookie"></a>6. 清除所有 cookie</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">clearCookies</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>cookie  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">splace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">=;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;path=/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-将-URL-参数转换为对象"><a href="#7-将-URL-参数转换为对象" class="headerlink" title="7. 将 URL 参数转换为对象"></a>7. 将 URL 参数转换为对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getUrlParams</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">query</span><span class="token punctuation">)</span> <span class="token operator">=></span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">:</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">:</span> v <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-检测是否为暗模式"><a href="#8-检测是否为暗模式" class="headerlink" title="8. 检测是否为暗模式"></a>8. 检测是否为暗模式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isDarkMode <span class="token operator">=</span> window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matches<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h1><h2 id="9-比较两个数组"><a href="#9-比较两个数组" class="headerlink" title="9. 比较两个数组"></a>9. 比较两个数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="10-将数组转为对象"><a href="#10-将数组转为对象" class="headerlink" title="10. 将数组转为对象"></a>10. 将数组转为对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">arrayToObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> b <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="11-将数组按照属性计数"><a href="#11-将数组按照属性计数" class="headerlink" title="11. 将数组按照属性计数"></a>11. 将数组按照属性计数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">countBy</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>prev<span class="token punctuation">[</span>curr<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">++</span>prev<span class="token punctuation">[</span>curr<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> prev<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="12-判断数组是否不为空"><a href="#12-判断数组是否不为空" class="headerlink" title="12. 判断数组是否不为空"></a>12. 判断数组是否不为空</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">arrayIsNotEmpty</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="13-展开多维数组"><a href="#13-展开多维数组" class="headerlink" title="13. 展开多维数组"></a>13. 展开多维数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">flat_entries</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="14-获取数组最后一个元素"><a href="#14-获取数组最后一个元素" class="headerlink" title="14. 获取数组最后一个元素"></a>14. 获取数组最后一个元素</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">lastItem</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="对象相关"><a href="#对象相关" class="headerlink" title="对象相关"></a>对象相关</h1><h2 id="15-检测多个对象是否相等"><a href="#15-检测多个对象是否相等" class="headerlink" title="15. 检测多个对象是否相等"></a>15. 检测多个对象是否相等</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>objects</span><span class="token punctuation">)</span> <span class="token operator">=></span> objects<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="16-从对象数组中提取属性值"><a href="#16-从对象数组中提取属性值" class="headerlink" title="16. 从对象数组中提取属性值"></a>16. 从对象数组中提取属性值</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">pluck</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">objs<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token operator">=></span> objs<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> obj<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="17-反转对象的-key-value"><a href="#17-反转对象的-key-value" class="headerlink" title="17. 反转对象的 key value"></a>17. 反转对象的 key value</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">invert</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> k <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="18-从对象中删除值为-null-和-undefined-的属性"><a href="#18-从对象中删除值为-null-和-undefined-的属性" class="headerlink" title="18. 从对象中删除值为 null 和 undefined 的属性"></a>18. 从对象中删除值为 null 和 undefined 的属性</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">removeNullAndUndefined</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="19-按照对象的属性对对象排序"><a href="#19-按照对象的属性对对象排序" class="headerlink" title="19. 按照对象的属性对对象排序"></a>19. 按照对象的属性对对象排序</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">sort</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Object  <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-检测对象是否为数组"><a href="#20-检测对象是否为数组" class="headerlink" title="20. 检测对象是否为数组"></a>20. 检测对象是否为数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="21-检测对象是否为-Promise"><a href="#21-检测对象是否为-Promise" class="headerlink" title="21. 检测对象是否为 Promise"></a>21. 检测对象是否为 Promise</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isPromise</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token operator">!</span>obj <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>then <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="22-交换两个对象"><a href="#22-交换两个对象" class="headerlink" title="22. 交换两个对象"></a>22. 交换两个对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">exchange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> a<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h1><h2 id="23-检查路径是否是相对路径"><a href="#23-检查路径是否是相对路径" class="headerlink" title="23. 检查路径是否是相对路径"></a>23. 检查路径是否是相对路径</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isRelative</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([az]+:)?[\\/]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="24-将字符串的第一个字符变小写"><a href="#24-将字符串的第一个字符变小写" class="headerlink" title="24. 将字符串的第一个字符变小写"></a>24. 将字符串的第一个字符变小写</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">lowercaseFirst</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="25-重复一个字符串"><a href="#25-重复一个字符串" class="headerlink" title="25. 重复一个字符串"></a>25. 重复一个字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">repeat</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> numberOfTimes</span><span class="token punctuation">)</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>numberOfTimes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="26-生成-IP-地址"><a href="#26-生成-IP-地址" class="headerlink" title="26. 生成 IP 地址"></a>26. 生成 IP 地址</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">randomIp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="27-生成十六进制颜色字符串"><a href="#27-生成十六进制颜色字符串" class="headerlink" title="27. 生成十六进制颜色字符串"></a>27. 生成十六进制颜色字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">randomColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="28-生成-rgb-颜色字符串"><a href="#28-生成-rgb-颜色字符串" class="headerlink" title="28. 生成 rgb 颜色字符串"></a>28. 生成 rgb 颜色字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">randomRgbColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rgb(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="29-下划线转驼峰"><a href="#29-下划线转驼峰" class="headerlink" title="29. 下划线转驼峰"></a>29. 下划线转驼峰</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">toHump</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\_(\w)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">all<span class="token punctuation">,</span> letter</span><span class="token punctuation">)</span> <span class="token operator">=></span> letter<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="30-驼峰转下划线横线"><a href="#30-驼峰转下划线横线" class="headerlink" title="30. 驼峰转下划线横线"></a>30. 驼峰转下划线横线</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">toLine</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">"_$1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="31-检查字符串是否是十六进制颜色"><a href="#31-检查字符串是否是十六进制颜色" class="headerlink" title="31. 检查字符串是否是十六进制颜色"></a>31. 检查字符串是否是十六进制颜色</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isHexColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^#([0-9A-F]&#123;3&#125;|[0-9A-F]&#123;4&#125;|[0-9A-F]&#123;6&#125;|[0-9A-F]&#123;8&#125;)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="32-RGB-字符串转十六进制字符串"><a href="#32-RGB-字符串转十六进制字符串" class="headerlink" title="32. RGB 字符串转十六进制字符串"></a>32. RGB 字符串转十六进制字符串</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">rgbToHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"#"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="日期相关"><a href="#日期相关" class="headerlink" title="日期相关"></a>日期相关</h1><h2 id="33-两个日期之间相差的天数"><a href="#33-两个日期之间相差的天数" class="headerlink" title="33. 两个日期之间相差的天数"></a>33. 两个日期之间相差的天数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">diffDays</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> otherDate</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>date <span class="token operator">-</span> otherDate<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="34-检查日期是否有效"><a href="#34-检查日期是否有效" class="headerlink" title="34. 检查日期是否有效"></a>34. 检查日期是否有效</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isDateValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">...</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="35-检测代码是否处于-Node-js-环境"><a href="#35-检测代码是否处于-Node-js-环境" class="headerlink" title="35. 检测代码是否处于 Node.js 环境"></a>35. 检测代码是否处于 Node.js 环境</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isNode <span class="token operator">=</span> <span class="token keyword">typeof</span> process <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="36-检测代码是否处于浏览器环境"><a href="#36-检测代码是否处于浏览器环境" class="headerlink" title="36. 检测代码是否处于浏览器环境"></a>36. 检测代码是否处于浏览器环境</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isBrowser <span class="token operator">=</span> <span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> document <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你也有一些常用的函数，或者文章中的某些函数有更好的实现方式，也可以进行补充！</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS使用经验总结</title>
      <link href="/2024/04/19/css-shi-yong-jing-yan-zong-jie/"/>
      <url>/2024/04/19/css-shi-yong-jing-yan-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS使用经验总结"><a href="#CSS使用经验总结" class="headerlink" title="CSS使用经验总结 "></a><a href="https://www.cnblogs.com/xiyangbaixue/p/3967131.html">CSS使用经验总结 </a></h1><ol><li><h3 id="清除图片下方出现几像素的空白间隙"><a href="#清除图片下方出现几像素的空白间隙" class="headerlink" title="清除图片下方出现几像素的空白间隙"></a>清除图片下方出现几像素的空白间隙</h3><p><strong>方法1：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p><strong>方法2：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">img</span><span class="token punctuation">&#123;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>top<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>除了top值，还可以设置为text-top | middle | bottom | text-bottom，甚至特定的&lt;length&gt;和&lt;percentage&gt;值都可以</p><p><strong>方法3：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">font-size</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>#test为img的父元素</p></li><li><h3 id="让文本垂直对齐文本输入框"><a href="#让文本垂直对齐文本输入框" class="headerlink" title="让文本垂直对齐文本输入框"></a>让文本垂直对齐文本输入框</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input</span><span class="token punctuation">&#123;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li><h3 id="让单行文本在容器内垂直居中"><a href="#让单行文本在容器内垂直居中" class="headerlink" title="让单行文本在容器内垂直居中"></a>让单行文本在容器内垂直居中</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>25px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>25px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>只需设置文本的行高等于容器的高度即可</p></li><li><h3 id="让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果"><a href="#让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果" class="headerlink" title="让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果"></a>让超链接访问后和访问前的颜色不同且访问后仍保留hover和active效果</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a:link</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#03c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:visited</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#666<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:hover</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#f30<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">a:active</span><span class="token punctuation">&#123;</span><span class="token property">color</span><span class="token punctuation">:</span>#c30<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>按L-V-H-A的顺序设置超链接样式即可，可速记为LoVe（喜欢）HAte（讨厌）</p></li><li><h3 id="为什么Standard-mode下IE无法设置滚动条的颜色？"><a href="#为什么Standard-mode下IE无法设置滚动条的颜色？" class="headerlink" title="为什么Standard mode下IE无法设置滚动条的颜色？"></a>为什么Standard mode下IE无法设置滚动条的颜色？</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span><span class="token punctuation">&#123;</span><span class="token property">scrollbar-3dlight-color</span><span class="token punctuation">:</span>#999<span class="token punctuation">;</span><span class="token property">scrollbar-darkshadow-color</span><span class="token punctuation">:</span>#999<span class="token punctuation">;</span><span class="token property">scrollbar-highlight-color</span><span class="token punctuation">:</span>#fff<span class="token punctuation">;</span><span class="token property">scrollbar-shadow-color</span><span class="token punctuation">:</span>#eee<span class="token punctuation">;</span><span class="token property">scrollbar-arrow-color</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span><span class="token property">scrollbar-face-color</span><span class="token punctuation">:</span>#ddd<span class="token punctuation">;</span><span class="token property">scrollbar-track-color</span><span class="token punctuation">:</span>#eee<span class="token punctuation">;</span><span class="token property">scrollbar-base-color</span><span class="token punctuation">:</span>#ddd<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>将原来设置在body上的滚动条颜色样式定义到html标签选择符上即可</p></li><li><h3 id="使文本溢出边界不换行强制在一行内显示"><a href="#使文本溢出边界不换行强制在一行内显示" class="headerlink" title="使文本溢出边界不换行强制在一行内显示"></a>使文本溢出边界不换行强制在一行内显示</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>设置容器的宽度和white-space为nowrap即可，其效果类似&lt;nobr&gt;标签</p></li><li><h3 id="使文本溢出边界显示为省略号"><a href="#使文本溢出边界显示为省略号" class="headerlink" title="使文本溢出边界显示为省略号"></a>使文本溢出边界显示为省略号</h3><p><strong>方法（此方法Firefox5.0尚不支持）：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span><span class="token property">white-space</span><span class="token punctuation">:</span>nowrap<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">text-overflow</span><span class="token punctuation">:</span>ellipsis<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>首先需设置将文本强制在一行内显示，然后将溢出的文本通过overflow:hidden截断，并以text-overflow:ellipsis方式将截断的文本显示为省略号。</p></li><li><h3 id="使连续的长字符串自动换行"><a href="#使连续的长字符串自动换行" class="headerlink" title="使连续的长字符串自动换行"></a>使连续的长字符串自动换行</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>150px<span class="token punctuation">;</span><span class="token property">word-wrap</span><span class="token punctuation">:</span>break-word<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>word-wrap的break-word值允许单词内换行</p></li><li><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p><strong>方法1：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>#test为浮动元素的下一个兄弟元素</p><p><strong>方法2：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>#test为浮动元素的父元素。zoom:1也可以替换为固定的width或height</p><p><strong>方法3：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test:after</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>#test为浮动元素的父元素</p></li><li><h3 id="定义鼠标指针的光标形状为手型并兼容所有浏览器"><a href="#定义鼠标指针的光标形状为手型并兼容所有浏览器" class="headerlink" title="定义鼠标指针的光标形状为手型并兼容所有浏览器"></a>定义鼠标指针的光标形状为手型并兼容所有浏览器</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">cursor</span><span class="token punctuation">:</span>pointer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>若将cursor设置为hand，将只有IE和Opera支持，且hand为非标准属性值</p></li><li><h3 id="让已知高度的容器在页面中水平垂直居中"><a href="#让已知高度的容器在页面中水平垂直居中" class="headerlink" title="让已知高度的容器在页面中水平垂直居中"></a>让已知高度的容器在页面中水平垂直居中</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>-100px 0 0 -100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>Know More：已知高度的容器如何在页面中水平垂直居中</p></li><li><h3 id="让未知尺寸的图片在已知宽高的容器内水平垂直居中"><a href="#让未知尺寸的图片在已知宽高的容器内水平垂直居中" class="headerlink" title="让未知尺寸的图片在已知宽高的容器内水平垂直居中"></a>让未知尺寸的图片在已知宽高的容器内水平垂直居中</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>table-cell<span class="token punctuation">;</span>*<span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>*<span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test p</span><span class="token punctuation">&#123;</span>*<span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>*<span class="token property">top</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span>*<span class="token property">left</span><span class="token punctuation">:</span>50%<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test p img</span><span class="token punctuation">&#123;</span>*<span class="token property">position</span><span class="token punctuation">:</span>relative<span class="token punctuation">;</span>*<span class="token property">top</span><span class="token punctuation">:</span>-50%<span class="token punctuation">;</span>*<span class="token property">left</span><span class="token punctuation">:</span>-50%<span class="token punctuation">;</span><span class="token property">vertical-align</span><span class="token punctuation">:</span>middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>#test是img的祖父节点，p是img的父节点。Know More：未知尺寸的图片如何水平垂直居中</p></li><li><h3 id="设置span的宽度和高度（即如何设置内联元素的宽高）"><a href="#设置span的宽度和高度（即如何设置内联元素的宽高）" class="headerlink" title="设置span的宽度和高度（即如何设置内联元素的宽高）"></a>设置span的宽度和高度（即如何设置内联元素的宽高）</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">span</span><span class="token punctuation">&#123;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>要使内联元素可以设置宽高，只需将其定义为块级或者内联块级元素即可。所以方法非常多样，既可以设置display属性，也可以设置float属性，或者position属性等等。</p></li><li><h3 id="给一个元素定义多个不同的css规则"><a href="#给一个元素定义多个不同的css规则" class="headerlink" title="给一个元素定义多个不同的css规则"></a>给一个元素定义多个不同的css规则</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-x86asm" data-language="x86asm"><code class="language-x86asm">.a&#123;color:#f00;&#125;.b&#123;background:#eee;&#125;.c&#123;background:#ccc;&#125;&lt;div class&#x3D;&quot;a b&quot;&gt;测试1&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;a c&quot;&gt;测试2&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>多个规则之间使用空格分开，并且只有class能同时使用多个规则，id不可以</p></li><li><h3 id="让某个元素充满整个页面"><a href="#让某个元素充满整个页面" class="headerlink" title="让某个元素充满整个页面"></a>让某个元素充满整个页面</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><h3 id="让某个元素距离窗口上右下左4边各10像素"><a href="#让某个元素距离窗口上右下左4边各10像素" class="headerlink" title="让某个元素距离窗口上右下左4边各10像素"></a>让某个元素距离窗口上右下左4边各10像素</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html,body</span><span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">html</span><span class="token punctuation">&#123;</span><span class="token property">_padding</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span><span class="token property">top</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">right</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token property">_position</span><span class="token punctuation">:</span>static<span class="token punctuation">;</span><span class="token property">_height</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote></li><li><h3 id="去掉超链接的虚线框"><a href="#去掉超链接的虚线框" class="headerlink" title="去掉超链接的虚线框"></a>去掉超链接的虚线框</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">a</span><span class="token punctuation">&#123;</span><span class="token property">outline</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>IE7及更早浏览器由于不支持outline属性，需要通过js的blur()方法来实现，如&lt;a onfocus&#x3D;”this.blur();”…</p></li><li><h3 id="容器透明，内容不透明"><a href="#容器透明，内容不透明" class="headerlink" title="容器透明，内容不透明"></a>容器透明，内容不透明</h3><p><strong>方法1：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.outer</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#000<span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span><span class="token function">alpha</span><span class="token punctuation">(</span>opacity=20<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">opacity</span><span class="token punctuation">:</span>.2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.inner</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">margin-top</span><span class="token punctuation">:</span>-200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"outer"</span>>&lt;!--我是透明的容器-->&lt;/div>&lt;div class=<span class="token string">"inner"</span>>我是不透明的内容&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>原理是容器层与内容层并级，容器层设置透明度，内容层通过负margin或者position绝对定位等方式覆盖到容器层上</p><p><strong>方法2：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.outer</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>.2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#000\9<span class="token punctuation">;</span><span class="token property">filter</span><span class="token punctuation">:</span><span class="token function">alpha</span><span class="token punctuation">(</span>opacity=20<span class="token punctuation">)</span>\9<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.outer .inner</span><span class="token punctuation">&#123;</span><span class="token property">position</span><span class="token punctuation">:</span>relative\9<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"outer"</span>>&lt;div class=<span class="token string">"inner"</span>>我是不透明的内容&lt;/div>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>高级浏览器直接使用rgba颜色值实现；IE浏览器在定义容器透明的同时，让子节点相对定位，也可达到效果</p></li><li><h3 id="让整个页面水平居中"><a href="#让整个页面水平居中" class="headerlink" title="让整个页面水平居中"></a>让整个页面水平居中</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#test2</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>960px<span class="token punctuation">;</span><span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>定义body的text-align值为center将使得IE5.5也能实现居中</p></li><li><h3 id="为什么容器的背景色没显示出来？为什么容器无法自适应内容高度？"><a href="#为什么容器的背景色没显示出来？为什么容器无法自适应内容高度？" class="headerlink" title="为什么容器的背景色没显示出来？为什么容器无法自适应内容高度？"></a>为什么容器的背景色没显示出来？为什么容器无法自适应内容高度？</h3><p><strong>方法：</strong></p><p>清除浮动</p><p>通常出现这样的情况都是由于没有清除浮动而引起的，所以Debug时应第一时间想到是否有未清除浮动的地方</p></li><li><h3 id="做1像素细边框的table"><a href="#做1像素细边框的table" class="headerlink" title="做1像素细边框的table"></a>做1像素细边框的table</h3><p><strong>方法1：</strong></p><blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#test&#123;border-collapse:collapse;border:1px solid #ddd;&#125;#test th,#test td&#123;border:1px solid #ddd;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Joy Du<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p><strong>方法2：</strong></p><blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#test&#123;border-spacing:1px;background:#ddd;&#125;#test tr&#123;background:#fff;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Joy Du<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>IE7及更早浏览器不支持border-spacing属性，但是可以通过table的标签属性cellspacing来替代。</p></li><li><h3 id="使页面文本行距始终保持为n倍字体大小的基调"><a href="#使页面文本行距始终保持为n倍字体大小的基调" class="headerlink" title="使页面文本行距始终保持为n倍字体大小的基调"></a>使页面文本行距始终保持为n倍字体大小的基调</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span><span class="token punctuation">&#123;</span><span class="token property">line-height</span><span class="token punctuation">:</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>注意，不要给n加单位。Know More：如何使页面文本行距始终保持为n倍字体大小的基调</p></li><li><h3 id="标准模式Standard-mode和怪异模式Quirks-mode下的盒模型区别？"><a href="#标准模式Standard-mode和怪异模式Quirks-mode下的盒模型区别？" class="headerlink" title="标准模式Standard mode和怪异模式Quirks mode下的盒模型区别？"></a>标准模式Standard mode和怪异模式Quirks mode下的盒模型区别？</h3><p><strong>方法：</strong></p><pre class="line-numbers language-none"><code class="language-none">标准模式下：Element width &#x3D; width + padding + border怪异模式下：Element width &#x3D; width<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相关资料请参阅CSS3属性box-sizing</p></li><li><h3 id="以图换字的几种方法及优劣分析"><a href="#以图换字的几种方法及优劣分析" class="headerlink" title="以图换字的几种方法及优劣分析"></a>以图换字的几种方法及优劣分析</h3><p><strong>思路1：使用text-indent的负值，将内容移出容器</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test1</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">text-indent</span><span class="token punctuation">:</span>-9999px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"test"</span>>以图换字之内容负缩进法&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>该方法优点在于结构简洁，不理想的地方：1.由于使用场景不同，负缩进的值可能会不一样，不易抽象成公用样式；2.当该元素为链接时，在非IE下虚线框将变得不完整；3.如果该元素被定义为内联级或者内联块级，不同浏览器下会有较多的差异</p><p><strong>思路2：使用display:none或visibility:hidden将内容隐藏；</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test span</span><span class="token punctuation">&#123;</span><span class="token property">visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token comment">/* 或者display:none */</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"test"</span>>&lt;span>以图换字之内容隐藏法&lt;/span>&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>该方法优点在于兼容性强并且容易抽象成公用样式，缺点在于结构较复杂</p><p><strong>思路3：使用padding或者line-height将内容挤出容器之外；</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">padding-top</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.test</span><span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>50<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"test"</span>>以图换字之内容排挤法&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>该方法优点在于结构简洁，缺点在于：1.由于使用场景不同，padding或line-height的值可能会不一样，不易抽象成公用样式；2.要兼容IE5.5及更早浏览器还得hack</p><p><strong>思路4：使用超小字体和文本全透明法；</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.test</span><span class="token punctuation">&#123;</span><span class="token property">overflow</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>200px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">line-height</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>#eee <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>*.png<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"test"</span>>以图换字之超小字体+文本全透明法&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><p>该方法结构简单易用，推荐使用</p></li><li><h3 id="为什么2个相邻div的margin只有1个生效？"><a href="#为什么2个相邻div的margin只有1个生效？" class="headerlink" title="为什么2个相邻div的margin只有1个生效？"></a>为什么2个相邻div的margin只有1个生效？</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.box1</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span>10px 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.box2</span><span class="token punctuation">&#123;</span><span class="token property">margin</span><span class="token punctuation">:</span>20px 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;div class=<span class="token string">"box1"</span>>box1&lt;/div>&lt;div class=<span class="token string">"box2"</span>>box2&lt;/div><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>本例中box1的底部margin为10px，box2的顶部margin为20px，但表现在页面上2者之间的间隔为20px，而不是预想中的10+20px&#x3D;30px，结果是选择2者之间最大的那个margin，我们把这种机制称之为“外边距合并”；外边距合并不仅仅出现在相邻的元素间，父子间同样会出现。</p><p>简单列举几点注意事项:<br>　外边距合并只出现在块级元素上；<br>　浮动元素不会和相邻的元素产生外边距合并；<br>　绝对定位元素不会和相邻的元素产生外边距合并；<br>　内联块级元素间不会产生外边距合并；<br>　根元素间不会不会产生外边距合并（如html与body间）；<br>　设置了属性overflow且值不为visible的块级元素不会与它的子元素发生外边距合并；</p></li><li><h3 id="在文本框中禁用中文输入法"><a href="#在文本框中禁用中文输入法" class="headerlink" title="在文本框中禁用中文输入法"></a>在文本框中禁用中文输入法</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">input,textarea</span><span class="token punctuation">&#123;</span><span class="token property">ime-mode</span><span class="token punctuation">:</span>disabled<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>ime-mode为非标准属性，写该文档时只有IE和Firefox支持</p></li><li><h3 id="解决列表中list-style-image不能精准定位的问题"><a href="#解决列表中list-style-image不能精准定位的问题" class="headerlink" title="解决列表中list-style-image不能精准定位的问题"></a>解决列表中list-style-image不能精准定位的问题</h3><p><strong>方法：</strong></p><p>不使用list-style-image来定义列表项目标记符号，而用background-image来代替，并通过background-position来进行定位</p></li><li><h3 id="设置IE下的iframe背景透明"><a href="#设置IE下的iframe背景透明" class="headerlink" title="设置IE下的iframe背景透明"></a>设置IE下的iframe背景透明</h3><p><strong>方法：</strong></p><p>设置iframe元素的标签属性allowtransparency&#x3D;”allowtransparency”然后设置iframe内部页面的body背景色为transparent。不过由此会引发IE下一些其它问题，如：设置透明后的iframe将不能遮住select</p></li><li><h3 id="解决Chrome在应用transition时页面闪动的问题"><a href="#解决Chrome在应用transition时页面闪动的问题" class="headerlink" title="解决Chrome在应用transition时页面闪动的问题"></a>解决Chrome在应用transition时页面闪动的问题</h3><p><strong>方法：</strong></p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">-webkit-transform-style</span><span class="token punctuation">:</span>preserve-3d<span class="token punctuation">;</span><span class="token property">或-webkit-backface-visibility</span><span class="token punctuation">:</span>hidden<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>在Chrome下，使用过渡效果transition时有时会出现页面闪动</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS媒体查询--常见的媒体尺寸设置</title>
      <link href="/2024/04/19/css-mei-ti-cha-xun-chang-jian-de-mei-ti-chi-cun-she-zhi/"/>
      <url>/2024/04/19/css-mei-ti-cha-xun-chang-jian-de-mei-ti-chi-cun-she-zhi/</url>
      
        <content type="html"><![CDATA[<h4 id="媒体查询–常见的媒体尺寸设置"><a href="#媒体查询–常见的媒体尺寸设置" class="headerlink" title="媒体查询–常见的媒体尺寸设置"></a>媒体查询–常见的媒体尺寸设置</h4><p>通过媒体查询，针对不同的设备的尺寸设置<a href="https://so.csdn.net/so/search?q=%E6%96%AD%E7%82%B9&spm=1001.2101.3001.7020">断点</a>来改变布局</p><p>屏幕        设备        断点<br>超小屏幕     手机        &lt;768px<br>小屏幕       平板        &gt;&#x3D;768px ~ &lt;992px  <br>中等屏幕      桌面       &gt;&#x3D;992px ~ &lt;1200px<br>大屏幕       桌面        &gt;&#x3D;1200px      <br>    <br>    <br>常用媒体查询尺寸：<br>    1200px<br>    1100px    1000px   1024px<br>    980px<br>    768px     720px<br>    640px<br>    480px<br>    375px<br>    320px<br>    280px    </p><h4 id="4、移动设备优先"><a href="#4、移动设备优先" class="headerlink" title="4、移动设备优先"></a>4、移动设备优先</h4><p>    移动设备优先：超小屏幕 超小型设备（手机，768px以下）</p><p>​&#96;&#96;&#96;CSS</p><p>    &#x2F;&#x2F; 小屏幕  768px-992px<br>    @media screen and (min-width:768px) { … }</p><p>​<br>    &#x2F;&#x2F; 中等屏幕 992px - 1200px<br>    @media screen and (min-width:992px){ … }</p><p>    <br>    &#x2F;&#x2F; 大屏幕  大于1200px<br>    @media screen and (min-width:1200px){ … }</p><p>​&#96;&#96;&#96;<br>案例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/*在移动端看 移动端显示的颜色  768px屏幕以下*/</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            background-color<span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>​        <span class="token comment">/* 小屏幕  768px-992px  屏幕宽度在768px以上显示的颜色*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>​        <span class="token comment">/* 中等屏幕  992px - 1200px*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>​        <span class="token comment">/* 大屏幕  大于1200px*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>#### 5、大屏幕设备优先   大屏幕设备优先：大屏幕 桌面在1200px以上    大型设备（大台式电脑，1200px 以上）     ```HTML     /*中等屏幕 992px-1200px*/    @media screen and (max-width:1200px) &#123; ... &#125; /* 中型设备（台式电脑，1200px 以下） */    /* 小屏幕 768px-992px*/    @media screen and (max-width:992px)&#123; ... &#125;/* 小型设备（平板电脑，992px 以下） */     /*超小屏幕 768px屏幕以下*/    @media screen and (max-width:768px)&#123; ... &#125;/* 超小型设备（手机，768px 以下） */     /*或者*/   @media screen and (max-width:768px)&#123; ... &#125;/* 超小型设备（手机，767px 以下） */     /* 注意：此时超小屏幕和小屏幕在768px之间有冲突，怎么解决？        把超小屏幕的区间降低1px*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token comment">/* 屏幕大于1200px显示的颜色 */</span>        <span class="token selector">body</span> <span class="token punctuation">&#123;</span>            background-color<span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>​        <span class="token comment">/* 中等屏幕 992px-1200px 屏幕宽度在1200px以下显示的颜色*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>1200px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>​​        <span class="token comment">/* 小屏幕 768px-992px*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>992px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>             <span class="token comment">/* 注意：此时超小屏幕和小屏幕在768px之间有冲突，怎么解决？        把超小屏幕的区间降低1px*/</span>                <span class="token comment">/* 超小屏幕 768px屏幕以下*/</span>        <span class="token atrule"><span class="token rule">@media</span> screen <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span>767px<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>            <span class="token selector">body</span> <span class="token punctuation">&#123;</span>                background-color<span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的弹窗，导航吸顶，部件展开收起</title>
      <link href="/2024/01/26/yi-ge-jian-dan-de-dan-chuang-dao-hang-xi-ding-bu-jian-zhan-kai-shou-qi/"/>
      <url>/2024/01/26/yi-ge-jian-dan-de-dan-chuang-dao-hang-xi-ding-bu-jian-zhan-kai-shou-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/Ma-hai-wu-ya/a3.gif" alt="截图" title="截图"><br>关于scrollTop，参考另外一篇<a href="/2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/">文章</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">a</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">ul,        li</span> <span class="token punctuation">&#123;</span>            <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.container</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 106px<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer ul</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer ul li</span> <span class="token punctuation">&#123;</span>            <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer ul li span</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'list.png'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>            <span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> 100% 100%<span class="token punctuation">;</span>            <span class="token property">background-origin</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.footer ul li a</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #ccc<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.heihei</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 26px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .7<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.heihei a</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 132px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blanchedalmond<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#switch1</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 76px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> bisque<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#hidecontent</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 106px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> beige<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#hidecontent ul</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#hidecontent ul li</span> <span class="token punctuation">&#123;</span>            <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 3px 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> 800px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 88px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation ul</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation ul:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation ul li</span> <span class="token punctuation">&#123;</span>            <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%-12px / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">/* 当上面设置的子项目的宽不期作用，可以加上下面2行试试 */</span>            <span class="token property">min-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%-12px / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100%-12px / 3<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 3px 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #008080<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#navigation[data-fixed="fixed"]</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 5px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.modal</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/**            * 这里是关于遮罩的写法            * 首先            * 1. 该遮罩的HTML应该写在最大的容器中            * 2. z-index的值比其他的高            * 3. position: fixed，不要absolute，防止跟着容器滚动            * 4. 宽高100%            **/</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.modalcontent</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> -75px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.closed</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -20px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #008080<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid #fff<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modalcontent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 此处的关闭符号x，X应该使用大写，否则看起来就不水平居中，即使用了line-height --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>closed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>X<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                dssssssssss                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>dssssssss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>navigation<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> #f7f7f7<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">data-fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>服饰风格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            device-width<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>heihei<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>金黄色的海景房<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>switch1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>收起↓↓<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footerul<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>more<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://1.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidecontent<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>white<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>AAAAAAAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>black<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>BBBBBBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">let</span> hidecontent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hidecontent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> more <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'more'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> switch1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'switch1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> footerul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'footerul'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// document.getElementsByClassName 获得的是一个 HTMLCollection 对象，</span>        <span class="token comment">// 包含所有具有指定类名的元素。即使只有一个元素具有该类名，也会返回一个集合。</span>        <span class="token comment">// 所以在后面加上一个[0]，表示拿第一个匹配项</span>        <span class="token keyword">let</span> footer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'footer'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> navigation <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'navigation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// document.querySelector和getElementsByClassName不同的是，</span>        <span class="token comment">// 它返回第一个匹配项，即使有很多使用同样类名的元素</span>        <span class="token keyword">let</span> closed <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.closed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> modal <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.modal'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> modalcontent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.modalcontent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        closed<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>            modalcontent<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        modal<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            modal<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>            modalcontent<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        switch1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 这里使用了3元运算符，注意写法</span>            <span class="token comment">// 比如下面的一句，首先display:flex和display:block是冲突的</span>            <span class="token comment">// 所以只能写成display:flex和display:none</span>            <span class="token comment">// 3元运算符是一个条件后跟一个问号（?），如果条件为真值，则执行冒号（:）前的表达式；若条件为假值，则执行最后的表达式。</span>            <span class="token comment">// 最后是使用JS访问元素的样式的写法，如：footer.style.marginBottom</span>            <span class="token comment">// 元素.style.属性=== '属性值'；</span>            <span class="token comment">// JS访问修改元素的CSS有4种方法(?)，现在这种是修改内联样式的，属性的写法使用驼峰法</span>            <span class="token comment">// 在jQuery中，使用.css来获取和修改DOM的样式</span>            <span class="token comment">/**             * 1. HTMLElement.style 属性返回一个 CSSStyleDeclaration 对象，             * 表示元素的 内联style 属性（attribute），但无法读取内嵌和外部的样式表属性。             * 2. Element.currentStyle 仅限IE浏览器，和getComputedStyle()差不多             * 3. window.getComputedStyle()获取所有的 css 样式,              * 获取计算后的样式（computed styles）对象，             * 该对象包含应用于元素的所有样式属性的最终计算值。             *              * 4. Element.getBoundingClientRect();             * 最偏门的一种用法.用于获取某个元素相对于视窗的位置集合。             * 返回的对象中有 top, right, bottom, left,width,height 等属性。             * 除了 width 和 height 外的属性都是相对于视口的左上角位置而言的。             * **/</span>            footerul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token punctuation">(</span>footerul<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">===</span> <span class="token string">"flex"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"none"</span> <span class="token operator">:</span> <span class="token string">"flex"</span><span class="token punctuation">;</span>            more<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token punctuation">(</span>more<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">===</span> <span class="token string">"flex"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"none"</span> <span class="token operator">:</span> <span class="token string">"flex"</span><span class="token punctuation">;</span>            switch1<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token punctuation">(</span>switch1<span class="token punctuation">.</span>innerText <span class="token operator">===</span> <span class="token string">'收起↓↓'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"展开↑↑"</span> <span class="token operator">:</span> <span class="token string">"收起↓↓"</span><span class="token punctuation">;</span>            footer<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginBottom <span class="token operator">=</span> <span class="token punctuation">(</span>footer<span class="token punctuation">.</span>style<span class="token punctuation">.</span>marginBottom <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"-80px"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        more<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hidecontent<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token punctuation">(</span>hidecontent<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">===</span> <span class="token string">"none"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"block"</span> <span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 1.          * 下面这个函数抄的，offsetTop大概指元素顶部到父元素的顶部的距离         * 当使用offsetTop的元素的父元素没有使用absolute或者fixed定位时，则子元素的offsetTop为到其顶部到最近的父元素的顶部的距离。所以一般地，这个用法用来测量元素到root顶部的距离（想测这个的，子元素的父元素不要给定位）         *          * offsetTop 属性返回的是一个元素的上边缘（border edge）与其 offsetParent 元素的上边缘之间的距离。offsetParent 是最近的已经定位（positioned）的祖先元素，如果没有已经定位的祖先元素，则 offsetParent 是根元素（root element）。如果子元素的父元素没有使用 absolute 或 fixed 定位，则 offsetTop 表示子元素的上边缘到最近的已经定位的祖先元素的上边缘的距离。如果没有已经定位的祖先元素，则它表示到根元素的距离。所以，你可以使用 offsetTop 来测量一个元素到根元素（或最近的已经定位的祖先元素）顶部的距离，但在子元素的父元素没有定位时，offsetTop 表示到根元素的距离。         *          * 2.         * 关于st变量，参看文章：         * 关于document.body.scrollTop和document.documentElement.scrollTop 值为0的问题         * 链接：         * 2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/         *          * 3.         * obj.setAttribute("data-fixed", st >= ot ? "fixed" : "")         * 使用这样设置吸顶的方法，明显比使用时刻检测该元素到root顶部的距离节约性能         * 而且页面还不抖动         * st是root的滚动条到顶部的距离         * ot是导航到顶部的距离（相对于root）         * 当ot小于st，ot=>fixed         * 这里ot在初始化时是200px, 当st离顶部大于200px时，         * 也就是页面向下滚动200px，此时导航来到顶部，所以此时给导航一个CSS声明#navigation[data-fixed="fixed"]（前面在CSS表里已经写好）         * **/</span>        <span class="token keyword">var</span> obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"navigation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ot <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"🚀 ~ ot:"</span><span class="token punctuation">,</span> ot<span class="token punctuation">)</span>        document<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">var</span> st <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"🚀 ~ st:"</span><span class="token punctuation">,</span> st<span class="token punctuation">)</span>            <span class="token comment">// 关于scrollTop，参考另外一篇[文章](/2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/)</span>            <span class="token comment">// setAttribute语法： element.setAttribute(attribute name,attribute value)</span>            <span class="token comment">// 观察setAttribute在浏览器的操作过程，发现其每次都使用"=",所以这个方法是给标签赋予内联样式，或者类名的，</span>            <span class="token comment">// 赋予类名时，直接在attribute name写‘class’,然后在后面写class name</span>            <span class="token comment">// 内联样式则在attribute name写‘style’,后面像写内联CSS一样直接写一堆属性和值</span>            <span class="token comment">// 内联样式也可以这样写element.setAttribute("align","200px")</span>            <span class="token comment">// 在这里利用了：括号内的属性名和值都是必须的</span>            <span class="token comment">// 所以当后面的3元运算符的条件不成立时，设置为空，导致该CSS无效</span>            <span class="token comment">// 当3元运算符的条件成立时，设置为fixed，该CSS有效</span>            <span class="token comment">// 正常人会用if来写：if(st >= ot)&#123;obj.setAttribute("data-fixed","fixed")&#125; else&#123;obj.removeAttribute("data-fixed")&#125;           </span>            <span class="token comment">// 关于removeAttribute，其值只有一个，可以填class，style，也可以填padding,align之类，</span>            <span class="token comment">// 它和setAttribute一样，每次都是操作=号，</span>                        <span class="token comment">//obj.setAttribute("data-fixed", st >= ot ? "fixed" : "");</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>st <span class="token operator">>=</span> ot<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                obj<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"data-fixed"</span><span class="token punctuation">,</span> <span class="token string">"fixed"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                obj<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">"data-fixed"</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
            <tag> 码海无涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于document.body.scrollTop和document.documentElement.scrollTop 值为0的问题</title>
      <link href="/2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/"/>
      <url>/2024/01/25/guan-yu-document-body-scrolltop-he-document-documentelement-scrolltop-zhi-wei-0-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="一、先遇到document-body-scrollTop值为0的问题"><a href="#一、先遇到document-body-scrollTop值为0的问题" class="headerlink" title="一、先遇到document.body.scrollTop值为0的问题"></a>一、先遇到document.body.scrollTop值为0的问题</h2><p>做页面的时候可能会用到位置固定的层,读取document.body.scrollTop来设置层的位置,像这样,</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> oId<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementByIdx_x</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> oId<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可是怎么没有达到预期效果呢,输出document.body.scrollTop的值一看,一直都是0.原来是DTD的问题,要是页面直接用开头的话就没有问题了.但是要符合web标准,DTD当然是不能少的.使用DTD时用document.documentElement.scrollTop代替document.body.scrollTop就可以了</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">var</span> oId<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementByIdx_x</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   oId<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top<span class="token operator">=</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token operator">+</span><span class="token string">"px"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者用函数来解决：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">get_scrollTop_of_body</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> scrollTop<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window<span class="token punctuation">.</span>pageYOffset <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//pageYOffset指的是滚动条顶部到网页顶部的距离</span>        scrollTop <span class="token operator">=</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>compatMode <span class="token operator">!=</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>compatMode <span class="token operator">!=</span> <span class="token string">'BackCompat'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>body <span class="token operator">!=</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        scrollTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> scrollTop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>window.pageYoffset:<br>pageYOffset 属性是 scrollY 属性的别名：</p><p><code>window.pageYOffset == window.scrollY; // 总是返回 true</code></p><p>为了跨浏览器兼容，请使用 window.pageYOffset 代替 window.scrollY。另外，旧版本 IE（&lt;9）两个属性都不支持，必须使用其他的非标准属性。完整的兼容性代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> supportPageOffset <span class="token operator">=</span> window<span class="token punctuation">.</span>pageXOffset <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">var</span> isCSS1Compat <span class="token operator">=</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"CSS1Compat"</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> supportPageOffset  <span class="token operator">?</span> window<span class="token punctuation">.</span>pageXOffset  <span class="token operator">:</span> isCSS1Compat    <span class="token operator">?</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft    <span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> supportPageOffset  <span class="token operator">?</span> window<span class="token punctuation">.</span>pageYOffset  <span class="token operator">:</span> isCSS1Compat    <span class="token operator">?</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop    <span class="token operator">:</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有主流浏览器都支持 pageXOffset 和 pageYOffset 属性。<br>注：IE对盒模型的渲染在 <strong>Standards Mode</strong>和<strong>Quirks Mode</strong>是有很大差别的，在Standards Mode下对于盒模型的解释和其他的标准浏览器是一样，但在Quirks Mode模式下则有很大差别，而在不声明Doctype的情况下，IE默认又是Quirks Mode。所以为兼容性考虑，我们可能需要获取当前的文档渲染方式。</p><p>document.compatMode正好派上用场，它有两种可能的返回值：<strong>BackCompat</strong>和<strong>CSS1Compat</strong>，对其解释如下：</p><p>BackCompat： Standards-compliant mode is not switched on. (Quirks Mode)</p><p>CSS1Compat： Standards-compliant mode is switched on. (Standards Mode)</p><p>在实际的项目中，我们还需要在获取浏览是否IE，这样就可以得到IE的渲染模式了。</p><p>当文档有了标准声明时， document.compatMode 的值就等于 “CSS1compat”， 因此，我们可以根据 document.compatMode 的值来判断文档是否加了标准声明：</p><p>var height &#x3D; document.compatMode&#x3D;&#x3D;”CSS1Compat” ? document.documentElement.clientHeight : document.body.clientHeight;</p><h2 id="二、再次遇到谷歌浏览器不支持document-documentElement-scrollTop，值0的问题"><a href="#二、再次遇到谷歌浏览器不支持document-documentElement-scrollTop，值0的问题" class="headerlink" title="二、再次遇到谷歌浏览器不支持document.documentElement.scrollTop，值0的问题"></a>二、再次遇到谷歌浏览器不支持document.documentElement.scrollTop，值0的问题</h2><ul><li><p>信息显示浮动层时，IE、Firefox下都能显示正常，但Chrome下出现了浮动层永远显示在上面，经过仔细分析，发现Chrome对document.documentElement.scrollTop的识别会出现误差。不过加上document.body.scrollTop后，则显示正常。<br><br>  由于document.documentElement.scrollTop和document.body.scrollTop在标准模式或者是奇怪模式下都只有一个会返回有效的值，所以都加上也不会有问题（看来上面的问题是Chrome可能把文档当作非标准文档来解析了）。</p><p>  即获取高度时使用document.documentElement.scrollTop+document.body.scrollTop，经测试，代码在IE、Firefox、Chrome下都能显示正常了。</p></li></ul><h2 id="三、浏览器兼容模式"><a href="#三、浏览器兼容模式" class="headerlink" title="三、浏览器兼容模式"></a>三、浏览器兼容模式</h2><ul><li><p>对于document.compatMode，很多朋友可能都根我一样很少接触，知道他的存在却不清楚他的用途。今天在ext中看到 document.compatMode的使用，感觉这个对于我们开发兼容性的web页面还是很有帮助，我们都知道，IE对盒模型的渲染在 Standards Mode和Quirks Mode是有很大差别的，在Standards Mode下对于盒模型的解释和其他的标准浏览器是一样，但在Quirks Mode模式下则有很大差别，而在不声明Doctype的情况下，IE默认又是Quirks Mode。所以为兼容性考虑，我们可能需要获取当前的文档渲染方式。<br><br>      document.compatMode正好派上用场，它有两种可能的返回值：BackCompat和CSS1Compat，对其解释如下：</p><p>BackCompat Standards-compliant mode is not switched on. (Quirks Mode)</p><p>CSS1Compat Standards-compliant mode is switched on. (Standards Mode)</p><p>    在实际的项目中，我们还需要在获取浏览是否IE，这样就可以得到IE的渲染模式了。在Ext中的代码：isBorderBox&#x3D;isIE&amp;&amp;!isStrict。</p><p>当文档有了标准声明时， document.compatMode 的值就等于 “CSS1compat”， 因此， 我们可以根据 document.compatMode 的值来判断文档是否加了标准声明</p><p>var height &#x3D; document.compatMode&#x3D;&#x3D;”CSS1Compat” ? document.documentElement.clientHeight : document.body.clientHeight;</p></li><li><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;模式应用&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>document.compatMode:获取当前浏览器采用的渲染方式。</p><p>主要是浏览器的模式，有两个：BackCompat，CSS1Compat。其中前者是怪异模式，后者是标准模式。</p><p>IE默认是BackCompat模式，Gecko内核的浏览器只在table中图片层上不同，可以看为CSS1Compat标准模式</p><p>document.compatMode等于BackCompat时，浏览器客户区宽度是document.body.clientWidth；</p><p>当document.compatMode等于CSS1Compat时，浏览器客户区宽度是document.documentElement.clientWidth。</p><p>浏览器客户区高度、滚动条高度、滚动条的Left、滚动条的Top等等都是上面的情况。</p><p>一个准确获取网页客户区的宽高、滚动条宽高、滚动条Left和Top的代码：</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>compatMode <span class="token operator">==</span> \"BackCompat\"<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>cHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>sWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span>sHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>sLeft <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span>sTop <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">//document.compatMode == \"CSS1Compat\"</span>cWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>cHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>sWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">;</span>sHeight <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">;</span>sLeft <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft <span class="token operator">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">;</span>sTop <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">:</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文：<a href="http://blog.csdn.net/gongyuan303/article/details/8935307">http://blog.csdn.net/gongyuan303/article/details/8935307</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20 个令人惊叹的一行 JavaScript 代码</title>
      <link href="/2024/01/20/20-ge-ling-ren-liang-tan-de-yi-xing-javascript-dai-ma/"/>
      <url>/2024/01/20/20-ge-ling-ren-liang-tan-de-yi-xing-javascript-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="20-个令人惊叹的一行-JavaScript-代码"><a href="#20-个令人惊叹的一行-JavaScript-代码" class="headerlink" title="20 个令人惊叹的一行 JavaScript 代码"></a>20 个令人惊叹的一行 JavaScript 代码</h1><blockquote><p>本文为转载翻译文章。</p><p>原文地址：<a href="%22https://dev.to/saviomartin/20-killer-javascript-one-liners-94f%22">dev.to&#x2F;saviomartin…</a></p><p>原文作者：<a href="%22https://dev.to/saviomartin%22">Savio Martin</a></p></blockquote><p>今天，我想分享 20 个 令人惊叹的 JavaScript 一行代码，让你的工作更轻松。一起来看看吧！🚀</p><h2 id="1-获取浏览器-Cookie-的值"><a href="#1-获取浏览器-Cookie-的值" class="headerlink" title="1. 获取浏览器 Cookie 的值"></a>1. 获取浏览器 Cookie 的值</h2><p>使用 document.cookie 来获取 Cookie 的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">cookie</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>document<span class="token punctuation">.</span>cookie<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'_ga'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: "GA1.2.1929736587.1601974046"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-将-RGB-转换为十六进制"><a href="#2-将-RGB-转换为十六进制" class="headerlink" title="2. 将 RGB 转换为十六进制"></a>2. 将 RGB 转换为十六进制</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">rgbToHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token string">"#"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rgbToHex</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: #0033ff`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-复制到剪贴板"><a href="#3-复制到剪贴板" class="headerlink" title="3. 复制到剪贴板"></a>3. 复制到剪贴板</h2><p>使用 navigator.clipboard.writeText 轻松将任何文本复制到剪贴板上。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">copyToClipboard</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token operator">=></span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copyToClipboard</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-检查日期是否有效"><a href="#4-检查日期是否有效" class="headerlink" title="4.检查日期是否有效"></a>4.检查日期是否有效</h2><p>使用以下代码段检查日期是否有效。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isDateValid</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>val</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">...</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">isDateValid</span><span class="token punctuation">(</span><span class="token string">"December 17, 1995 03:24:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-找出一年中的某一天"><a href="#5-找出一年中的某一天" class="headerlink" title="5.找出一年中的某一天"></a>5.找出一年中的某一天</h2><p>查找日期中的某一天。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">dayOfYear</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>date <span class="token operator">-</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">dayOfYear</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: 272</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="将6-字符串首字母大写"><a href="#将6-字符串首字母大写" class="headerlink" title="将6.字符串首字母大写"></a>将6.字符串首字母大写</h2><p>Javascript 没有内置的大写函数，因此我们可以使用以下代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">capitalize</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">"follow for more"</span><span class="token punctuation">)</span><span class="token comment">// Result: Follow for more</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-计算两天之间相差的天数"><a href="#7-计算两天之间相差的天数" class="headerlink" title="7.计算两天之间相差的天数"></a>7.计算两天之间相差的天数</h2><p>使用以下代码段查找给定 2 天之间相差的天数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">dayDif</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">date1<span class="token punctuation">,</span> date2</span><span class="token punctuation">)</span> <span class="token operator">=></span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> date2<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">86400000</span><span class="token punctuation">)</span><span class="token function">dayDif</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2020-10-21"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">"2021-10-22"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// Result: 366</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="8-清除所有-Cookie"><a href="#8-清除所有-Cookie" class="headerlink" title="8.清除所有 Cookie"></a>8.清除所有 Cookie</h2><p>通过使用 document.cookie 可以轻松清除存储在网页中的所有 cookie 。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> clearCookies <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cookie</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^ +</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=.\*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">=;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">;path=/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-生成随机十六进制"><a href="#9-生成随机十六进制" class="headerlink" title="9. 生成随机十六进制"></a>9. 生成随机十六进制</h2><p>使用 Math.random 和 padEnd 属性生成随机的十六进制。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">randomHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">randomHex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: #92b008</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-数组去重"><a href="#10-数组去重" class="headerlink" title="10. 数组去重"></a>10. 数组去重</h2><p>使用 SetJavaScript 可以轻松地删除重复项。超级有用！</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">removeDuplicates</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: [ 1, 2, 3, 4, 5, 6 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="11-从-URL-获取查询参数"><a href="#11-从-URL-获取查询参数" class="headerlink" title="11. 从 URL 获取查询参数"></a>11. 从 URL 获取查询参数</h2><p>通过 window.location 或原始 URL 轻松查询 goole.com?search&#x3D;easy&amp;page&#x3D;3 的参数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getParameters</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">URL</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>     <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&#123;"'</span> <span class="token operator">+</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'\\"'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'","'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'":"'</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">'"&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">getParameters</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token comment">// Result: &#123; search : "easy", page : 3 &#125;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">---------------or-------------</span><span class="token regex-delimiter">/</span></span>Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-从日期获取“时分秒”格式的时间"><a href="#12-从日期获取“时分秒”格式的时间" class="headerlink" title="12. 从日期获取“时分秒”格式的时间"></a>12. 从日期获取“时分秒”格式的时间</h2><p>我们可以从日期中，获取到 hour : minutes : seconds 格式的时间：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">timeFromDate</span> <span class="token operator">=</span> <span class="token parameter">date</span> <span class="token operator">=></span> date<span class="token punctuation">.</span><span class="token function">toTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">timeFromDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: "17:30:00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="13-确认奇偶数"><a href="#13-确认奇偶数" class="headerlink" title="13. 确认奇偶数"></a>13. 确认奇偶数</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=></span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: True</span><span class="token operator">/</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>or<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">/</span><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=></span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isEven</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-求平均值"><a href="#14-求平均值" class="headerlink" title="14. 求平均值"></a>14. 求平均值</h2><p>使用 reduce 方法找到多个数字的平均值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">average</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">/</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token function">average</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: 2.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="15-回到顶部"><a href="#15-回到顶部" class="headerlink" title="15. 回到顶部"></a>15. 回到顶部</h2><p>使用 window.scrollTo(0, 0) 方法自动回到顶部。将 x 和 y 都设置为 0。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">goToTop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">goToTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="16-翻转字符串"><a href="#16-翻转字符串" class="headerlink" title="16. 翻转字符串"></a>16. 翻转字符串</h2><p>使用split,reverse 和 join 方法轻松翻转字符串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=></span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: 'dlrow olleh'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="17-检查数组是否为空"><a href="#17-检查数组是否为空" class="headerlink" title="17. 检查数组是否为空"></a>17. 检查数组是否为空</h2><p>检查数组是否为空的简单代码，结果将返回 true 或 false。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">isNotEmpty</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="18-获取用户选定的文本"><a href="#18-获取用户选定的文本" class="headerlink" title="18. 获取用户选定的文本"></a>18. 获取用户选定的文本</h2><p>使用内置 getSelection 属性获取用户选择的文本。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getSelectedText</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getSelectedText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="19-打乱数组"><a href="#19-打乱数组" class="headerlink" title="19. 打乱数组"></a>19. 打乱数组</h2><p>使用 sort 和 random 方法对数组进行打乱混合。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">shuffleArray</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token operator">=></span> arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0.5</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">shuffleArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Result: [ 1, 4, 3, 2 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="20-检测用户是否处于暗模式"><a href="#20-检测用户是否处于暗模式" class="headerlink" title="20. 检测用户是否处于暗模式"></a>20. 检测用户是否处于暗模式</h2><p>使用以下代码检查用户的设备是否处于暗模式。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> isDarkMode <span class="token operator">=</span> window<span class="token punctuation">.</span>matchMedia <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">'(prefers-color-scheme: dark)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>matchesconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isDarkMode<span class="token punctuation">)</span> <span class="token comment">// Result: True or False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 种跨域解决方案（附终极方案）</title>
      <link href="/2024/01/20/10-chong-kua-yu-jie-jue-fang-an-fu-zhong-ji-fang-an/"/>
      <url>/2024/01/20/10-chong-kua-yu-jie-jue-fang-an-fu-zhong-ji-fang-an/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/1.png" alt="10 种跨域解决方案（附终极方案）"></p><h1 id="10-种跨域解决方案（附终极方案）"><a href="#10-种跨域解决方案（附终极方案）" class="headerlink" title="10 种跨域解决方案（附终极方案）"></a>10 种跨域解决方案（附终极方案）</h1><p>原文：<a href="https://zhuanlan.zhihu.com/p/132683471">程序员秋风</a></p><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>嗯。又来了，又说到跨域了，这是一个老生常谈的话题，以前我觉得这种基础文章没有什么好写的，会想着你去了解底层啊，不是很简单吗。但是最近在开发一个 <strong>vscode 插件</strong> 发现，当你刚入门一样东西的时候，你不会想这么多，因为你对他不熟悉，当你遇到不会的东西，你就是想先找到解决方案，然后通过这个解决方案再去深入理解。就比如跨域，新人或者刚接触的人对它并不是那么熟悉，所以说列出一些自己积累的方案，以及一些常用的场景来给他人带来一些解决问题的思路，这件事是有意义的。（写完之后还发现真香。以后忘了还能回来看看）</p><p>其实现在的环境对于刚入门的前端来说，非常的不友好，一方面吧，很多刚新人没有经历过工具的变更时代，另一方面框架的迭代更新速度很快。在以前你可能掌握几种常见的手法就好了。但是现在 <code>webpack-dev-server</code>、<code>vue-cli</code>、<code>parcel</code>，这些脚手架都进行了一层封装，对于熟悉的人可能很简单，但是对于还未入门的人来说，简直就是一个黑盒，虽然用起来很方便，但是某一天遇到了问题，你对它不熟悉，你就会不知道所错。（但是别慌，主流 cli 的跨域方式我都会讲到）</p><p>讲着讲着有点偏离方向，可能我讲的也并不一定是正确的。下面切入正题。</p><p>本文会以 <strong>「What-How-Why」</strong> 的方式来进行讲解。而在在 How （如何解决跨域，将会提供标题的 11 种方案。）</p><p><strong>重要的说明: 在文中，web 端地址为 localhost:8000 服务端地址为 localhost:8080,这一点希望你能记住，会贯穿全文，你也可以把此处的两端的地址代入你自己的地址。</strong></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/1.png"></p><p>以下所有代码均在 <a href="https://github.com/hua1995116/node-demo/tree/master/node-cors">https://github.com/hua1995116/node-demo/tree/master/node-cors</a></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/2.png"></p><h2 id="一、跨域是什么？"><a href="#一、跨域是什么？" class="headerlink" title="一、跨域是什么？"></a>一、跨域是什么？</h2><h3 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1.同源策略"></a>1.同源策略</h3><p>跨域问题其实就是浏览器的同源策略所导致的。</p><blockquote><p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%25E6%25BA%2590">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。<br>--来源 MDN</p></blockquote><p>当跨域时会收到以下错误</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/3.webp"></p><h3 id="2-同源示例"><a href="#2-同源示例" class="headerlink" title="2.同源示例"></a>2.同源示例</h3><p>那么如何才算是同源呢？先来看看 url 的组成部分</p><p><code>http://www.example.com:80/path/to/myfile.html?key1=value1&amp;key2=value2#SomewhereInTheDocument</code></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/4.png"></p><p>只有当</p><p><strong>protocol（协议）、domain（域名）、port（端口）三者一致。</strong></p><p><strong>protocol（协议）、domain（域名）、port（端口）三者一致。</strong></p><p><strong>protocol（协议）、domain（域名）、port（端口）三者一致。</strong></p><p>才是同源。</p><p>以下协议、域名、端口一致。</p><p><a href="http://www.example.com:80/a.js">http://www.example.com:80/a.js</a></p><p><a href="http://www.example.com:80/b.js">http://www.example.com:80/b.js</a></p><p>以下这种看上去再相似也没有用，都不是同源。</p><p><a href="http://www.example.com:8080">http://www.example.com:8080</a></p><p><a href="http://www2.example.com:80">http://www2.example.com:80</a></p><p>在这里注意一下啊，这里是为了突出端口的区别才写上端口。在默认情况下 http 可以省略端口 80， https 省略 443。这别到时候闹笑话了，你和我说 <a href="http://www.example.com:80">http://www.example.com:80</a> 和 http:&#x2F;&#x2F;www.example.com 不是同源，他俩是一个东西。</p><p><a href="http://www.example.com:80">http://www.example.com:80</a> &#x3D;&#x3D;&#x3D; http:&#x2F;&#x2F;www.example.com</p><p><a href="https://www.example.com%3A443">https://www.example.com:443</a> &#x3D;&#x3D;&#x3D; https:&#x2F;&#x2F;www.example.com</p><p>唔，还是要说明一下。</p><h2 id="二、如何解决跨域？"><a href="#二、如何解决跨域？" class="headerlink" title="二、如何解决跨域？"></a>二、如何解决跨域？</h2><h3 id="1-CORS"><a href="#1-CORS" class="headerlink" title="1.CORS"></a>1.CORS</h3><p>跨域资源共享(<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CORS">CORS</a>) 是一种机制，它使用额外的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP">HTTP</a> 头来告诉浏览器 让运行在一个 origin (domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器<strong>不同的域、协议或端口</strong>请求一个资源时，资源会发起一个<strong>跨域 HTTP 请求</strong>。</p><p>而在 cors 中会有 <code>简单请求</code> 和 <code>复杂请求</code>的概念。</p><p><strong>浏览器支持情况</strong></p><p>当你使用 IE&lt;&#x3D;9, Opera&lt;12, or Firefox&lt;3.5 或者更加老的浏览器，这个时候请使用 JSONP 。</p><h3 id="a-简单请求"><a href="#a-简单请求" class="headerlink" title="a.简单请求"></a>a.简单请求</h3><p>不会触发 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS%23Preflighted_requests">CORS 预检请求</a>。这样的请求为“简单请求”，请注意，该术语并不属于 <a href="https://fetch.spec.whatwg.org/">Fetch</a> （其中定义了 CORS）规范。若请求满足所有下述条件，则该请求可视为“简单请求”：</p><p>情况一: 使用以下方法(意思就是以下请求意外的都是非简单请求)</p><ul><li><code>GET</code></li><li><code>HEAD</code></li><li><code>POST</code></li></ul><p>情况二: 人为设置以下集合外的请求头</p><ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code> （需要注意额外的限制）</li><li><code>DPR</code></li><li><code>Downlink</code></li><li><code>Save-Data</code></li><li><code>Viewport-Width</code></li><li><code>Width</code></li></ul><p>情况三：<code>Content-Type</code>的值仅限于下列三者之一：(例如 application&#x2F;json 为非简单请求)</p><ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul><p>情况四:</p><p>请求中的任意<code>XMLHttpRequestUpload</code> 对象均没有注册任何事件监听器；<code>XMLHttpRequestUpload</code> 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</p><p>情况五:</p><p>请求中没有使用 <code>ReadableStream</code> 对象。</p><h3 id="b-非简单请求"><a href="#b-非简单请求" class="headerlink" title="b.非简单请求"></a>b.非简单请求</h3><p>除以上情况外的。</p><h3 id="c-Node-中的解决方案"><a href="#c-Node-中的解决方案" class="headerlink" title="c.Node 中的解决方案"></a>c.Node 中的解决方案</h3><h3 id="原生方式"><a href="#原生方式" class="headerlink" title="原生方式"></a>原生方式</h3><p>我们来看下后端部分的解决方案。<code>Node</code> 中 <code>CORS</code> 的解决代码.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Credentials"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Method"</span><span class="token punctuation">,</span> <span class="token string">"PUT,POST,GET,DELETE,OPTIONS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>    <span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">,</span>    <span class="token string">"Origin, X-Requested-With, Content-Type, Accept, cc"</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">204</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h3><p>为了方便也可以直接使用中间件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-cors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="关于-cors-的-cookie-问题"><a href="#关于-cors-的-cookie-问题" class="headerlink" title="关于 cors 的 cookie 问题"></a>关于 cors 的 cookie 问题</h3><p>想要传递 <code>cookie</code> 需要满足 3 个条件</p><p>1.web 请求设置<code>withCredentials</code></p><p>这里默认情况下在跨域请求，浏览器是不带 cookie 的。但是我们可以通过设置 <code>withCredentials</code> 来进行传递 <code>cookie</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 原生 xml 的设置方式</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// axios 设置方式</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.<code>Access-Control-Allow-Credentials</code> 为 <code>true</code></p><p>3.<code>Access-Control-Allow-Origin</code>为非 <code>*</code></p><p>这里请求的方式，在 <code>chrome</code> 中是能看到返回值的，但是只要不满足以上其一，浏览器会报错，获取不到返回值。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/5.webp"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Access to XMLHttpRequest at 'http://127.0.0.1:8080/api/corslist' from origin 'http://127.0.0.1:8000' has been blocked by CORS policy: The value of the 'Access-Control-Allow-Credentials' header in the response is '' which must be 'true' when the request's credentials mode is 'include'. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/6.webp"></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Access to XMLHttpRequest at 'http://127.0.0.1:8080/api/corslist' from origin 'http://127.0.0.1:8000' has been blocked by CORS policy: The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/7.webp"></p><h3 id="d-前端示例"><a href="#d-前端示例" class="headerlink" title="d.前端示例"></a>d.前端示例</h3><p>分别演示一下前端部分 <code>简单请求</code> 和 <code>非简单请求</code></p><h3 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/api/corslist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h3><p>这里我们加入了一个非集合内的 <code>header</code> 头 <code>cc</code> 来达到非简单请求的目的。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/api/corslist"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">cc</span><span class="token operator">:</span> <span class="token string">"xxx"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/8.webp"></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/9.webp"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>1、 在新版的 chrome 中，如果你发送了复杂请求，你却看不到 <code>options</code> 请求。可以在这里设置 <code>chrome://flags/#out-of-blink-cors</code> 设置成 <code>disbale</code> ，重启浏览器。对于非简单请求就能看到 <code>options</code> 请求了。</p><p>2、 一般情况下后端接口是不会开启这个跨域头的，除非是一些与用户无关的不太重要的接口。</p><h3 id="2-Node-正向代理"><a href="#2-Node-正向代理" class="headerlink" title="2.Node 正向代理"></a>2.Node 正向代理</h3><p>代理的思路为，利用服务端请求不会跨域的特性，让接口和当前站点同域。</p><p><strong>代理前</strong></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/10.webp"></p><p><strong>代理后</strong></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/11.webp"></p><p>这样，所有的资源以及请求都在一个域名下了。</p><h3 id="a-cli-工具中的代理"><a href="#a-cli-工具中的代理" class="headerlink" title="a.cli 工具中的代理"></a>a.cli 工具中的代理</h3><h3 id="1-Webpack-4-x"><a href="#1-Webpack-4-x" class="headerlink" title="1) Webpack (4.x)"></a>1) Webpack (4.x)</h3><p>在<code>webpack</code>中可以配置<code>proxy</code>来快速获得接口代理的能力。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8000</span><span class="token punctuation">,</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">"/api"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>      <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">"webpack.html"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改前端接口请求方式，改为不带域名。（因为现在是同域请求了）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getlist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  getlist<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Vue-cli-2-x"><a href="#2-Vue-cli-2-x" class="headerlink" title="2) Vue-cli 2.x"></a>2) Vue-cli 2.x</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// config/index.js</span><span class="token operator">...</span><span class="token literal-property property">proxyTable</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:8080'</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Vue-cli-3-x"><a href="#3-Vue-cli-3-x" class="headerlink" title="3) Vue-cli 3.x"></a>3) Vue-cli 3.x</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">// vue.config.js 如果没有就新建module.exports = &#123;  devServer: &#123;    port: 8000,    proxy: &#123;      "/api": &#123;        target: "http://localhost:8080"      &#125;    &#125;  &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Parcel-2-x"><a href="#4-Parcel-2-x" class="headerlink" title="4) Parcel (2.x)"></a>4) Parcel (2.x)</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">// .proxyrc&#123;  "/api": &#123;    "target": "http://localhost:8080"  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这里，心里一句 xxx 就会脱口而出，一会写配置文件，一会 proxyTable ，一会 proxy，怎么这么多的形式？学不动了学不动了。。。不过也不用慌，还是有方法的。以上所有配置都是有着共同的底层包 <a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> .里面需要用到的各种 <code>websocket</code> ，<code>rewrite</code> 等功能，直接看这个库的配置就可以了。关于 http-proxy-middleware 这个库的原理可以看我这篇文章 <a href="https://github.com/hua1995116/proxy">https://github.com/hua1995116/proxy</a> 当然了。。。对于配置的位置入口还是非统一的。教一个搜索的技巧吧，上面配置写哪里都不用记的，想要哪个框架的 直接 google 搜索 xxx proxy 就行了。</p><p>例如 vue-cli 2 proxy 、 webpack proxy 等等….基本会搜到有官网的配置答案，通用且 nice。</p><h3 id="b-使用自己的代理工具"><a href="#b-使用自己的代理工具" class="headerlink" title="b.使用自己的代理工具"></a>b.使用自己的代理工具</h3><p><a href="https://github.com/Rob--W/cors-anywhere">cors-anywhere</a></p><p><strong>服务端</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Listen on a specific host via the HOST environment variable</span><span class="token keyword">var</span> host <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">HOST</span> <span class="token operator">||</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">;</span><span class="token comment">// Listen on a specific port via the PORT environment variable</span><span class="token keyword">var</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">7777</span><span class="token punctuation">;</span><span class="token keyword">var</span> cors_proxy <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cors-anywhere"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cors_proxy  <span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">originWhitelist</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Allow all origins</span>    <span class="token literal-property property">requireHeader</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"origin"</span><span class="token punctuation">,</span> <span class="token string">"x-requested-with"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">removeHeaders</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"cookie"</span><span class="token punctuation">,</span> <span class="token string">"cookie2"</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> host<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Running CORS Anywhere on "</span> <span class="token operator">+</span> host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>前端代码</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  getlist<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:7777/http://127.0.0.1:8080/api/corslist"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:7777/http://127.0.0.1:8080/api/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>效果展示</strong></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/12.webp"></p><p><strong>缺点</strong></p><p>无法专递 cookie，原因是因为这个是一个代理库，作者觉得中间传递 cookie 太不安全了。<a href="https://github.com/Rob--W/cors-anywhere/issues/208%23issuecomment-575254153">https://github.com/Rob--W/cors-anywhere/issues/208#issuecomment-575254153</a></p><h3 id="c-charles"><a href="#c-charles" class="headerlink" title="c.charles"></a>c.charles</h3><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这是一个测试、开发的神器。<a href="https://juejin.im/post/5b8350b96fb9a019d9246c4c">介绍与使用</a></p><p>利用 charles 进行跨域，本质就是请求的拦截与代理。</p><p>在 <code>tools/map remote</code> 中设置代理</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/13.webp"></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/14.webp"></p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getlist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>获取列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/axios/0.19.2/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  getlist<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"秋风的笔记"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">expires</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>访问 http:&#x2F;&#x2F;localhost:8000&#x2F;charles</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/15.webp"></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/16.webp"></p><p>完美解决。</p><p>唔。这里又有一个注意点。在 <code>Mac mojave 10.14</code> 中会出现 <code>charles</code> 抓不到本地包的情况。这个时候需要自定义一个域名，然后配置<code>hosts</code>指定到<code>127.0.0.1</code>。然后修改访问方式 <code>http://localhost.charlesproxy.com:8000/charles</code>。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/17.webp"></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/18.webp"></p><h3 id="3-Nginx-反向代理"><a href="#3-Nginx-反向代理" class="headerlink" title="3.Nginx 反向代理"></a>3.Nginx 反向代理</h3><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Nginx 则是通过反向代理的方式，（这里也需要自定义一个域名）这里就是保证我当前域，能获取到静态资源和接口，不关心是怎么获取的。<a href="https://blog.csdn.net/diaojw090/article/details/89135073">nginx 安装教程</a></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/19.webp"></p><p>配置下 hosts</p><p><code>127.0.0.1 local.test</code></p><p>配置 nginx</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">server &#123;        listen 80;        server_name local.test;        location /api &#123;            proxy_pass http://localhost:8080;        &#125;        location / &#123;            proxy_pass http://localhost:8000;        &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 nginx</p><p><code>sudo nginx</code></p><p>重启 nginx</p><p><code>sudo nginx -s reload</code></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>前端代码</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  getlist<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  login<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/corslist"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"秋风的笔记"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token parameter">ctx</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  ctx<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">expires</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"成功"</span><span class="token punctuation">,</span>    <span class="token literal-property property">code</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>访问 <code>http://local.test/charles</code></p><p>浏览器显示</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/10-solutions-of-CORS-with-ultimate-solution/20.webpp"></p><h3 id="4-JSONP"><a href="#4-JSONP" class="headerlink" title="4.JSONP"></a>4.JSONP</h3><p><code>JSONP</code> 主要就是利用了 <code>script</code> 标签没有跨域限制的这个特性来完成的。</p><p><strong>使用限制</strong></p><p>仅支持 GET 方法，如果想使用完整的 REST 接口，请使用 CORS 或者其他代理方式。</p><p><strong>流程解析</strong></p><p>1.前端定义解析函数（例如 jsonpCallback&#x3D;function(){….}）</p><p>2.通过 params 形式包装请求参数，并且声明执行函数(例如 cb&#x3D;jsonpCallback)</p><p>3.后端获取前端声明的执行函数（jsonpCallback），并以带上参数并调用执行函数的方式传递给前端。</p><p><strong>使用示例</strong></p><p>后端实现</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/api/jsonp"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> cb<span class="token punctuation">,</span> msg <span class="token punctuation">&#125;</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>query<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>cb<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> msg <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>普通 js 示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">jsonpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/api/jsonp?msg=hello&amp;cb=jsonpCallback<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JQuery Ajax 示例</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.5.0/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080/api/jsonp"</span><span class="token punctuation">,</span>    <span class="token literal-property property">dataType</span><span class="token operator">:</span> <span class="token string">"jsonp"</span><span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">"hello"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">jsonp</span><span class="token operator">:</span> <span class="token string">"cb"</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原理解析</strong></p><p>其实这就是 js 的魔法</p><p>我们先来看最简单的 js 调用。嗯，很自然的调用。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">jsonpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token function">jsonpCallback</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们稍稍改造一下，外链的形式。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">jsonpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/api/a.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// http://localhost:8080/api/a.js jsonpCallback(&#123;a:1&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再改造一下，我们把这个外链的 js 就当做是一个动态的接口，因为本身资源和接口一样，是一个请求，也包含各种参数，也可以动态化返回。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">jsonpCallback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/api/a.js?a=123&amp;cb=sonpCallback<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// http://localhost:8080/api/a.js jsonpCallback(&#123;a:123&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你仔细品，细细品，是不是 jsonp 有的优势就是 script 加载 js 的优势，加载的方式只不过换了一种说法。这也告诉我们一个道理，很多东西并没有那么神奇，是在你所学的知识范围内。就好比，桃树和柳树，如果你把他们当成很大跨度的东西去记忆理解，那么世上这么多树，你真的要累死了，你把他们都当成是树，哦吼？你会突然发现，你对世界上所有的树都有所了解，他们都会长叶子，光合作用….当然也有个例，但是你只需要去记忆这些细微的差别，抓住主干。。。嗯，反正就这么个道理。</p><h3 id="5-Websocket"><a href="#5-Websocket" class="headerlink" title="5.Websocket"></a>5.Websocket</h3><p><a href="http://dev.w3.org/html5/websockets/">WebSocket</a> 规范定义了一种 API，可在网络浏览器和服务器之间建立“套接字”连接。简单地说：客户端和服务器之间存在持久的连接，而且双方都可以随时开始发送数据。详细教程可以看 <a href="https://www.html5rocks.com/zh/tutorials/websockets/basics/">https://www.html5rocks.com/zh/tutorials/websockets/basics/</a></p><p>这种方式本质没有使用了 HTTP 的响应头, 因此也没有跨域的限制，没有什么过多的解释直接上代码吧。</p><p>前端部分</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  socket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"秋风的笔记"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  socket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端部分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connection"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-window-postMessage"><a href="#6-window-postMessage" class="headerlink" title="6.window.postMessage"></a>6.window.postMessage</h3><p><strong>window.postMessage()</strong> 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为 https），端口号（443 为 https 的默认值），以及主机 (两个页面的模数 <code>Document.domain</code>设置为相同的值) 时，这两个脚本才能相互通信。<strong>window.postMessage()</strong> 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。</p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>1.页面和其打开的新窗口的数据传递</p><p>2.多窗口之间消息传递</p><p>3.页面与嵌套的 iframe 消息传递</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>详细用法看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage</a></p><p><code>otherWindow.postMessage(message, targetOrigin, [transfer]);</code></p><ul><li>otherWindow: 其他窗口的一个引用，比如 iframe 的 contentWindow 属性、执行<a href="https://developer.mozilla.org/en-US/docs/DOM/window.open">window.open</a>返回的窗口对象、或者是命名过或数值索引的<a href="https://developer.mozilla.org/en-US/docs/DOM/window.frames">window.frames</a>。</li><li>message: 将要发送到其他 window 的数据。</li><li>targetOrigin: 通过窗口的 origin 属性来指定哪些窗口能接收到消息事件.</li><li>transfer(可选) : 是一串和 message 同时传递的 <code>Transferable</code> 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>index.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080<span class="token punctuation">"</span></span>  <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"秋风的笔记"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>another.html</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 秋风的笔记</span>    e<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">,</span> e<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-document-domain-Iframe"><a href="#7-document-domain-Iframe" class="headerlink" title="7.document.domain + Iframe"></a>7.document.domain + Iframe</h3><p>从第 7 种到第 9 种方式，我觉得别人的写的已经很好了，为了完整性，我就拿别人的了。如有雷同….（不对，就是雷同….）不要说不出来。</p><p><strong>该方式只能用于二级域名相同的情况下，比如 <code>a.test.com</code> 和 <code>b.test.com</code> 适用于该方式</strong>。 只需要给页面添加 <code>document.domain =&#39;test.com&#39;</code> 表示二级域名都相同就可以实现跨域。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">www.   baidu.  com     <span class="token builtin class-name">.</span>三级域  二级域   顶级域   根域// a.test.com<span class="token operator">&lt;</span>body<span class="token operator">></span>  helloa  <span class="token operator">&lt;</span>iframe    <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"http://b.test.com/b.html"</span>    <span class="token assign-left variable">frameborder</span><span class="token operator">=</span><span class="token string">"0"</span>    <span class="token assign-left variable">onload</span><span class="token operator">=</span><span class="token string">"load()"</span>    <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">"frame"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/iframe<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    document.domain <span class="token operator">=</span> <span class="token string">"test.com"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-name function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console.log<span class="token punctuation">(</span>frame.contentWindow.a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span>// b.test.com<span class="token operator">&lt;</span>body<span class="token operator">></span>  hellob  <span class="token operator">&lt;</span>script<span class="token operator">></span>    document.domain <span class="token operator">=</span> <span class="token string">"test.com"</span><span class="token punctuation">;</span>    var a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-window-location-hash-Iframe"><a href="#8-window-location-hash-Iframe" class="headerlink" title="8.window.location.hash + Iframe"></a>8.window.location.hash + Iframe</h3><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>原理就是通过 url 带 hash ，通过一个非跨域的中间页面来传递数据。</p><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><p>一开始 a.html 给 c.html 传一个 hash 值，然后 c.html 收到 hash 值后，再把 hash 值传递给 b.html，最后 b.html 将结果放到 a.html 的 hash 值中。 同样的，a.html 和 b.htm l 是同域的，都是 <code>http://localhost:8000</code>，而 c.html 是<code>http://localhost:8080</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// a.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/hash/c.html#name1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  window<span class="token punctuation">.</span><span class="token function-variable function">onhashchange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// b.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>// c.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"iframe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:8000/hash/b.html#name2"</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-window-name-Iframe"><a href="#9-window-name-Iframe" class="headerlink" title="9.window.name + Iframe"></a>9.window.name + Iframe</h3><p>window 对象的 name 属性是一个很特别的属性，当该 window 的 location 变化，然后重新加载，它的 name 属性可以依然保持不变。</p><p>其中 a.html 和 b.html 是同域的，都是<code>http://localhost:8000</code>，而 c.html 是<code>http://localhost:8080</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// a.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/name/c.html<span class="token punctuation">"</span></span>  <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span>  <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 第1次onload(跨域页)成功后，切换到同域代理页面</span>      iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"http://localhost:8000/name/b.html"</span><span class="token punctuation">;</span>      first <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b.html 为中间代理页，与 a.html 同域，内容为空。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// b.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>// c.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"秋风的笔记"</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="10-浏览器开启跨域（终极方案）"><a href="#10-浏览器开启跨域（终极方案）" class="headerlink" title="10.浏览器开启跨域（终极方案）"></a>10.浏览器开启跨域（终极方案）</h3><p>其实讲下其实跨域问题是浏览器策略，源头是他，那么能否能关闭这个功能呢？</p><p>答案是肯定的。</p><p><strong>注意事项: 因为浏览器是众多 web 页面入口。我们是否也可以像客户端那种，就是用一个单独的专门宿主浏览器，来打开调试我们的开发页面。例如这里以 chrome canary 为例，这个是我专门调试页面的浏览器，不会用它来访问其他 web url。因此它也相对于安全一些。当然这个方式，只限于当你真的被跨域折磨地崩溃的时候才建议使用以下。使用后，请以正常的方式将他打开，以免你不小心用这个模式干了其他的事。</strong></p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">找到你安装的目录.\Google\Chrome\Application\chrome.exe --disable-web-security --user-data-dir=xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p><code>~/Downloads/chrome-data</code> 这个目录可以自定义.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">/Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary  --disable-web-security --user-data-dir=~/Downloads/chrome-data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="https://pic4.zhimg.com/80/v2-751a706cae2fc92d676cab27bad21503_1440w.webp"></p><p>嗯，使用起来很香，但是再次提醒，一般情况千万别轻易使用这个方式，这个方式好比七伤拳，使用的好威力无比，使用不好，很容易伤到自己。</p><h2 id="三、为什么需要跨域？"><a href="#三、为什么需要跨域？" class="headerlink" title="三、为什么需要跨域？"></a>三、为什么需要跨域？</h2><p>在最一开始，我们知道了，跨域只存在于浏览器端。而浏览器为 web 提供访问入口。我们在可以浏览器内打开很多页面。正是这样的开放形态，所以我们需要对他有所限制。就比如林子大了，什么鸟都有，我们需要有一个统一的规范来进行约定才能保障这个安全性。</p><h3 id="1-限制不同源的请求"><a href="#1-限制不同源的请求" class="headerlink" title="1.限制不同源的请求"></a>1.限制不同源的请求</h3><p>这里还是用最常用的方式来讲解，例如用户登录 a 网站，同时新开 tab 打开了 b 网站，如果不限制同源， b 可以像 a 网站发起任何请求，会让不法分子有机可趁。</p><h3 id="2-限制-dom-操作"><a href="#2-限制-dom-操作" class="headerlink" title="2.限制 dom 操作"></a>2.限制 dom 操作</h3><p>我举个例子吧, 你先登录下 <a href="http://www.baidu.com/">http://www.baidu.com</a> ,然后访问我这个网址。</p><p><a href="https://zerolty.com/node-demo/index.html">https://zerolty.com/node-demo/index.html</a></p><p><img src="https://pic3.zhimg.com/80/v2-422415a3e221c8c7472f57470d8a8306_1440w.webp"></p><p>你会发现，这个和真实的百度一模一样，如果再把域名搞的相似一些，是不是很容易被骗，如果可以进行 dom 操作…那么大家的信息在这种钓鱼网站眼里都是一颗颗小白菜，等着被收割。</p><blockquote><p>可以在 http 返回头 添加<code>X-Frame-Options: SAMEORIGIN</code> 防止被别人添加至 iframe。</p></blockquote><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以上最常用的就是前 4 种方式，特别是第 2 种非常常见，我里面也提到了多种示例，大家可以慢慢消化一下。希望未来有更加安全的方式来限制 web ，解决跨域的头疼，哈哈哈哈。</p><p><strong>有一个不成熟的想法，可以搞这么一个浏览器，只让访问内网&#x2F;本地网络，专门给开发者用来调试页面用，对于静态资源可以配置白名单，这样是不是就没有跨域问题了，23333。上述如有错误，请第一时间指出，我会进行修改，以免给大家来误导。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/12296910/so-jsonp-or-cors">https://stackoverflow.com/questions/12296910/so-jsonp-or-cors</a></p><p><a href="https://juejin.im/post/5c23993de51d457b8c1f4ee1%23heading-18">https://juejin.im/post/5c23993de51d457b8c1f4ee1#heading-18</a></p><p><a href="https://juejin.im/post/5a6320d56fb9a01cb64ee191">https://juejin.im/post/5a6320d56fb9a01cb64ee191</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">https://developer.mozilla.org/z</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS选择器大全</title>
      <link href="/2024/01/04/css-xuan-ze-qi-da-quan/"/>
      <url>/2024/01/04/css-xuan-ze-qi-da-quan/</url>
      
        <content type="html"><![CDATA[<p>CSS（层叠样式表）提供了多种选择器，用于选择要应用样式的 HTML 元素。</p><p>CSS 选择器用于选择你想要的元素的样式的模式。</p><p>下列表格中的 “CSS” 列表示在 CSS 版本的属性定义，CSS1、CSS2 和 CSS3 是层叠样式表（Cascading Style Sheets）的不同版本，每个版本引入了新的特性和功能，以改进网页样式的控制和设计。</p><h3 id="常见的-CSS-选择器"><a href="#常见的-CSS-选择器" class="headerlink" title="常见的 CSS 选择器"></a>常见的 CSS 选择器</h3><p>下是一些常见的 CSS 选择器：</p><p><strong>元素选择器（Element Selector）：</strong>通过元素名称选择 HTML 元素。</p><p>如下代码，p 选择器将选择所有 <strong>&lt;p&gt;</strong> 元素:</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">p &#123;  color: blue;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>类选择器（Class Selector）：</strong>通过类别名称选择具有特定类别的 HTML 元素。</p><p>类选择器以 . 开头，后面跟着类别名称。</p><p>如下代码，.highlight 选择器将选择所有具有类别为 <strong>“highlight”</strong> 的元素。</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">.highlight &#123;  background-color: yellow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>ID 选择器（ID Selector）：</strong>通过元素的唯一标识符（ID）选择 HTML 元素。</p><p>ID 选择器以 # 开头，后面跟着 ID 名称。</p><p>如下代码，#runoob 选择器将选择具有 ID 为 <strong>“runoob”</strong> 的元素。</p><pre class="line-numbers language-none"><code class="language-none">#runoob &#123;  width: 200px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>属性选择器（Attribute Selector）：</strong>通过元素的属性选择 HTML 元素。属性选择器可以根据属性名和属性值进行选择。</p><p>如下代码，input[type&#x3D;”text”] 选择器将选择所有 <strong>type</strong> 属性为 <strong>“text”</strong> 的 &lt;input&gt; 元素。</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">input[type&#x3D;&quot;text&quot;] &#123;  border: 1px solid gray;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>后代选择器（Descendant Selector）：</strong>通过指定元素的后代关系选择 HTML 元素。</p><p>后代选择器使用空格分隔元素名称。</p><p>如下代码，div p 选择器将选择所有在 &lt;div&gt; 元素内的 &lt;p&gt; 元素。</p><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">div p &#123;  font-weight: bold;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更多选择器参考下列表格：</p><table><thead><tr><th>选择器</th><th>示例</th><th>示例说明</th><th>CSS</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cssref/sel-class.html">.<em>class</em></a></td><td>.intro</td><td>选择所有class&#x3D;”intro”的元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-id.html">#<em>id</em></a></td><td>#firstname</td><td>选择所有id&#x3D;”firstname”的元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-all.html">*</a></td><td>*</td><td>选择所有元素</td><td>2</td></tr><tr><td><em><a href="https://www.runoob.com/cssref/sel-element.html">element</a></em></td><td>p</td><td>选择所有&lt;p&gt;元素</td><td>1</td></tr><tr><td><em><a href="https://www.runoob.com/cssref/sel-element-comma.html">element,element</a></em></td><td>div,p</td><td>选择所有&lt;div&gt;元素和 &lt;p&gt; 元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-element-class.html">element_.class_</a></td><td>p.hometown</td><td>选择所有 class&#x3D;”hometown” 的 &lt;p&gt; 元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-element-element.html"><em>element</em> <em>element</em></a></td><td>div p</td><td>选择&lt;div&gt;元素内的所有&lt;p&gt;元素</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-element-gt.html"><em>element</em>&gt;<em>element</em></a></td><td>div&gt;p</td><td>选择所有父级是 &lt;div&gt; 元素的 &lt;p&gt; 元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-element-pluss.html"><em>element</em>+<em>element</em></a></td><td>div+p</td><td>选择所有紧跟在 &lt;div&gt; 元素之后的第一个 &lt;p&gt; 元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attribute.html">[<em>attribute</em>]</a></td><td>[target]</td><td>选择所有带有target属性元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attribute-value.html">[<em>attribute</em>&#x3D;<em>value</em>]</a></td><td>[target&#x3D;-blank]</td><td>选择所有使用target&#x3D;”-blank”的元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attribute-value-contains.html">[_attribute_~&#x3D;<em>value</em>]</a></td><td>[title~&#x3D;flower]</td><td>选择标题属性包含单词”flower”的所有元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attribute-value-lang.html">[<em>attribute</em>|&#x3D;<em>language</em>]</a></td><td>[lang|&#x3D;en]</td><td>选择 lang 属性等于 en，或者以 en- 为开头的所有元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-link.html">:link</a></td><td>a:link</td><td>选择所有未访问链接</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-visited.html">:visited</a></td><td>a:visited</td><td>选择所有访问过的链接</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-active.html">:active</a></td><td>a:active</td><td>选择活动链接</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-hover.html">:hover</a></td><td>a:hover</td><td>选择鼠标在链接上面时</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-focus.html">:focus</a></td><td>input:focus</td><td>选择具有焦点的输入元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstletter.html">:first-letter</a></td><td>p:first-letter</td><td>选择每一个&lt;p&gt;元素的第一个字母</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstline.html">:first-line</a></td><td>p:first-line</td><td>选择每一个&lt;p&gt;元素的第一行</td><td>1</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-firstchild.html">:first-child</a></td><td>p:first-child</td><td>指定只有当&lt;p&gt;元素是其父级的第一个子级的样式。</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-before.html">:before</a></td><td>p:before</td><td>在每个&lt;p&gt;元素之前插入内容</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-after.html">:after</a></td><td>p:after</td><td>在每个&lt;p&gt;元素之后插入内容</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-lang.html">:lang(<em>language</em>)</a></td><td>p:lang(it)</td><td>选择一个lang属性的起始值&#x3D;”it”的所有&lt;p&gt;元素</td><td>2</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-gen-sibling.html">_element1_~<em>element2</em></a></td><td>p~ul</td><td>选择p元素之后的每一个ul元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attr-begin.html">[_attribute_^&#x3D;<em>value</em>]</a></td><td>a[src^&#x3D;”https”]</td><td>选择每一个src属性的值以”https”开头的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attr-end.html">[<em>attribute</em>$&#x3D;<em>value</em>]</a></td><td>a[src$&#x3D;”.pdf”]</td><td>选择每一个src属性的值以”.pdf”结尾的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-attr-contain.html">[<em>attribute</em>*&#x3D;<em>value</em>]</a></td><td>a[src*&#x3D;”runoob”]</td><td>选择每一个src属性的值包含子字符串”runoob”的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-first-of-type.html">:first-of-type</a></td><td>p:first-of-type</td><td>选择每个p元素是其父级的第一个p元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-last-of-type.html">:last-of-type</a></td><td>p:last-of-type</td><td>选择每个p元素是其父级的最后一个p元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-only-of-type.html">:only-of-type</a></td><td>p:only-of-type</td><td>选择每个p元素是其父级的唯一p元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-only-child.html">:only-child</a></td><td>p:only-child</td><td>选择每个p元素是其父级的唯一子元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-child.html">:nth-child(<em>n</em>)</a></td><td>p:nth-child(2)</td><td>选择每个p元素是其父级的第二个子元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-last-child.html">:nth-last-child(<em>n</em>)</a></td><td>p:nth-last-child(2)</td><td>选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-of-type.html">:nth-of-type(<em>n</em>)</a></td><td>p:nth-of-type(2)</td><td>选择每个p元素是其父级的第二个p元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-nth-last-of-type.html">:nth-last-of-type(<em>n</em>)</a></td><td>p:nth-last-of-type(2)</td><td>选择每个p元素的是其父级的第二个p元素，从最后一个子项计数</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-last-child.html">:last-child</a></td><td>p:last-child</td><td>选择每个p元素是其父级的最后一个子级。</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-root.html">:root</a></td><td>:root</td><td>选择文档的根元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-empty.html">:empty</a></td><td>p:empty</td><td>选择每个没有任何子级的p元素（包括文本节点）</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-target.html">:target</a></td><td>#news:target</td><td>选择当前活动的#news元素（包含该锚名称的点击的URL）</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-enabled.html">:enabled</a></td><td>input:enabled</td><td>选择每一个已启用的输入元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-disabled.html">:disabled</a></td><td>input:disabled</td><td>选择每一个禁用的输入元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-checked.html">:checked</a></td><td>input:checked</td><td>选择每个选中的输入元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-not.html">:not(https://www.runoob.com/cssref/<em>selector</em>)</a></td><td>:not(p)</td><td>选择每个并非p元素的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-selection.html">::selection</a></td><td>::selection</td><td>匹配元素中被用户选中或处于高亮状态的部分</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-out-of-range.html">:out-of-range</a></td><td>:out-of-range</td><td>匹配值在指定区间之外的input元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-in-range.html">:in-range</a></td><td>:in-range</td><td>匹配值在指定区间之内的input元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-read-write.html">:read-write</a></td><td>:read-write</td><td>用于匹配可读及可写的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-read-only.html">:read-only</a></td><td>:read-only</td><td>用于匹配设置 “readonly”（只读） 属性的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-optional.html">:optional</a></td><td>:optional</td><td>用于匹配可选的输入元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-required.html">:required</a></td><td>:required</td><td>用于匹配设置了 “required” 属性的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-valid.html">:valid</a></td><td>:valid</td><td>用于匹配输入值为合法的元素</td><td>3</td></tr><tr><td><a href="https://www.runoob.com/cssref/sel-invalid.html">:invalid</a></td><td>:invalid</td><td>用于匹配输入值为非法的元素</td><td>3</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome开发者工具各种骚技巧</title>
      <link href="/2023/12/29/chrome-kai-fa-zhe-gong-ju-ge-chong-sao-ji-qiao/"/>
      <url>/2023/12/29/chrome-kai-fa-zhe-gong-ju-ge-chong-sao-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h2 id="chrome开发者工具各种骚技巧"><a href="#chrome开发者工具各种骚技巧" class="headerlink" title="chrome开发者工具各种骚技巧"></a>chrome开发者工具各种骚技巧</h2><p><a href="https://umaar.com/dev-tips/">原文</a><br><a href="https://juejin.cn/post/6844903604839514125">原文</a></p><h3 id="1-曾经，在线调伪类样式困扰过你？"><a href="#1-曾经，在线调伪类样式困扰过你？" class="headerlink" title="1.曾经，在线调伪类样式困扰过你？"></a>1.曾经，在线调伪类样式困扰过你？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/1.gif"></p><h3 id="2-源代码快速定位到某一行！ctrl-p"><a href="#2-源代码快速定位到某一行！ctrl-p" class="headerlink" title="2.源代码快速定位到某一行！ctrl + p"></a>2.源代码快速定位到某一行！ctrl + p</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/2.gif"></p><h3 id="3-联调接口失败时，后台老哥总管你要response？"><a href="#3-联调接口失败时，后台老哥总管你要response？" class="headerlink" title="3.联调接口失败时，后台老哥总管你要response？"></a>3.联调接口失败时，后台老哥总管你要response？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/3.gif"></p><h3 id="4-你还一层层展开dom？Alt-Click"><a href="#4-你还一层层展开dom？Alt-Click" class="headerlink" title="4.你还一层层展开dom？Alt + Click"></a>4.你还一层层展开dom？Alt + Click</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/4.gif"></p><h3 id="5-是不是报错了，你才去打断点？"><a href="#5-是不是报错了，你才去打断点？" class="headerlink" title="5.是不是报错了，你才去打断点？"></a>5.是不是报错了，你才去打断点？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/5.gif"></p><h3 id="6-你是不是经常想不起来，在哪绑定事件的？"><a href="#6-你是不是经常想不起来，在哪绑定事件的？" class="headerlink" title="6.你是不是经常想不起来，在哪绑定事件的？"></a>6.你是不是经常想不起来，在哪绑定事件的？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/6.gif"></p><h3 id="7-你是不是打断点时还要去改代码？"><a href="#7-你是不是打断点时还要去改代码？" class="headerlink" title="7.你是不是打断点时还要去改代码？"></a>7.你是不是打断点时还要去改代码？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/7.gif"></p><h3 id="8-看dom层级的最直观的方式？"><a href="#8-看dom层级的最直观的方式？" class="headerlink" title="8.看dom层级的最直观的方式？"></a>8.看dom层级的最直观的方式？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/8.gif"></p><h3 id="9-查一些特定的请求，过滤器用过吗？"><a href="#9-查一些特定的请求，过滤器用过吗？" class="headerlink" title="9.查一些特定的请求，过滤器用过吗？"></a>9.查一些特定的请求，过滤器用过吗？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/9.gif"></p><h3 id="10-在Elements面板调整dom结构很不方便？"><a href="#10-在Elements面板调整dom结构很不方便？" class="headerlink" title="10.在Elements面板调整dom结构很不方便？"></a>10.在Elements面板调整dom结构很不方便？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/10.gif"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="11-想知道，某图片加载的代码在哪？Initiator！！"><a href="#11-想知道，某图片加载的代码在哪？Initiator！！" class="headerlink" title="11.想知道，某图片加载的代码在哪？Initiator！！"></a>11.想知道，某图片加载的代码在哪？Initiator！！</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/11.gif"></p><h3 id="12-不想加载某个文件了？"><a href="#12-不想加载某个文件了？" class="headerlink" title="12.不想加载某个文件了？"></a>12.不想加载某个文件了？</h3><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/chrome-f12-skills/12.gif"></p><p>多的就不列举了，可以看看开头的网站。看了有几个功能我电脑（win10）是没有的，应该跟chrome版本有关。</p><p>开发者工具的功能确实挺多，多得有时根本用不上，官网教程建议每个前端人员都看看：</p><p><a href="https://developers.google.com/web/tools/chrome-devtools/">developers.google.com&#x2F;web&#x2F;tools&#x2F;c…</a></p><p>中文版：</p><p><a href="http://www.css88.com/doc/chrome-devtools/">www.css88.com/doc/chrome-…</a></p><p>=&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>补充：</p><p>见评论中多人问gif制作软件是什么。</p><p>搜索了一下，应该是<a href="https://www.techsmith.com/">www.techsmith.com/</a>，看着说明，表示软件太专业。。</p><p>但我用过两个小软件很不错，非常容易上手：</p><ul><li>录屏：<a href="https://www.cockos.com/licecap/">www.cockos.com/licecap/</a></li><li>屏幕放大：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/zoomit">docs.microsoft.com&#x2F;zh-cn&#x2F;sysin…</a></li></ul><p>本文完。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你未必知道的个CSS知识点(全)</title>
      <link href="/2023/12/28/ni-wei-bi-zhi-dao-de-ge-css-zhi-shi-dian-quan/"/>
      <url>/2023/12/28/ni-wei-bi-zhi-dao-de-ge-css-zhi-shi-dian-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="你未必知道的个CSS知识点-全"><a href="#你未必知道的个CSS知识点-全" class="headerlink" title="你未必知道的个CSS知识点(全)"></a>你未必知道的个CSS知识点(全)</h2><p><a href="https://juejin.cn/post/6844903902123393032">原文1</a><br><a href="https://juejin.cn/post/6844903960386469895">原文2</a><br>原文作者：<a href="https://juejin.cn/user/78820536232855">老姚</a></p><p>第一季：</p><h2 id="CSS技巧篇"><a href="#CSS技巧篇" class="headerlink" title="CSS技巧篇"></a>CSS技巧篇</h2><h4 id="01-【负边距】💘负边距的效果。注意左右负边距表现并不一致。左为负时，是左移，右为负时，是左拉。上下与左右类似"><a href="#01-【负边距】💘负边距的效果。注意左右负边距表现并不一致。左为负时，是左移，右为负时，是左拉。上下与左右类似" class="headerlink" title="01.【负边距】💘负边距的效果。注意左右负边距表现并不一致。左为负时，是左移，右为负时，是左拉。上下与左右类似"></a>01.【负边距】💘负边距的效果。注意左右负边距表现并不一致。左为负时，是左移，右为负时，是左拉。上下与左右类似</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/1.gif"></p><h4 id="02-【shape-outside】❤不要自以为是了。你以为自己是方的，在别人眼里你却是圆的"><a href="#02-【shape-outside】❤不要自以为是了。你以为自己是方的，在别人眼里你却是圆的" class="headerlink" title="02.【shape-outside】❤不要自以为是了。你以为自己是方的，在别人眼里你却是圆的"></a>02.【shape-outside】❤不要自以为是了。你以为自己是方的，在别人眼里你却是圆的</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/2.gif"></p><h4 id="03-【BFC应用】💓BFC应用之阻止外边距合并（margin-collapsing）"><a href="#03-【BFC应用】💓BFC应用之阻止外边距合并（margin-collapsing）" class="headerlink" title="03.【BFC应用】💓BFC应用之阻止外边距合并（margin collapsing）"></a>03.【BFC应用】💓BFC应用之阻止外边距合并（margin collapsing）</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/3.gif"></p><h4 id="04-【BFC应用】💔BFC应用之消除浮动的影响"><a href="#04-【BFC应用】💔BFC应用之消除浮动的影响" class="headerlink" title="04.【BFC应用】💔BFC应用之消除浮动的影响"></a>04.【BFC应用】💔BFC应用之消除浮动的影响</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/4.gif"></p><h4 id="05-【flex不为人知的特性之一】💕flex布局下margin-auto的神奇用法"><a href="#05-【flex不为人知的特性之一】💕flex布局下margin-auto的神奇用法" class="headerlink" title="05.【flex不为人知的特性之一】💕flex布局下margin:auto的神奇用法"></a>05.【flex不为人知的特性之一】💕flex布局下margin:auto的神奇用法</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/5.gif"></p><h4 id="06-【flex不为人知的特性之二】💖flex布局，当flex-grow之和小于1时，只能按比例分配部分剩余空间，而不是全部"><a href="#06-【flex不为人知的特性之二】💖flex布局，当flex-grow之和小于1时，只能按比例分配部分剩余空间，而不是全部" class="headerlink" title="06.【flex不为人知的特性之二】💖flex布局，当flex-grow之和小于1时，只能按比例分配部分剩余空间，而不是全部"></a>06.【flex不为人知的特性之二】💖flex布局，当flex-grow之和小于1时，只能按比例分配部分剩余空间，而不是全部</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/6.gif"></p><h4 id="07-【input的宽度】💗并不是给元素设置display-block就会自动填充父元素宽度。input-就是个例外，其默认宽度取决于size特性的值"><a href="#07-【input的宽度】💗并不是给元素设置display-block就会自动填充父元素宽度。input-就是个例外，其默认宽度取决于size特性的值" class="headerlink" title="07.【input的宽度】💗并不是给元素设置display:block就会自动填充父元素宽度。input 就是个例外，其默认宽度取决于size特性的值"></a>07.【input的宽度】💗并不是给元素设置display:block就会自动填充父元素宽度。input 就是个例外，其默认宽度取决于size特性的值</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/7.gif"></p><h4 id="08-【定位特性】💙绝对定位和固定定位时，同时设置-left-和-right-等同于隐式地设置宽度"><a href="#08-【定位特性】💙绝对定位和固定定位时，同时设置-left-和-right-等同于隐式地设置宽度" class="headerlink" title="08.【定位特性】💙绝对定位和固定定位时，同时设置 left 和 right 等同于隐式地设置宽度"></a>08.【定位特性】💙绝对定位和固定定位时，同时设置 left 和 right 等同于隐式地设置宽度</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/8.gif"></p><h4 id="09-【层叠上下文】💚层叠上下文：小辈就是小辈，再厉害也只是个小辈"><a href="#09-【层叠上下文】💚层叠上下文：小辈就是小辈，再厉害也只是个小辈" class="headerlink" title="09.【层叠上下文】💚层叠上下文：小辈就是小辈，再厉害也只是个小辈"></a>09.【层叠上下文】💚层叠上下文：小辈就是小辈，再厉害也只是个小辈</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/9.gif"></p><h4 id="10-【粘性定位】💛position-sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美"><a href="#10-【粘性定位】💛position-sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美" class="headerlink" title="10.【粘性定位】💛position:sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美"></a>10.【粘性定位】💛position:sticky，粘性定位要起作用，需要设置最后滞留位置。chrome有bug，firefox完美</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/10.gif"></p><h4 id="11-【相邻兄弟选择器】💜相邻兄弟选择器之常用场景"><a href="#11-【相邻兄弟选择器】💜相邻兄弟选择器之常用场景" class="headerlink" title="11.【相邻兄弟选择器】💜相邻兄弟选择器之常用场景"></a>11.【相邻兄弟选择器】💜相邻兄弟选择器之常用场景</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/11.gif"></p><h4 id="12-【模态框】🖤要使模态框背景透明，用rgba是一种简单方式"><a href="#12-【模态框】🖤要使模态框背景透明，用rgba是一种简单方式" class="headerlink" title="12.【模态框】🖤要使模态框背景透明，用rgba是一种简单方式"></a>12.【模态框】🖤要使模态框背景透明，用rgba是一种简单方式</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/12.gif"></p><h4 id="13-【三角形】💝css绘制三角形的原理"><a href="#13-【三角形】💝css绘制三角形的原理" class="headerlink" title="13.【三角形】💝css绘制三角形的原理"></a>13.【三角形】💝css绘制三角形的原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/13.gif"></p><h4 id="14-【table布局】💞display-table实现多列等高布局"><a href="#14-【table布局】💞display-table实现多列等高布局" class="headerlink" title="14.【table布局】💞display:table实现多列等高布局"></a>14.【table布局】💞display:table实现多列等高布局</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/14.gif"></p><h4 id="15-【颜色对比度】❣蓝底红字，由于颜色对比度比较低，故而看不清，因此不是好的配色方案😂"><a href="#15-【颜色对比度】❣蓝底红字，由于颜色对比度比较低，故而看不清，因此不是好的配色方案😂" class="headerlink" title="15.【颜色对比度】❣蓝底红字，由于颜色对比度比较低，故而看不清，因此不是好的配色方案😂"></a>15.【颜色对比度】❣蓝底红字，由于颜色对比度比较低，故而看不清，因此不是好的配色方案😂</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/15.gif"></p><h4 id="16-【定宽高比】♥css实现定宽高比的原理：padding的百分比是相对于其包含块的宽度，而不是高度"><a href="#16-【定宽高比】♥css实现定宽高比的原理：padding的百分比是相对于其包含块的宽度，而不是高度" class="headerlink" title="16.【定宽高比】♥css实现定宽高比的原理：padding的百分比是相对于其包含块的宽度，而不是高度"></a>16.【定宽高比】♥css实现定宽高比的原理：padding的百分比是相对于其包含块的宽度，而不是高度</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/16.gif"></p><h4 id="17-【动画方向】🐹动画方向可以选择alternate，去回交替进行"><a href="#17-【动画方向】🐹动画方向可以选择alternate，去回交替进行" class="headerlink" title="17.【动画方向】🐹动画方向可以选择alternate，去回交替进行"></a>17.【动画方向】🐹动画方向可以选择alternate，去回交替进行</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/17.gif"></p><h4 id="18-【线性渐变应用】🐮css绘制彩带的原理"><a href="#18-【线性渐变应用】🐮css绘制彩带的原理" class="headerlink" title="18.【线性渐变应用】🐮css绘制彩带的原理"></a>18.【线性渐变应用】🐮css绘制彩带的原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/18.gif"></p><h4 id="19-【隐藏文本】🐯隐藏文字内容的两种办法"><a href="#19-【隐藏文本】🐯隐藏文字内容的两种办法" class="headerlink" title="19.【隐藏文本】🐯隐藏文字内容的两种办法"></a>19.【隐藏文本】🐯隐藏文字内容的两种办法</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/19.gif"></p><h4 id="20-【居中】🐰实现居中的一种简单方式"><a href="#20-【居中】🐰实现居中的一种简单方式" class="headerlink" title="20.【居中】🐰实现居中的一种简单方式"></a>20.【居中】🐰实现居中的一种简单方式</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/20.gif"></p><h4 id="21-【角向渐变】🐲新的渐变：角向渐变。可以用来实现饼图"><a href="#21-【角向渐变】🐲新的渐变：角向渐变。可以用来实现饼图" class="headerlink" title="21.【角向渐变】🐲新的渐变：角向渐变。可以用来实现饼图"></a>21.【角向渐变】🐲新的渐变：角向渐变。可以用来实现饼图</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/21.gif"></p><h4 id="22-【背景位置百分比】🐍background-position百分比的正确理解方式：图片自身的百分比位置与容器同样的百分比位置重合"><a href="#22-【背景位置百分比】🐍background-position百分比的正确理解方式：图片自身的百分比位置与容器同样的百分比位置重合" class="headerlink" title="22.【背景位置百分比】🐍background-position百分比的正确理解方式：图片自身的百分比位置与容器同样的百分比位置重合"></a>22.【背景位置百分比】🐍background-position百分比的正确理解方式：图片自身的百分比位置与容器同样的百分比位置重合</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/22.gif"></p><h4 id="23-【背景重复新值】🐴background-repeat新属性值：round和space。前者表示凑个整，后者表示留点缝"><a href="#23-【背景重复新值】🐴background-repeat新属性值：round和space。前者表示凑个整，后者表示留点缝" class="headerlink" title="23.【背景重复新值】🐴background-repeat新属性值：round和space。前者表示凑个整，后者表示留点缝"></a>23.【背景重复新值】🐴background-repeat新属性值：round和space。前者表示凑个整，后者表示留点缝</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/23.gif"></p><h4 id="24-【背景附着】🐐background-attachment指定背景如何附着在容器上，注意其属性值local和fixed的使用"><a href="#24-【背景附着】🐐background-attachment指定背景如何附着在容器上，注意其属性值local和fixed的使用" class="headerlink" title="24.【背景附着】🐐background-attachment指定背景如何附着在容器上，注意其属性值local和fixed的使用"></a>24.【背景附着】🐐background-attachment指定背景如何附着在容器上，注意其属性值local和fixed的使用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/24.gif"></p><h4 id="25-【动画延时】🐵动画添加延迟时间可以使步调不一致"><a href="#25-【动画延时】🐵动画添加延迟时间可以使步调不一致" class="headerlink" title="25.【动画延时】🐵动画添加延迟时间可以使步调不一致"></a>25.【动画延时】🐵动画添加延迟时间可以使步调不一致</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/25.gif"></p><h4 id="26-【outline使用】🐔可以使用outline来描边，不占地方，它甚至可以在里面"><a href="#26-【outline使用】🐔可以使用outline来描边，不占地方，它甚至可以在里面" class="headerlink" title="26.【outline使用】🐔可以使用outline来描边，不占地方，它甚至可以在里面"></a>26.【outline使用】🐔可以使用outline来描边，不占地方，它甚至可以在里面</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/26.gif"></p><h4 id="27【背景定位】🐶当固定背景不随元素滚动时，背景定位是相对于视口的"><a href="#27【背景定位】🐶当固定背景不随元素滚动时，背景定位是相对于视口的" class="headerlink" title="27【背景定位】🐶当固定背景不随元素滚动时，背景定位是相对于视口的"></a>27【背景定位】🐶当固定背景不随元素滚动时，背景定位是相对于视口的</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/27.gif"></p><h4 id="28【tab-size】🐷浏览器默认显示tab为8个空格，tab-size可以指定空格长度"><a href="#28【tab-size】🐷浏览器默认显示tab为8个空格，tab-size可以指定空格长度" class="headerlink" title="28【tab-size】🐷浏览器默认显示tab为8个空格，tab-size可以指定空格长度"></a>28【tab-size】🐷浏览器默认显示tab为8个空格，tab-size可以指定空格长度</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/28.gif"></p><h4 id="29【动画暂停】🥝CSS动画其实是可以暂停的"><a href="#29【动画暂停】🥝CSS动画其实是可以暂停的" class="headerlink" title="29【动画暂停】🥝CSS动画其实是可以暂停的"></a>29【动画暂停】🥝CSS动画其实是可以暂停的</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/29.gif"></p><h4 id="30【object-fit】🍓图片在指定尺寸后，可以设置object-fit为contain或cover保持比例"><a href="#30【object-fit】🍓图片在指定尺寸后，可以设置object-fit为contain或cover保持比例" class="headerlink" title="30【object-fit】🍓图片在指定尺寸后，可以设置object-fit为contain或cover保持比例"></a>30【object-fit】🍓图片在指定尺寸后，可以设置object-fit为contain或cover保持比例</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/30.gif"></p><h4 id="31【鼠标状态】🍒按钮禁用时，不要忘了设置鼠标状态"><a href="#31【鼠标状态】🍒按钮禁用时，不要忘了设置鼠标状态" class="headerlink" title="31【鼠标状态】🍒按钮禁用时，不要忘了设置鼠标状态"></a>31【鼠标状态】🍒按钮禁用时，不要忘了设置鼠标状态</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/31.gif"></p><h4 id="32【背景虚化】🍑使用CSS滤镜实现背景虚化"><a href="#32【背景虚化】🍑使用CSS滤镜实现背景虚化" class="headerlink" title="32【背景虚化】🍑使用CSS滤镜实现背景虚化"></a>32【背景虚化】🍑使用CSS滤镜实现背景虚化</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/32.gif"></p><h4 id="33【fill-available】🍏设置宽度为fill-available，可以使inline-block像block那样填充整个空间"><a href="#33【fill-available】🍏设置宽度为fill-available，可以使inline-block像block那样填充整个空间" class="headerlink" title="33【fill-available】🍏设置宽度为fill-available，可以使inline-block像block那样填充整个空间"></a>33【fill-available】🍏设置宽度为fill-available，可以使inline-block像block那样填充整个空间</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/33.gif"></p><h4 id="34【fit-content】🍎设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果"><a href="#34【fit-content】🍎设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果" class="headerlink" title="34【fit-content】🍎设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果"></a>34【fit-content】🍎设置宽度为fit-content，可以使block像inline-block那样实现收缩宽度包裹内容的效果</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/34.gif"></p><h4 id="35【自定义属性】🍋CSS自定义属性的简单使用"><a href="#35【自定义属性】🍋CSS自定义属性的简单使用" class="headerlink" title="35【自定义属性】🍋CSS自定义属性的简单使用"></a>35【自定义属性】🍋CSS自定义属性的简单使用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/35.gif"></p><h4 id="36【min-content-max-content】🍍可以设置宽度为min-content和max-content，前者让内容尽可能地收缩，后者让内容尽可能地展开"><a href="#36【min-content-max-content】🍍可以设置宽度为min-content和max-content，前者让内容尽可能地收缩，后者让内容尽可能地展开" class="headerlink" title="36【min-content&#x2F;max-content】🍍可以设置宽度为min-content和max-content，前者让内容尽可能地收缩，后者让内容尽可能地展开"></a>36【min-content&#x2F;max-content】🍍可以设置宽度为min-content和max-content，前者让内容尽可能地收缩，后者让内容尽可能地展开</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/36.gif"></p><h4 id="37【进度条】🍊使用渐变，一个div实现进度条"><a href="#37【进度条】🍊使用渐变，一个div实现进度条" class="headerlink" title="37【进度条】🍊使用渐变，一个div实现进度条"></a>37【进度条】🍊使用渐变，一个div实现进度条</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/37.gif"></p><h4 id="38【打印】🍉可以在打印网页时，设置page相关属性。比如page-break-before属性来表示是否需要另起新页"><a href="#38【打印】🍉可以在打印网页时，设置page相关属性。比如page-break-before属性来表示是否需要另起新页" class="headerlink" title="38【打印】🍉可以在打印网页时，设置page相关属性。比如page-break-before属性来表示是否需要另起新页"></a>38【打印】🍉可以在打印网页时，设置page相关属性。比如page-break-before属性来表示是否需要另起新页</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/38.gif"></p><h4 id="39【逐帧动画】🍌利用CSS精灵实现逐帧动画"><a href="#39【逐帧动画】🍌利用CSS精灵实现逐帧动画" class="headerlink" title="39【逐帧动画】🍌利用CSS精灵实现逐帧动画"></a>39【逐帧动画】🍌利用CSS精灵实现逐帧动画</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/39.gif"></p><h4 id="40【resize】🍐普通元素也可以像textarea那样resize"><a href="#40【resize】🍐普通元素也可以像textarea那样resize" class="headerlink" title="40【resize】🍐普通元素也可以像textarea那样resize"></a>40【resize】🍐普通元素也可以像textarea那样resize</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/40.gif"></p><h4 id="41【面包屑】🍇使用before伪元素实现面包屑"><a href="#41【面包屑】🍇使用before伪元素实现面包屑" class="headerlink" title="41【面包屑】🍇使用before伪元素实现面包屑"></a>41【面包屑】🍇使用before伪元素实现面包屑</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/41.gif"></p><h4 id="42【sticky-footer】🍈使用grid布局实现sticky-footer"><a href="#42【sticky-footer】🍈使用grid布局实现sticky-footer" class="headerlink" title="42【sticky footer】🍈使用grid布局实现sticky footer"></a>42【sticky footer】🍈使用grid布局实现sticky footer</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/42.gif"></p><h4 id="43【动画填充状态】🍅CSS可以设置动画开始前和结束时所保持的状态"><a href="#43【动画填充状态】🍅CSS可以设置动画开始前和结束时所保持的状态" class="headerlink" title="43【动画填充状态】🍅CSS可以设置动画开始前和结束时所保持的状态"></a>43【动画填充状态】🍅CSS可以设置动画开始前和结束时所保持的状态</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/43.gif"></p><h4 id="44【动画负延迟】🥑CSS动画可以设置延迟时间为负数，表示动画仿佛开始前就已经运行过了那么长时间"><a href="#44【动画负延迟】🥑CSS动画可以设置延迟时间为负数，表示动画仿佛开始前就已经运行过了那么长时间" class="headerlink" title="44【动画负延迟】🥑CSS动画可以设置延迟时间为负数，表示动画仿佛开始前就已经运行过了那么长时间"></a>44【动画负延迟】🥑CSS动画可以设置延迟时间为负数，表示动画仿佛开始前就已经运行过了那么长时间</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/44.gif"></p><h4 id="45【过渡】🍆爱的魔力转圈圈"><a href="#45【过渡】🍆爱的魔力转圈圈" class="headerlink" title="45【过渡】🍆爱的魔力转圈圈"></a>45【过渡】🍆爱的魔力转圈圈</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/45.gif"></p><h4 id="46【动画案例】🍬水波效果原理"><a href="#46【动画案例】🍬水波效果原理" class="headerlink" title="46【动画案例】🍬水波效果原理"></a>46【动画案例】🍬水波效果原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/46.gif"></p><h4 id="47【动画案例】🌸CSS弹球动画效果的原理"><a href="#47【动画案例】🌸CSS弹球动画效果的原理" class="headerlink" title="47【动画案例】🌸CSS弹球动画效果的原理"></a>47【动画案例】🌸CSS弹球动画效果的原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/47.gif"></p><h4 id="48【outline】🌻outline属性的妙用"><a href="#48【outline】🌻outline属性的妙用" class="headerlink" title="48【outline】🌻outline属性的妙用"></a>48【outline】🌻outline属性的妙用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/48.gif"></p><h4 id="49【grid】💕火狐浏览器grid布局检测器"><a href="#49【grid】💕火狐浏览器grid布局检测器" class="headerlink" title="49【grid】💕火狐浏览器grid布局检测器"></a>49【grid】💕火狐浏览器grid布局检测器</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/49.gif"></p><p>第二季：</p><h2 id="知识点篇"><a href="#知识点篇" class="headerlink" title="知识点篇"></a>知识点篇</h2><h4 id="01-🔢CSS计数器的使用"><a href="#01-🔢CSS计数器的使用" class="headerlink" title="01.🔢CSS计数器的使用"></a>01.🔢CSS计数器的使用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/1.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/gOYrmaq">codepen</a></p><h4 id="02-📝文本缩进，块级用text-indent，内联用margin-left"><a href="#02-📝文本缩进，块级用text-indent，内联用margin-left" class="headerlink" title="02.📝文本缩进，块级用text-indent，内联用margin-left"></a>02.📝文本缩进，块级用text-indent，内联用margin-left</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/2.png"></p><h4 id="03-📖美化表格常用技巧。等比、定宽、错色等"><a href="#03-📖美化表格常用技巧。等比、定宽、错色等" class="headerlink" title="03.📖美化表格常用技巧。等比、定宽、错色等"></a>03.📖美化表格常用技巧。等比、定宽、错色等</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/3.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/NWKRBzY">codepen</a></p><h4 id="04-👔滚动条样式美化"><a href="#04-👔滚动条样式美化" class="headerlink" title="04.👔滚动条样式美化"></a>04.👔滚动条样式美化</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/4.png"></p><h4 id="05-👉使用文本对齐属性值justify，实现类似弹性布局的space-between效果"><a href="#05-👉使用文本对齐属性值justify，实现类似弹性布局的space-between效果" class="headerlink" title="05.👉使用文本对齐属性值justify，实现类似弹性布局的space-between效果"></a>05.👉使用文本对齐属性值justify，实现类似弹性布局的space-between效果</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/5.png"></p><h4 id="06-🐠使用selection选择器自定义文本选区的高亮样式"><a href="#06-🐠使用selection选择器自定义文本选区的高亮样式" class="headerlink" title="06.🐠使用selection选择器自定义文本选区的高亮样式"></a>06.🐠使用selection选择器自定义文本选区的高亮样式</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/6.png"></p><h4 id="07-🏩grid-template设置网格模板，实现三列两行布局"><a href="#07-🏩grid-template设置网格模板，实现三列两行布局" class="headerlink" title="07.🏩grid-template设置网格模板，实现三列两行布局"></a>07.🏩grid-template设置网格模板，实现三列两行布局</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/7.png"></p><h4 id="08-🏠grid-gap设置网格间隙，包括行和列"><a href="#08-🏠grid-gap设置网格间隙，包括行和列" class="headerlink" title="08.🏠grid-gap设置网格间隙，包括行和列"></a>08.🏠grid-gap设置网格间隙，包括行和列</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/8.png"></p><h4 id="09-🏡grid布局，使用fr单位实现等比例分配空间。fr是分数（fraction）的缩写"><a href="#09-🏡grid布局，使用fr单位实现等比例分配空间。fr是分数（fraction）的缩写" class="headerlink" title="09.🏡grid布局，使用fr单位实现等比例分配空间。fr是分数（fraction）的缩写"></a>09.🏡grid布局，使用fr单位实现等比例分配空间。fr是分数（fraction）的缩写</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/9.png"></p><h4 id="10-🏢grid布局使用repeat函数，可以少写些代码"><a href="#10-🏢grid布局使用repeat函数，可以少写些代码" class="headerlink" title="10.🏢grid布局使用repeat函数，可以少写些代码"></a>10.🏢grid布局使用repeat函数，可以少写些代码</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/10.png"></p><h4 id="11-🍧focus-within是为数不多的一个，可以由子操作父选择器"><a href="#11-🍧focus-within是为数不多的一个，可以由子操作父选择器" class="headerlink" title="11.🍧focus-within是为数不多的一个，可以由子操作父选择器"></a>11.🍧focus-within是为数不多的一个，可以由子操作父选择器</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/11.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/ZgRyeg">codepen</a></p><h4 id="12-♐容易被忽视的target选择器"><a href="#12-♐容易被忽视的target选择器" class="headerlink" title="12.♐容易被忽视的target选择器"></a>12.♐容易被忽视的target选择器</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/12.png"></p><h2 id="特效原理篇"><a href="#特效原理篇" class="headerlink" title="特效原理篇"></a>特效原理篇</h2><h4 id="13-⚽使用变换实现简单复合运动"><a href="#13-⚽使用变换实现简单复合运动" class="headerlink" title="13.⚽使用变换实现简单复合运动"></a>13.⚽使用变换实现简单复合运动</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/13.png"></p><h4 id="14-🌈看见彩虹，吃定彩虹"><a href="#14-🌈看见彩虹，吃定彩虹" class="headerlink" title="14.🌈看见彩虹，吃定彩虹"></a>14.🌈看见彩虹，吃定彩虹</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/14.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/NWKXKYd?editors=0110">codepen</a></p><h4 id="15-🙅人脸识别时用到的扫描图，之前我司的一个需求"><a href="#15-🙅人脸识别时用到的扫描图，之前我司的一个需求" class="headerlink" title="15.🙅人脸识别时用到的扫描图，之前我司的一个需求"></a>15.🙅人脸识别时用到的扫描图，之前我司的一个需求</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/15.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/MWgGzWb">codepen</a></p><h4 id="16-🗿立体感按钮"><a href="#16-🗿立体感按钮" class="headerlink" title="16.🗿立体感按钮"></a>16.🗿立体感按钮</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/16.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/LweeBp">codepen</a></p><h4 id="17-🔄实现一个混沌动态背景"><a href="#17-🔄实现一个混沌动态背景" class="headerlink" title="17.🔄实现一个混沌动态背景"></a>17.🔄实现一个混沌动态背景</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/17.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/OJLRLPL">codepen</a></p><h4 id="18-💞环绕椭圆轨道旋转。平移运动与圆周运动复合就能做到"><a href="#18-💞环绕椭圆轨道旋转。平移运动与圆周运动复合就能做到" class="headerlink" title="18.💞环绕椭圆轨道旋转。平移运动与圆周运动复合就能做到"></a>18.💞环绕椭圆轨道旋转。平移运动与圆周运动复合就能做到</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/18.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/MWgGWYm">codepen</a></p><h4 id="19-👓只用background就能实现简单滤镜效果"><a href="#19-👓只用background就能实现简单滤镜效果" class="headerlink" title="19.👓只用background就能实现简单滤镜效果"></a>19.👓只用background就能实现简单滤镜效果</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/19.png"></p><h4 id="20-🐍蛇形边框特效原理"><a href="#20-🐍蛇形边框特效原理" class="headerlink" title="20.🐍蛇形边框特效原理"></a>20.🐍蛇形边框特效原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/20.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/gOYgGYj">codepen</a></p><h4 id="21-🎁让你的女朋友动起来"><a href="#21-🎁让你的女朋友动起来" class="headerlink" title="21.🎁让你的女朋友动起来"></a>21.🎁让你的女朋友动起来</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/21.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/bGbWzvm">codepen</a></p><h4 id="22-🌖一个div，实现天狗吃月亮"><a href="#22-🌖一个div，实现天狗吃月亮" class="headerlink" title="22.🌖一个div，实现天狗吃月亮"></a>22.🌖一个div，实现天狗吃月亮</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/22.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/qBWqmbp">codepen</a></p><h4 id="23-🌖更简单的方案，实现天狗吃月亮"><a href="#23-🌖更简单的方案，实现天狗吃月亮" class="headerlink" title="23.🌖更简单的方案，实现天狗吃月亮"></a>23.🌖更简单的方案，实现天狗吃月亮</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/23.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/ZEzBPWr">codepen</a></p><h4 id="24-🌌画个土星，像不像三分样"><a href="#24-🌌画个土星，像不像三分样" class="headerlink" title="24.🌌画个土星，像不像三分样"></a>24.🌌画个土星，像不像三分样</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/24.png"></p><p>演示地址1：<a href="https://codepen.io/laoyao/pen/BaBRjzp">codepen</a></p><p>演示地址2：<a href="https://codepen.io/laoyao/pen/VwZbBbG">codepen</a></p><h4 id="25-🌈使用渐变，一个div画Chrome的logo"><a href="#25-🌈使用渐变，一个div画Chrome的logo" class="headerlink" title="25.🌈使用渐变，一个div画Chrome的logo"></a>25.🌈使用渐变，一个div画Chrome的logo</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/25.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/KOvZOd">codepen</a></p><h4 id="26-🉐一个div简单画铜钱"><a href="#26-🉐一个div简单画铜钱" class="headerlink" title="26.🉐一个div简单画铜钱"></a>26.🉐一个div简单画铜钱</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/26.png"></p><h4 id="27-🃏切牌特效原理"><a href="#27-🃏切牌特效原理" class="headerlink" title="27.🃏切牌特效原理"></a>27.🃏切牌特效原理</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/27.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/XWrgVWV">codepen</a></p><h4 id="28-✂给clip-path应用动画"><a href="#28-✂给clip-path应用动画" class="headerlink" title="28.✂给clip-path应用动画"></a>28.✂给clip-path应用动画</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/28.png"></p><p>演示地址：<a href="https://codepen.io/laoyao/pen/wvwgvoz">codepen</a></p><h2 id="工具篇"><a href="#工具篇" class="headerlink" title="工具篇"></a>工具篇</h2><h4 id="29-🚀vscode里是可以使用Emmet语法的，敲tab键结束命令，-表示返回上一层级"><a href="#29-🚀vscode里是可以使用Emmet语法的，敲tab键结束命令，-表示返回上一层级" class="headerlink" title="29.🚀vscode里是可以使用Emmet语法的，敲tab键结束命令，^表示返回上一层级"></a>29.🚀vscode里是可以使用Emmet语法的，敲tab键结束命令，^表示返回上一层级</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/29.png"></p><p><a href="https://docs.emmet.io/abbreviations/syntax/">语法说明</a></p><h4 id="30-⛲查看页面布局小技巧，觉得很好用"><a href="#30-⛲查看页面布局小技巧，觉得很好用" class="headerlink" title="30.⛲查看页面布局小技巧，觉得很好用"></a>30.⛲查看页面布局小技巧，觉得很好用</h4><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/CSS-knowledge-points-that-you-may-not-know/S2/30.png"></p><p><a href="https://codepen.io/laoyao/pen/gOOaOXM?editors=0010">书签完整代码</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS打印调试的多种方法</title>
      <link href="/2023/12/27/js-da-yin-diao-shi-de-duo-chong-fang-fa/"/>
      <url>/2023/12/27/js-da-yin-diao-shi-de-duo-chong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="简单的console-log不要再用了！试试这个"><a href="#简单的console-log不要再用了！试试这个" class="headerlink" title="简单的console.log不要再用了！试试这个"></a>简单的console.log不要再用了！试试这个</h2><p><a href="https://juejin.cn/post/7310102466570321958">原文</a></p><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1. 需求分析"></a>1. 需求分析</h3><p>一般情况下，我们在项目中进行代码调试时，往往只会在逻辑中使用<code>console.log</code>进行控制台打印调试。</p><p>这种方式虽然比较常规直接，但是如果打印数据多了，就会导致你的控制台消息变得异常混乱。</p><p>所以，我们有了更好的选择，那就是<code>console</code>对象提供的其它API，来让我们能够更清晰的区分打印信息。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/1.png" alt="图片"></p><h3 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2. 实现步骤"></a>2. 实现步骤</h3><h4 id="2-1-console-warn"><a href="#2-1-console-warn" class="headerlink" title="2.1 console.warn"></a>2.1 console.warn</h4><p>当我们需要区分一些比较重要的打印信息时，可以使用<code>warn</code>进行警告提示。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/2.png" alt="图片"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="2-2-console-error"><a href="#2-2-console-error" class="headerlink" title="2.2 console.error"></a>2.2 console.error</h4><p>当我们需要区分一些异常错误的打印信息时，可以使用<code>error</code>进行错误提示。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/3.png" alt="图片"></p><h4 id="2-3-console-time-timeEnd"><a href="#2-3-console-time-timeEnd" class="headerlink" title="2.3 console.time&#x2F;timeEnd"></a>2.3 console.time&#x2F;timeEnd</h4><p>想看看一段代码运行需要多长时间，可以使用<code>time</code>。</p><p>这对于需要一些时间的CPU密集型应用程序非常有用，例如<code>神经网络</code>或 <code>HTML Canvas</code>读取。</p><p>下面执行这段代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"Loop timer"</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Some code here</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"Loop timer"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>结果如下：<img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/4.png" alt="图片"></p><h4 id="2-4-console-trace"><a href="#2-4-console-trace" class="headerlink" title="2.4 console.trace"></a>2.4 console.trace</h4><p>想看看函数的调用顺序是怎样的吗？可以使用<code>trace</code>。</p><p>下面执行这段代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>  <span class="token keyword">function</span> <span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">randomFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">randomFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>setup</code>中，<code>randomFunction</code> 调用<code>trace</code>，然后又调用<code>console.trace</code>。</p><p>因此，当您调用 <code>randomFunction</code> 时，您将得到类似的输出，结果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/10.png" alt="图片"></p><h3 id="2-5-console-group-groupEnd"><a href="#2-5-console-group-groupEnd" class="headerlink" title="2.5 console.group&#x2F;groupEnd"></a>2.5 console.group&#x2F;groupEnd</h3><p>当我们需要将一类打印信息进行分组时，可以使用<code>group</code>。</p><p>下面执行这段代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"My message group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Test2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Test2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Test2!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/5.png" alt="图片"></p><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h4 id="2-6-console-table"><a href="#2-6-console-table" class="headerlink" title="2.6 console.table"></a>2.6 console.table</h4><p>在控制台中打印表格信息，可以使用<code>table</code>。</p><p>对！你没听错，就是让我们以表格形式展示打印信息。</p><p>如果使用<code>log</code>打印：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Weirdo"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token string">"-23"</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token string">"singing"</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SomeName"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token string">"Infinity"</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token string">"programming"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p>这样做是不是让数据看起来很混乱。</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/6.png" alt="图片"></p><p>反之，如果我们使用<code>table</code>输出：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> person1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Weirdo"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token string">"-23"</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token string">"singing"</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> person2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"SomeName"</span><span class="token punctuation">,</span> age <span class="token operator">:</span> <span class="token string">"Infinity"</span><span class="token punctuation">,</span> hobby<span class="token operator">:</span> <span class="token string">"programming"</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>person1<span class="token punctuation">,</span> person2<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p>怎么样！从来不知道控制台可以看起来如此干净，对吧！</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/7.png" alt="图片"></p><h4 id="2-7-console-clear"><a href="#2-7-console-clear" class="headerlink" title="2.7 console.clear"></a>2.7 console.clear</h4><p>最后，使用<code>clear</code>把控制台清空吧！</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/8.png" alt="图片"></p><h3 id="3-问题详解"><a href="#3-问题详解" class="headerlink" title="3. 问题详解"></a>3. 问题详解</h3><h4 id="3-1-可以自定义log的样式吗？"><a href="#3-1-可以自定义log的样式吗？" class="headerlink" title="3.1 可以自定义log的样式吗？"></a>3.1 可以自定义log的样式吗？</h4><p>答案当然是可以的，只需要借助<code>%c</code>这个占位符。</p><p><code>%c</code> 是console的占位符，用于指定输出样式或应用 CSS 样式到特定的输出文本。</p><p>但请注意，<code>%c</code> 占位符只在部分浏览器中支持，如 Chrome、Firefox 等。</p><p>通过使用 <code>%c</code> 占位符，可以在 <code>console.log</code> 中为特定的文本应用自定义的 CSS 样式。这样可以改变输出文本的颜色、字体、背景等样式属性，以便在控制台中以不同的样式突出显示特定的信息。</p><p>以下是使用<code>%c</code> 占位符应用样式的示例：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c Hello, World!"</span><span class="token punctuation">,</span>   <span class="token string">"color: red; font-weight: bold;border: 1px solid red;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/log-way/1.png" alt="图片"></p><p>通过使用 <code>%c</code> 占位符和自定义的样式规则，可以在控制台输出中以不同的样式突出显示特定的文本，使得输出更加清晰和易于识别。</p><p>这在调试和日志记录过程中非常有用，特别是当需要突出显示特定类型的信息或错误时。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多种样式的&lt;hr&gt;花样标签</title>
      <link href="/2023/12/17/duo-chong-yang-shi-de-hr-hua-yang-biao-qian/"/>
      <url>/2023/12/17/duo-chong-yang-shi-de-hr-hua-yang-biao-qian/</url>
      
        <content type="html"><![CDATA[<h2 id="666，看hr标签实现分隔线如何玩出花"><a href="#666，看hr标签实现分隔线如何玩出花" class="headerlink" title="666，看hr标签实现分隔线如何玩出花"></a>666，看hr标签实现分隔线如何玩出花</h2><p>日常开发经常会用到网页分隔线，例如列表下拉到最后，类似于“我是有底线的”这样的提示，就会伴随分隔线。</p><p>通常，这样的分隔线是使用<code>&lt;div&gt;</code>标签模拟的，其实我们可以使用语义更好的<code>&lt;hr&gt;</code>标签模拟。</p><p>HTML <code>&lt;hr&gt;</code>元素虽然是一个非闭合标签，但是也是支持<code>::before</code>和<code>::after</code>伪元素的。</p><p>因此，我们可以使用<code>&lt;hr&gt;</code>标签实现各种样式的分隔线效果。</p><h3 id="一、基础分隔线效果"><a href="#一、基础分隔线效果" class="headerlink" title="一、基础分隔线效果"></a>一、基础分隔线效果</h3><h5 id="实线"><a href="#实线" class="headerlink" title="实线"></a>实线</h5><p>相关HTML和CSS代码如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-solid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-solid &#123;    border: 0;    border-top: 1px solid #d0d0d5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/1.png"></p><h5 id="点线（1px和2px）"><a href="#点线（1px和2px）" class="headerlink" title="点线（1px和2px）"></a>点线（1px和2px）</h5><p>相关HTML和CSS代码如下所示，使用的是浏览器默认效果，因此，不同浏览器下看到的虚点的细节可能会有所差异：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dotted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dotted2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dotted &#123;    border: 0;    border-top: 1px dotted #a2a9b6;&#125;.hr-dotted2 &#123;    border: 0;    border-top: 2px dotted #a2a9b6;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/2.png"></p><h5 id="虚线（1px和2px）"><a href="#虚线（1px和2px）" class="headerlink" title="虚线（1px和2px）"></a>虚线（1px和2px）</h5><p>相关HTML和CSS代码如下所示，同样的，浏览器默认虚线样式，不同浏览器表现细节有差异：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed &#123;    border: 0;    border-top: 1px dashed #a2a9b6;&#125;.hr-dashed2 &#123;    border: 0;    border-top: 2px dashed #a2a9b6;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/3.png"></p><h5 id="双实线"><a href="#双实线" class="headerlink" title="双实线"></a>双实线</h5><p>相关HTML和CSS代码如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-double<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-double &#123;    border: 0;    border-top: 3px double #d0d0d5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/4.png"></p><h5 id="疏密可控的虚线"><a href="#疏密可控的虚线" class="headerlink" title="疏密可控的虚线"></a>疏密可控的虚线</h5><p>这里使用线性渐变模拟虚线效果，优点是虚线的虚实比例是可以精确控制的，实现原理和细节以前介绍过，可参见“<a href="https://www.zhangxinxu.com/wordpress/?p=6494">CSS3 linear-gradient线性渐变实现虚线</a>”一文。</p><p>现在有如下所示的HTML和CSS代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed-fixed<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed-fixed &#123;    border: 0;    padding-top: 1px;    background: repeating-linear-gradient(to right, #a2a9b6 0px, #a2a9b6 4px, transparent 0px, transparent 10px);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/5.png"></p><p>这里，为了方便大家使用，我又使用CSS变量，把虚线实线比例做成可配置的了。</p><p>其中<code>--dashed-filled</code>是实线尺寸，变量<code>--dashed-filled</code>是虚线的尺寸，代码示意：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed-fixed<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--dashed-filled</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span> <span class="token property">--dashed-open</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed-fixed &#123;    border: 0;    padding-top: 1px;    /* for 现代浏览器 */    background: repeating-linear-gradient(to right, #a2a9b6 0 var(--dashed-filled, 4px), transparent 0 calc(var(--dashed-filled, 4px) + var(--dashed-open, 6px)));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有在现代浏览器中才有效果，因为IE不支持CSS变量，因此，IE浏览器无效。</p><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/6.png"></p><p>为了全兼容，大家可以把上面两段CSS合二为一，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed-fixed &#123;    border: 0;    padding-top: 1px;    /* for IE浏览器 */    background: repeating-linear-gradient(to right, #a2a9b6 0px, #a2a9b6 4px, transparent 0px, transparent 10px);    /* for 现代浏览器 */    background: repeating-linear-gradient(to right, #a2a9b6 0 var(--dashed-filled, 4px), transparent 0 calc(var(--dashed-filled, 4px) + var(--dashed-open, 6px)));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="两头虚的分隔线"><a href="#两头虚的分隔线" class="headerlink" title="两头虚的分隔线"></a>两头虚的分隔线</h5><p>这是个比较常见的分隔线效果，线的两端淡出，中间是完整的颜色。</p><p>此效果实现方法很多，我这里使用的是CSS渐变模拟的，相关HTML和CSS代码如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-edge-weak<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-edge-weak &#123;    border: 0;    padding-top: 1px;    background: linear-gradient(to right, transparent, #d0d0d5, transparent);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/7.png"></p><h5 id="斜纹分隔线"><a href="#斜纹分隔线" class="headerlink" title="斜纹分隔线"></a>斜纹分隔线</h5><p>有时候需要分界线更加明显的分隔线，则可以试试下面的代码，对应的效果是斜纹分隔线。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-twill<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-twill &#123;    border: 0;    padding: 3px;    background: repeating-linear-gradient(135deg, #a2a9b6 0px, #a2a9b6 1px, transparent 1px, transparent 6px);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/8.png"></p><p>我们也可以让斜纹表现为多彩的颜色，这里使用了遮罩实现，HTML和CSS代码为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-twill-colorful<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">/* 现代浏览器only */.hr-twill-colorful &#123;    border: 0;    padding: 3px;    background: linear-gradient(135deg, red, orange,green, blue, purple);    --mask-image: repeating-linear-gradient(135deg, #000 0px, #000 1px, transparent 1px, transparent 6px);    -webkit-mask-image: var(--mask-image);    mask-image: var(--mask-image);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/9.png"></p><h5 id="波浪线"><a href="#波浪线" class="headerlink" title="波浪线"></a>波浪线</h5><p>这里的波浪线实现使用了特别的技巧，相关原理和细节之前专门撰文介绍过，详见：“<a href="https://www.zhangxinxu.com/wordpress/?p=9333">CSS text-decoration实现宽度100%波浪线效果</a>”。</p><p>这里演示使用的前端代码则是：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-wavy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-wavy &#123;    border: 0;    color: #d0d0d5;    height: .5em;    white-space: nowrap;    letter-spacing: 100vw;    padding-top: .5em;&#125;.hr-wavy::before &#123;    content: "\2000\2000";    /* IE浏览器实线代替 */    text-decoration: overline;    /* 现代浏览器 */    text-decoration: overline wavy;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/10.png"></p><h5 id="阴影线"><a href="#阴影线" class="headerlink" title="阴影线"></a>阴影线</h5><p>这个实现比较简单，就是使用CSS <code>box-shadow</code>盒阴影属性，多用在表示层次的分隔场景中。</p><p>相关HTML和CSS代码如下所示：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-shadow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-shadow &#123;    border: 0;    padding-top: 10px;    color: #d0d0d5;    border-top: 1px solid rgba(0,0,0,.1);    box-shadow: inset 0 10px 10px -10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/11.png"></p><h3 id="二、带点图形装饰的分隔线"><a href="#二、带点图形装饰的分隔线" class="headerlink" title="二、带点图形装饰的分隔线"></a>二、带点图形装饰的分隔线</h3><p>这里主要演示几个生产环境可以使用的几个样式，那些花里胡哨的分隔线这里就不展示了。</p><h5 id="中间有装饰"><a href="#中间有装饰" class="headerlink" title="中间有装饰"></a>中间有装饰</h5><p>中间有一些图形或图像，实现原理大同小异，这里使用圆和方块抛砖引玉示意下。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-square<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的线条使用CSS渐变绘制，而中间的图形就需要借助伪元素实现了。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-mid-circle,.hr-mid-square &#123;    border: 0;    color: #d0d0d5;    background: linear-gradient(currentColor, currentColor) no-repeat center;    background-size: 100% 1px;&#125;.hr-mid-circle::before &#123;    content: '';    display: block;    width: .75em; height: .75em;    border-radius: 50%;    background-color: currentColor;    margin: auto;&#125;.hr-mid-square::before &#123;    content: '';    display: block;    width: .75em; height: .75em;    transform: rotate(45deg);    background-color: currentColor;    margin: 3px auto;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/12.png"></p><h5 id="中间有多个装饰"><a href="#中间有多个装饰" class="headerlink" title="中间有多个装饰"></a>中间有多个装饰</h5><p>如果中间是多个圆，多个方块，那该怎么办呢？</p><p>一种方法是变成背景图，平铺，在本例中，因为是实色图形，则可以使用 <code>box-shadow</code> 进行图形复制。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-circle<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-square<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只需要在上面CSS代码基础上加上下面这几行CSS就可以了：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-mid-circle[multiple]::before &#123;    box-shadow: 1.5em 0, -1.5em 0;&#125;.hr-mid-square[multiple]::before &#123;    box-shadow: 1.25em -1.25em, -1.25em 1.25em;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/13.png"></p><h5 id="装饰在两端"><a href="#装饰在两端" class="headerlink" title="装饰在两端"></a>装饰在两端</h5><p>装饰有可能在两端，而不是中间，这里演示一个钻石图形在两侧对齐的例子，HTML和CSS使用的是：</p><pre class="line-numbers language-none"><code class="language-none">&lt;hr class&#x3D;&quot;hr-space-square&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-space-square &#123;    border: 0;    color: #d0d0d5;    background: linear-gradient(currentColor, currentColor) no-repeat center;    background-size: calc(100% - 1.5em - 6px) 1px;    display: flex;    justify-content: space-between;&#125;.hr-space-square::before,.hr-space-square::after &#123;    content: '';    display: block;    width: .75em; height: .75em;    transform: rotate(45deg);    box-sizing: border-box;    border: 1px solid;    margin: 3px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/14.png"></p><h5 id="装饰复杂一点点"><a href="#装饰复杂一点点" class="headerlink" title="装饰复杂一点点"></a>装饰复杂一点点</h5><p>就是线条多一点，图形的造型也稍微复杂一点的装饰效果，HTML比较简单：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-double-arrow<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CSS这里用到了定位还有一些常见的CSS图形生成技巧：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-double-arrow &#123;    color: #d0d0d5;    border: double;    border-width: 3px 5px;    border-color: #d0d0d5 transparent;    height: 1px;    overflow: visible;    margin-left: 20px;    margin-right: 20px;    position: relative;&#125;.hr-double-arrow:before, .hr-double-arrow:after &#123;    content: '';    position: absolute;    width: 5px; height: 5px;    border-width: 0 3px 3px 0;    border-style: double;    top: -3px;    background: radial-gradient(2px at 1px 1px, currentColor 2px, transparent 0) no-repeat;&#125;.hr-double-arrow:before &#123;    transform: rotate(-45deg);    left: -20px;&#125;.hr-double-arrow:after &#123;    transform: rotate(135deg);    right: -20px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/15.png"></p><p>还有其他一些装饰效果，例如一些星星啊，加一些花朵之类的，篇幅原因（实际上懒得折腾，需要使用SVG图形），就不展示了。</p><h3 id="三、带文字内容的分隔线"><a href="#三、带文字内容的分隔线" class="headerlink" title="三、带文字内容的分隔线"></a>三、带文字内容的分隔线</h3><p>这个可能用得更多一点，然后这里演示的效果CSS代码都大同小异，因此有些重复的CSS就不再展示了。</p><h5 id="两端实线"><a href="#两端实线" class="headerlink" title="两端实线"></a>两端实线</h5><p>HTML代码这样的：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-solid-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分隔线<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-solid-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>文字自适应，背景透明<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CSS代码如下，这里的实现还是需要点基本功的，因为要让左右图形自适应于文字内容，同时文字后面不能有背景色。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-solid-content &#123;    color: #a2a9b6;    border: 0;    font-size: 12px;    padding: 1em 0;    position: relative;&#125;.hr-solid-content::before &#123;    content: attr(data-content);    position: absolute;    padding: 0 1ch;    line-height: 1px;    border: solid #d0d0d5;    border-width: 0 99vw;    width: fit-content;    /* for 不支持fit-content浏览器 */    white-space: nowrap;    left: 50%;    transform: translateX(-50%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/16.png"></p><h5 id="两端虚线"><a href="#两端虚线" class="headerlink" title="两端虚线"></a>两端虚线</h5><p>实现原理和上面实线有些类似，也是使用一个巨大的边框，但是，此时使用dashed虚线边框是没有效果的，因为边框宽度太宽，高度为0，虚线的渲染是按照比例来的。</p><p>这里我是使用的<code>border-image</code>配合重复线性渐变模拟的虚线边框效果，HTML代码为：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-dashed-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分隔线<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>CSS代码，<code>.hr-dashed-content</code>需要的CSS代码和上面<code>.hr-solid-content</code>一模一样，然后，额外增加下面这行CSS：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-dashed-content::before &#123;    border-image: repeating-linear-gradient(90deg, #d0d0d5, #d0d0d5 1px, transparent 1px, transparent 2px) 0 85% / / 0 repeat;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的语法看不懂没关系，知道上面代码有效果就可以了，然后85%修改可以控制虚线的尺寸大小。</p><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/17.png"></p><h5 id="两端淡出"><a href="#两端淡出" class="headerlink" title="两端淡出"></a>两端淡出</h5><p>代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-fade-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分隔线<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在原来实线效果基础上使用渐变作为遮罩就可以实现这样的效果了：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// ... 一致代码略.hr-fade-content &#123;    -webkit-mask-image: linear-gradient(to right, transparent, black, transparent);    mask-image: linear-gradient(to right, transparent, black, transparent);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/18.png"></p><h5 id="内容装饰"><a href="#内容装饰" class="headerlink" title="内容装饰"></a>内容装饰</h5><p>如果希望内容用框框起来，加个背景什么的，则需要借助另外一个伪元素，因为<code>::before</code>的尺寸高度被限制在了1px, 此时只能<code>::after</code>伪元素出马，同样不展示一致的CSS代码。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hr-mid-border-content<span class="token punctuation">"</span></span> <span class="token attr-name">data-content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>分隔线<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.hr-mid-border-content::after&#123;    content: attr(data-content);    position: absolute;    padding: 4px 1ch;    top: 50%; left: 50%;    transform: translate(-50%, -50%);    color: transparent;    border: 1px solid #d0d0d5;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>渲染效果如下：</p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/hr-css-lines/19.png"></p><h3 id="四、专门弄了个项目开源了"><a href="#四、专门弄了个项目开源了" class="headerlink" title="四、专门弄了个项目开源了"></a>四、专门弄了个项目开源了</h3><p>一个人再怎么想破脑袋，所能实现的且实用的分隔线效果也是有限的，此时，就需要大家的智慧了。</p><p>因此，我专门在gitee上把相关CSS代码都开源出去了。</p><p>项目地址是：<a href="https://gitee.com/zhangxinxu/css-hr">https://gitee.com/zhangxinxu/css-hr</a><br>原文：<a href="https://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/">https://www.zhangxinxu.com/wordpress/2021/05/css-html-hr/</a><br>参见：一些相当华丽的 hr 装饰效果：<a href="https://css-tricks.com/examples/hrs/">https://css-tricks.com/examples/hrs/</a></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 数组常用方法</title>
      <link href="/2023/12/17/javascript-shu-zu-chang-yong-fang-fa/"/>
      <url>/2023/12/17/javascript-shu-zu-chang-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript-数组常用方法"><a href="#Javascript-数组常用方法" class="headerlink" title="Javascript 数组常用方法"></a>Javascript 数组常用方法</h1><h1 id="返回新数组，不改变原数组"><a href="#返回新数组，不改变原数组" class="headerlink" title="返回新数组，不改变原数组"></a>返回新数组，不改变原数组</h1><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>把数组中所有元素放入一个字符串中，返回字符串。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;join.jsconst arr &#x3D; [&#39;pr&#39;, &#39;is&#39;, 18];console.log(arr.join(&#39; &#39;)); &#x2F;&#x2F; pr is 18console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ &#39;pr&#39;, &#39;is&#39;, 18 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>连接多个（含两个）数组，两边的原始数组都不会变化，返回被连接数组的一个副本，可继续 <code>concat</code>。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;concat.jsconst arr &#x3D; [1, 2, 3, 4];const arr1 &#x3D; [&#39;pr&#39;, &#39;is&#39;, &#39;a&#39;, &#39;boy&#39;];const arr2 &#x3D; [5, 6, 7];console.log(arr.concat(arr1, arr2).concat(8, 9)); &#x2F;&#x2F; [1, 2, 3, 4, &#39;pr&#39;, &#39;is&#39;, &#39;a&#39;, &#39;boy&#39;, 5, 6, 7, 8, 9 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h2><p>从开始到结束（<code>[)</code>左闭右开，即不包括结束）选择数组的一部分<strong>浅拷贝</strong>到一个新数组。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;slice.jsconst arr &#x3D; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];console.log(arr.slice(1, 5)); &#x2F;&#x2F; [ 1, 2, 3, 4 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 0,1,2,3,4,5,6,7,8,9 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>slice(1, 5)</code> 可见里面最多含 4（<code>5 - 1</code>） 个元素，而且从第 1 位开始取。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>创建一个新数组并返回，新数组的每个元素由原数组中的每一个元素执行提供的函数而来，其中原始数组不会发生改变。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;map.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.map(i &#x3D;&gt; i * 10 - 5)); &#x2F;&#x2F; [ 5, 15, 25, 35 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>检测数组所有元素是否都符合指定条件.</p><ul><li>如果数组中检测到有一个元素不满足，则整个表达式返回 <code>false</code>，且剩余的元素不会再进行检测；</li><li>如果所有元素都满足条件，则返回 <code>true</code>；</li></ul><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;every.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.every(i &#x3D;&gt; i &gt; 2)); &#x2F;&#x2F; falseconsole.log(arr.every(i &#x3D;&gt; i &gt; 0)); &#x2F;&#x2F; trueconsole.log([].every(i &#x3D;&gt; i &#x3D;&#x3D;&#x3D; &#39;pr&#39;)); &#x2F;&#x2F; trueconsole.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p>用于检测数组中的元素是否满足指定条件。</p><ul><li>如果有一个元素满足条件，则表达式返回 <code>true</code>, 剩余的元素不会再执行检测;</li><li>如果没有满足条件的元素，则返回 <code>false</code>;</li></ul><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;some.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.some(i &#x3D;&gt; i &gt; 4)); &#x2F;&#x2F; falseconsole.log(arr.some(i &#x3D;&gt; i &gt; 0)); &#x2F;&#x2F; trueconsole.log([].some(i &#x3D;&gt; i &#x3D;&#x3D;&#x3D; &#39;pr&#39;)); &#x2F;&#x2F; falseconsole.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>创建一个新的数组，新数组中的元素是通过检查符合条件的所有元素。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;filter.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.filter(i &#x3D;&gt; i &gt; 2)); &#x2F;&#x2F; [3, 4]console.log([].filter(i &#x3D;&gt; i &#x3D;&#x3D;&#x3D; &#39;pr&#39;)); &#x2F;&#x2F; []console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p>用于调用数组的每个元素，并将元素传递给回调函数，返回 <code>undefiend</code>。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;forEach.jsconst arr &#x3D; [1, 2, 3, 4];const copy &#x3D; [];console.log(arr.forEach(i &#x3D;&gt; &#123;    copy.push(i * 2);&#125;));console.log(copy); &#x2F;&#x2F; [ 2, 4, 6, 8 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。若是空数组是不会执行回调函数的;</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;reduce.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.reduce((prev, cur) &#x3D;&gt; prev + cur, 0)); &#x2F;&#x2F; 10console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="返回新数组，改变原数组"><a href="#返回新数组，改变原数组" class="headerlink" title="返回新数组，改变原数组"></a>返回新数组，改变原数组</h1><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>删除数组的最后一个元素，并返回这个元素（即被删除的元素）。</p><ul><li>如果数组为空，则不改变数组，返 <code>undefined</code>；</li></ul><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;pop.jsconst arr &#x3D; [1, 2, 3, 4];const arr1 &#x3D; [];console.log(arr.pop()); &#x2F;&#x2F; 4console.log(arr1.pop()); &#x2F;&#x2F; undefinedconsole.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3 ]console.log(arr1); &#x2F;&#x2F; []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>将一个或多个元素添加到数组的末尾，返回值是<strong>改变后的数组的长度</strong>。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;push.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.push(5)); &#x2F;&#x2F; 5console.log(arr.push([1, 2])); &#x2F;&#x2F; 6console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 2, 3, 4, 5, [ 1, 2 ] ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h2><p>删除数组的第一个元素，并返回这个元素。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;shift.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.shift()); &#x2F;&#x2F; 1console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h2><p>将一个或多个元素添加到数组的开头，返回值是<strong>改变后的数组的长度</strong>。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;unshift.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.unshift(5, 6)); &#x2F;&#x2F; 6console.log(arr.unshift([1, 2])); &#x2F;&#x2F; 7console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ [ 1, 2 ], 5, 6, 1, 2, 3, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>颠倒数组中元素的位置，返回该数组的引用。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;reverse.jsconst arr &#x3D; [1, 2, 3, 4];const hello &#x3D; &#39;hello&#39;;const helloArray &#x3D; hello.split(&#39;&#39;);console.log(helloArray.reverse().join(&#39;&#39;)); &#x2F;&#x2F; ollehconsole.log(arr.reverse()); &#x2F;&#x2F; [ 4, 3, 2, 1 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 4, 3, 2, 1 ]console.log(helloArray); &#x2F;&#x2F; [ &#39;o&#39;, &#39;l&#39;, &#39;l&#39;, &#39;e&#39;, &#39;h&#39; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>对数组的元素进行排序，并返回数组。排序不一定是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;sort.jsconst arr &#x3D; [1, 2, 3, 4, 10, 12, 22];console.log(arr.sort()); &#x2F;&#x2F; [ 1, 10, 12, 2, 22, 3, 4];console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 10, 12, 2, 22, 3, 4];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h2><p>向数组中添加&#x2F;删除项目，然后返回被删除项目。</p><pre class="line-numbers language-Javascript" data-language="Javascript"><code class="language-Javascript">&#x2F;&#x2F; 0.0.2&#x2F;splice.jsconst arr &#x3D; [1, 2, 3, 4];console.log(arr.splice(1, 2, 10, 12)); &#x2F;&#x2F; [ 2, 3 ]console.log(&#39;&#x3D;&gt;&#39;);console.log(arr); &#x2F;&#x2F; [ 1, 10, 12, 4 ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="你可以…"><a href="#你可以…" class="headerlink" title="你可以…"></a>你可以…</h1><ul><li><a href="https://juejin.cn/post/6844903897723568141">Javascript 数组常用算法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS八种让人眼前一亮的HOVER效果</title>
      <link href="/2023/12/17/css-ba-chong-rang-ren-yan-qian-yi-liang-de-hover-xiao-guo/"/>
      <url>/2023/12/17/css-ba-chong-rang-ren-yan-qian-yi-liang-de-hover-xiao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS八种让人眼前一亮的HOVER效果"><a href="#CSS八种让人眼前一亮的HOVER效果" class="headerlink" title="CSS八种让人眼前一亮的HOVER效果"></a>CSS八种让人眼前一亮的HOVER效果</h1><h3 id="一-发送效果"><a href="#一-发送效果" class="headerlink" title="一.发送效果"></a>一.发送效果</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>send-btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25px<span class="token punctuation">"</span></span> <span class="token attr-name">viewBox</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0 0 402 403<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.1<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2000/svg<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xlink</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/1999/xlink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Page-1<span class="token punctuation">"</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>evenodd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>g</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">transform</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>translate(-65.000000, -45.000000)<span class="token punctuation">"</span></span> <span class="token attr-name">fill-rule</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nonzero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M462.409,75.155 L242.847,390.775 L139.609,372.39 L457.101,53.485 L460.81,57.194 C465.62,62.005 466.294,69.57 462.409,75.155 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Path<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#55A4F9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M139.61,372.39 L121.225,269.152 L436.767,49.645 C442.397,45.729 450.023,46.408 454.873,51.257 L458.515,54.899 L139.61,372.39 Z M242.847,390.775 L263.045,370.577 L213.856,333.5 L242.847,390.775 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Shape<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#1380E2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>polygon</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Path<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#4172CC<span class="token punctuation">"</span></span> <span class="token attr-name">points</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>184.157 303.801 121.225 269.153 139.61 250.768<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>polygon</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M454.998,51.383 L184.176,303.82 L68.873,188.517 C63.654,183.298 65.694,174.417 72.667,171.998 L434.216,46.609 C441.486,44.088 449.557,45.942 454.998,51.383 Z M460.617,57.002 L213.837,333.48 L323.483,443.126 C328.702,448.345 337.583,446.305 340.002,439.332 L465.391,77.784 C467.912,70.514 466.058,62.443 460.617,57.002 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Shape<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#A7D0FC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M465.391,77.785 L394.817,281.279 C382.208,317.636 335.906,328.271 308.696,301.061 C289.148,281.513 288.257,250.104 306.666,229.48 L460.617,57.002 C466.058,62.443 467.912,70.514 465.391,77.785 L465.391,77.785 Z M434.215,46.609 L230.721,117.183 C194.364,129.792 183.729,176.093 210.939,203.304 L214.46,206.825 C234.316,226.681 266.331,227.243 286.872,208.096 L454.998,51.383 C449.557,45.942 441.486,44.088 434.215,46.609 L434.215,46.609 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Shape<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#C8E2FD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M199.979,352.149 L130.682,421.445 C129.706,422.422 128.426,422.91 127.147,422.91 C125.868,422.91 124.587,422.422 123.612,421.445 C121.659,419.493 121.659,416.327 123.612,414.375 L192.909,345.079 C194.86,343.126 198.028,343.126 199.979,345.079 C201.932,347.031 201.932,350.197 199.979,352.149 Z M206.519,375.661 C204.568,373.708 201.4,373.708 199.449,375.661 L164.095,411.016 C162.142,412.968 162.142,416.134 164.095,418.086 C165.071,419.063 166.351,419.551 167.63,419.551 C168.909,419.551 170.19,419.063 171.165,418.086 L206.519,382.731 C208.472,380.779 208.472,377.613 206.519,375.661 Z M149.95,425.158 L135.808,439.301 C133.856,441.253 133.856,444.419 135.809,446.372 C136.786,447.348 138.065,447.836 139.344,447.836 C140.623,447.836 141.904,447.348 142.88,446.371 L157.022,432.228 C158.974,430.276 158.974,427.11 157.021,425.157 C155.068,423.206 151.903,423.205 149.95,425.158 Z M194.765,414.816 L180.622,428.958 C178.669,430.911 178.669,434.077 180.621,436.029 C181.598,437.006 182.878,437.494 184.157,437.494 C185.436,437.494 186.717,437.006 187.692,436.03 L201.835,421.888 C203.788,419.935 203.788,416.769 201.836,414.817 C199.883,412.864 196.716,412.865 194.765,414.816 Z<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Shape<span class="token punctuation">"</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#FFFFFF<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>g</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>    Send  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#send-btn&#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  background: #5f55af;  border: 0;  border-radius: 5px;  padding: 10px 30px 10px 20px;  color: white;  text-transform: uppercase;  font-weight: bold;&#125;button svg &#123;  display: inline-block;  vertical-align: middle;  padding-right: 5px;&#125;button:hover svg &#123;  animation: fly 2s ease 1;&#125;@keyframes fly &#123;  0% &#123;    transform: translateX(0%);  &#125;  50% &#123;    transform: translateX(300%);  &#125;  100% &#123;    transform: translateX(0);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图"><a href="#GIF图" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_send.gif" alt="hover\_effect\_send"></p><h3 id="二-霓虹效果"><a href="#二-霓虹效果" class="headerlink" title="二.霓虹效果"></a>二.霓虹效果</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;neon-btn&quot;&gt;  &lt;button class&#x3D;&quot;btn one&quot;&gt;Hover me&lt;&#x2F;button&gt;  &lt;button  class&#x3D;&quot;btn two&quot;&gt;Hover me&lt;&#x2F;button&gt;  &lt;button  class&#x3D;&quot;btn three&quot;&gt;Hover me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#neon-btn &#123;  display: flex;  align-items: center;  justify-content: space-around;  height: 100vh;  background: #031628; &#125;.btn &#123;  border: 1px solid;  background-color: transparent;  text-transform: uppercase;  font-size: 14px;  padding: 10px 20px;  font-weight: 300;&#125;.one &#123;  color: #4cc9f0;&#125;.two &#123;  color: #f038ff; &#125;.three &#123;  color: #b9e769;&#125;.btn:hover &#123;  color: white;  border: 0;&#125;.one:hover &#123;  background-color: #4cc9f0;  -webkit-box-shadow: 10px 10px 99px 6px rgba(76,201,240,1);  -moz-box-shadow: 10px 10px 99px 6px rgba(76,201,240,1);  box-shadow: 10px 10px 99px 6px rgba(76,201,240,1);&#125;.two:hover &#123;  background-color: #f038ff;  -webkit-box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1);  -moz-box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1);  box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1);&#125;.three:hover &#123;  background-color: #b9e769;  -webkit-box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1);  -moz-box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1);  box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-1"><a href="#GIF图-1" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_neon.gif" alt="hover\_effect\_neon">](<a href="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_neon.gif">https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_neon.gif</a>)</p><h3 id="三-边框效果"><a href="#三-边框效果" class="headerlink" title="三.边框效果"></a>三.边框效果</h3><h4 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;draw-border&quot;&gt;  &lt;button&gt;Hover me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#draw-border &#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  border: 0;  background: none;  text-transform: uppercase;  color: #4361ee;  font-weight: bold;  position: relative;  outline: none;  padding: 10px 20px;  box-sizing: border-box;&#125;button::before, button::after &#123;  box-sizing: inherit;  position: absolute;  content: &#39;&#39;;  border: 2px solid transparent;  width: 0;  height: 0;&#125;button::after &#123;  bottom: 0;  right: 0;&#125;button::before &#123;  top: 0;  left: 0;&#125;button:hover::before, button:hover::after &#123;  width: 100%;  height: 100%;&#125;button:hover::before &#123;  border-top-color: #4361ee;  border-right-color: #4361ee;  transition: width 0.3s ease-out, height 0.3s ease-out 0.3s;&#125;button:hover::after &#123;  border-bottom-color: #4361ee;  border-left-color: #4361ee;  transition: border-color 0s ease-out 0.6s, width 0.3s ease-out 0.6s, height 0.3s ease-out 1s;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF效果"><a href="#GIF效果" class="headerlink" title="GIF效果"></a>GIF效果</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_draw.gif" alt="hover\_effect\_draw"></p><h3 id="四-圆形效果"><a href="#四-圆形效果" class="headerlink" title="四.圆形效果"></a>四.圆形效果</h3><h4 id="HTML-3"><a href="#HTML-3" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;circle-btn&quot;&gt;  &lt;div class&#x3D;&quot;btn-container&quot;&gt;    &#x2F;&#x2F; 这里有一个svg元素    &lt;button&gt;Hover me&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS-3"><a href="#CSS-3" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#circle-btn &#123;   display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;.btn-container &#123;  position: relative;  &#125;button &#123;  border: 0;  border-radius: 50px;  color: white;  background: #5f55af;  padding: 15px 20px 16px 60px;  text-transform: uppercase;  background: linear-gradient(to right, #f72585 50%, #5f55af 50%);  background-size: 200% 100%;  background-position: right bottom;  transition:all 2s ease;&#125;svg &#123;  background: #f72585;  padding: 8px;  border-radius: 50%;  position: absolute;  left: 0;  top: 0%;&#125;button:hover &#123;   background-position: left bottom;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-2"><a href="#GIF图-2" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_circle.gif" alt="hover\_effect\_circle"></p><h3 id="五-圆角效果"><a href="#五-圆角效果" class="headerlink" title="五.圆角效果"></a>五.圆角效果</h3><h4 id="HTML-4"><a href="#HTML-4" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;border-btn&quot;&gt;  &lt;button&gt;Hover me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS-4"><a href="#CSS-4" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#border-btn &#123;   display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  border: 0;  border-radius: 10px;  background: #2ec4b6;  text-transform: uppercase;  color: white;  font-size: 16px;  font-weight: bold;  padding: 15px 30px;  outline: none;  position: relative;  transition: border-radius 3s;  -webkit-transition: border-radius 3s;&#125;button:hover &#123;   border-bottom-right-radius: 50px;   border-top-left-radius: 50px;   border-bottom-left-radius: 10px;   border-top-right-radius: 10px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-3"><a href="#GIF图-3" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_radius.gif" alt="hover\_effect\_radius"></p><h3 id="六-冰冻效果"><a href="#六-冰冻效果" class="headerlink" title="六.冰冻效果"></a>六.冰冻效果</h3><h4 id="HTML-5"><a href="#HTML-5" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;frozen-btn&quot;&gt;  &lt;button class&#x3D;&quot;green&quot;&gt;Hover me&lt;&#x2F;button&gt;  &lt;button class&#x3D;&quot;purple&quot;&gt;Hover me&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="CSS-5"><a href="#CSS-5" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#frozen-btn &#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  border: 0;  margin: 20px;  text-transform: uppercase;  font-size: 20px;  font-weight: bold;  padding: 15px 50px;  border-radius: 50px;  color: white;  outline: none;  position: relative;&#125;button:before&#123;  content: &#39;&#39;;  display: block;  background: linear-gradient(to left, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.4) 50%);  background-size: 210% 100%;  background-position: right bottom;  height: 100%;  width: 100%;  position: absolute;  top: 0;  bottom:0;  right:0;  left: 0;  border-radius: 50px;  transition: all 1s;  -webkit-transition: all 1s;&#125;.green &#123;   background-image: linear-gradient(to right, #25aae1, #40e495);   box-shadow: 0 4px 15px 0 rgba(49, 196, 190, 0.75);&#125;.purple &#123;   background-image: linear-gradient(to right, #6253e1, #852D91);   box-shadow: 0 4px 15px 0 rgba(236, 116, 149, 0.75);&#125;  .purple:hover:before &#123;  background-position: left bottom;&#125;.green:hover:before &#123;  background-position: left bottom;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-4"><a href="#GIF图-4" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_frozen.gif" alt="hover\_effect\_frozen"></p><h3 id="七-闪亮效果"><a href="#七-闪亮效果" class="headerlink" title="七.闪亮效果"></a>七.闪亮效果</h3><h4 id="HTML-6"><a href="#HTML-6" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;shiny-shadow&quot;&gt;  &lt;button&gt;&lt;span&gt;Hover me&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS-6"><a href="#CSS-6" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#shiny-shadow &#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;  background: #1c2541;&#125;button &#123;  border: 2px solid white;  background: transparent;  text-transform: uppercase;  color: white;  padding: 15px 50px;  outline: none;  overflow: hidden;  position: relative;&#125;span &#123;  z-index: 20;  &#125;button:after &#123;  content: &#39;&#39;;    display: block;    position: absolute;    top: -36px;    left: -100px;    background: white;    width: 50px;    height: 125px;    opacity: 20%;    transform: rotate(-45deg);&#125;button:hover:after &#123;  left: 120%;  transition: all 600ms cubic-bezier(0.3, 1, 0.2, 1);   -webkit-transition: all 600ms cubic-bezier(0.3, 1, 0.2, 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-5"><a href="#GIF图-5" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_shiny.gif" alt="hover\_effect\_shiny"></p><h3 id="八-加载效果"><a href="#八-加载效果" class="headerlink" title="八.加载效果"></a>八.加载效果</h3><h4 id="HTML-7"><a href="#HTML-7" class="headerlink" title="HTML"></a>HTML</h4><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div id&#x3D;&quot;loading-btn&quot;&gt;  &lt;button&gt;&lt;span&gt;Hover me&lt;&#x2F;span&gt;&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="CSS-7"><a href="#CSS-7" class="headerlink" title="CSS"></a>CSS</h4><pre class="line-numbers language-CSS" data-language="CSS"><code class="language-CSS">#loading-btn &#123;  display: flex;  align-items: center;  justify-content: center;  height: 100vh;&#125;button &#123;  background: transparent;  border: 0;  border-radius: 0;  text-transform: uppercase;  font-weight: bold;  font-size: 20px;  padding: 15px 50px;  position: relative;&#125;button:before &#123;  transition: all 0.8s cubic-bezier(0.7, -0.5, 0.2, 2);  content: &#39;&#39;;  width: 1%;  height: 100%;  background: #ff5964;  position: absolute;  top: 0;  left: 0;&#125;button span &#123;  mix-blend-mode: darken;&#125;button:hover:before &#123;  background: #ff5964;  width: 100%;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="GIF图-6"><a href="#GIF图-6" class="headerlink" title="GIF图"></a>GIF图</h4><p><img src="https://raw.githubusercontent.com/reng99/blogs/master/capture/hover-effect/hover_effect_load.gif" alt="hover\_effect\_load"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>巧用伪元素<code>:before</code>、<code>:after</code>等，让你的页面按钮眼前一亮。原文链接：<a href="https://www.blog.duomly.com/html-button-hover-effects/">8 amazing HTML button hover effects, that will make your website memorable</a>。</p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习资料收藏1--爬取自博客“叶落阁”</title>
      <link href="/2023/12/11/xue-xi-zi-liao-shou-cang-pa-qu-zi-bo-ke-xie-luo-ge/"/>
      <url>/2023/12/11/xue-xi-zi-liao-shou-cang-pa-qu-zi-bo-ke-xie-luo-ge/</url>
      
        <content type="html"><![CDATA[<h3 id="为长期保存学习资料，所以转载了这些文章资料"><a href="#为长期保存学习资料，所以转载了这些文章资料" class="headerlink" title="为长期保存学习资料，所以转载了这些文章资料"></a>为长期保存学习资料，所以转载了这些文章资料</h3><blockquote><p>本文档662kb，图片多张，网烂机器不好请注意<br><a href="https://yelog.org/">原文作者:杨玉杰(叶落阁)</a><br><a href="https://github.com/yelog">原文作者:yelog</a></p></blockquote><p> <a href="#1" title="#1">3-hexo添加自定义图标</a><br> <a href="#100" title="#100">每天一个linux命令（49）: cal</a><br> <a href="#101" title="#101">每天一个linux命令（5）: rm</a><br> <a href="#10" title="#10">3-hexo快捷键说明</a><br> <a href="#103" title="#103">每天一个linux命令（51）: wc</a><br> <a href="#104" title="#104">每天一个linux命令（52）: ps</a><br> <a href="#102" title="#102">每天一个linux命令（50）: grep</a><br> <a href="#105" title="#105">每天一个linux命令（53）: watch</a><br> <a href="#106" title="#106">每天一个linux命令（54）: at</a><br> <a href="#109" title="#109">每天一个linux命令（57）: sftp</a><br> <a href="#107" title="#107">每天一个linux命令（55）: crontab</a><br> <a href="#108" title="#108">每天一个linux命令（56）: tailf</a><br> <a href="#11" title="#11">3-hexo支持mermaid图表</a><br> <a href="#110" title="#110">每天一个linux命令（58）: sort</a><br> <a href="#113" title="#113">每天一个linux命令（8）: cp</a><br> <a href="#111" title="#111">每天一个linux命令（6）: rmdir</a><br> <a href="#112" title="#112">每天一个linux命令（7）: mv</a><br> <a href="#114" title="#114">每天一个linux命令（9）: touch</a><br> <a href="#115" title="#115"> 每天一个linux命令</a><br> <a href="#116" title="#116">linux下修改按键ESC&lt;&#x3D;&gt;CAPSLOCK和Control&#x3D;&gt;ALT_R</a><br> <a href="#117" title="#117">linux无损调整分区大小</a><br> <a href="#118" title="#118">Mac神器-BTT(BetterTouchTool)不完全教程</a><br> <a href="#119" title="#119">Raycast 最强效率软件推荐</a><br> <a href="#12" title="#12">3-hexo文章内toc生成</a><br> <a href="#120" title="#120">MathJax适配Pjax</a><br> <a href="#121" title="#121">[记]《知识分子的不幸》-王小波</a><br> <a href="#123" title="#123">nginx配置记录</a><br> <a href="#122" title="#122">Mybatis常用Mapper语句</a><br> <a href="#124" title="#124">npm使用介绍</a><br> <a href="#125" title="#125">pjax用法</a><br> <a href="#126" title="#126">PostgreSQL事务及隔离级别</a><br> <a href="#127" title="#127">PostgreSQL初体验</a><br> <a href="#128" title="#128">PostgreSQL常用SQL操作</a><br> <a href="#130" title="#130">PostgreSQL的介绍与安装</a><br> <a href="#129" title="#129">PostgreSQL常用操作</a><br> <a href="#13" title="#13">Hexo主题3-hexo</a><br> <a href="#131" title="#131">reading-list</a><br> <a href="#132" title="#132">基于 nacos&#x2F;灰度发布 实现减少本地启动微服务数量的实践</a><br> <a href="#134" title="#134">搭建Git服务器</a><br> <a href="#133" title="#133">正则表达式详解</a><br> <a href="#135" title="#135">shell速查表</a><br> <a href="#136" title="#136">SpringCloud系列之接入SkyWalking进行链路追踪和日志收集</a><br> <a href="#137" title="#137">sudo命令免密码设置</a><br> <a href="#138" title="#138">tale博客搭建及体验</a><br> <a href="#139" title="#139">关于第三方评论系统</a><br> <a href="#14" title="#14">AngularJs快速入门</a><br> <a href="#140" title="#140">人们在一本叫《活着》的书中纷纷死去</a><br> <a href="#141" title="#141">2022年我在使用这些vim插件</a><br> <a href="#142" title="#142">Vim命令速查表</a><br> <a href="#143" title="#143">web.xml详解</a><br> <a href="#144" title="#144">windows环境下使用hexo搭建blog平台</a><br> <a href="#145" title="#145">一文看懂JavaScript中的Promise</a><br> <a href="#146" title="#146">不蒜子适配pjax</a><br> <a href="#147" title="#147">加密算法简介</a><br> <a href="#148" title="#148">多说适配pjax</a><br> <a href="#149" title="#149">如何在linux中搭建ftp服务</a><br> <a href="#15" title="#15">[转]浏览器前进&#x2F;后退缓存（BF Cache）</a><br> <a href="#150" title="#150">搭建dubbo+zookeeper平台</a><br> <a href="#151" title="#151">搭建Maven私服-Nexus</a><br> <a href="#152" title="#152">[译]理解浏览器关键渲染路径</a><br> <a href="#153" title="#153">解决iphone下后退不执行js的问题</a><br> <a href="#154" title="#154">解决linux下zip文件解压乱码</a><br> <a href="#155" title="#155">解决粘贴到vim缩进错乱问题</a><br> <a href="#156" title="#156">[转]SpringMVC执行流程及源码解析</a><br> <a href="#157" title="#157">[转]字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）</a><br> <a href="#158" title="#158">[转]谈谈Java中的语法糖</a><br> <a href="#159" title="#159">进入docker容器命令制作</a><br> <a href="#16" title="#16">CentOS7安装配置匿名访问Samba</a><br> <a href="#17" title="#17">CentOS7使用Firewalld</a><br> <a href="#18" title="#18">CentOS修改DNS&#x2F;GW&#x2F;IP</a><br> <a href="#19" title="#19">[Java]通过 CompletableFuture 实现异步多线程优化请求处理速度</a><br> <a href="#2" title="#2">3-hexo 添加音乐插件</a><br> <a href="#20" title="#20">一个客户端设置多个github账号</a><br> <a href="#21" title="#21">如何给GitHub上的项目贡献代码</a><br> <a href="#22" title="#22">deepin系统使用记录</a><br> <a href="#23" title="#23">docker备份恢复之save与export</a><br> <a href="#24" title="#24">Docker 技术整理</a><br> <a href="#26" title="#26">docker仓库</a><br> <a href="#27" title="#27">docker初体验</a><br> <a href="#25" title="#25">Dockerfile指令详解</a><br> <a href="#28" title="#28">docker容器</a><br> <a href="#29" title="#29">docker报错集锦</a><br> <a href="#3" title="#3">3-hexo评论设置</a><br> <a href="#30" title="#30">docker数据管理</a><br> <a href="#32" title="#32">el-drawer 实现鼠标拖拽宽度[ElementUI]</a><br> <a href="#31" title="#31">docker镜像</a><br> <a href="#33" title="#33">前端页面开发规范</a><br> <a href="#34" title="#34">人生若只如初见-《围城》</a><br> <a href="#35" title="#35">FreeMarker语法详解</a><br> <a href="#36" title="#36">Git常用命令</a><br> <a href="#37" title="#37">Git统计操作</a><br> <a href="#38" title="#38">Git操作之高手过招</a><br> <a href="#4" title="#4">3-hexo配置首页</a><br> <a href="#39" title="#39">Git之reset揭秘</a><br> <a href="#40" title="#40">Git之SSH与HTTPS免密码配置</a><br> <a href="#41" title="#41">完美替代多说-gitment</a><br> <a href="#42" title="#42">Hexo创建404页面</a><br> <a href="#43" title="#43">hexo报错合集</a><br> <a href="#45" title="#45">Hexo+Git服务器搭建blog</a><br> <a href="#44" title="#44">Hexo加速渲染速度之fragment_cache</a><br> <a href="#46" title="#46">Hexo+GitHub Pages搭建属于自己的blog</a><br> <a href="#47" title="#47">为Hexo添加RSS和Sitemap</a><br> <a href="#48" title="#48">Hexo置顶及排序问题</a><br> <a href="#49" title="#49">Hexo加入字数统计WordCount</a><br> <a href="#5" title="#5">3-hexo使用说明</a><br> <a href="#50" title="#50">idea常用快捷键</a><br> <a href="#51" title="#51">ideavim 使用百分号%支持xml的对应标签跳转</a><br> <a href="#52" title="#52">[译]Java内存泄露介绍</a><br> <a href="#53" title="#53">jQuery之checkbox|radio|select操作</a><br> <a href="#54" title="#54">jQuery选择器与节点操作</a><br> <a href="#55" title="#55">JSP操作记录</a><br> <a href="#56" title="#56">基于 nacos&#x2F;springcloud&#x2F;k8s 的不停机服务更新[graceful shutdown]</a><br> <a href="#57" title="#57">每天一个linux命令（1）: ls</a><br> <a href="#58" title="#58">每天一个linux命令（10）: cat</a><br> <a href="#6" title="#6">3-hexo支持jsfiddle渲染</a><br> <a href="#59" title="#59">每天一个linux命令（11）: nl</a><br> <a href="#60" title="#60">每天一个linux命令（12）: more</a><br> <a href="#62" title="#62">每天一个linux命令（14）: head</a><br> <a href="#61" title="#61">每天一个linux命令（13）: less</a><br> <a href="#63" title="#63">每天一个linux命令（15）: tail</a><br> <a href="#64" title="#64">每天一个linux命令（16）: which</a><br> <a href="#65" title="#65">每天一个linux命令（17）: whereis</a><br> <a href="#66" title="#66">每天一个linux命令（18）: locate</a><br> <a href="#67" title="#67">每天一个linux命令（19）: find命令概览</a><br> <a href="#69" title="#69">每天一个linux命令（20）: find命令之exec</a><br> <a href="#7" title="#7">3-hexo开发日志-持续更新</a><br> <a href="#68" title="#68">每天一个linux命令（2）: cd</a><br> <a href="#70" title="#70">每天一个linux命令（21）: find命令之xargs</a><br> <a href="#71" title="#71">每天一个linux命令（22）: find命令的参数详解</a><br> <a href="#72" title="#72">每天一个linux命令（23）: 用SecureCRT来上传和下载文件</a><br> <a href="#73" title="#73">每天一个linux命令（24）: tar</a><br> <a href="#74" title="#74">每天一个linux命令（25）: gzip</a><br> <a href="#75" title="#75">每天一个linux命令（26）: chmod</a><br> <a href="#77" title="#77">每天一个linux命令（28）: chown</a><br> <a href="#76" title="#76">每天一个linux命令（27）: chgrp</a><br> <a href="#78" title="#78">每天一个linux命令（29）: &#x2F;etc&#x2F;group文件详解</a><br> <a href="#79" title="#79">每天一个linux命令（3）: pwd</a><br> <a href="#8" title="#8">3-hexo配置MathJax数学公式渲染</a><br> <a href="#80" title="#80">每天一个linux命令（30）: df</a><br> <a href="#81" title="#81">每天一个linux命令（31）: du</a><br> <a href="#82" title="#82">每天一个linux命令（32）: top</a><br> <a href="#83" title="#83">每天一个linux命令（33）: free</a><br> <a href="#84" title="#84">每天一个linux命令（34）: vmstat</a><br> <a href="#85" title="#85">每天一个linux命令（35）: iostat</a><br> <a href="#86" title="#86">每天一个linux命令（36）: lsof</a><br> <a href="#87" title="#87">每天一个linux命令（37）: ifconfig</a><br> <a href="#88" title="#88">每天一个linux命令（38）: route</a><br> <a href="#89" title="#89">每天一个linux命令（39）: ping</a><br> <a href="#9" title="#9">3-hexo多作者模式</a><br> <a href="#90" title="#90">每天一个linux命令（4）: mkdir</a><br> <a href="#91" title="#91">每天一个linux命令（40）: traceroute</a><br> <a href="#93" title="#93">每天一个linux命令（42）: ss</a><br> <a href="#92" title="#92">每天一个linux命令（41）: netstat</a><br> <a href="#94" title="#94">每天一个linux命令（43）: telnet</a><br> <a href="#95" title="#95">每天一个linux命令（44）: rcp</a><br> <a href="#96" title="#96">每天一个linux命令（45）: scp</a><br> <a href="#98" title="#98">每天一个linux命令（47）: diff</a><br> <a href="#97" title="#97">每天一个linux命令（46）: ln</a><br> <a href="#99" title="#99">每天一个linux命令（48）: date</a></p><h3 id="3-hexo添加自定义图标-1-md-“-1-md”"><a href="#3-hexo添加自定义图标-1-md-“-1-md”" class="headerlink" title="3-hexo添加自定义图标(#1.md “#1.md”)"></a>3-hexo添加自定义图标(#1.md “#1.md”)</h3><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>鉴于许多人问过如何添加自定义图标，这里就详细说明一下，以备后人乘凉。</p><p>这篇文章主要讲解是从添加图标。</p><h2 id="二、添加彩色图标"><a href="#二、添加彩色图标" class="headerlink" title="二、添加彩色图标"></a>二、添加彩色图标</h2><h3 id="2-1-登录并添加图标"><a href="#2-1-登录并添加图标" class="headerlink" title="2.1 登录并添加图标"></a>2.1 登录并添加图标</h3><p>访问 ，点击如下图位置登录，可以使用 <code>Github</code> 账号登录。</p><p>登录成功后，搜索合适的图标，然后点击添加到购物车，如下图所示。</p><p>添加了多个后，可以点击右上角的“购物车”，添加到项目，点击加号创建项目，如下图所示。</p><p>添加完成后回到项目页面，找到自己刚刚创建的项目。</p><blockquote><p>如果没有到项目页面，可以点击上面菜单进入：资源管理 -&gt; 我的项目</p></blockquote><h3 id="2-2-引入-3-hexo-中"><a href="#2-2-引入-3-hexo-中" class="headerlink" title="2.2 引入 3-hexo 中"></a>2.2 引入 3-hexo 中</h3><p>点击下载到本地，解压并复制其中的 <code>iconfont.js</code> 到项目 <code>3-hexo/source/js/</code> 下，并改名 <code>custom-iconfont.js</code>。</p><p>在文件 <code>3-hexo/layout/_partial/meta.ejs</code> 最后追加下面一行。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;script src="&lt;%=theme.blog_path?theme.blog_path.lastIndexOf("/") === theme.blog_path.length-1?theme.blog_path.slice(0, theme.blog_path.length-1):theme.blog_path:'' %><span class="token script"><span class="token language-javascript"><span class="token operator">/</span>js<span class="token operator">/</span>custom<span class="token operator">-</span>iconfont<span class="token punctuation">.</span>js<span class="token operator">?</span>v<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">%=</span>theme<span class="token punctuation">.</span>version<span class="token operator">%</span><span class="token operator">></span>" <span class="token operator">></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-在配置文件中添加生效"><a href="#2-3-在配置文件中添加生效" class="headerlink" title="2.3 在配置文件中添加生效"></a>2.3 在配置文件中添加生效</h3><p>修改 <code>3-hexo/_config.yml</code> 如下图所示</p><p>完成！</p><blockquote><p>图标名如上面的 <code>gitee</code> 可以在 网站上修改，如下图所示</p></blockquote><h2 id="三、添加黑白图标"><a href="#三、添加黑白图标" class="headerlink" title="三、添加黑白图标"></a>三、添加黑白图标</h2><p><code>link.theme=white</code></p><h3 id="3-1-同-2-1"><a href="#3-1-同-2-1" class="headerlink" title="3.1 同 2.1"></a>3.1 同 2.1</h3><h3 id="3-2-引入-3-hexo-中"><a href="#3-2-引入-3-hexo-中" class="headerlink" title="3.2 引入 3-hexo 中"></a>3.2 引入 3-hexo 中</h3><p>点击生成代码，如下图所示。</p><p>复制生成的代码，修改 <code>font-family</code> 的值为 <code>custom-iconfont</code>，添加到 <code>3-hexo/source/css/_partial/font.styl</code> 最后，并写入图标信息，<code>content</code> 可以移到图标上进行复制，注意前面斜杠转译和去掉后面的分号。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'custom-iconfont'</span><span class="token punctuation">;</span>  <span class="token comment">/* project id 2298064 */</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'//at.alicdn.com/t/font_2298064_34vkk4c9945.eot'</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'//at.alicdn.com/t/font_2298064_34vkk4c9945.eot?#iefix'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'//at.alicdn.com/t/font_2298064_34vkk4c9945.woff2'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'//at.alicdn.com/t/font_2298064_34vkk4c9945.woff'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'//at.alicdn.com/t/font_2298064_34vkk4c9945.ttf'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">'//at.alicdn.com/t/font_2298064_34vkk4c9945.svg#iconfont'</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.icon-gitee:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\e602"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.icon-youtubeautored:before</span> <span class="token punctuation">&#123;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\e649"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-在配置文件中添加生效-同2-2"><a href="#3-3-在配置文件中添加生效-同2-2" class="headerlink" title="3.3 在配置文件中添加生效 同2.2"></a>3.3 在配置文件中添加生效 同2.2</h3><p>结束！</p><p>﻿</p><h3 id="3-hexo-添加音乐插件-2-md-“-2-md”"><a href="#3-hexo-添加音乐插件-2-md-“-2-md”" class="headerlink" title="3-hexo 添加音乐插件(#2.md “#2.md”)"></a>3-hexo 添加音乐插件(#2.md “#2.md”)</h3><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><h3 id="1-复制网易云音乐插件代码"><a href="#1-复制网易云音乐插件代码" class="headerlink" title="1. 复制网易云音乐插件代码"></a>1. 复制网易云音乐插件代码</h3><p>前往<a href="">网易云音乐官网</a>，搜索一个作为背景音乐的歌曲，并进入播放页面，点击 <strong>生成外链播放器</strong></p><p>设置好想要显示的样式后，复制 html 代码</p><p>最好外层在加一个 <code>div</code>，如下，可直接将上一步复制的 <code>iframe</code> 替换下方里面的 <code>iframe</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>musicMouseDrag<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span> 9999<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>musicDragArea<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span><span class="token property">cursor</span><span class="token punctuation">:</span> move<span class="token punctuation">;</span> <span class="token property">z-index</span><span class="token punctuation">:</span> 10<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>330</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>86</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//music.163.com/outchain/player?type=2&amp;id=38592976&amp;auto=1&amp;height=66<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-将插件引入到主题中"><a href="#2-将插件引入到主题中" class="headerlink" title="2. 将插件引入到主题中"></a>2. 将插件引入到主题中</h3><p>将上一步加过 <code>div</code> 的代码粘贴到主题下 <code>layout/_partial/footer.ejs</code> 的最后面<br><img src="/" alt="效果"></p><h3 id="3-调整位置"><a href="#3-调整位置" class="headerlink" title="3. 调整位置"></a>3. 调整位置</h3><p>默认给的样式是显示在右下角，可以通过调整上一步粘贴的 <code>div</code> 的 <code>style</code> 中 <code>bottom</code> 和 <code>right</code> 来调整位置。</p><h3 id="4-自由拖动"><a href="#4-自由拖动" class="headerlink" title="4. 自由拖动"></a>4. 自由拖动</h3><p>如果需要自由拖动，在刚才添加的代码后面，再添加下面代码即可，鼠标就可以在音乐控件的 <strong>上边沿</strong> 点击拖动</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--以下代码是为了支持随时拖动音乐控件的位置，如没有需求，可去掉下面代码--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> $<span class="token constant">DOC</span> <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#musicMouseDrag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mousedown'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 阻止文本选中</span>      $<span class="token constant">DOC</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"selectstart"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#musicDragArea'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'100%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> $moveTarget <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#musicMouseDrag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      $moveTarget<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'border'</span><span class="token punctuation">,</span> <span class="token string">'1px dashed grey'</span><span class="token punctuation">)</span>      <span class="token keyword">var</span> div_x <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> $moveTarget<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">;</span>      <span class="token keyword">var</span> div_y <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> $moveTarget<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span>      $<span class="token constant">DOC</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> targetX <span class="token operator">=</span> e<span class="token punctuation">.</span>pageX <span class="token operator">-</span> div_x<span class="token punctuation">;</span>        <span class="token keyword">var</span> targetY <span class="token operator">=</span> e<span class="token punctuation">.</span>pageY <span class="token operator">-</span> div_y<span class="token punctuation">;</span>        targetX <span class="token operator">=</span> targetX <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>targetX <span class="token operator">+</span> $moveTarget<span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span> <span class="token operator">?</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> $moveTarget<span class="token punctuation">.</span><span class="token function">outerWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> targetX<span class="token punctuation">;</span>        targetY <span class="token operator">=</span> targetY <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>targetY <span class="token operator">+</span> $moveTarget<span class="token punctuation">.</span><span class="token function">outerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span> <span class="token operator">?</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">-</span> $moveTarget<span class="token punctuation">.</span><span class="token function">outerHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> targetY<span class="token punctuation">;</span>        $moveTarget<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">'left'</span><span class="token operator">:</span> targetX <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">,</span> <span class="token string-property property">'top'</span><span class="token operator">:</span> targetY <span class="token operator">+</span> <span class="token string">'px'</span><span class="token punctuation">,</span> <span class="token string-property property">'bottom'</span><span class="token operator">:</span> <span class="token string">'inherit'</span><span class="token punctuation">,</span> <span class="token string-property property">'right'</span><span class="token operator">:</span> <span class="token string">'inherit'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        $<span class="token constant">DOC</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"selectstart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token constant">DOC</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">)</span>        $<span class="token constant">DOC</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">)</span>        $moveTarget<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'border'</span><span class="token punctuation">,</span> <span class="token string">'none'</span><span class="token punctuation">)</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#musicDragArea'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'10px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="3-hexo评论设置-3-md-“-3-md”"><a href="#3-hexo评论设置-3-md-“-3-md”" class="headerlink" title="3-hexo评论设置(#3.md “#3.md”)"></a>3-hexo评论设置(#3.md “#3.md”)</h3><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前 <code>3-hexo</code> 已经集成了评论系统有 <code>gitalk</code> 、<code>gitment</code>、 <code>disqus</code> 、<code>来必力</code>、<code>utteranc</code></p><h2 id="一、gitalk"><a href="#一、gitalk" class="headerlink" title="一、gitalk"></a>一、gitalk</h2><p>gitalk 是一款基于 Github Issue 和 Preact 开发的评论插件 官网: ()</p><h3 id="1-登录-github-，注册应用"><a href="#1-登录-github-，注册应用" class="headerlink" title="1. 登录 github ，注册应用"></a>1. 登录 github ，注册应用</h3><p><a href="">点击进行注册</a> ，如下</p><p><img src="/" alt="注册应用"></p><p>注册完后，可得到 <code>Client ID</code> 和 <code>Client Secret</code></p><h3 id="2-新建存放评论的仓库"><a href="#2-新建存放评论的仓库" class="headerlink" title="2. 新建存放评论的仓库"></a>2. 新建存放评论的仓库</h3><p>因为 <code>gitalk</code> 是基于 Github 的 Issue 的，所以需要指定一个仓库，用来承接 gitalk 的评论，我们一般使用 Github Page 来做我们博客的评论，所以，新建仓库名为 <code>xxx.github.io</code>，其中 xxx 为你的 Github 用户名</p><h3 id="3-配置主题"><a href="#3-配置主题" class="headerlink" title="3. 配置主题"></a>3. 配置主题</h3><p>在主题下 <code>_config.yml</code> 中找到如下配置，启用评论，并使用 <code>gitalk</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">##########评论设置#############</span><span class="token key atrule">comment</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> gitalk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在主题下 <code>_config.yml</code> 中找到 gitalk 配置，将 第1步 得到的  <code>Client ID</code> 和 <code>Client Secret</code> 复制到如下位置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">gitalk</span><span class="token punctuation">:</span>  <span class="token key atrule">githubID</span><span class="token punctuation">:</span>    <span class="token comment"># 填你的 github 用户名</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span>  xxx.github.io <span class="token comment"># 承载评论的仓库，一般使用 Github Page 仓库</span>  <span class="token key atrule">ClientID</span><span class="token punctuation">:</span>   <span class="token comment"># 第1步获得 Client ID</span>  <span class="token key atrule">ClientSecret</span><span class="token punctuation">:</span>  <span class="token comment"># 第1步获得 Client Secret</span>  <span class="token key atrule">adminUser</span><span class="token punctuation">:</span>     <span class="token comment"># Github 用户名</span>  <span class="token key atrule">distractionFreeMode</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN  <span class="token key atrule">perPage</span><span class="token punctuation">:</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、来必力"><a href="#二、来必力" class="headerlink" title="二、来必力"></a>二、来必力</h2><h3 id="1-创建来必力账号，并选择-City-免费版"><a href="#1-创建来必力账号，并选择-City-免费版" class="headerlink" title="1. 创建来必力账号，并选择 City 免费版"></a>1. 创建来必力账号，并选择 City 免费版</h3><p>官网() ，创建账号，点击上面的安装，选择 City 免费版</p><p><img src="/" alt="选择 city 免费版"></p><p>复制获取到的代码中的 <code>data-uid</code></p><p><img src="/" alt="复制 data-uid"></p><h3 id="2-主题选择使用来必力评论"><a href="#2-主题选择使用来必力评论" class="headerlink" title="2. 主题选择使用来必力评论"></a>2. 主题选择使用来必力评论</h3><p>在主题下 <code>_config.yml</code>  </p><p>在找到来必力配置如下，第一步中复制的 <code>data-uid</code> 粘贴到下面 <code>data_uid</code> 处</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">livere</span><span class="token punctuation">:</span>  <span class="token key atrule">data_uid</span><span class="token punctuation">:</span> xxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>找到以下代码， 开启并选择 livere (来必力)</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">##########评论设置#############</span><span class="token key atrule">comment</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> livere<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、utteranc"><a href="#三、utteranc" class="headerlink" title="三、utteranc"></a>三、utteranc</h2><p>官网地址：()</p><h3 id="1-安装-utterances"><a href="#1-安装-utterances" class="headerlink" title="1. 安装 utterances"></a>1. 安装 utterances</h3><p><a href="">点我进行安装</a></p><h3 id="2-配置主题"><a href="#2-配置主题" class="headerlink" title="2. 配置主题"></a>2. 配置主题</h3><p>在主题下 <code>_config.yml</code> 中找到 <code>utteranc</code> 的配置 ，修改 <code>repo</code> 为自己的仓库名</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">utteranc</span><span class="token punctuation">:</span>  <span class="token key atrule">repo</span><span class="token punctuation">:</span> xxx/xxx.github.io <span class="token comment"># 承载评论的仓库，填上自己的仓库</span>  <span class="token key atrule">issue_term</span><span class="token punctuation">:</span> pathname    <span class="token comment"># Issue 与 博客文章 之间映射关系</span>  <span class="token key atrule">label</span><span class="token punctuation">:</span> utteranc         <span class="token comment"># 创建的 Issue 添加的标签</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>light     <span class="token comment"># 主题，可选主题请查看官方文档 </span><span class="token comment"># 官方文档 </span><span class="token comment"># 使用说明 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在主题下 <code>_config.yml</code> 中找到如下配置，启用评论，并使用 <code>utteranc</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">comment</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> utteranc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="3-hexo配置首页-4-md-“-4-md”"><a href="#3-hexo配置首页-4-md-“-4-md”" class="headerlink" title="3-hexo配置首页(#4.md “#4.md”)"></a>3-hexo配置首页(#4.md “#4.md”)</h3><p>今日将首页提到md文件中了，方便大家的更改。</p><p>首页文件位置 &#x2F;layout&#x2F;indexs.md ，既然是md格式，要怎么写大家应该都熟门熟路了，阿杰就不赘述了。</p><p>如果需要使用以下信息，可以按照下面的方式使用（<strong>以下内容不限首页使用</strong>）</p><h2 id="文章数统计-字数统计"><a href="#文章数统计-字数统计" class="headerlink" title="文章数统计&#x2F;字数统计"></a>文章数统计&#x2F;字数统计</h2><p>加入含有 <code>class=&quot;article_number&quot;</code>的html标签可显示文章数量。<br>加入含有 <code>class=&quot;site_word_count&quot;</code>的html标签可显示站点总字数。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 我这里是借用了code的样式，所以直接使用code标签。    自定义样式，可加入style属性设置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>article_number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site_word_count<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上面代码的效果：</strong><br>文章：<code class="article_number"></code>篇；总字数：<code class="site_word_count"></code>字；</p><h2 id="流量统计"><a href="#流量统计" class="headerlink" title="流量统计"></a>流量统计</h2><blockquote><p>日志： 2017-03-18改动，由原来的 id 改为现在的 class，可在页面添加多个同类标签</p></blockquote><p>加入含有 <code>class=&quot;site_uv&quot;</code>的html标签可显示站点访问人次。<br>加入含有 <code>class=&quot;site_pv&quot;</code>的html标签可显示站点访问量。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 我这里是借用了code的样式，所以直接使用code标签。    自定义样式，可加入style属性设置--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上面代码的效果：</strong><br>访问人数：<code class="site_uv"></code>人，访问量：<code class="site_pv"></code>次。</p><p>﻿</p><blockquote><p>下面如果没有特殊说明， <code>_config.yml</code> 都指主题配置文件，即 <code>3-hexo</code> 目录下</p></blockquote><h2 id="一、初始化博客下-config-yml"><a href="#一、初始化博客下-config-yml" class="headerlink" title="一、初始化博客下 _config.yml"></a>一、初始化博客下 _config.yml</h2><h3 id="1-1-国际化"><a href="#1-1-国际化" class="headerlink" title="1.1 国际化"></a>1.1 国际化</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN <span class="token comment">#支持 zh-CN、en</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-关掉-hexo-自带的代码高亮"><a href="#1-2-关掉-hexo-自带的代码高亮" class="headerlink" title="1.2 关掉 hexo 自带的代码高亮"></a>1.2 关掉 hexo 自带的代码高亮</h3><p>主题内置了主题高亮，所以需要禁用 hexo 自带的高亮</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span><span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-开启关于页面"><a href="#2-5-开启关于页面" class="headerlink" title="2.5 开启关于页面"></a>2.5 开启<code>关于</code>页面</h3><ol><li>在 <code>hexo</code> 根目录执行以下，创建 <code>关于</code> 页面<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>位置： <code>source/aoubt/index.md</code> ，根据需要进行编辑。</li><li>在主题中开启显示：修改主题根目录 <code>_config.yml</code> 中的 <code>about</code> 的 <code>on</code> 为 <code>true</code>，如下所示<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">about</span><span class="token punctuation">:</span>  <span class="token comment"># '关于' 按钮</span>    <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about  <span class="token comment"># 跳转链接</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 跳转类型 1：站内异步跳转 2：当前页面跳转 3：打开新的tab页</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="三、样式设置"><a href="#三、样式设置" class="headerlink" title="三、样式设置"></a>三、样式设置</h2><h3 id="3-1-代码高亮"><a href="#3-1-代码高亮" class="headerlink" title="3.1 代码高亮"></a>3.1 代码高亮</h3><p>首先要关闭hexo根目录下<code>_config.yml</code>中的高亮设置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置主题下<code>_config.yml</code>中的高亮设置：<br>可以根据提示，配置喜欢的高亮主题</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># true开启代码高亮</span>  <span class="token key atrule">lineNum</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># true显示行号</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> darcula<span class="token comment"># 代码高亮主题,效果可以查看 </span><span class="token comment"># 支持主题：</span><span class="token comment"># sublime : 参考sublime的高亮主题</span><span class="token comment"># darcula : 参考idea中的darcula的主题</span><span class="token comment"># atom-dark : 参考Atom的dark主题</span><span class="token comment"># atom-light : 参考Atom的light主题</span><span class="token comment"># github : 参考GitHub版的高亮主题</span><span class="token comment"># github-gist : GitHub-Gist主题</span><span class="token comment"># brown-paper : 牛皮纸效果</span><span class="token comment"># gruvbox-light : gruvbox的light主题</span><span class="token comment"># gruvbox-dark ： gruvbox的dark主题</span><span class="token comment"># rainbow :</span><span class="token comment"># railscasts :</span><span class="token comment"># sunburst :</span><span class="token comment"># kimbie-dark :</span><span class="token comment"># kimbie-light :</span><span class="token comment"># school-book : 纸张效果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-MathJax数学公式"><a href="#3-2-MathJax数学公式" class="headerlink" title="3.2 MathJax数学公式"></a>3.2 MathJax数学公式</h3><p>修改 <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># MathJax 数学公式支持</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#是否启用</span>  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 若只渲染单个页面，此选项设为false，页面内加入 mathjax: true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>考虑到页面的加载速度，支持渲染单个页面。<br>设置 <code>per_page: false</code> ,在需要渲染的页面内 加入 <code>mathjax: true</code></p><blockquote><p><strong><code>注意: </code></strong><br>由于hexo的MarkDown渲染器与MathJax有冲突，可能会造成矩阵等使用不正常。所以在使用之前需要修改两个地方<br>编辑 <code>node_modules\marked\lib\marked.js</code> 脚本</p></blockquote><ol><li>将451行 ，这一步取消了对 <code>\\,\&#123;,\&#125;</code> 的转义(escape)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([\\`*&#123;&#125;\[\]()# +\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>改为<span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([`*\[\]()# +\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>将459行，这一步取消了对斜体标记 <code>_</code> 的转义<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">em</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>改为<span class="token literal-property property">em</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-3-表格样式"><a href="#3-3-表格样式" class="headerlink" title="3.3 表格样式"></a>3.3 表格样式</h3><p>目前提供了3中样式，修改 <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">table</span><span class="token punctuation">:</span> green_title<span class="token comment"># table 的样式</span><span class="token comment"># 为空时类似github的table样式</span><span class="token comment"># green 绿色样式</span><span class="token comment"># green_title 头部为青色的table样式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-文章列表的hover样式"><a href="#3-4-文章列表的hover样式" class="headerlink" title="3.4 文章列表的hover样式"></a>3.4 文章列表的hover样式</h3><p>鼠标移入的背景色和文字颜色变动，设置 <code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#文章列表 鼠标移上去的样式, 为空时使用默认效果</span><span class="token key atrule">article_list</span><span class="token punctuation">:</span>  <span class="token key atrule">hover</span><span class="token punctuation">:</span>    <span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'#e2e0e0'</span>  <span class="token comment"># 背景色:提供几种：'#c1bfc1'  '#fbf4a8'</span>    <span class="token key atrule">color</span><span class="token punctuation">:</span>     <span class="token comment"># 文字颜色 提供几种：'#ffffff'</span><span class="token comment"># 注意：由于颜色如果包含#，使用单引号 ' 引起来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-开启字数统计"><a href="#3-5-开启字数统计" class="headerlink" title="3.5 开启字数统计"></a>3.5 开启字数统计</h3><ol><li>开启此功能需先安装插件，在 hexo根目录 执行 <code>npm i hexo-wordcount --save</code></li><li>修改 <code>_config.yml</code></li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">word_count</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-6-更换头像"><a href="#3-6-更换头像" class="headerlink" title="3.6 更换头像"></a>3.6 更换头像</h3><p>两种方式：</p><ol><li>替换 <code>source/img/avatar.jpg</code> 图片。</li><li>修改 <code>_config.yml</code> 中头像的配置记录</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 你的头像url</span><span class="token key atrule">avatar</span><span class="token punctuation">:</span> /img/avatar.jpg<span class="token key atrule">favicon</span><span class="token punctuation">:</span> /img/avatar.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-7-设置链接图标"><a href="#3-7-设置链接图标" class="headerlink" title="3.7 设置链接图标"></a>3.7 设置链接图标</h3><p>如下，如果没有连接，则不展示图标。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#链接图标，链接为空则不显示</span><span class="token key atrule">link</span><span class="token punctuation">:</span>  <span class="token key atrule">rss</span><span class="token punctuation">:</span> /atom.xml  <span class="token key atrule">github</span><span class="token punctuation">:</span>   <span class="token key atrule">facebook</span><span class="token punctuation">:</span>   <span class="token key atrule">twitter</span><span class="token punctuation">:</span>  <span class="token key atrule">linkedin</span><span class="token punctuation">:</span>  <span class="token key atrule">instagram</span><span class="token punctuation">:</span>  <span class="token key atrule">reddit</span><span class="token punctuation">:</span>   <span class="token key atrule">weibo</span><span class="token punctuation">:</span>   <span class="token key atrule">email</span><span class="token punctuation">:</span> jaytp@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、排序及置顶"><a href="#四、排序及置顶" class="headerlink" title="四、排序及置顶"></a>四、排序及置顶</h2><h3 id="4-1-分类排序"><a href="#4-1-分类排序" class="headerlink" title="4.1 分类排序"></a>4.1 分类排序</h3><p>默认按照首字母正序排序，由于中文在 <code>nodejs</code> 环境下不能按照拼音首字母排序，所以添加了自定义排序方式，在主题下 <code>_config.yml</code> 中找到如下配置，<code>category.sort</code>则是定义分类顺序的。</p><p><strong>规则：</strong>在 <code>sort</code>中定义的 <code>category</code> 比 没有在 <code>sort</code> 中定义的更靠前</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 文章分类设置</span><span class="token key atrule">category</span><span class="token punctuation">:</span>  <span class="token key atrule">num</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 分类显示文章数</span>  <span class="token key atrule">sub</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启多级分类</span>  <span class="token key atrule">sort</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> 读书    <span class="token punctuation">-</span> 大前端    <span class="token punctuation">-</span> 后端    <span class="token punctuation">-</span> 数据库    <span class="token punctuation">-</span> 工具    <span class="token punctuation">-</span> 运维<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-文章排序"><a href="#4-2-文章排序" class="headerlink" title="4.2 文章排序"></a>4.2 文章排序</h3><blockquote><p>2020-05-20 更新：无需安装插件或修改源码，主题已经内置排序算法</p></blockquote><p>文章列表默认按照创建时间（如下文章内定义的<code>date</code>）倒序。</p><p>使用 <code>top</code> 将会置顶文章，多个置顶文章时，<code>top</code> 定义的值越大，越靠前。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、关于写文章"><a href="#五、关于写文章" class="headerlink" title="五、关于写文章"></a>五、关于写文章</h2><h3 id="5-1-如何写"><a href="#5-1-如何写" class="headerlink" title="5.1 如何写"></a>5.1 如何写</h3><p>每篇文章最好写上文集和标签，方便筛选和查看。<br>一般推荐一篇文章设置一个文集，一个或多个标签<br><code>categories</code>:文集，为左侧列表<br><code>tags</code>:标签，通过#来筛选<br>例如 本篇文章的设置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-写作"><a href="#5-2-写作" class="headerlink" title="5.2 写作"></a>5.2 写作</h3><p>1.设置模板，blog根目录 <code>scaffolds/post.md</code><br>加入categories,tags等，这样以后通过 <code>hexo new</code> 生成的模板就不用写这两个单词了。<br>当然，你也可以写入任何你每个文章中都会有的部分。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">###  3-hexo使用说明(#5.md "#5.md")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="六、技巧"><a href="#六、技巧" class="headerlink" title="六、技巧"></a>六、技巧</h2><h3 id="6-1-快捷命令"><a href="#6-1-快捷命令" class="headerlink" title="6.1 快捷命令"></a>6.1 快捷命令</h3><p>其实就通过alias，触发一些命令的集合<br>在 <code>~/.bashrc</code> 文件中添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">hs</span><span class="token operator">=</span><span class="token string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo s'</span>  <span class="token comment">#启动本地服务</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">hd</span><span class="token operator">=</span><span class="token string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo d'</span>  <span class="token comment">#部署博客</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>甚至你也可以加入备份文章的命令，可以自由发挥。</p><h3 id="6-3-博客备份（快捷命令升级版）"><a href="#6-3-博客备份（快捷命令升级版）" class="headerlink" title="6.3 博客备份（快捷命令升级版）"></a>6.3 博客备份（快捷命令升级版）</h3><p>为了保证我们写的文章不丢失、快速迁移博客，都需要备份我们的blog。</p><ol><li>博客根目录，执行 <code>git init</code> 创建 git 仓库。</li><li>在 github（或其他托管平台、自建远程仓库等） 创建仓库并和本地仓库建立联系。</li><li>在 <code>~/.bashrc</code> 文件中添加<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">hs</span><span class="token operator">=</span><span class="token string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo s'</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">hd</span><span class="token operator">=</span><span class="token string">'hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m "update" &amp;&amp; git push -f'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>这样，我们在执行 <code>hd</code> 进行部署时，就一同将博客进行备份了</p><p>﻿</p><h3 id="3-hexo支持jsfiddle渲染-6-md-“-6-md”"><a href="#3-hexo支持jsfiddle渲染-6-md-“-6-md”" class="headerlink" title="3-hexo支持jsfiddle渲染(#6.md “#6.md”)"></a>3-hexo支持jsfiddle渲染(#6.md “#6.md”)</h3><h3 id="1-canvas-粒子效果"><a href="#1-canvas-粒子效果" class="headerlink" title="1. canvas 粒子效果"></a>1. canvas 粒子效果</h3><script async src="//jsfiddle.net/yelog/eqc7zdLo/embed/result,js,html,css/"></script><h3 id="2-复选框动画"><a href="#2-复选框动画" class="headerlink" title="2. 复选框动画"></a>2. 复选框动画</h3><script async src="//jsfiddle.net/yelog/5g9jf31t/1/embed/result,html,css/"></script><p>﻿</p><h3 id="3-hexo开发日志-持续更新-7-md-“-7-md”"><a href="#3-hexo开发日志-持续更新-7-md-“-7-md”" class="headerlink" title="3-hexo开发日志-持续更新(#7.md “#7.md”)"></a>3-hexo开发日志-持续更新(#7.md “#7.md”)</h3><h2 id="2023年11月"><a href="#2023年11月" class="headerlink" title="2023年11月"></a>2023年11月</h2><h2 id="11-22"><a href="#11-22" class="headerlink" title="11-22"></a>11-22</h2><ol><li><code>fix</code> <a href="">修复代码块, 复制时丢失缩进和空格问题</a></li><li>环境 - 改为实例</li></ol><h2 id="2023年6月"><a href="#2023年6月" class="headerlink" title="2023年6月"></a>2023年6月</h2><h3 id="06-16"><a href="#06-16" class="headerlink" title="06-16"></a>06-16</h3><ol><li><code>fix</code> 修复文章分类层级不能无限递归的问题</li></ol><h3 id="06-02"><a href="#06-02" class="headerlink" title="06-02"></a>06-02</h3><ol><li><code>fix</code> 修复由于层级不连续，导致的 toc 获取不完整的问题</li></ol><h2 id="2023年5月"><a href="#2023年5月" class="headerlink" title="2023年5月"></a>2023年5月</h2><h3 id="05-23"><a href="#05-23" class="headerlink" title="05-23"></a>05-23</h3><ol><li><code>fix</code> 修复设置宽度后，背景不全 fixes <a href="">#123</a></li></ol><h3 id="05-19"><a href="#05-19" class="headerlink" title="05-19"></a>05-19</h3><ol><li><code>fix</code> 修复隐藏文章后, 左侧分类上的文章数量不对的问题</li></ol><h2 id="2022年6月"><a href="#2022年6月" class="headerlink" title="2022年6月"></a>2022年6月</h2><h3 id="06-27"><a href="#06-27" class="headerlink" title="06-27"></a>06-27</h3><ol><li><code>add</code> 添加隐藏文章参数 <code>hidden</code>, 设置为 true 将文章从列表中隐藏</li></ol><h2 id="2022年2月"><a href="#2022年2月" class="headerlink" title="2022年2月"></a>2022年2月</h2><h3 id="02-22"><a href="#02-22" class="headerlink" title="02-22"></a>02-22</h3><ol><li><code>fix</code> jquery dom selector contains special symbols cause errors</li><li><code>fix</code> Script could run successfully in the case of errors synchronizing TOC</li></ol><h3 id="02-16"><a href="#02-16" class="headerlink" title="02-16"></a>02-16</h3><ol><li><code>fix</code> 修复首页使用自定义 html 标题时，大纲和文章关联关系丢失报错的问题</li></ol><h2 id="2021年9月"><a href="#2021年9月" class="headerlink" title="2021年9月"></a>2021年9月</h2><h3 id="09-26"><a href="#09-26" class="headerlink" title="09-26"></a>09-26</h3><ol><li><code>fix</code> 修复 gitalk 代理节点的问题，并升级为官方最新的代码</li></ol><h2 id="2021年2月"><a href="#2021年2月" class="headerlink" title="2021年2月"></a>2021年2月</h2><h3 id="02-22-1"><a href="#02-22-1" class="headerlink" title="02-22"></a>02-22</h3><ol><li><code>enhance</code> 按标题搜索支持字符级别模糊查询，并高亮显示</li></ol><h2 id="2020年12月"><a href="#2020年12月" class="headerlink" title="2020年12月"></a>2020年12月</h2><h3 id="12-28"><a href="#12-28" class="headerlink" title="12-28"></a>12-28</h3><ol><li><code>fix</code> 修复了右下角按钮错位问题</li><li><code>enhance</code> 优化图标样式，支持自定义图标引入</li><li><code>change</code> 分类超出隐藏</li></ol><h2 id="2020年8月"><a href="#2020年8月" class="headerlink" title="2020年8月"></a>2020年8月</h2><h3 id="08-09"><a href="#08-09" class="headerlink" title="08-09"></a>08-09</h3><ol><li><code>fix</code> 修复了切换大纲时，未关闭全局搜索框(in:) 的问题<br><a href="2">2</a>. <code>add</code> 代码块新增显示代码类型和复制代码功能</li><li><code>fix</code>分类支持 <code>\/#.[]()</code> 特殊字符</li><li><code>fix</code> 大纲支持<code>URI</code> 编码，兼容 <code>hexo5+</code></li></ol><h2 id="2020年5月"><a href="#2020年5月" class="headerlink" title="2020年5月"></a>2020年5月</h2><h3 id="05-29"><a href="#05-29" class="headerlink" title="05-29"></a>05-29</h3><ol><li><code>fix</code> 修复了旧版 hexo 报错的问题</li></ol><h3 id="05-23-1"><a href="#05-23-1" class="headerlink" title="05-23"></a>05-23</h3><ol><li><code>change</code> 由于 <code>cloudflare</code> 国内访问不稳定，故 <code>cdn</code> 切换到 <code>jsdelivr</code></li><li><code>fix</code> 修复文章大纲为空时，同步大纲报错的问题</li><li><code>change</code> 文章内 toc 生成从 <code>@【toc】</code> 改为 <code>【toc】</code> </li><li><code>enhance</code> 快捷键支持关闭 <code>shortcutKey: false</code></li><li><code>add</code> 添加第三方评论 来必力 和 utteranc</li><li><code>remove</code> 移除网易云评论</li></ol><h3 id="05-21"><a href="#05-21" class="headerlink" title="05-21"></a>05-21</h3><ol><li><code>add</code> 添加备案号配置</li></ol><h3 id="05-20"><a href="#05-20" class="headerlink" title="05-20"></a>05-20</h3><ol><li><code>enhance</code> 内置文章排序，无需再引入排序插件或修改源代码</li><li><code>enhance</code> 支持自定义分类的顺序， 具体可以查看  中的排序相关内容</li></ol><h3 id="05-19-1"><a href="#05-19-1" class="headerlink" title="05-19"></a>05-19</h3><ol><li><code>change</code> 重做了文章大纲</li><li><code>change</code> 重做了搜索&#x2F;标签页</li><li><code>style</code> 优化了整体界面风格</li><li><code>fix</code>修复了诸如 <strong>分类选中动画闪烁</strong> 等细节问题</li></ol><h2 id="2020年2月"><a href="#2020年2月" class="headerlink" title="2020年2月"></a>2020年2月</h2><h3 id="02-04"><a href="#02-04" class="headerlink" title="02-04"></a>02-04</h3><p>1.<code>fix</code>: 修复 gitalk 使用  app API query parameter 弃用的问题</p><h2 id="2019年11月"><a href="#2019年11月" class="headerlink" title="2019年11月"></a>2019年11月</h2><h3 id="11-12"><a href="#11-12" class="headerlink" title="11-12"></a>11-12</h3><p>1.<code>fix</code>: 修复 hexo4.0 版本链接外跳的问题<br>2.<code>add</code>: 支持 mermaid </p><h3 id="09-24"><a href="#09-24" class="headerlink" title="09-24"></a>09-24</h3><p>1.<code>add</code>: 支持文章内 toc 生成 </p><h3 id="09-05"><a href="#09-05" class="headerlink" title="09-05"></a>09-05</h3><p>1.<code>fix</code>: <code>pjax</code> 兼容 <code>jsfiddle</code> 的渲染 </p><h2 id="2019年8月"><a href="#2019年8月" class="headerlink" title="2019年8月"></a>2019年8月</h2><h3 id="08-20"><a href="#08-20" class="headerlink" title="08-20"></a>08-20</h3><p>1.<code>fix</code>: 左下角菜单个数为一个时，在移动端出现的位置错乱的问题</p><h3 id="08-13"><a href="#08-13" class="headerlink" title="08-13"></a>08-13</h3><ol><li><code>add</code> 添加自定义左侧分类栏宽度 <code>category.width</code>，详情见 <code>_config.yml</code></li></ol><h3 id="08-01"><a href="#08-01" class="headerlink" title="08-01"></a>08-01</h3><ol><li><code>fix</code> 修复 友链 区域超出不滚动的问题</li></ol><h2 id="2019年7月"><a href="#2019年7月" class="headerlink" title="2019年7月"></a>2019年7月</h2><h3 id="07-22"><a href="#07-22" class="headerlink" title="07-22"></a>07-22</h3><ol><li><code>add</code> 新增修改文章列表颜色的参数</li></ol><h3 id="07-15"><a href="#07-15" class="headerlink" title="07-15"></a>07-15</h3><ol><li><code>fix</code> 修复 <strong>gitalk</strong> 由于作者停止了跨域的服务，借用其他人的跨域服务解决问题</li></ol><h3 id="07-12"><a href="#07-12" class="headerlink" title="07-12"></a>07-12</h3><ol><li><code>add</code> 新增图标：<strong>qq、酷狗、网易云音乐</strong></li><li><code>fix</code> 修复文末声明跨行的问题</li></ol><h2 id="2019年6月"><a href="#2019年6月" class="headerlink" title="2019年6月"></a>2019年6月</h2><h3 id="06-09"><a href="#06-09" class="headerlink" title="06-09"></a>06-09</h3><ol><li><code>fix</code> 修复了标签按钮在某些分辨率下错位问题。</li><li><code>fix</code> 修复了代码行数超百行时，行号溢出的问题</li></ol><h2 id="2019年5月"><a href="#2019年5月" class="headerlink" title="2019年5月"></a>2019年5月</h2><h3 id="05-21-1"><a href="#05-21-1" class="headerlink" title="05-21"></a>05-21</h3><ol><li><p><code>add</code> 文章分类可以显示文章数 <code>category&gt;num</code></p></li><li><p><code>add</code> 文章分类支持多级显示 <code>category&gt;sub</code></p></li><li><p><code>fix</code> 修复<code>gitalk</code>显示评论数错误的问题</p></li><li><p>添加背景图设置：</p><blockquote><p>① <code>_config.xml</code> 配置默认背景图片</p><p>首页背景图： <code>index_bg_img: xxx.jpg</code></p><p>文章页面背景图：<code>other_bg_img: xxx.jpg</code></p><p>② 我们还可以单独给某篇文章设置背景图（优先级最高）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 3<span class="token punctuation">-</span>hexo开发日志<span class="token punctuation">-</span>持续更新<span class="token key atrule">bgImg</span><span class="token punctuation">:</span> xxx.jpg  <span class="token comment">#设置这篇文章的背景图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li></ol><h3 id="05-05"><a href="#05-05" class="headerlink" title="05-05"></a>05-05</h3><ol><li><code>add</code> 添加代码段高亮样式配置，对应 markdown 语法 `` ，位置：<code>_config.yml</code> 关键字 <code>code</code></li></ol><h2 id="2019年1月"><a href="#2019年1月" class="headerlink" title="2019年1月"></a>2019年1月</h2><h3 id="01-05"><a href="#01-05" class="headerlink" title="01-05"></a>01-05</h3><ol><li><code>fix</code> 修复Firefox下，Tags 图标失效问题</li></ol><h2 id="2018年11月"><a href="#2018年11月" class="headerlink" title="2018年11月"></a>2018年11月</h2><h3 id="11-30"><a href="#11-30" class="headerlink" title="11-30"></a>11-30</h3><ol><li><code>add</code> 应用彩色图标，新增简书、知乎、csdn、oschina等图标<br><img src="/" alt="应用彩色图标"></li><li><code>fix</code> 修复 gitment 登录报错的问题</li><li><code>enhance</code> 升级gitalk插件，并跟随官方版本</li></ol><h2 id="2018年8月"><a href="#2018年8月" class="headerlink" title="2018年8月"></a>2018年8月</h2><h3 id="08-08-修复"><a href="#08-08-修复" class="headerlink" title="08-08 修复"></a>08-08 修复</h3><ol><li><code>fix</code> : 修复左侧栏出现滚动条的问题</li></ol><h2 id="2018年4月"><a href="#2018年4月" class="headerlink" title="2018年4月"></a>2018年4月</h2><h3 id="04-18-修复"><a href="#04-18-修复" class="headerlink" title="04-18 修复"></a>04-18 修复</h3><ol><li><code>fix</code> : 调整原文地址key，解决和 encrypt 的冲突</li></ol><h2 id="2017年12月"><a href="#2017年12月" class="headerlink" title="2017年12月"></a>2017年12月</h2><h3 id="12-31-优化"><a href="#12-31-优化" class="headerlink" title="12-31 优化"></a>12-31 优化</h3><ol><li><code>enhance</code> : 关闭打赏，则屏蔽相关代码。</li></ol><h3 id="12-28-添加自定义菜单功能"><a href="#12-28-添加自定义菜单功能" class="headerlink" title="12-28 添加自定义菜单功能"></a>12-28 添加自定义菜单功能</h3><ol><li><code>add</code> : 添加自定义菜单功能，见配置文件 <code>menu:</code> 相关</li><li><code>fix</code> : 修复 <code>photoSwipe</code> 一些问题：手机端右上角图标遮挡、首页图片渲染失败、CDN引入配置文件</li></ol><h3 id="12-27-插件添加"><a href="#12-27-插件添加" class="headerlink" title="12-27 插件添加"></a>12-27 插件添加</h3><ol><li><code>add</code> : 引入 <code>photoSwipe</code> 图片相册，可在 <code>_config</code> 中 配置 <code>img_resize: photoSwipe</code></li><li><code>fix</code> : 左侧分类列表过多，则显示滚动条</li><li><code>change</code> : 由于cdnjs最近在国内网络波动较大，将默认CDN改到bootcdn</li></ol><h3 id="12-26-功能优化"><a href="#12-26-功能优化" class="headerlink" title="12-26 功能优化"></a>12-26 功能优化</h3><ol><li><code>enhance</code> : 全文检索支持通过方向键选择文章，回车跳转</li></ol><h3 id="12-24-功能添加"><a href="#12-24-功能添加" class="headerlink" title="12-24 功能添加"></a>12-24 功能添加</h3><ol><li><code>add</code> : 添加全文检索功能， 输入<code>in:</code>开头即可开始检索</li></ol><h2 id="2017年10月"><a href="#2017年10月" class="headerlink" title="2017年10月"></a>2017年10月</h2><h3 id="10-21-样式调整"><a href="#10-21-样式调整" class="headerlink" title="10-21 样式调整"></a>10-21 样式调整</h3><ol><li><code>enhance</code> : 优化了高亮样式 <code>atom-light</code></li></ol><h3 id="10-20-样式调整与添加"><a href="#10-20-样式调整与添加" class="headerlink" title="10-20 样式调整与添加"></a>10-20 样式调整与添加</h3><ol><li><code>add</code> : 添加列表样式 <code>thread</code></li><li><code>add</code> : 添加引用块样式 <code>bracket</code></li><li><code>add</code> : 文章列表可加入背景图</li></ol><h3 id="10-07"><a href="#10-07" class="headerlink" title="10-07"></a>10-07</h3><ol><li><code>add</code> : 加入关于&#x2F;友链页面</li></ol><h2 id="2017年9月"><a href="#2017年9月" class="headerlink" title="2017年9月"></a>2017年9月</h2><h3 id="09-21"><a href="#09-21" class="headerlink" title="09-21"></a>09-21</h3><ol><li><code>polish</code> : 引入<code>fragment_cache</code>局部缓存，大幅缩减渲染(hexo g)的时间 </li><li><code>enhance</code> : 加入 SEO ，tag转keywords , title转description</li><li><code>add</code> : 添加文末说明参数</li><li><code>lit</code> : 头像跳转首页的请求也处理为 pjax</li></ol><h2 id="2017年7月"><a href="#2017年7月" class="headerlink" title="2017年7月"></a>2017年7月</h2><h3 id="07-05-添加MathJax数学公式支持"><a href="#07-05-添加MathJax数学公式支持" class="headerlink" title="07-05 添加MathJax数学公式支持"></a>07-05 添加MathJax数学公式支持</h3><ol><li><code>add</code> : 添加MathJax数学公式支持</li></ol><h2 id="2017年6月"><a href="#2017年6月" class="headerlink" title="2017年6月"></a>2017年6月</h2><h3 id="06-26-添加gitment评论系统"><a href="#06-26-添加gitment评论系统" class="headerlink" title="06-26 添加gitment评论系统"></a>06-26 添加gitment评论系统</h3><ol><li><code>add</code> : 添加gitment评论系统，具体可参考</li></ol><h2 id="2017年4月"><a href="#2017年4月" class="headerlink" title="2017年4月"></a>2017年4月</h2><h3 id="04-27-调整样式"><a href="#04-27-调整样式" class="headerlink" title="04-27 调整样式"></a>04-27 调整样式</h3><ol><li><code>change</code>：调整引用块内p的样式。</li></ol><h3 id="04-19-调整样式和修复bug"><a href="#04-19-调整样式和修复bug" class="headerlink" title="04-19 调整样式和修复bug"></a>04-19 调整样式和修复bug</h3><ol><li><code>change:</code>调整文章目录间距</li><li><code>fix:</code>修复可能出现的访问量不显示的问题</li></ol><h3 id="04-17-调整样式及修复bug"><a href="#04-17-调整样式及修复bug" class="headerlink" title="04-17 调整样式及修复bug"></a>04-17 调整样式及修复bug</h3><ol><li><code>change:</code>调整大屏下文章最大宽度（从780调到900），代码字号调整为比文字小3px</li><li><code>fix:</code>修复在过滤条件下，鼠标上下键不能正常在第一个，最后一个进行跳转的问题</li><li><code>fix:</code>修复首页可能出现的错误渲染，导致没有样式的情况。</li></ol><h2 id="2017年3月"><a href="#2017年3月" class="headerlink" title="2017年3月"></a>2017年3月</h2><h3 id="03-29-增强文章列表上下键功能"><a href="#03-29-增强文章列表上下键功能" class="headerlink" title="03-29 增强文章列表上下键功能"></a>03-29 增强文章列表上下键功能</h3><ol><li><code>enhance:</code>增强列表跟随选择的文章上下滚动</li><li><code>enhance:</code>文章列表上下循环</li></ol><h3 id="03-24-修复搜索及添加快捷键"><a href="#03-24-修复搜索及添加快捷键" class="headerlink" title="03-24 修复搜索及添加快捷键"></a>03-24 修复搜索及添加快捷键</h3><ol><li><code>fix:</code>修复title关键字和标签关键字冲突的情况</li><li><code>fix:</code>修复前进后退时对图片的错误处理</li><li><code>enhance:</code>在搜索时，可以键盘上下键来选择文章</li><li><code>enhance:</code>添加了一些快捷键，详情查看</li></ol><h3 id="03-22-添加评论系统"><a href="#03-22-添加评论系统" class="headerlink" title="03-22 添加评论系统"></a>03-22 添加评论系统</h3><ol><li><code>enhance:</code> 添加网易云跟帖评论系统</li></ol><h3 id="03-21-图片放大动画"><a href="#03-21-图片放大动画" class="headerlink" title="03-21 图片放大动画"></a>03-21 图片放大动画</h3><ol><li><code>enhance:</code>增加图片放大动画，增加过度感，最大放大至原图大小（若尺寸超过屏幕，按屏幕大小限制）</li></ol><h3 id="03-20-评论添加锚点"><a href="#03-20-评论添加锚点" class="headerlink" title="03-20 评论添加锚点"></a>03-20 评论添加锚点</h3><ol><li><code>enhance:</code>添加文章meta(标题下)中的评论数点击事件，滑动到评论区，评论区若隐藏，则自动打开</li></ol><h3 id="03-19-修复firfox错位问题"><a href="#03-19-修复firfox错位问题" class="headerlink" title="03-19 修复firfox错位问题"></a>03-19 修复firfox错位问题</h3><ol><li><code>fix:</code>修复firefox错位问题</li><li><code>enhance:</code>文章标题下的分类、标签、作者在文章列表隐藏的情况下（包括移动端）点击，自动呼出文章列表</li></ol><h3 id="03-18-动画优化及修复bug"><a href="#03-18-动画优化及修复bug" class="headerlink" title="03-18 动画优化及修复bug"></a>03-18 动画优化及修复bug</h3><ol><li><code>enhance:</code>给所有锚点添加动画</li><li><code>fix:</code>修复文章列表页自适应宽度,解决由于firefox不支持自定义滚动条导致的错位</li><li><code>change:</code>改动页面内站点访问量统计的标签，改动查看 —</li></ol><h3 id="03-17-评论调整优化"><a href="#03-17-评论调整优化" class="headerlink" title="03-17 评论调整优化"></a>03-17 评论调整优化</h3><ol><li>修复预加载时的评论数</li><li>首页添加评论框</li></ol><h3 id="03-16-文章meta样式修改"><a href="#03-16-文章meta样式修改" class="headerlink" title="03-16 文章meta样式修改"></a>03-16 文章meta样式修改</h3><ol><li>将文章meta（包括文集、标签、时间、字数等）改到文章title下方</li><li>站点版权信息（@2017 Yelog）,自定义，在主题 <code>_config.yml</code> 中配置</li><li>文章meta中添加评论数</li></ol><h3 id="03-15-增加样式"><a href="#03-15-增加样式" class="headerlink" title="03-15 增加样式"></a>03-15 增加样式</h3><ol><li>扩展了文章列表的移入样式，位置 <code>_config.yml</code> 中 <code>article_list</code></li></ol><h3 id="03-14-打赏优化"><a href="#03-14-打赏优化" class="headerlink" title="03-14 打赏优化"></a>03-14 打赏优化</h3><ol><li>加入切换二维码动画</li><li>移动端样式调整</li></ol><h3 id="03-13-首页重构"><a href="#03-13-首页重构" class="headerlink" title="03-13 首页重构"></a>03-13 首页重构</h3><ol><li>将首页改写为md格式，方便博主更改，位置：&#x2F;layout&#x2F;index.md</li></ol><h3 id="03-09-修复多说、添加流量统计"><a href="#03-09-修复多说、添加流量统计" class="headerlink" title="03-09 修复多说、添加流量统计"></a>03-09 修复多说、添加流量统计</h3><ol><li>修复多说在pjax中的使用</li><li>添加字数统计功能</li><li>添加文章版权信息</li></ol><h3 id="03-06-添加打赏功能"><a href="#03-06-添加打赏功能" class="headerlink" title="03-06 添加打赏功能"></a>03-06 添加打赏功能</h3><ol><li>添加打赏功能</li><li>添加table样式</li></ol><h3 id="03-04-添加作者和标签的提示"><a href="#03-04-添加作者和标签的提示" class="headerlink" title="03-04 添加作者和标签的提示"></a>03-04 添加作者和标签的提示</h3><ol><li>输入#或@显示下拉提示</li></ol><h3 id="03-03-修复多作者模式"><a href="#03-03-修复多作者模式" class="headerlink" title="03-03 修复多作者模式"></a>03-03 修复多作者模式</h3><ol><li>修复开启多作者模式时，文章没有作者引起的异常</li></ol><h3 id="03-02-图片样式改动"><a href="#03-02-图片样式改动" class="headerlink" title="03-02 图片样式改动"></a>03-02 图片样式改动</h3><ol><li>alt显示在图片下方</li><li>图片放大功能</li><li>移动端图片宽度100%</li></ol><h2 id="2017年2月"><a href="#2017年2月" class="headerlink" title="2017年2月"></a>2017年2月</h2><h3 id="02-28-多作者模式"><a href="#02-28-多作者模式" class="headerlink" title="02-28 多作者模式"></a>02-28 多作者模式</h3><ol><li>添加多作者模式</li></ol><h3 id="02-27-调整样式"><a href="#02-27-调整样式" class="headerlink" title="02-27 调整样式"></a>02-27 调整样式</h3><ol><li>修改a的样式</li><li>调整移动端宽度</li></ol><h3 id="02-25-修改github仓库名"><a href="#02-25-修改github仓库名" class="headerlink" title="02-25 修改github仓库名"></a>02-25 修改github仓库名</h3><ol><li>修改github仓库名：从 <code>3-hexo</code> 到 <code>hexo-theme-3-hexo</code></li><li>添加回到顶端功能：小火箭</li><li>修复safari滑动bug</li></ol><h3 id="02-24-站点版权、ICON和置顶"><a href="#02-24-站点版权、ICON和置顶" class="headerlink" title="02-24 站点版权、ICON和置顶"></a>02-24 站点版权、ICON和置顶</h3><ol><li>添加站点版权信息</li><li>更换icon到icoMoon</li><li>添加置顶功能</li></ol><h3 id="02-20-代码块高亮主题"><a href="#02-20-代码块高亮主题" class="headerlink" title="02-20 代码块高亮主题"></a>02-20 代码块高亮主题</h3><ol><li>添加十几种代码高亮主题</li><li>移动端适配（ipad、手机）</li></ol><h3 id="02-19-移动端适配"><a href="#02-19-移动端适配" class="headerlink" title="02-19 移动端适配"></a>02-19 移动端适配</h3><ol><li>添加文章加载动画进度条</li><li>开始进行移动端适配</li></ol><h3 id="02-08-评论系统"><a href="#02-08-评论系统" class="headerlink" title="02-08 评论系统"></a>02-08 评论系统</h3><ol><li>添加多说评论</li><li>添加disqus评论</li></ol><h3 id="02-07-样式及动画新增修改"><a href="#02-07-样式及动画新增修改" class="headerlink" title="02-07 样式及动画新增修改"></a>02-07 样式及动画新增修改</h3><ol><li>添加标题和时间的title</li><li>添加头像下外链图标（facebook等）</li><li>添加目录显示动画</li></ol><h3 id="02-06-功能和样式开发"><a href="#02-06-功能和样式开发" class="headerlink" title="02-06 功能和样式开发"></a>02-06 功能和样式开发</h3><ol><li>添加全屏和目录功能</li><li>搜索框下添加tags的显示，并支持使用#搜索</li><li>CDN改为在_config.yml中配置</li></ol><h3 id="02-05-开源3-hexo主题"><a href="#02-05-开源3-hexo主题" class="headerlink" title="02-05 开源3-hexo主题"></a>02-05 开源3-hexo主题</h3><ol><li>设计主题页面结构</li><li>分类过滤和标题关键字搜索</li><li>使用pjax方式加载页面</li><li>添加引用、表格等样式</li><li>使用highlight.js来处理代码块高亮</li><li>命名为3-hexo并在github上开源e</li></ol><p>﻿</p><h3 id="3-hexo配置MathJax数学公式渲染-8-md-“-8-md”"><a href="#3-hexo配置MathJax数学公式渲染-8-md-“-8-md”" class="headerlink" title="3-hexo配置MathJax数学公式渲染(#8.md “#8.md”)"></a>3-hexo配置MathJax数学公式渲染(#8.md “#8.md”)</h3><hr>在用 markdown 写文档时，免不了碰到数学公式。<h2 id="处理hexo的MarkDown渲染器与MathJax的冲突"><a href="#处理hexo的MarkDown渲染器与MathJax的冲突" class="headerlink" title="处理hexo的MarkDown渲染器与MathJax的冲突"></a>处理hexo的MarkDown渲染器与MathJax的冲突</h2><p>由于hexo的MarkDown渲染器与MathJax有冲突，所以在使用之前需要修改两个地方。</p><p>编辑 <code>node_modules\marked\lib\marked.js</code> 脚本</p><ol><li>将451行 ，这一步取消了对 <code>\\,\&#123;,\&#125;</code> 的转义(escape)<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([\\`*&#123;&#125;\[\]()# +\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>改为<span class="token literal-property property">escape</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\([`*\[\]()# +\-.!_>])</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>将459行，这一步取消了对斜体标记 <code>_</code> 的转义<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">em</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>改为<span class="token literal-property property">em</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\*((?:\*\*|[\s\S])+?)\*(?!\*)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="开启MathJax"><a href="#开启MathJax" class="headerlink" title="开启MathJax"></a>开启MathJax</h2><p>修改 <code>3-hexo/_config.yml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># MathJax 数学公式支持mathjax:  on: true #是否启用  per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>考虑到页面的加载速度，支持渲染单个页面。</p><p>设置 <code>per_page: false</code> ,在需要渲染的页面内 加入 <code>mathjax: true</code></p><p>这样，就可以在页面内写MathJax公式了。</p><h2 id="MathJax公式书写"><a href="#MathJax公式书写" class="headerlink" title="MathJax公式书写"></a>MathJax公式书写</h2><p>公式书写依然按照MarkDown语法来，基本上也和LaTeX相同，单 <code>$</code> 符引住的是行内公式，双$符引住的是行间公式。</p><ul><li>MathJax公式书写参考<br><a href="">MathJax basic tutorial and quick reference</a></li></ul><h3 id="1-MathJax行内公式"><a href="#1-MathJax行内公式" class="headerlink" title="1.MathJax行内公式"></a>1.MathJax行内公式</h3><p>含有下划线 <code>_</code> 的公式 <code>$x_mu$</code> ： $x_mu$</p><p>希腊字符 <code>$\sigma$</code> ： $\sigma$</p><p>双 <code>\\</code> 公式内换行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$$<span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span>\begin<span class="token punctuation">&#123;</span>cases<span class="token punctuation">&#125;</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token operator">&amp;</span> \text<span class="token punctuation">&#123;</span><span class="token keyword">if</span> $n$ is even<span class="token punctuation">&#125;</span> \\<span class="token number">3n</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span> \text<span class="token punctuation">&#123;</span><span class="token keyword">if</span> $n$ is odd<span class="token punctuation">&#125;</span>\end<span class="token punctuation">&#123;</span>cases<span class="token punctuation">&#125;</span>$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>f(n) &#x3D;<br>\begin{cases}<br>n&#x2F;2,  &amp; \text{if $n$ is even} \<br>3n+1, &amp; \text{if $n$ is odd}<br>\end{cases}<br>$$</p><p>行内公式 <code>$y=ax+b$</code>：$y&#x3D;ax+b$</p><p>行内公式 <code>$\cos 2\theta = \cos^2 \theta - \sin^2 \theta = 2 \cos^2 \theta$</code>：$\cos 2\theta &#x3D; \cos^2 \theta - \sin^2 \theta &#x3D; 2 \cos^2 \theta$</p><p>行内公式 <code>$M(\beta^&#123;\ast&#125;(D),D) \subseteq C$</code> ： $M(\beta^{\ast}(D),D) \subseteq C$</p><h3 id="2-MathJax行间公式"><a href="#2-MathJax行间公式" class="headerlink" title="2.MathJax行间公式"></a>2.MathJax行间公式</h3><p>行间公式<code>$$ \sum_&#123;i=0&#125;^n i^2 = \frac&#123;(n^2+n)(2n+1)&#125;&#123;6&#125; $$</code>：<br>$$ \sum_{i&#x3D;0}^n i^2 &#x3D; \frac{(n^2+n)(2n+1)}{6} $$</p><p>行间公式<code>$$ x = \dfrac&#123;-b \pm \sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$</code>：<br>$$ x &#x3D; \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><h3 id="3-MathJax公式自动编号"><a href="#3-MathJax公式自动编号" class="headerlink" title="3.MathJax公式自动编号"></a>3.MathJax公式自动编号</h3><p>书写时使用</p><pre class="line-numbers language-none"><code class="language-none">$$\begin&#123;equation&#125;\end&#123;equation&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进行公式自动编号，同时会自动连续编号，例如：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$$\begin&#123;equation&#125;\sum_&#123;i=0&#125;^n F_i \cdot \phi (H, p_i) - \sum_&#123;i=1&#125;^n a_i \cdot ( \tilde&#123;x_i&#125;, \tilde&#123;y_i&#125;) + b_i \cdot ( \tilde&#123;x_i&#125;^2 , \tilde&#123;y_i&#125;^2 )\end&#123;equation&#125;$$$$\begin&#123;equation&#125;\beta^*(D) = \mathop&#123;argmin&#125; \limits_&#123;\beta&#125; \lambda &#123;||\beta||&#125;^2 + \sum_&#123;i=1&#125;^n max(0, 1 - y_i f_&#123;\beta&#125;(x_i))\end&#123;equation&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\begin{equation}<br>\sum_{i&#x3D;0}^n F_i \cdot \phi (H, p_i) - \sum_{i&#x3D;1}^n a_i \cdot ( \tilde{x_i}, \tilde{y_i}) + b_i \cdot ( \tilde{x_i}^2 , \tilde{y_i}^2 )<br>\end{equation}<br>$$<br>$$<br>\begin{equation}<br>\beta^*(D) &#x3D; \mathop{argmin} \limits_{\beta} \lambda {||\beta||}^2 + \sum_{i&#x3D;1}^n max(0, 1 - y_i f_{\beta}(x_i))<br>\end{equation}<br>$$</p><h2 id="MathJax公式手动编号"><a href="#MathJax公式手动编号" class="headerlink" title="MathJax公式手动编号"></a>MathJax公式手动编号</h2><p>可以在公式书写时使用 <code>\tag&#123;手动编号&#125;</code> 添加手动编号，例如：</p><pre class="line-numbers language-none"><code class="language-none">$$\begin&#123;equation&#125;\sum_&#123;i&#x3D;0&#125;^n F_i \cdot \phi (H, p_i) - \sum_&#123;i&#x3D;1&#125;^n a_i \cdot ( \tilde&#123;x_i&#125;, \tilde&#123;y_i&#125;) + b_i \cdot ( \tilde&#123;x_i&#125;^2 , \tilde&#123;y_i&#125;^2 ) \tag&#123;1.2.3&#125;\end&#123;equation&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\begin{equation}<br>\sum_{i&#x3D;0}^n F_i \cdot \phi (H, p_i) - \sum_{i&#x3D;1}^n a_i \cdot ( \tilde{x_i}, \tilde{y_i}) + b_i \cdot ( \tilde{x_i}^2 , \tilde{y_i}^2 ) \tag{1.2.3}<br>\end{equation}<br>$$</p><p>不加 <code>\begin&#123;equation&#125; \end&#123;equation&#125;</code> 也可以，例如：</p><pre class="line-numbers language-none"><code class="language-none">$$\beta^*(D) &#x3D; \mathop&#123;argmin&#125; \limits_&#123;\beta&#125; \lambda &#123;||\beta||&#125;^2 + \sum_&#123;i&#x3D;1&#125;^n max(0, 1 - y_i f_&#123;\beta&#125;(x_i)) \tag&#123;我的公式3&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>$$<br>\beta^*(D) &#x3D; \mathop{argmin} \limits_{\beta} \lambda {||\beta||}^2 + \sum_{i&#x3D;1}^n max(0, 1 - y_i f_{\beta}(x_i)) \tag{我的公式3}<br>$$</p><p>行内公式加\tag{}后会自动成为行间公式，例如： <code>$z = (p_0, ..... , p_n) \tag&#123;公式21&#125; $</code><br>$z &#x3D; (p_0, ….. , p_n) \tag{公式21} $</p><h3 id="4-其他公式书写技巧"><a href="#4-其他公式书写技巧" class="headerlink" title="4.其他公式书写技巧"></a>4.其他公式书写技巧</h3><p><strong>如何将下标放到正下方？</strong><br>① 如果是数学符号，那么直接用 <code>\limits</code> 命令放在正下方，如Max函数下面的取值范围，需要放在Max的正下方。可以如下实现：<br><code>$ \max \limits_&#123;a&lt;x&lt;b&#125;\&#123;f(x)\&#125; $</code><br>$ \max \limits_{a&lt;x&lt;b}{f(x)} $</p><p>② 若是普通符号，那么要用 <code>\mathop</code> 先转成数学符号再用 <code>\limits</code>，如<br><code>$ \mathop&#123;a&#125;\limits_&#123;i=1&#125; $</code><br>$ \mathop{a}\limits_{i&#x3D;1} $</p><p><strong>MathJax矩阵输入</strong><br>无括号矩阵：</p><pre class="line-numbers language-none"><code class="language-none">$$\begin&#123;matrix&#125;1 &amp; x &amp; x^2 \\1 &amp; y &amp; y^2 \\1 &amp; z &amp; z^2 \\\end&#123;matrix&#125;$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\begin{matrix}<br>1 &amp; x &amp; x^2 \<br>1 &amp; y &amp; y^2 \<br>1 &amp; z &amp; z^2 \<br>\end{matrix}<br>$$</p><p>有括号有竖线矩阵：</p><pre class="line-numbers language-none"><code class="language-none">$$\left[    \begin&#123;array&#125;&#123;cc|c&#125;      1&amp;2&amp;3\\      4&amp;5&amp;6    \end&#123;array&#125;\right]$$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\left[<br>    \begin{array}{cc|c}<br>      1&amp;2&amp;3\<br>      4&amp;5&amp;6<br>    \end{array}<br>\right]<br>$$</p><p>行内小矩阵：<br><code>$\bigl( \begin&#123;smallmatrix&#125; a &amp; b \\ c &amp; d \end&#123;smallmatrix&#125; \bigr)$</code></p><p>这里有个问题，上面的写法在矩阵内没有换行，我看了下源码，双反斜杠\又被MarkDown渲染引擎转义为单个反斜杠了，解决方法是写三个反斜杠\\或在双反斜杠后换行即可：</p><p><code>$\bigl( \begin&#123;smallmatrix&#125; a &amp; b \\\ c &amp; d \end&#123;smallmatrix&#125; \bigr)$</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="">Hexo博客(13)添加MathJax数学公式渲染</a><br><a href="">在Hexo中渲染MathJax数学公式</a><br><a href="">MathJax basic tutorial and quick reference</a></p><p>﻿<br>尽管hexo是为个人blog而生的工具，但是有时也可能会有多作者需求，比如他人投稿等等，为此笔者在写3-hexo主题时,顺便添加了此功能 。</p><h2 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h2><p>修改 <code>3-hexo/_config.yml</code>，开启多作者模式，并添加blog中出现的作者，为搜索提供数据</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">author:  on: true #true：开启多作者模式  authors:    author1: yelog #添加两个作者yelog、小马哥    author2: 小马哥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-修改文章头部信息"><a href="#2-修改文章头部信息" class="headerlink" title="2.修改文章头部信息"></a>2.修改文章头部信息</h2><p>添加 <code>author: yelog</code> ，表示这篇文章的作者为yelog</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">###  3-hexo多作者模式(#9.md "#9.md")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>效果：</strong></p><h2 id="搜索某个作者的所有文章"><a href="#搜索某个作者的所有文章" class="headerlink" title="搜索某个作者的所有文章"></a>搜索某个作者的所有文章</h2><p>在搜索栏中输入<code>@小马哥</code>就可以显示出所有小马哥的文章。<br>如果你在_config.xml中配置了作者名，就可以出现<code>提示</code>,具体看第一部分<br><strong>效果如下：</strong></p><p>﻿</p><h3 id="3-hexo快捷键说明-10-md-“-10-md”"><a href="#3-hexo快捷键说明-10-md-“-10-md”" class="headerlink" title="3-hexo快捷键说明(#10.md “#10.md”)"></a>3-hexo快捷键说明(#10.md “#10.md”)</h3><p>今日公司断网了半个小时，就利用这段时间给主题添加了快捷键操作，方便使用。</p><p>快捷键为vim风格的。按键可能与vimium（chrome插件）的快捷键有冲突，插件设置屏蔽掉此站的快捷键即可</p><p>如果有比较好的建议，欢迎骚扰。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><table><thead><tr><th align="left">Key</th><th align="left">Descption</th></tr></thead><tbody><tr><td align="left">s&#x2F;S</td><td align="left">全屏&#x2F;取消全屏</td></tr><tr><td align="left">w&#x2F;W</td><td align="left">打开&#x2F;关闭文章目录</td></tr><tr><td align="left">i&#x2F;I</td><td align="left">获取搜索框焦点</td></tr><tr><td align="left">j&#x2F;J</td><td align="left">向下滑动</td></tr><tr><td align="left">k&#x2F;K</td><td align="left">向上滑动</td></tr><tr><td align="left">gg&#x2F;GG</td><td align="left">到最顶端</td></tr><tr><td align="left">shift+G&#x2F;g</td><td align="left">到最下端</td></tr></tbody></table><h3 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h3><table><thead><tr><th align="left">Key</th><th align="left">Descption</th></tr></thead><tbody><tr><td align="left">ESC</td><td align="left">1.如果输入框有内容，清除内容<br>2.如果输入框无内容，失去焦点</td></tr><tr><td align="left">下</td><td align="left">向下选择文章</td></tr><tr><td align="left">上</td><td align="left">向上选择文章</td></tr><tr><td align="left">回车</td><td align="left">打开当前选中的文章，若没有，则默认打开第一个</td></tr></tbody></table><h3 id="关闭快捷键"><a href="#关闭快捷键" class="headerlink" title="关闭快捷键"></a>关闭快捷键</h3><p>在主题下 <code>_config.yml</code> 中 找到 <code>shortcutKey</code> 设为 <code>false</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">shortcutKey</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="3-hexo支持mermaid图表-11-md-“-11-md”"><a href="#3-hexo支持mermaid图表-11-md-“-11-md”" class="headerlink" title="3-hexo支持mermaid图表(#11.md “#11.md”)"></a>3-hexo支持mermaid图表(#11.md “#11.md”)</h3><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><ol><li>安装hexo插件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-mermaid-diagrams<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>修改<code>themes/3-hexo/_config.yml</code> 的 <code>mermaid.on</code>，开启主题支持<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Mermaid 支持</span><span class="token key atrule">mermaid</span><span class="token punctuation">:</span>  <span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">cdn</span><span class="token punctuation">:</span> //cdn.jsdelivr.net/npm/mermaid@8.4.2/dist/mermaid.min.js  <span class="token comment">#cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.3.1/mermaid.min.js</span>  <span class="token key atrule">options</span><span class="token punctuation">:</span> <span class="token comment"># 更多配置信息可以参考 </span>    <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'default'</span>    <span class="token key atrule">startOnLoad</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">flowchart</span><span class="token punctuation">:</span>      <span class="token key atrule">useMaxWidth</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">htmlLabels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>在markdown中，像写代码块一样写图表<br><img src="//img.saodiyang.com/FuBTJvG5xIOIcKZPnO9UX5GCwthK.png"></li></ol><h2 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h2><p>以下示例源码可以在这边查看 <a href="">本文源码</a><br>更多示例可以查看官网：()</p><h3 id="1-flowchart"><a href="#1-flowchart" class="headerlink" title="1. flowchart"></a>1. flowchart</h3><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>    A<span class="token arrow operator">--></span>B<span class="token punctuation">;</span>    A<span class="token arrow operator">--></span>C<span class="token punctuation">;</span>    B<span class="token arrow operator">--></span>D<span class="token punctuation">;</span>    C<span class="token arrow operator">--></span>D<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TB    c1<span class="token arrow operator">--></span>a2    <span class="token keyword">subgraph</span> one    a1<span class="token arrow operator">--></span>a2    <span class="token keyword">end</span>    <span class="token keyword">subgraph</span> two    b1<span class="token arrow operator">--></span>b2    <span class="token keyword">end</span>    <span class="token keyword">subgraph</span> three    c1<span class="token arrow operator">--></span>c2    <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Sequence-diagrams"><a href="#2-Sequence-diagrams" class="headerlink" title="2.Sequence diagrams"></a>2.Sequence diagrams</h3><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">sequenceDiagram</span>    <span class="token keyword">participant</span> Alice    <span class="token keyword">participant</span> Bob    Alice<span class="token arrow operator">->></span>John<span class="token operator">:</span> Hello John, how are you?    <span class="token keyword">loop</span> Healthcheck        John<span class="token arrow operator">->></span>John<span class="token operator">:</span> Fight against hypochondria    <span class="token keyword">end</span>    <span class="token keyword">Note right of</span> John<span class="token operator">:</span> Rational thoughts &lt;br/>prevail!    John<span class="token arrow operator">-->></span>Alice<span class="token operator">:</span> Great!    John<span class="token arrow operator">->></span>Bob<span class="token operator">:</span> How about you?    Bob<span class="token arrow operator">-->></span>John<span class="token operator">:</span> Jolly good!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-Class-diagrams"><a href="#3-Class-diagrams" class="headerlink" title="3.Class diagrams"></a>3.Class diagrams</h3><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">classDiagram</span>     Animal <span class="token arrow operator">&lt;|--</span> Duck     Animal <span class="token arrow operator">&lt;|--</span> Fish     Animal <span class="token arrow operator">&lt;|--</span> Zebra     Animal <span class="token operator">:</span> +int age     Animal <span class="token operator">:</span> +String gender     Animal<span class="token operator">:</span> +isMammal<span class="token punctuation">(</span><span class="token punctuation">)</span>     Animal<span class="token operator">:</span> +mate<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">class</span> Duck<span class="token punctuation">&#123;</span>         +String beakColor         +swim<span class="token punctuation">(</span><span class="token punctuation">)</span>         +quack<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">class</span> Fish<span class="token punctuation">&#123;</span>         -int sizeInFeet         -canEat<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">class</span> Zebra<span class="token punctuation">&#123;</span>         +bool is_wild         +run<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-State-diagrams"><a href="#4-State-diagrams" class="headerlink" title="4.State diagrams"></a>4.State diagrams</h3><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">stateDiagram</span>       <span class="token text string">[*]</span> <span class="token arrow operator">--></span> Active       <span class="token keyword">state</span> Active <span class="token punctuation">&#123;</span>           <span class="token text string">[*]</span> <span class="token arrow operator">--></span> NumLockOff           NumLockOff <span class="token arrow operator">--></span> NumLockOn <span class="token operator">:</span> EvNumLockPressed           NumLockOn <span class="token arrow operator">--></span> NumLockOff <span class="token operator">:</span> EvNumLockPressed           <span class="token arrow operator">--</span>           <span class="token text string">[*]</span> <span class="token arrow operator">--></span> CapsLockOff           CapsLockOff <span class="token arrow operator">--></span> CapsLockOn <span class="token operator">:</span> EvCapsLockPressed           CapsLockOn <span class="token arrow operator">--></span> CapsLockOff <span class="token operator">:</span> EvCapsLockPressed           <span class="token arrow operator">--</span>           <span class="token text string">[*]</span> <span class="token arrow operator">--></span> ScrollLockOff           ScrollLockOff <span class="token arrow operator">--></span> ScrollLockOn <span class="token operator">:</span> EvCapsLockPressed           ScrollLockOn <span class="token arrow operator">--></span> ScrollLockOff <span class="token operator">:</span> EvCapsLockPressed       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-Gantt-diagrams"><a href="#5-Gantt-diagrams" class="headerlink" title="5.Gantt diagrams"></a>5.Gantt diagrams</h3><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">gantt</span>       dateFormat  YYYY-MM-DD       title Adding GANTT diagram functionality to mermaid       section A section       Completed task            <span class="token operator">:</span>done,    des1, 2014-01-06,2014-01-08       Active task               <span class="token operator">:</span>active,  des2, 2014-01-09, 3d       Future task               <span class="token operator">:</span>         des3, after des2, 5d       Future task2              <span class="token operator">:</span>         des4, after des3, 5d       section Critical tasks       Completed task in the critical line <span class="token operator">:</span>crit, done, 2014-01-06,24h       Implement parser and jison          <span class="token operator">:</span>crit, done, after des1, 2d       Create tests for parser             <span class="token operator">:</span>crit, active, 3d       Future task in critical line        <span class="token operator">:</span>crit, 5d       Create tests for renderer           <span class="token operator">:</span>2d       Add to mermaid                      <span class="token operator">:</span>1d       section Documentation       Describe gantt syntax               <span class="token operator">:</span>active, a1, after des1, 3d       Add gantt diagram to demo page      <span class="token operator">:</span>after a1  , 20h       Add another diagram to demo page    <span class="token operator">:</span>doc1, after a1  , 48h       section Last section       Describe gantt syntax               <span class="token operator">:</span>after doc1, 3d       Add gantt diagram to demo page      <span class="token operator">:</span>20h       Add another diagram to demo page    <span class="token operator">:</span>48h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Pie-chart-diagrams"><a href="#6-Pie-chart-diagrams" class="headerlink" title="6.Pie chart diagrams"></a>6.Pie chart diagrams</h3><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">pie</span>    <span class="token string">"Dogs"</span> <span class="token operator">:</span> 386    <span class="token string">"Cats"</span> <span class="token operator">:</span> 85    <span class="token string">"Rats"</span> <span class="token operator">:</span> 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="3-hexo文章内toc生成-12-md-“-12-md”"><a href="#3-hexo文章内toc生成-12-md-“-12-md”" class="headerlink" title="3-hexo文章内toc生成(#12.md “#12.md”)"></a>3-hexo文章内toc生成(#12.md “#12.md”)</h3><p>[toc]</p><h2 id="1-如何使用"><a href="#1-如何使用" class="headerlink" title="1. 如何使用"></a>1. 如何使用</h2><h3 id="1-1-关键字"><a href="#1-1-关键字" class="headerlink" title="1.1 关键字"></a>1.1 关键字</h3><p>只要在在文章中使用如下关键字，不区分大小写，便可以在相应位置显示目录导航，效果文章开头<br><img src="/" alt="toc"></p><h3 id="1-2-小标题2jlksjdflksdjflksjdflksjdflkaj-sdfjka-lskdjfla-skjdf-lajsdflkjal-sdjkf-laskjdf"><a href="#1-2-小标题2jlksjdflksdjflksjdflksjdflkaj-sdfjka-lskdjfla-skjdf-lajsdflkjal-sdjkf-laskjdf" class="headerlink" title="1.2 小标题2jlksjdflksdjflksjdflksjdflkaj;sdfjka;lskdjfla;skjdf;lajsdflkjal;sdjkf;laskjdf"></a>1.2 小标题2jlksjdflksdjflksjdflksjdflkaj;sdfjka;lskdjfla;skjdf;lajsdflkjal;sdjkf;laskjdf</h3><p>占位<br>占位</p><h4 id="1-3-小标题"><a href="#1-3-小标题" class="headerlink" title="1.3 小标题"></a>1.3 小标题</h4><p>占位<br>占位<br>占位</p><h2 id="2-标题二"><a href="#2-标题二" class="headerlink" title="2. 标题二"></a>2. 标题二</h2><p>占位<br><br>占位<br><br>占位<br></p><h3 id="2-1-小标题"><a href="#2-1-小标题" class="headerlink" title="2.1 小标题"></a>2.1 小标题</h3><p>占位<br><br>占位<br></p><h3 id="2-2-小标题2"><a href="#2-2-小标题2" class="headerlink" title="2.2 小标题2"></a>2.2 小标题2</h3><p>占位<br><br>占位<br><br>占位<br><br>占位<br><br>占位<br></p><h2 id="文末"><a href="#文末" class="headerlink" title="文末"></a>文末</h2><p>占位<br><br>占位<br><br>占位<br><br>占位<br><br>占位<br></p><p>﻿</p><h3 id="Hexo主题3-hexo-13-md-“-13-md”"><a href="#Hexo主题3-hexo-13-md-“-13-md”" class="headerlink" title="Hexo主题3-hexo(#13.md “#13.md”)"></a>Hexo主题3-hexo(#13.md “#13.md”)</h3><p>阮一峰曾言：喜欢写blog的人，会经历三个阶段</p><blockquote><p>第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。<br>第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。<br>第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。</p></blockquote><p>有对搭建个人blog有兴趣的朋友，可以翻看我往期文章。</p><p>笔者从去年开始通过hexo写blog，使用了yilia主题，但是随着文章数量的上升，检索等操作就显得特别笨重。</p><p>在遍寻无果的情况下，就写下了<a href="">3-hexo</a>主题。Demo:()</p><p>多图预警 ↓↓↓</p><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><h3 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h3><p><strong>三段式设计:</strong><br><img src="/" alt="三段式设计"></p><h3 id="通过分类过滤"><a href="#通过分类过滤" class="headerlink" title="通过分类过滤"></a>通过分类过滤</h3><p><img src="/" alt="分类过滤文章"></p><h3 id="通过标题关键字搜索"><a href="#通过标题关键字搜索" class="headerlink" title="通过标题关键字搜索"></a>通过标题关键字搜索</h3><p><img src="/" alt="文章标题关键字搜索"></p><h3 id="通过作者搜索"><a href="#通过作者搜索" class="headerlink" title="通过作者搜索"></a>通过作者搜索</h3><p><strong>若开启了多作者模式，则可以通过输入@，进行作者搜索，如下所示</strong><br><img src="/" alt="通过作者搜索"></p><h3 id="通过标签搜索"><a href="#通过标签搜索" class="headerlink" title="通过标签搜索"></a>通过标签搜索</h3><p><strong>输入#，就会出现标签提示</strong><br><img src="/" alt="通过标签搜索"></p><h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><p><img src="/" alt="测试一下评论"></p><h3 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h3><p><img src="/" alt="打赏功能"></p><h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><p><img src="/" alt="文章置顶"></p><h3 id="返回头部"><a href="#返回头部" class="headerlink" title="返回头部"></a>返回头部</h3><p><img src="/" alt="返回头部"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone  themes/3-hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>1） 修改hexo根目录的<code>_config.yml</code>的两处，如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">theme: 3-hexohighlight:  enable: false #关闭hexo渲染高亮，使用主题代码块高亮<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2） 在hexo 根目录source下添加<code>avatar.jpg</code>文件，作为头像</p><ol start="3"><li>安装字数统计(由于主题使用这个插件，必须安装，否则会报错)<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ $ <span class="token function">npm</span> i <span class="token parameter variable">--save</span> hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><strong>注意：</strong> 如果没有安装会在 <code>hexo g</code> 的时候报错</li></ol><h3 id="3-更新"><a href="#3-更新" class="headerlink" title="3.更新"></a>3.更新</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> themes/3-hexo$ <span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="AngularJs快速入门-14-md-“-14-md”"><a href="#AngularJs快速入门-14-md-“-14-md”" class="headerlink" title="AngularJs快速入门(#14.md “#14.md”)"></a>AngularJs快速入门(#14.md “#14.md”)</h3><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> AngularJS是一个JavaScript框架，为了克服HTML在构建应用上的不足而设计的。<br> AngularJS通过使用我们称为标识符(directives)的结构，让浏览器能够识别新的语法。<br> AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>AngularJS 使用 表达式 把数据绑定到 HTML。</p><h3 id="表达式-1"><a href="#表达式-1" class="headerlink" title="表达式"></a>表达式</h3><p>AngularJS 表达式写在双大括号内：{{ expression }} 。<br>AngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。<br>AngularJS 将在表达式书写的位置”输出”数据。<br>AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。<br><strong>实例：</strong>  {{ 5 + 5 }}  或 {{ firstName + " " + lastName }}</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div ng-app&#x3D;&quot;&quot;&gt;     &lt;p&gt;我的第一个表达式: &#123;&#123; 5 + 5 &#125;&#125;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>效果</strong></p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;div ng-app&#x3D;&quot;&quot; ng-init&#x3D;&quot;quantity&#x3D;1;cost&#x3D;5&quot;&gt;  &lt;p&gt;总价： &#123;&#123; quantity * cost &#125;&#125;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘浏览器前进-后退缓存（BF-Cache）’-15-md-“-15-md”"><a href="#‘浏览器前进-后退缓存（BF-Cache）’-15-md-“-15-md”" class="headerlink" title="‘浏览器前进&#x2F;后退缓存（BF Cache）’(#15.md “#15.md”)"></a>‘浏览器前进&#x2F;后退缓存（BF Cache）’(#15.md “#15.md”)</h3><hr>[浏览器前进/后退缓存]()（Backward/Forward Cache，BF Cache）是指浏览器在前进后退过程中， 会应用更强的缓存策略，表现为 DOM、window、甚至 JavaScript 对象被缓存，以及同步 XHR 也被缓存。 这一现象在移动端浏览器尤为常见，除 Chrome for Android、Android Browser 之外的浏览器基本都会触发。<p>BF Cache 本来是一项浏览器优化，但在某些情况下（比如前端路由的 Web App）会引起困惑。 本文主要讨论 BF Cache 的行为、如何检测 BF Cache 缓存、以及如何 workaround。</p><h3 id="缓存行为"><a href="#缓存行为" class="headerlink" title="缓存行为"></a>缓存行为</h3><p>BF Cache 是一种浏览器优化，HTML 标准并未指定其如何进行缓存，因此缓存行为是与浏览器实现相关的。</p><blockquote><p>User agents may discard the Document objects of entries other than the current entry that are not referenced from any script, reloading the pages afresh when the user or script navigates back to such pages. This specification does not specify when user agents should discard Document objects and when they should cache them. – <a href="">Session history and navigation</a>, WHATWG</p></blockquote><ul><li>Desktop Chrome：阻塞的资源和同步发出的 XHR 都会被缓存，但不缓存渲染结果。因此可以看到明显的载入过程，此时脚本也会重新执行。</li><li>Chrome for Android：有些情况下不会缓存，缓存时与 Desktop Chrome 行为一致。</li><li>Desktop Firefox：页面会被 Frozen，定时器会被暂停，DOM、Window、JavaScript 对象会被缓存，返回时页面脚本重新开始运行。</li><li>iOS Safari：渲染结果也会被缓存，因此才能支持左右滑动手势来前进&#x2F;后退。</li></ul><p>Desktop Firefox 暂停计时器的行为非常有趣，以下 HTML 中显示一个每秒加一的数字。 当页面导航时就会暂停，返回时继续增加（因此直接使用 setInterval 倒计时不仅不精确，而且不可靠）：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>timer-tick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://harttle.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>External Link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#timer-tick'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pagehide-pageshow-事件"><a href="#pagehide-pageshow-事件" class="headerlink" title="pagehide&#x2F;pageshow 事件"></a>pagehide&#x2F;pageshow 事件</h3><p>会话（Session）中的某一个页面显示&#x2F;隐藏时，会触发 <code>pagehide</code> 和 <code>pageshow</code> 事件。 这两个事件都有一个 <code>persisted</code> 属性用来指示当前页面是否被 BF Cache 缓存。 因此可以通过 <code>persisted</code> 属性来达到禁用 BF Cache 的效果：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function-variable function">onpageshow</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>persisted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意无论页面是否被缓存 <code>pageshow</code> 总会触发，因此需要检测器 <code>persisted</code> 属性。 另外 <code>pageshow</code> 的时机总是在 <code>load</code> 事件之后。 这一点很容易检测，下面的 <code>pageshow</code> 日志总在 <code>load</code> 之前：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pageshow'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'on pageshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="XHR-缓存"><a href="#XHR-缓存" class="headerlink" title="XHR 缓存"></a>XHR 缓存</h3><p>同步（阻塞加载的）脚本发出的 XMLHttpRequest 也会被 Chrome 强制缓存， 因此即使在断网的情况下后退到访问过的页面仍然是可以完美渲染的。 如果页面中有这样一段外部脚本：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">sendXHR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">sendXHR</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'/data.json'</span><span class="token punctuation">)</span>  xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> XMLHttpRequest<span class="token punctuation">.</span><span class="token constant">DONE</span> <span class="token operator">&amp;&amp;</span>     xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'xhr arrived'</span><span class="token punctuation">,</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>超链接跳转后回来，该 xhr 也会被缓存。注意下图中的 XHR 一项 size 为 “from disk cache”：</p><p>为了强制发送 xhr，可以将 xhr 改为异步发送，或者加一个不重要的 query。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span>sendXHR<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就能看到 xhr 真正发送出去了 :) 异步 xhr 缓存时机未经兼容性测试， 还是建议读者使用一个随机产生的 query。</p><p>﻿</p><h3 id="CentOS7安装配置匿名访问Samba-16-md-“-16-md”"><a href="#CentOS7安装配置匿名访问Samba-16-md-“-16-md”" class="headerlink" title="CentOS7安装配置匿名访问Samba(#16.md “#16.md”)"></a>CentOS7安装配置匿名访问Samba(#16.md “#16.md”)</h3><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p><strong>Samba</strong>，是种用来让UNIX系列的操作系统与微软Windows操作系统的SMB&#x2F;CIFS（Server Message Block&#x2F;Common Internet File System）网络协议做链接的自由软件   –wikipedia</p></blockquote><p>本文就以 CentOS7 搭建 Samba 匿名完全访问（读&#x2F;写）为目标，实现一个局域网内的文件共享平台。</p><h2 id="1-安装Samba服务"><a href="#1-安装Samba服务" class="headerlink" title="1.安装Samba服务"></a>1.安装Samba服务</h2><p>使用 yum 工具进行安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> samba samba-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-检查是否安装成功"><a href="#2-检查是否安装成功" class="headerlink" title="2.检查是否安装成功"></a>2.检查是否安装成功</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> samba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-防火墙开放端口"><a href="#3-防火墙开放端口" class="headerlink" title="3.防火墙开放端口"></a>3.防火墙开放端口</h2><p>在 <code>/etc/sysconfig/iptables</code> 中添加配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">-A INPUT -p tcp -m state --state NEW -m tcp --dport 137 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 138 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 139 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 389 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 445 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 901 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启 iptables 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> iptables restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置开机自启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chkconfig</span> <span class="token parameter variable">--level</span> <span class="token number">35</span> smb on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-共享配置"><a href="#4-共享配置" class="headerlink" title="4.共享配置"></a>4.共享配置</h2><p>Samba Server的验证方式有四种：</p><ul><li>share：匿名访问共享，不需要提供用户名和口令, 安全性能较低。</li><li>user：共享目录只能被授权的用户访问,由Samba Server负责检查账号和密码的正确性。账号和密码要在本Samba Server中建立。</li><li>server：依靠其他Windows Server或Samba Server来验证用户的账号和密码,是一种代理验证。此种安全模式下,系统管理员可以把所有的Windows用户和口令集中到一个Server系统上,使用 Windows Server进行Samba认证, 远程服务器可以自动认证全部用户和口令,如果认证失败,Samba将使用用户级安全模式作为替代的方式。</li><li>domain：域安全级别,使用主域控制器(PDC)来完成认证。</li></ul><blockquote><p>创建一个匿名共享访问，需要使用share模式，但在CentOS安装的samba4中share 和 server验证方式已被弃用</p></blockquote><p>配置如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">[global]        workgroup = MYGROUP        server string = Samba Server Version %v        log file = /var/log/samba/log.%m        max log size = 50        security = user        map to guest = Bad User        load printers = yes        cups options = raw[share]        comment = share        path = /home/samba      directory mask = 0777      create mask = 0777      #不可视目录        #browseable = yes        guest ok=yes        writable=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建 <code>/home/samba</code> 共享目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> /home/samba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启 smb 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查服务是否在运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pgrep smbd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>检查配置参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ testparmLoad smb config files from /etc/samba/smb.confProcessing section <span class="token string">"[share]"</span>Loaded services <span class="token function">file</span> OK.Server role: ROLE_STANDALONEPress enter to see a dump of your <span class="token function">service</span> definitions<span class="token comment"># Global parameters</span><span class="token punctuation">[</span>global<span class="token punctuation">]</span>server string <span class="token operator">=</span> Samba Server Version %vworkgroup <span class="token operator">=</span> MYGROUPlog <span class="token function">file</span> <span class="token operator">=</span> /var/log/samba/log.%mmax log size <span class="token operator">=</span> <span class="token number">50</span>map to guest <span class="token operator">=</span> Bad Usersecurity <span class="token operator">=</span> <span class="token environment constant">USER</span>idmap config * <span class="token builtin class-name">:</span> backend <span class="token operator">=</span> tdbcups options <span class="token operator">=</span> raw<span class="token punctuation">[</span>share<span class="token punctuation">]</span>comment <span class="token operator">=</span> sharepath <span class="token operator">=</span> /home/sambacreate mask <span class="token operator">=</span> 0777directory mask <span class="token operator">=</span> 0777guest ok <span class="token operator">=</span> Yes<span class="token builtin class-name">read</span> only <span class="token operator">=</span> No<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p>以上就配置完成，如服务器地址为192.168.0.87</p><p>windows 系统访问，直接运行 <code>\\192.168.0.87\share</code></p><p>linux 系统访问， </p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li>linux 系统可以正常读写修改，但 windows 系统只可以读写，直接打开修改时就，就为只读文件了。<br><strong>解决办法</strong>：修改 <code>/etc/samba/smb.conf</code> ,在 <code>[share]</code> 中加入以下内容<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">create mask = 0777<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>访问部分文件可以正常访问，但部分文件无法访问。<br><strong>解决方法</strong>：修改文件访问权限<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">1777</span> /home/samba$ <span class="token function">chown</span> nobody:nobody<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h1 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="">CentOS7 安装Samba服务</a></li><li><a href="">CentOS7 安装配置匿名访问Samba</a></li></ul><p>﻿</p><h3 id="CentOS7使用Firewalld-17-md-“-17-md”"><a href="#CentOS7使用Firewalld-17-md-“-17-md”" class="headerlink" title="CentOS7使用Firewalld(#17.md “#17.md”)"></a>CentOS7使用Firewalld(#17.md “#17.md”)</h3><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>FirewallD 提供了支持网络&#x2F;防火墙区域(zone)定义网络链接以及接口安全等级的动态防火墙管理工具。它支持 IPv4, IPv6 防火墙设置以及以太网桥接，并且拥有运行时配置和永久配置选项。它也支持允许服务或者应用程序直接添加防火墙规则的接口。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> firewalld<span class="token comment"># 如果需要图形界面的话，则再安装</span>$ yum <span class="token function">install</span> firewall-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="zone"><a href="#zone" class="headerlink" title="zone"></a>zone</h3><p>Firewall 能将不同的网络连接归类到不同的信任级别。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd --list-all-zones    <span class="token comment">#查看所有zone信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Zone 提供了以下几个级别：</p><ul><li>drop: 丢弃所有进入的包，而不给出任何响应</li><li>block: 拒绝所有外部发起的连接，允许内部发起的连接</li><li>public: 允许指定的进入连接</li><li>external: 同上，对伪装的进入连接，一般用于路由转发</li><li>dmz: 允许受限制的进入连接</li><li>work: 允许受信任的计算机被限制的进入连接，类似 workgroup</li><li>home: 同上，类似 homegroup</li><li>internal: 同上，范围针对所有互联网用户</li><li>trusted: 信任所有连接</li></ul><h3 id="过滤规则"><a href="#过滤规则" class="headerlink" title="过滤规则"></a>过滤规则</h3><ul><li>source: 根据源地址过滤</li><li>interface: 根据网卡过滤</li><li>service: 根据服务名过滤</li><li>port: 根据端口过滤</li><li>icmp-block: icmp 报文过滤，按照 icmp 类型配置</li><li>masquerade: ip 地址伪装</li><li>forward-port: 端口转发</li><li>rule: 自定义规则</li></ul><p><em>过滤规则的优先级遵循如下顺序</em></p><ol><li>source</li><li>interface</li><li>firewalld.conf</li></ol><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ systemctl start firewalld         <span class="token comment"># 启动</span>$ systemctl stop firewalld          <span class="token comment"># 关闭</span>$ systemctl <span class="token builtin class-name">enable</span> firewalld        <span class="token comment"># 开机启动</span>$ systemctl disable firewalld       <span class="token comment"># 取消开机启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体的规则管理，可以使用 <code>firewall-cmd</code>,具体的使用方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--help</span><span class="token parameter variable">--zone</span><span class="token operator">=</span>NAME                         <span class="token comment"># 指定 zone</span><span class="token parameter variable">--permanent</span>                         <span class="token comment"># 永久修改，--reload 后生效</span><span class="token parameter variable">--timeout</span><span class="token operator">=</span>seconds                   <span class="token comment"># 持续效果，到期后自动移除，用于调试，不能与 --permanent 同时使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h3><p>查看运行状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--state</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看已被激活的 Zone 信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd --get-active-zonespublic  interfaces: eth0 eth1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看指定接口的 Zone 信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd --get-zone-of-interface<span class="token operator">=</span>eth0public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看指定级别的接口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-interfaceseth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看指定级别的所有信息，譬如 public</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-allpublic <span class="token punctuation">(</span>default, active<span class="token punctuation">)</span>  interfaces: eth0  sources:  services: dhcpv6-client http <span class="token function">ssh</span>  ports:  masquerade: no  forward-ports:  icmp-blocks:  rich rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看所有级别被允许的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd --get-service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看重启后所有 Zones 级别中被允许的服务，即永久放行的服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd --get-service <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="管理规则"><a href="#管理规则" class="headerlink" title="管理规则"></a>管理规则</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd --panic-on           <span class="token comment"># 丢弃</span>$ firewall-cmd --panic-off          <span class="token comment"># 取消丢弃</span>$ firewall-cmd --query-panic        <span class="token comment"># 查看丢弃状态</span>$ firewall-cmd <span class="token parameter variable">--reload</span>             <span class="token comment"># 更新规则，不重启服务</span>$ firewall-cmd --complete-reload    <span class="token comment"># 更新规则，重启服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加某接口至某信任等级，譬如添加 eth0 至 public，永久修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-interface<span class="token operator">=</span>eth0 <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置 public 为默认的信任级别</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd --set-default-zone<span class="token operator">=</span>public<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>a. 管理端口</code></strong><br>列出 dmz 级别的被允许的进入端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>dmz --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>允许 tcp 端口 8080 至 dmz 级别</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>dmz --add-port<span class="token operator">=</span><span class="token number">8080</span>/tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>允许某范围的 udp 端口至 public 级别，并永久生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">5060</span>-5059/udp <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>b. 网卡接口</code></strong><br>列出 public zone 所有网卡</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-interfaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将 eth0 添加至 public zone，永久</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public <span class="token parameter variable">--permanent</span> --add-interface<span class="token operator">=</span>eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>eth0 存在与 public zone，将该网卡添加至 work zone，并将之从 public zone 中删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>work <span class="token parameter variable">--permanent</span> --change-interface<span class="token operator">=</span>eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除 public zone 中的 eth0，永久</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public <span class="token parameter variable">--permanent</span> --remove-interface<span class="token operator">=</span>eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>c. 管理服务</code></strong><br>添加 smtp 服务至 work zone</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>work --add-service<span class="token operator">=</span>smtp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移除 work zone 中的 smtp 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>work --remove-service<span class="token operator">=</span>smtp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>d. 配置 external zone 中的 ip 地址伪装</code></strong><br>查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>external --query-masquerade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开伪装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>external --add-masquerade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关闭伪装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>external --remove-masquerade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>e. 配置 public zone 的端口转发</code></strong><br>要打开端口转发，则需要先</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-masquerade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后转发 tcp 22 端口至 3753</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-forward-port<span class="token operator">=</span>port<span class="token operator">=</span><span class="token number">22</span>:proto<span class="token operator">=</span>tcp:toport<span class="token operator">=</span><span class="token number">3753</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转发 22 端口数据至另一个 ip 的相同端口上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-forward-port<span class="token operator">=</span>port<span class="token operator">=</span><span class="token number">22</span>:proto<span class="token operator">=</span>tcp:toaddr<span class="token operator">=</span><span class="token number">192.168</span>.1.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转发 22 端口数据至另一 ip 的 2055 端口上</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-forward-port<span class="token operator">=</span>port<span class="token operator">=</span><span class="token number">22</span>:proto<span class="token operator">=</span>tcp:toport<span class="token operator">=</span><span class="token number">2055</span>:toaddr<span class="token operator">=</span><span class="token number">192.168</span>.1.100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>f. 配置 public zone 的 icmp</code></strong><br>查看所有支持的 icmp 类型</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd --get-icmptypesdestination-unreachable echo-reply echo-request parameter-problem redirect router-advertisement router-solicitation source-quench time-exceeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>列出</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-icmp-blocks<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加 echo-request 屏蔽</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-icmp-block<span class="token operator">=</span>echo-request <span class="token punctuation">[</span>--timeout<span class="token operator">=</span>seconds<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移除 echo-reply 屏蔽</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --remove-icmp-block<span class="token operator">=</span>echo-reply<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>g. IP 封禁</code></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--permanent</span> --add-rich-rule<span class="token operator">=</span><span class="token string">"rule family='ipv4' source address='222.222.222.222' reject"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然，我们仍然可以通过 ipset 来封禁 ip</p><p>封禁 ip</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --new-ipset<span class="token operator">=</span>blacklist <span class="token parameter variable">--type</span><span class="token operator">=</span>hash:ip$ firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public <span class="token parameter variable">--ipset</span><span class="token operator">=</span>blacklist --add-entry<span class="token operator">=</span><span class="token number">222.222</span>.222.222<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>封禁网段</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --new-ipset<span class="token operator">=</span>blacklist <span class="token parameter variable">--type</span><span class="token operator">=</span>hash:net$ firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public <span class="token parameter variable">--ipset</span><span class="token operator">=</span>blacklist --add-entry<span class="token operator">=</span><span class="token number">222.222</span>.222.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>倒入 ipset 规则</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --new-ipset-from-file<span class="token operator">=</span>/path/blacklist.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后封禁 blacklist</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--permanent</span> <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-rich-rule<span class="token operator">=</span><span class="token string">'rule source ipset=blacklist drop'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重新载入以生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="CentOS修改DNS-GW-IP-18-md-“-18-md”"><a href="#CentOS修改DNS-GW-IP-18-md-“-18-md”" class="headerlink" title="CentOS修改DNS&#x2F;GW&#x2F;IP(#18.md “#18.md”)"></a>CentOS修改DNS&#x2F;GW&#x2F;IP(#18.md “#18.md”)</h3><h2 id="1-修改DNS"><a href="#1-修改DNS" class="headerlink" title="1.修改DNS"></a>1.修改DNS</h2><p><strong>解决方案一：</strong><br>修改网卡的DNS的配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> /etc/resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下内容,设置两条dns</p><pre class="line-numbers language-none"><code class="language-none">nameserver 8.8.8.8 #google域名服务器nameserver 8.8.4.4 #google域名服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>若未生效，可执行 <code>chattr +i /etc/resolv.conf</code> 设置文件属性只有root用户才能修改<br>然后执行 <code>service NetworkManager restart </code></p></blockquote><p><strong>解决方案二：</strong><br>对接口添加dns信息；编辑&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-xxx，xxx为你的网卡名，但一般是ifcfg-eth0的，具体的xxx根据你的网卡确定，在最下面添加：</p><pre class="line-numbers language-none"><code class="language-none">DNS1&#x3D;8.8.8.8   #google dns服务器, 根据实际情况更换DNS2&#x3D;8.8.4.4   #google dns服务器, 根据实际情况更换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>保存后重启网络</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> network restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-修改网关"><a href="#2-修改网关" class="headerlink" title="2.修改网关"></a>2.修改网关</h2><p>修改网关的配置文件(第3部分也可以设置)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> /etc/sysconfig/network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为一下内容</p><pre class="line-numbers language-none"><code class="language-none">NETWORKING&#x3D;yes(表示系统是否使用网络，一般设置为yes。如果设为no，则不能使用网络，而且很多系统服务程序将无法启动)HOSTNAME&#x3D;centos(设置本机的主机名，这里设置的主机名要和&#x2F;etc&#x2F;hosts中设置的主机名对应)GATEWAY&#x3D;192.168.1.1(设置本机连接的网关的IP地址。例如，网关为10.0.0.2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-修改ip"><a href="#3-修改ip" class="headerlink" title="3.修改ip"></a>3.修改ip</h2><p>修改对应的网卡的IP地址的配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vim</span> /etc/sysconfig/network-scripts/ifcfg-eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为一下内容</p><pre class="line-numbers language-none"><code class="language-none">DEVICE&#x3D;eth0 #描述网卡对应的设备别名，例如ifcfg-eth0的文件中它为eth0BOOTPROTO&#x3D;static #设置网卡获得ip地址的方式，可能的选项为static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址BROADCAST&#x3D;192.168.0.255 #对应的子网广播地址HWADDR&#x3D;00:07:E9:05:E8:B4 #对应的网卡物理地址IPADDR&#x3D;12.168.1.2 #如果设置网卡获得 ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址IPV6INIT&#x3D;noIPV6_AUTOCONF&#x3D;noNETMASK&#x3D;255.255.255.0 #网卡对应的网络掩码NETWORK&#x3D;192.168.1.0 #网卡对应的网络地址ONBOOT&#x3D;yes #系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘-Java-通过-CompletableFuture-实现异步多线程优化请求处理速度’-19-md-“-19-md”"><a href="#‘-Java-通过-CompletableFuture-实现异步多线程优化请求处理速度’-19-md-“-19-md”" class="headerlink" title="‘[Java]通过 CompletableFuture 实现异步多线程优化请求处理速度’(#19.md “#19.md”)"></a>‘[Java]通过 CompletableFuture 实现异步多线程优化请求处理速度’(#19.md “#19.md”)</h3><h3 id="零、背景"><a href="#零、背景" class="headerlink" title="零、背景"></a>零、背景</h3><p>我们在写后端请求的时候, 可能涉及多次 SQL 执行(或其他操作), 当这些请求相互不关联, 在顺序执行时就浪费了时间, 这些不需要先后顺序的操作可以通过多线程进行同时执行, 来加速整个逻辑的执行速度.</p><p>既然有了目标和大致思路, 如果有做过前端的小伙伴应该能想起来 Js 里面有个 <code>Promise.all</code> 来解决这个问题, 在 Java 里也有类似功能的类 <code>CompletableFuture</code> , 它可以实现多线程和线程阻塞, 这样能够保证等待多个线程执行完成后再继续操作.</p><h3 id="一、CompletableFuture-是什么"><a href="#一、CompletableFuture-是什么" class="headerlink" title="一、CompletableFuture 是什么"></a>一、CompletableFuture 是什么</h3><p>首先我们先了解一下 <code>CompletableFuture</code> 是干什么, 接下来我们通过简单的示例来介绍他的作用.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成几个任务</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futureList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>futureList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务1 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"任务1的数据"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>futureList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"任务2的数据"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>futureList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务3 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"任务3的数据"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//完成任务</span><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> allTask <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>futureList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有任务都完成了， 返回结果集: "</span>                    <span class="token operator">+</span> futureList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token operator">::</span><span class="token function">join</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 阻塞主线程</span>allTask<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main end, cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">任务2 完成任务3 完成任务1 完成所有任务都完成了， 返回结果集: 任务1的数据,任务2的数据,任务3的数据main end, cost: <span class="token number">4032</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>结果分析:</strong> 我们需要执行3个任务, 3个任务同时执行, 互不影响</p></blockquote><ol><li>其中任务2耗时最短,提前打印完成</li><li>其次是任务3</li><li>最后是执行1完成</li><li>当所有任务完成后, 触发 <code>whenComplete</code> 方法, 打印任务的返回结果</li><li>最后打印总耗时为 4.032s</li><li>结论: 多线程执行后, 耗时取决于最耗时的操作, 而单线程是所有操作耗时之和</li></ol><h3 id="二、封装工具类"><a href="#二、封装工具类" class="headerlink" title="二、封装工具类"></a>二、封装工具类</h3><p>经过上面的测试, 通过 <code>CompletableFuture</code> 已经能够实现我们的预想, 为了操作方便, 我们将封装起来, 便于统一管理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>yelog<span class="token punctuation">.</span>java<span class="token punctuation">.</span>usage<span class="token punctuation">.</span>concurrent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Function</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Predicate</span></span><span class="token punctuation">;</span><span class="token comment">/** * 执行并发任务 * * @author yangyj13 * @date 11/7/22 9:49 PM */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> futureList<span class="token punctuation">;</span>    <span class="token comment">/**     * 添加待执行的任务     *     * @param completableFuture 任务     * @return 当前对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">MultiTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> completableFuture<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>futureList <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            futureList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        futureList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加待执行的任务(无返回)     *     * @param task 任务     * @return 当前对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">MultiTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            task<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 添加待执行的任务(有返回)     *     * @param task 任务     * @return 当前对象     */</span>    <span class="token keyword">public</span> <span class="token class-name">MultiTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> task<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 开始执行任务     *     * @param callback                当所有任务都完成后触发的回调方法     * @param waitTaskExecuteComplete 是否阻塞主线程     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> callback<span class="token punctuation">,</span> <span class="token class-name">Boolean</span> waitTaskExecuteComplete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> allFuture <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>futureList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> objectList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        futureList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                            objectList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        callback<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>objectList<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> waitTaskExecuteComplete <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> waitTaskExecuteComplete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            allFuture<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 开始执行任务     * 等待所有任务完成（阻塞主线程）     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 开始执行任务     *     * @param waitTaskExecuteComplete 是否阻塞主线程     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> waitTaskExecuteComplete<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> waitTaskExecuteComplete<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 开始执行任务     *     * @param callback 当所有任务都完成后触发的回调方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span> callback<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">execute</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么上一步我们测试的流程转换成工具类后如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">MultiTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> multiTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>multiTask<span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>t <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务1 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>t <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务2 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务3 完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"任务3的数据"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>resultList<span class="token operator">-></span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all complete: "</span> <span class="token operator">+</span> resultList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main end, cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、应用到实际的效果"><a href="#三、应用到实际的效果" class="headerlink" title="三、应用到实际的效果"></a>三、应用到实际的效果</h3><p>执行两次数据库的操作如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestMapper</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select count(*) from test_user where score &lt; 1000 and user_id = #&#123;userId&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">countScoreLess1000</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select count(1) from test_log where success = true and user_id = #&#123;userId&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">countSuccess</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用方法:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testMapper<span class="token punctuation">.</span><span class="token function">countScoreLess1000</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> countScoreLess1000End <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"countScoreLess1000 cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>countScoreLess1000End <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>testMapper<span class="token punctuation">.</span><span class="token function">countSuccess</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> countSuccessEnd <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"countSuccess cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>countSuccessEnd <span class="token operator">-</span> countScoreLess1000End<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"all cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>countSuccessEnd <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺序执行的平均时间如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">countScoreLess1000 cost: <span class="token number">368</span>countSuccess cost: <span class="token number">404</span>all cost: <span class="token number">772</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们应用的上面的工具类后的调用方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MultiTask</span> multiTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>multiTask<span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>t <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    testMapper<span class="token punctuation">.</span><span class="token function">countScoreLess1000</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"countScoreLess1000 cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>t <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    testMapper<span class="token punctuation">.</span><span class="token function">countSuccess</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"countSuccess cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"all cost: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">countScoreLess1000 cost: <span class="token number">433</span>countSuccess cost: <span class="token number">463</span>all cost: <span class="token number">464</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到各子任务执行时长是差不多的, 但是总耗时使用多线程后有了明显下降</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>通过使用 <code>CompletableFuture</code> 实现多线程阻塞执行后, 大幅降低这类请求, 并且当可以异步执行的子任务越多, 效果越明显.</p><p>﻿</p><h3 id="一个客户端设置多个github账号-20-md-“-20-md”"><a href="#一个客户端设置多个github账号-20-md-“-20-md”" class="headerlink" title="一个客户端设置多个github账号(#20.md “#20.md”)"></a>一个客户端设置多个github账号(#20.md “#20.md”)</h3><p>最近想要使用自己的GitHub搭建Hexo博客，同时还要使用工作的GitHub开发项目，所以在网上找寻了一些文章，在此将自己的搭建过程记录一下。</p><span id="more"></span><h2 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h2><p>两个GitHub账号（假设两个账号为one,two）<br>取消Git全局设置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.email<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><p>生成<code>id_rsa</code>私钥，<code>id_rsa.pub</code>公钥。one可以直接回车，默认生成 id_rsa 和 id_rsa.pub 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"one@xx.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加two会出现提示输入文件名，输入与默认配置不一样的文件名，如：id_rsa_two。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/.ssh$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"two@126.com"</span>  <span class="token comment">#  之后会提示输入文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>GitHub添加公钥 id_rsa.pub 、 id_rsa_two.pub，分别登陆one,two的账号，在 Account Settings 的 SSH Keys 里，点 <code>Add SSH Keys</code> ，将公钥(.pub文件)中的内容粘贴到 Key 中，并输入 Title。<br>添加 ssh Key</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add ~/.ssh/id_rsa$ ssh-add ~/.ssh/id_rsa_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以在添加前使用下面命令删除所有的 key</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后可以通过下面命令，查看 key 的设置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ssh-add <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改ssh-config文件"><a href="#修改ssh-config文件" class="headerlink" title="修改ssh config文件"></a>修改ssh config文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/.ssh/$ <span class="token function">touch</span> config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>打开 .ssh 文件夹下的 <code>config</code> 文件，进行配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#  default</span>Host github.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsa<span class="token comment">#  two</span>Host two.github.com  <span class="token comment">#  前缀名可以任意设置</span>HostName github.comUser gitIdentityFile ~/.ssh/id_rsa_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这里必须采用这样的方式设置，否则 push 时会出现以下错误:</li></ul><blockquote><p>ERROR: Permission to two&#x2F;two.github.com.git denied to one.</p></blockquote><p>简单分析下原因，我们可以发现 ssh 客户端是通过类似:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git@github.com:one/one.github.com.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样的 Git 地址中的 User 和 Host 来识别使用哪个本地私钥的。<br>很明显，如果 User 和 Host 始终为 git 和 github.com，那么就只能使用一个私钥。<br>所以需要上面的方式配置，每个账号使用了自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，这样 ssh 在连接时就可以区别不同的账号了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com        <span class="token comment">#  测试one ssh连接</span><span class="token comment"># Hi ***! You've successfully authenticated, but GitHub does not provide shell access.</span>$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@two.github.com    <span class="token comment">#  测试two ssh连接</span><span class="token comment"># Hi ***! You've successfully authenticated, but GitHub does not provide shell access.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样还没有完，下面还有关联的设置。</p><h2 id="在Git项目中配置账号关联"><a href="#在Git项目中配置账号关联" class="headerlink" title="在Git项目中配置账号关联"></a>在Git项目中配置账号关联</h2><p>可以用 <code>git init</code> 或者 <code>git clone</code> 创建本地项目<br>分别在one和two的git项目目录下，使用下面的命令设置名字和邮箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config user.name <span class="token string">"__name__"</span>            <span class="token comment">#  __name__ 例如 one</span>$ <span class="token function">git</span> config user.email <span class="token string">"__email__"</span>          <span class="token comment">#  __email__ 例如 one@126.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：由于我不知道Hexo怎样配置 局部的config，所以，我将two的config使用全局，而工作目录配置局部。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"__name__"</span>            <span class="token comment">#  __name__ 例如 two</span>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"__email__"</span>          <span class="token comment">#  __email__ 例如 two@126.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看git项目的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 one 的 remote.origin.url&#x3D;<a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#116;&#x40;&#103;&#105;&#x74;&#104;&#x75;&#98;&#x2e;&#99;&#111;&#x6d;</a>:one&#x2F;one.github.com.git<br>查看 two 的 remote.origin.url&#x3D;<a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a>:two&#x2F;two.github.com.git<br>由于 one 使用的是默认的 Host ，所以不需要修改，但是 two 使用的是 two.github.com ，则需要进行修改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> remote <span class="token function">rm</span> origin$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@two.github.com:two/two.github.com.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我在Hexo中的配置（使用two账号）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@two.github.com<span class="token punctuation">:</span>two/two.github.io.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="上传更改"><a href="#上传更改" class="headerlink" title="上传更改"></a>上传更改</h2><p>上面所有的设置无误后，可以修改代码，然后上传了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"your comments"</span>$ <span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果遇到warning</p><blockquote><p>warning: push.default is unset; its implicit value is changing in Git 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use…</p></blockquote><p>推荐使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> push.default simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="如何给GitHub上的项目贡献代码-21-md-“-21-md”"><a href="#如何给GitHub上的项目贡献代码-21-md-“-21-md”" class="headerlink" title="如何给GitHub上的项目贡献代码(#21.md “#21.md”)"></a>如何给GitHub上的项目贡献代码(#21.md “#21.md”)</h3><p>最近一直在使用 <code>hexo</code> 的一款主题 <code>yelee</code> ，但是发现它的代码块由于空行不占位导致的显示错位，所以就去GitHub上翻issue，果然有好多人都在反映这个问题，并且作者已经打上bug标签，事情应该就马上结束了，就去忙别的了。这两天又去逛了一下issue，发现这个bug仍然屹立在那里，强迫症又犯了，趁着今天工作不怎么忙，就把这个bug解决了。然后问题来了，怎么才能给作者贡献代码呢。</p><!--more --><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>首先通过 <code>git clone</code> 将项目克隆到本地（我早已拉下来，跳过此步骤）</li><li><code>git pull</code> 拉取最新代码（将所有的change都同步到本地）</li><li>将 原项目 <code>fork</code> 到 自己的github上,并复制代码url</li><li>在本地添加第二个仓库地址：<code>git remote add [nickname] [your url]</code></li></ol><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><ol><li>修改bug 或 新增功能</li><li><code>git commit [file1] [file2] ... -m [message]</code> 本地提交代码</li></ol><h2 id="同步到github中并发到原项目"><a href="#同步到github中并发到原项目" class="headerlink" title="同步到github中并发到原项目"></a>同步到github中并发到原项目</h2><ol><li><code>git push [nickname]</code> 将代码 push 到自己的项目里，nickname就是添加的第二个仓库的名字</li><li>自己项目内，点击 pull requests -》 new pull request 将本次修改提交到原项目进行同步。</li></ol><p>﻿</p><h3 id="deepin系统使用记录-22-md-“-22-md”"><a href="#deepin系统使用记录-22-md-“-22-md”" class="headerlink" title="deepin系统使用记录(#22.md “#22.md”)"></a>deepin系统使用记录(#22.md “#22.md”)</h3><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><ul><li><a href="">官网</a></li><li><a href="">论坛</a></li><li><a href="">deepin’wiki</a></li><li><a href="">Deepin应用列表</a></li></ul><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p>安装输入法，除了商店下载（好多输入法没有被收录进deepin商店），可以使用fcitx安装。<br>如安装google拼音输入法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">aptitude</span> <span class="token function">install</span> fcitx fcitx-googlepinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果当前在使用ibus，而不是fcitx的话，看下面<br>1）安装fcitx，并安装google拼音</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fcitx fcitx-googlepinyin im-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2）打开输入法配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ im-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>依次：<code>ok</code>-&gt;<code>yes</code>,选择fcitx为默认输入法框架,<code>ok</code>-&gt;<code>ok</code></p><h2 id="制作启动器图标"><a href="#制作启动器图标" class="headerlink" title="制作启动器图标"></a>制作启动器图标</h2><p>以创建 <code>atom</code> 这款编辑器的启动器图标为例。<br>1）进入 <code>/usr/share/applications/</code> 目录，创建 <code>atom.desktop</code> 文件<br>2）编辑 <code>atom.desktop</code> 文件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">[Desktop Entry]Name=AtomComment=A hackable text editor for the 21st centuryExec=/opt/atom/atom %FIcon=/opt/atom/atom.pngType=ApplicationStartupNotify=trueCategories=TextEditor;Development;Utility;MimeType=text/plain;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>解释：<br><code>Name</code>：创建的图标名称<br><code>Comment</code>：备注，随便填<br><code>Exec</code>：启动文件的位置<br><code>Icon</code>：图标位置<br><code>Type</code>：类型，启动程序就填Application<br><code>StartupNotify</code>: 启动通知，填true就行了。详细可查 <a href="">Startup notification</a><br><code>Categories</code>： 分类，随便填，比如：Application;<br><code>MimeType</code>： 打开文件类型</p></blockquote><h2 id="修改apt源"><a href="#修改apt源" class="headerlink" title="修改apt源"></a>修改apt源</h2><p>修改 <code>/etc/apt/sources.list</code><br>默认的源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span>  unstable main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>阿里云的源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deb <span class="token punctuation">[</span>by-hash<span class="token operator">=</span>force<span class="token punctuation">]</span>  unstable main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更换文件管理器"><a href="#更换文件管理器" class="headerlink" title="更换文件管理器"></a>更换文件管理器</h2><h3 id="Nautilus"><a href="#Nautilus" class="headerlink" title="Nautilus"></a>Nautilus</h3><ol><li>深度商店下载安装 Nautilus<br>2）卸载深度任务管理器<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt</span> remove dde-file-manager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>Nautilus 常用的快捷键</li></ol><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">F2</td><td align="left">重命名</td></tr><tr><td align="left">Ctrl + 1</td><td align="left">图标视图</td></tr><tr><td align="left">Ctrl + 2</td><td align="left">列表视图</td></tr><tr><td align="left">Ctrl + T</td><td align="left">新建标签页</td></tr><tr><td align="left">Ctrl + W</td><td align="left">关闭标签页</td></tr><tr><td align="left">Alt + 数字</td><td align="left">切换到指定标签页</td></tr><tr><td align="left">Ctrl + D</td><td align="left">收藏到当前文件夹到书签</td></tr><tr><td align="left">Shift + F10</td><td align="left">打开鼠标右键菜单</td></tr><tr><td align="left">Alt + 左方向键</td><td align="left">后退</td></tr><tr><td align="left">Alt + 右方向键</td><td align="left">前进</td></tr><tr><td align="left">Ctrl + Q</td><td align="left">退出</td></tr></tbody></table><p>﻿</p><h3 id="docker备份恢复之save与export-23-md-“-23-md”"><a href="#docker备份恢复之save与export-23-md-“-23-md”" class="headerlink" title="docker备份恢复之save与export(#23.md “#23.md”)"></a>docker备份恢复之save与export(#23.md “#23.md”)</h3><h2 id="docker-save"><a href="#docker-save" class="headerlink" title="docker save"></a>docker save</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p><code>docker save</code> 命令用于持久化 <strong>镜像</strong>，先获得镜像名称，再执行保存：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过此命令查出要持久化的镜像名称</span>$ <span class="token function">docker</span> images<span class="token comment"># 持久化镜像名为 image_name 的镜像，</span>$ <span class="token function">docker</span> save image_name <span class="token parameter variable">-o</span> ~/save.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong> 如果镜像是在远程仓库，执行保存镜像的时候可能会报 <code>Cowardly refusing to save to a terminal. Use the -o flag or redirect.</code> 的错，可以通过 <code>docker save image_name &gt; image_name.tar</code> 将镜像从远程仓库持久化到本地。</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导入 save.tar</span>$ <span class="token function">docker</span> load <span class="token operator">&lt;</span> ~/save.tar<span class="token comment"># 查看镜像</span>$ <span class="token function">docker</span> images images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="docker-export"><a href="#docker-export" class="headerlink" title="docker export"></a>docker export</h2><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><p><code>docker export</code> 命令用于持久化 <strong>容器</strong>，先获取容器ID，再执行保存。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过此命令查出要持久化的容器ID</span>$ <span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token comment"># 持久化容器id为 container_id 的容器</span>$ <span class="token function">docker</span> <span class="token builtin class-name">export</span> container_id <span class="token operator">></span> ~/export.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从 export.tar 导入镜像</span>$ <span class="token function">cat</span> ~/export.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - my-images:latest<span class="token comment"># 查看镜像</span>$ <span class="token function">sudo</span> <span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h2><p>通过 <code>sudo docker images --tree</code> 可以查看到镜像的所有层，就会发现， <code>docker export</code> 丢失了所有的历史，而<code>docker save</code> 则会保存所有历史。</p><p>﻿</p><h3 id="Docker-技术整理-24-md-“-24-md”"><a href="#Docker-技术整理-24-md-“-24-md”" class="headerlink" title="Docker 技术整理(#24.md “#24.md”)"></a>Docker 技术整理(#24.md “#24.md”)</h3><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-什么是docker"><a href="#1-1-什么是docker" class="headerlink" title="1.1 什么是docker"></a>1.1 什么是docker</h3><p>Docker 诞生于 2013 年初，由 dotCloud 公司（后改名为 Docker Inc）基于 Go 语言实现并开源的项目。此项目后来加入 Linux基金会，遵从了 Apache 2.0 协议</p><p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。Docker 是在 Linux 容器技术（LXC）的基础上进行了封装，让用户可以快速并可靠的将应用程序从一台运行到另一台上。</p><p>使用容器部署应用被称为<strong>容器化</strong>，容器化技术的几大优势：</p><ol><li><strong>灵活</strong>：甚至复杂的应用也可以被容器化</li><li><strong>轻量</strong>：容器利用和共享宿主机内核，从而在利用系统资源比虚拟机更加的有效</li><li><strong>可移植</strong>：你可以在本地构建，在云端部署并在任何地方运行</li><li><strong>松耦合</strong>：容器是高度封装和自给自足的，允许你在不破环其他容器的情况下替换或升级任何一个</li><li><strong>可扩展</strong>：你可以通过数据中心来新增和自动分发容器</li><li><strong>安全</strong>：容器依赖强约束和独立的进程</li></ol><h3 id="1-2-和传统虚拟机的区别"><a href="#1-2-和传统虚拟机的区别" class="headerlink" title="1.2 和传统虚拟机的区别"></a>1.2 和传统虚拟机的区别</h3><p>容器在Linux上本地运行，并与其他容器共享主机的内核。它运行一个离散进程，不占用任何其他可执行文件更多的内存，从而使其轻巧。</p><p><img src="/" alt="image.png"></p><h3 id="1-3-相关链接"><a href="#1-3-相关链接" class="headerlink" title="1.3 相关链接"></a>1.3 相关链接</h3><p>官网：</p><p>文档：</p><h2 id="二、Image镜像"><a href="#二、Image镜像" class="headerlink" title="二、Image镜像"></a>二、Image镜像</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也<strong>不会被改变</strong>。</p><ol><li><strong>父镜像</strong>：每个镜像都可能依赖于有一个或多个下层组成的另一个镜像。下层那个镜像就是上层镜像的父镜像</li><li><strong>基础镜像</strong>：一个没有任何父镜像的镜像，被称为基础镜像</li><li><strong>镜像ID</strong>：所有镜像都是通过一个 64 位十六进制字符串（256 bit 的值）来标识的。为了简化使用，前 12 个自负可以组成一个短ID，可以在命令行中使用。短ID还是有一定的碰撞几率，所以服务器总是返回长ID</li></ol><h3 id="2-2-从仓库下载镜像"><a href="#2-2-从仓库下载镜像" class="headerlink" title="2.2 从仓库下载镜像"></a>2.2 从仓库下载镜像</h3><p>可以通过 <code>docker pull</code> 命令从仓库获取所需要的镜像</p><pre class="line-numbers language-none"><code class="language-none">docker pull [选项] [Docker Registry 地址]&lt;镜像名&gt;:&lt;标签&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>选项:</strong></p><ol><li>–all-tags,-a : 拉去所有 tagged 镜像</li><li>–disable-content-trust：忽略镜像的校验，默认</li><li>–platform：如果服务器是开启多平台支持的，则需要设置平台</li><li>–quiet,-q：静默执行，不打印详细信息</li></ol><p>标签： 下载指定标签的镜像，默认 <code>latest</code></p><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none"># 从 Docker Hub 下载最新的 debian 镜像docker pull debian# 从 Docker Hub 下载 jessie 版 debian 镜像docker pull debian:jessie# 下载指定摘要(sha256)的镜像docker pull ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-列出本地镜像"><a href="#2-3-列出本地镜像" class="headerlink" title="2.3 列出本地镜像"></a>2.3 列出本地镜像</h3><pre class="line-numbers language-none"><code class="language-none"># 列出已下载的镜像 image_name: 指定列出某个镜像docker images [选项] [image_name]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>选项</strong></p><p>| 参数         | 描述                                 |<br>|  |  |<br>| –all, -a    | 展示所有镜像(包括 intermediate 镜像) |<br>| –digests    | 展示摘要                             |<br>| –filter, -f | 添加过滤条件                         |<br>| –format     | 使用 Go 模版更好的展示               |<br>| –no-trunc   | 不删减输出                           |<br>| –quiet, -q  | 静默输出，仅仅展示 IDs               |</p><p><strong>示例</strong></p><pre class="line-numbers language-none"><code class="language-none"># 展示本地所有下载的镜像docker images# 在本地查找镜像名是 &quot;java&quot; 标签是 &quot;8&quot; 的 奖项docker images: java:8# 查找悬挂镜像docker images --filter &quot;dangling&#x3D;true&quot;# 过滤 lable 为 &quot;com.example.version&quot; 的值为 0.1 的镜像docker images --filter &quot;label&#x3D;com.example.version&#x3D;0.1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-Dockerfile创建镜像"><a href="#2-4-Dockerfile创建镜像" class="headerlink" title="2.4 Dockerfile创建镜像"></a>2.4 Dockerfile创建镜像</h3><p>为了方便分享和快速部署，我们可以使用 <code>docker build</code> 来创建一个新的镜像，首先创建一个文件 Dockerfile，如下</p><pre class="line-numbers language-none"><code class="language-none"># This is a commentFROM ubuntu:14.04MAINTAINER Chris &lt;jaytp@qq.com&gt;RUN apt-get -qq updateRUN apt-get -qqy install ruby ruby-devRUN gem install sinatra<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在此 Dockerfile 所在目录执行 <code>docker build -t yelog/ubuntu:v1 .</code> 来生成镜像，所属组织&#x2F;镜像名:标签</p><h3 id="2-5-上传镜像"><a href="#2-5-上传镜像" class="headerlink" title="2.5 上传镜像"></a>2.5 上传镜像</h3><p>用户可以通过 <code>docker push</code> 命令，把自己创建的镜像上传到仓库中来共享。例如，用户在 Docker Hub 上完成注册后，可以推送自己的镜像到仓库中。</p><pre class="line-numbers language-none"><code class="language-none">docker push yelog&#x2F;ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-6-导出和载入镜像"><a href="#2-6-导出和载入镜像" class="headerlink" title="2.6 导出和载入镜像"></a>2.6 导出和载入镜像</h3><p>docker 支持将镜像导出为文件，然后可以再从文件导入到本地镜像仓库</p><pre class="line-numbers language-none"><code class="language-none"># 导出docker load --input yelog_ubuntu_v1.tar# 载入docker load &lt; yelog_ubuntu_v1.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-移除本地镜像"><a href="#2-7-移除本地镜像" class="headerlink" title="2.7 移除本地镜像"></a>2.7 移除本地镜像</h3><pre class="line-numbers language-none"><code class="language-none"># -f 强制删除docker rmi [-f] yelog&#x2F;ubuntu:v1# 删除悬挂镜像docker rmi $(docker images -f &quot;dangling&#x3D;true&quot; -q)# 删除所有未被容器使用的镜像docker image prune -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、容器"><a href="#三、容器" class="headerlink" title="三、容器"></a>三、容器</h2><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p>容器和镜像，就像面向对象中的 <strong>类</strong> 和 <strong>示例</strong> 一样，镜像是静态的定义，容器是镜像运行的实体，容器可以被创建、启动、停止、删除和暂停等</p><p>容器的实质是进城，耽于直接的宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、网络配置和进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><h3 id="3-2-创建容器"><a href="#3-2-创建容器" class="headerlink" title="3.2 创建容器"></a>3.2 创建容器</h3><p>我们可以通过命令 <code>docker run</code> 命令创建容器</p><p>如下，启动一个容器，执行命令输出 “Hello word”，之后终止容器</p><pre class="line-numbers language-none"><code class="language-none">docker run ubuntu:14.04 &#x2F;bin&#x2F;echo &#39;Hello world&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面的命令则是启动一个 bash 终端，允许用户进行交互</p><pre class="line-numbers language-none"><code class="language-none">docker run -t -i ubuntu:14.04 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-t</code> 让 Dcoker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</p><p><code>-i</code> 责让容器的标准输入保持打开</p><p>更多参数可选</p><p>| -a stdin                           | 指定标准输入输出内容类型                              |<br>| – |<br>| -d                                 | 后台运行容器，并返回容器ID                            |<br>| -i                                 | 以交互模式运行容器，通常与 -t 同时使用                |<br>| -P                                 | 随机端口映射，容器端口内部随即映射到宿主机的端口上    |<br>| -p                                 | 指定端口映射， -p 宿主机端口:容器端口                 |<br>| -t                                 | 为容器重新分配一个伪输入终，通常与 -i 同时使用        |<br>| –name&#x3D;”gate”                      | 为容器指定一个名称                                    |<br>| –dns 8.8.8.8                      | 指定容器的 DNS 服务器，默认与宿主机一致               |<br>| –dns-search example.com           | 指定容器 DNS 搜索域名，默认与宿主机一致               |<br>| -h “gate”                          | 指定容器的 hostname                                   |<br>| -e username&#x3D;’gate’                 | 设置环境变量                                          |<br>| –env-file&#x3D;[]                      | 从指定文件读入环境变量                                |<br>| –cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2” | 绑定容器到指定 CPU 运行                               |<br>| -m                                 | 设置容器使用内存最大值                                |<br>| –net&#x3D;”bridge”                     | 指定容器的网络连接类型支持 bridge&#x2F;host&#x2F;none&#x2F;container |<br>| –link&#x3D;[]                          | 添加链接到另一个容器                                  |<br>| –expose&#x3D;[]                        | 开放一个端口或一组端口                                |<br>| –volume,-v                        | 绑定一个卷                                            |</p><p>当利用 <code>docker run</code> 来创建容器时，Dcoker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像外面挂在一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟借口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><h3 id="3-3-启动容器"><a href="#3-3-启动容器" class="headerlink" title="3.3 启动容器"></a>3.3 启动容器</h3><pre class="line-numbers language-none"><code class="language-none"># 创建一个名为 test 的容器，容器任务是：打印一行 Hello worddocker run --name&#x3D;&#39;test&#39; ubuntu:14.04 &#x2F;bin&#x2F;echo &#39;Hello world&#39;# 查看所有可用容器 [-a]包括终止在内的所有容器docker ps -a# 启动指定 name 的容器docker start test# 重启指定 name 的容器docker restart test# 查看日志运行日志（每次启动的日志均被查询出来）$ docker logs testHello worldHello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-守护态运行"><a href="#3-4-守护态运行" class="headerlink" title="3.4 守护态运行"></a>3.4 守护态运行</h3><p>前面创建的容器都是执行任务（打印Hello world）后，容器就终止了。更多的时候，我们需要让 Docker 容器在后台以守护态（Daemonized）形式运行。此时，可以通过添加 <code>-d</code> 参数来实现</p><blockquote><p>注意：docker是否会长久运行，和 docker run 指定的命令有关</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 创建 docker 后台守护进程的容器docker run --name&#x3D;&#39;test2&#39; -d ubuntu:14.04 &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1; done&quot;# 查看容器$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES237e555d4457        ubuntu:14.04        &quot;&#x2F;bin&#x2F;sh -c &#39;while t…&quot;   52 seconds ago      Up 51 seconds                                           test2# 获取容器的输出信息$ docker logs test2hello worldhello worldhello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-进入容器"><a href="#3-5-进入容器" class="headerlink" title="3.5 进入容器"></a>3.5 进入容器</h3><p>上一步我们已经实现了容器守护态长久运行，某些时候需要进入容器进行操作，可以使用 <code>attach</code> 、<code>exec</code> 进入容器。</p><pre class="line-numbers language-none"><code class="language-none"># 不安全的，ctrl+d 退出时容器也会终止docker attach [容器Name]# 以交互式命令行进入，安全的，推荐使用docker exec -it [容器Name] &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>命令优化</strong></p><ol><li>使用 <code>docker exec</code> 命令时，好用，但是命令过长，我们可以通过自定义命令来简化使用</li><li>创建文件 <code>/user/bin/ctn</code> 命令文件，内容如下</li></ol><pre class="line-numbers language-none"><code class="language-none">docker exec -it $1 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>检查环境变量有没有配置目录 <code>/usr/bin</code> （一般是有配置在环境变量里面的，不过最好再确认一下）</li></ol><pre class="line-numbers language-none"><code class="language-none">$PATHbash: &#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;usr&#x2F;games: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>完成上面步骤后，就可以直接通过命令 <code>ctn</code> 来进入容器</li></ol><blockquote><p>注意：如果是使用非 root 账号创建的命令，而 docker 命令是 root 权限，可能存在权限问题，可以通过设置 <code>chmod 777 /usr/bin/ctn</code> 设置权限，使用 <code>sudo ctn [容器Name]</code> 即可进入容器</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$ ctn [容器Name]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>使用上面命令时，容器Name 需要手动输入，容器出错。我们可以借助 <code>complete</code> 命令来补全 容器Name，在 <code>~/.bashrc</code> （作用于当前用户，如果想要所要用户上校，可以修改 <code>/etc/bashrc</code>）文件中添加一行，内容如下。保存后执行 <code>source ~/.bashrc</code> 使之生效，之后我们输入 <code>ctn</code> 后，按 <code>tab</code> 就会提示或自动补全容器名了了</li></ol><pre class="line-numbers language-none"><code class="language-none"># ctn auto completecomplete -W &quot;$(docker ps --format&quot;&#123;&#123;.Names&#125;&#125;&quot;)&quot; ctn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>注意： 由于提示的 容器Name 是 <code>~/.bashrc</code> 生效时的列表，所有如果之后 docker 容器列表有变动，需要重新执行 <code>source ~/.bashrc</code> 使之更新提示列表</p></blockquote><h3 id="3-6-终止容器"><a href="#3-6-终止容器" class="headerlink" title="3.6 终止容器"></a>3.6 终止容器</h3><p>通过 <code>docker stop [容器Name]</code> 来终止一个<strong>运行中</strong>的容器</p><pre class="line-numbers language-none"><code class="language-none"># 终止容器名为 test2 的容器docker stop test2# 查看正在运行中的容器docker ps# 查看所有容器（包括终止的）docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7-将容器保存为镜像"><a href="#3-7-将容器保存为镜像" class="headerlink" title="3.7 将容器保存为镜像"></a>3.7 将容器保存为镜像</h3><p>我们修改一个容器后，可以经当前容器状态打包成镜像，方便下次直接通过镜像仓库生成当前状态的容器。</p><pre class="line-numbers language-none"><code class="language-none"># 创建容器docker run -t -i training&#x2F;sinatra &#x2F;bin&#x2F;bash# 添加两个应用gem install json# 将修改后的容器打包成新的镜像docker commit -m &quot;Added json gem&quot; -a &quot;Docker Newbee&quot; 0b2616b0e5a8 ouruser&#x2F;sinatra:v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8-导出-导入容器"><a href="#3-8-导出-导入容器" class="headerlink" title="3.8 导出&#x2F;导入容器"></a>3.8 导出&#x2F;导入容器</h3><p>容器 -&gt;导出&gt; 容器快照文件 -&gt;导入&gt; 本地镜像仓库 -&gt;新建&gt; 容器</p><pre class="line-numbers language-none"><code class="language-none">$ docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES2a8bffa405c8        ubuntu:14.04        &quot;&#x2F;bin&#x2F;sh -c &#39;while t…&quot;   About an hour ago   Up 3 seconds                                            test2# 导出$ docker export 2a8bffa405c8 &gt; ubuntu.tar# 导入为镜像$ docker ubuntu.tar | docker import - test&#x2F;ubuntu:v1.0# 从指定 URL 或者某个目录导入$ docker import  example&#x2F;imagerepo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：用户既可以通过 <code>docker load</code> 来导入镜像存储文件到本地镜像仓库，也可以使用 <code>docker import</code> 来导入一个容器快找到本地镜像仓库，两者的区别在于容器快照将丢失所有的历史记录和元数据信息，仅保存容器当时的状态，而镜像存储文件将保存完成的记录，体积要更大。所有容器快照文件导入时需要重新指定标签等元数据信息。</p></blockquote><h3 id="3-9-删除容器"><a href="#3-9-删除容器" class="headerlink" title="3.9 删除容器"></a>3.9 删除容器</h3><p>可以使用 <code>docker rm [容器Name]</code> 来删除一个终止状态的容器，如果容器还未终止，可以先使用 <code>docker stop [容器Name]</code> 来终止容器，再进行删除操作</p><pre class="line-numbers language-none"><code class="language-none">docker rm test2# 删除容器 -f: 强制删除，无视是否运行$ docker [-f] rm myubuntu# 删除所有已关闭的容器$ docker rm $(docker ps -a -q)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-10-查看容器状态"><a href="#3-10-查看容器状态" class="headerlink" title="3.10 查看容器状态"></a>3.10 查看容器状态</h3><pre class="line-numbers language-none"><code class="language-none">docker stats $(docker ps --format&#x3D;&#123;&#123;.Names&#125;&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、数据卷"><a href="#四、数据卷" class="headerlink" title="四、数据卷"></a>四、数据卷</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多特性：</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>卷会一直存在，直到没有容器使用</li></ul><blockquote><p>数据卷类似于 Linux 下对目录或文件进行 mount</p></blockquote><h3 id="4-2-创建数据卷"><a href="#4-2-创建数据卷" class="headerlink" title="4.2 创建数据卷"></a>4.2 创建数据卷</h3><p>在用 <code>docker run</code> 命令的时候，使用 <code>-v</code> 标记来创建一个数据卷并挂在在容器里，可同时挂在多个。</p><pre class="line-numbers language-none"><code class="language-none"># 创建一个 web 容器，并加载一个数据卷到容器的 &#x2F;webapp 目录docker run -d -P --name web -v &#x2F;webapp training&#x2F;webapp python app.py# 挂载一个宿主机目录 &#x2F;data&#x2F;webapp 到容器中的 &#x2F;opt&#x2F;webappdocker run -d -P --name web -v &#x2F;src&#x2F;webapp:&#x2F;opt&#x2F;webapp training&#x2F;webapp python app.py# 默认是读写权限，也可以指定为只读docker run -d -P --name web -v &#x2F;src&#x2F;webapp:&#x2F;opt&#x2F;webapp:ro# 挂载单个文件docker run --rm -it -v ~&#x2F;.bash_history:&#x2F;.bash_history ubuntu &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-数据卷容器"><a href="#4-3-数据卷容器" class="headerlink" title="4.3 数据卷容器"></a>4.3 数据卷容器</h3><p>如果需要多个容器共享数据，最好创建数据卷容器，就是一个正常的容器，撰文用来提供数据卷供其他容器挂载的</p><pre class="line-numbers language-none"><code class="language-none"># 创建一个数据卷容器 dbdatadocker run -d -v &#x2F;dbdata --name dbdata training&#x2F;postgres echo Data-only container for postgres# 其他容器挂载 dbdata 容器的数据卷docker run -d --volumes-from dbdata --name db1 training&#x2F;postgresdocker run -d --volumes-from dbdata --name db2 training&#x2F;postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、网络"><a href="#五、网络" class="headerlink" title="五、网络"></a>五、网络</h2><h3 id="5-1-外部访问容器"><a href="#5-1-外部访问容器" class="headerlink" title="5.1 外部访问容器"></a>5.1 外部访问容器</h3><p>在容器内运行一些服务，需要外部可以访问到这些服务，可以通过 <code>-P</code> 或 <code>-p</code> 参数来指定端口映射。</p><p>当使用 <code>-P</code> 标记时，Docker 会随即映射一个 <code>49000～49900</code> 的端口到内部容器开放的网络端口。</p><p>使用 <code>docker ps</code> 可以查看端口映射情况</p><pre class="line-numbers language-none"><code class="language-none">$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES7f43807dc042        training&#x2F;webapp     &quot;python app.py&quot;          3 seconds ago       Up 2 seconds        0.0.0.0:32770-&gt;5000&#x2F;tcp             amazing_liskov<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>-p 指定端口映射，支持格式 <code>ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</code></p><pre class="line-numbers language-none"><code class="language-none"># 不限制ip访问docker run -d -p 5000:5000 training&#x2F;webapp python app.py# 只允许宿主机回环地址访问docker run -d -p 127.0.0.1:5000:5000 training&#x2F;webapp python app.py# 宿主机自动分配绑定端口docker run -d -p 127.0.0.1::5000 training&#x2F;webapp python app.py# 指定 udp 端口docker run -d -p 127.0.0.1:5000:5000&#x2F;udp training&#x2F;webapp python app.py# 指定多个端口映射docker run -d -p 5000:5000  -p 3000:80 training&#x2F;webapp python app.py# 查看映射端口配置$ docker port amazing_liskov5000&#x2F;tcp -&gt; 0.0.0.0:32770<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-容器互联"><a href="#5-2-容器互联" class="headerlink" title="5.2 容器互联"></a>5.2 容器互联</h3><p>容器除了跟宿主机端口映射外，还有一种容器间交互的方式，可以在源&#x2F;目标容器之间建立一个隧道，目标容器可以看到源容器指定的信息。</p><p>可以通过 <code>--link name:alias</code> 来连接容器，下面就是 “web容器连接db容器” 的例子</p><pre class="line-numbers language-none"><code class="language-none"># 创建 容器dbdocker run -d --name db training&#x2F;postgres# 创建 容器web 并连接到 容器dbdocker run -d -P --name web --link db:db training&#x2F;webapp python app.py# 进入 容器web，测试连通性$ ctn web$ ping dbPING db (172.17.0.3) 56(84) bytes of data.64 bytes from db (172.17.0.3): icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.254 ms64 bytes from db (172.17.0.3): icmp_seq&#x3D;2 ttl&#x3D;64 time&#x3D;0.190 ms64 bytes from db (172.17.0.3): icmp_seq&#x3D;3 ttl&#x3D;64 time&#x3D;0.389 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-访问控制"><a href="#5-3-访问控制" class="headerlink" title="5.3 访问控制"></a>5.3 访问控制</h3><p>容器想要访问外部网络，需要宿主机的转发支持。在 Linux 系统中，通过以下命令检查是否打开</p><pre class="line-numbers language-none"><code class="language-none">$ sysctl net.ipv4.ip_forwardnet.ipv4.ip_forward &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果是 0，说明没有开启转发，则需要手动打开。</p><pre class="line-numbers language-none"><code class="language-none">$ sysctl -w net.ipv4.ip_forward&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-4-配置-docker0-桥接"><a href="#5-4-配置-docker0-桥接" class="headerlink" title="5.4 配置 docker0 桥接"></a>5.4 配置 docker0 桥接</h3><p>Docker 服务默认会创建一个 <code>docker0</code> 网桥，他在内核层连通了其他物理或虚拟网卡，这就将容器和主机都放在同一个物理网络。</p><p>Docker 默认制定了 <code>docker0</code> 接口的IP地址和子网掩码，让主机和容器间可以通过网桥相互通信，他还给了 MTU（接口允许接收的最大单元），通常是 1500 Bytes，或宿主机网络路由上支持的默认值。这些都可以在服务启动的时候进行配置。</p><ul><li><code>--bip=CIDR</code> ip地址加子网掩码格式，如 192.168.1.5&#x2F;24</li><li><code>--mtu=BYTES</code> 覆盖默认的 Docker MTU 配置</li></ul><p>可以通过 <code>brctl show</code> 来查看网桥和端口连接信息</p><h3 id="5-5-网络配置文件"><a href="#5-5-网络配置文件" class="headerlink" title="5.5 网络配置文件"></a>5.5 网络配置文件</h3><p>Docker 1.2.0 开始支持在运行中的容器里编辑 <code>/etc/hosts</code> 、<code>/etc/hostsname</code> 和 <code>/etc/resolve.conf</code> 文件，修改都是临时的，重新容器将会丢失修改，通过 <code>docker commit</code> 也不会被提交。</p><h2 id="六、Dockerfile"><a href="#六、Dockerfile" class="headerlink" title="六、Dockerfile"></a>六、Dockerfile</h2><h3 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6.1 介绍"></a>6.1 介绍</h3><p>Dockerfile 是由一行行命令组成的命令集合，分为四个部分：</p><ol><li>基础镜像信息</li><li>维护着信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ol><p>如下：</p><pre class="line-numbers language-none"><code class="language-none"># 最前面一般放这个 Dockerfile 的介绍、版本、作者及使用说明等# This dockerfile uses the ubuntu image# VERSION 2 - EDITION 1# Author: docker_user# Command format: Instruction [arguments &#x2F; command] ..# 使用的基础镜像，必须放在非注释第一行FROM ubuntu# 维护着信息信息： 名字 联系方式MAINTAINER docker_user docker_user@email.com# 构建镜像的命令：对镜像做的调整都在这里RUN echo &quot;deb  raring main universe&quot; &gt;&gt; &#x2F;etc&#x2F;apt&#x2F;sources.listRUN apt-get update &amp;&amp; apt-get install -y nginxRUN echo &quot;\ndaemon off;&quot; &gt;&gt; &#x2F;etc&#x2F;nginx&#x2F;nginx.conf# 创建&#x2F;运行 容器时的操作指令 # 可以理解为 docker run 后跟的运行指令CMD &#x2F;usr&#x2F;sbin&#x2F;nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-指令"><a href="#6-2-指令" class="headerlink" title="6.2 指令"></a>6.2 指令</h3><p>指令一般格式为 <code>INSTRUCTION args</code>，包括 <code>FORM</code> 、 <code>MAINTAINER</code> 、<code>RUN</code> 等</p><p>| FORM       | 第一条指令必须是 <code>FORM</code> 指令，并且如果在同一个<code>Dockerfile</code> 中创建多个镜像，可以使用多个 <code>FROM</code> 指令（每个镜像一次） | FORM ubuntuFORM ubuntu:14.04                                 |<br>| – |  |<br>| help  | 获得一个命令的信息                                           |<br>| kill  | 通过发送 <code>SIGKILL</code> 信号来强制停止服务容器，支持通过参数来指定发送信号，例如<code>docker-compose kill -s SIGINT</code> |<br>| logs  | 查看服务的输出                                               |<br>| port  | 打印绑定的公共端口                                           |<br>| ps    | 列出所有容器                                                 |<br>| pull  | 拉去服务镜像                                                 |<br>| rm    | 删除停止的服务容器                                           |<br>| run   | 在一个服务上执行一个命令<code>docker-compose run ubuntu ping docker.com</code> |<br>| scale | 设置同一个服务运行的容器个数通过 <code>service=num</code> 的参数来设置数量<code>docker-compose scale web=2 worker=3</code> |<br>| start | 启动一个已经存在的服务容器                                   |<br>| stop  | 停止一个已经运行的容器，但不删除。可以通过 <code>docker-compose start</code> 再次启动 |<br>| up    | 构建、创建、启动、链接一个服务相关的容器链接服务都将被启动，除非他们已经运行<code>docker-compose up -d</code> 将后台运行并启动<code>docker-compose up</code> 已存在容器将会重新创建<code>docker-compose up --no-recreate</code> 将不会重新创建容器 |</p><h3 id="7-5-环境变量"><a href="#7-5-环境变量" class="headerlink" title="7.5 环境变量"></a>7.5 环境变量</h3><p>环境变量可以用来配置 Compose 的行为</p><p>以 <code>Docker_</code> 开头的变量用来配置 Docker 命令行客户端使用的一样</p><p>| COMPOSE_PROJECT_NAME | 设置通过 Compose 启动的每一个容器前添加的项目名称，默认是当前工作目录的名字。 |<br>| – |  |<br>| COMPOSE_FILE         | 设置要使用的 <code>docker-compose.yml</code> 的路径。默认路径是当前工作目录。 |<br>| DOCKER_HOST          | 设置 Docker daemon 的地址。默认使用 与 Docker 客户端采用的默认值一致。 |<br>| DOCKER_TLS_VERIFY    | 如果设置不为空，则与 Docker daemon 交互通过 TLS 进行。       |<br>| DOCKER_CERT_PATH     | 配置 TLS 通信所需要的验证（<code>ca.pem</code>、<code>cert.pem</code> 和 <code>key.pem</code>）文件的路径，默认是 <code>~/.docker</code> 。 |</p><h3 id="7-6-docker-compose-yml"><a href="#7-6-docker-compose-yml" class="headerlink" title="7.6 docker-compose.yml"></a>7.6 docker-compose.yml</h3><p>默认模版文件是 <code>docker-compose.yml</code> ，启动定义了每个服务都必须经过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile) 来自动构建。</p><p>其他大部分指令跟 <code>docker run</code> 类似</p><p>如果使用 <code>build</code> 指令，在 Dockerfile 中设置的选项（如 <code>CMD</code> 、<code>EXPOSE</code> 等）将会被自动获取，无需在 <code>docker-compose.yml</code> 中再次设置。</p><pre class="line-numbers language-none"><code class="language-none">**image**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定镜像名称或镜像ID，如果本地仓库不存在，将尝试从远程仓库拉去此镜像</p><pre class="line-numbers language-none"><code class="language-none">image: ubuntuimage: orchardup&#x2F;postgresqlimage: a4bc65fd**build**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>指定 <code>Dockerfile</code> 所在文件的路径。<code>Compose</code> 将利用它自动构建这个镜像，然后使用这个镜像。</p><pre class="line-numbers language-none"><code class="language-none">build: &#x2F;path&#x2F;to&#x2F;build&#x2F;dir**command**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>覆盖容器启动默认执行命令</p><pre class="line-numbers language-none"><code class="language-none">command: bundle exec thin -p 3000**links**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>链接到其他服务中的容器，使用服务名称或别名</p><pre class="line-numbers language-none"><code class="language-none">links:    - db  - db:database  - redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>别名会自动在服务器中的 <code>/etc/hosts</code> 里创建。例如：</p><pre class="line-numbers language-none"><code class="language-none">172.17.2.186  db172.17.2.186  database172.17.2.187  redis**external_links**<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>连接到 <code>docker-compose.yml</code> 外部的容器，甚至并非 <code>Compose</code> 管理的容器。</p><pre class="line-numbers language-none"><code class="language-none">external_links: - redis_1 - project_db_1:mysql - project_db_1:postgresql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>ports</code></strong></p><p>暴露端口信息 <code>HOST:CONTAINER</code></p><p>格式或者仅仅指定容器的端口（宿主机会随机分配端口）</p><pre class="line-numbers language-none"><code class="language-none">ports: - &quot;3000&quot; - &quot;8000:8000&quot; - &quot;49100:22&quot; - &quot;127.0.0.1:8001:8001&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><em>注：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 <code>YAML</code> 将会解析 <code>xx:yy</code> 这种数字格式为 60 进制。所以建议采用字符串格式。</em></p></blockquote><pre class="line-numbers language-none"><code class="language-none">**expose**<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>暴露端口，但不映射到宿主机，只被连接的服务访问</p><pre class="line-numbers language-none"><code class="language-none">expose: - &quot;3000&quot; - &quot;8000&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>volumes</code></strong></p><p>卷挂载路径设置。可以设置宿主机路径 （<code>HOST:CONTAINER</code>） 或加上访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><pre class="line-numbers language-none"><code class="language-none">volumes: - &#x2F;var&#x2F;lib&#x2F;mysql - cache&#x2F;:&#x2F;tmp&#x2F;cache - ~&#x2F;configs:&#x2F;etc&#x2F;configs&#x2F;:ro<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>**<br>**</p><p><strong><code>volumes_from</code></strong></p><p>从另一个服务或容器挂载它的所有卷。</p><pre class="line-numbers language-none"><code class="language-none">volumes_from: - service_name - container_name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">environment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。</p><pre class="line-numbers language-none"><code class="language-none">environment:  RACK_ENV: development  SESSION_SECRET:environment:  - RACK_ENV&#x3D;development  - SESSION_SECRET<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>env_file</code></strong></p><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 指定了模板文件，则 <code>env_file</code> 中路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则以后者为准。</p><pre class="line-numbers language-none"><code class="language-none">env_file: .envenv_file:  - .&#x2F;common.env  - .&#x2F;apps&#x2F;web.env  - &#x2F;opt&#x2F;secrets.env<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p><pre class="line-numbers language-none"><code class="language-none"># common.env: Set Rails&#x2F;Rack environmentRACK_ENV&#x3D;development<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>extends</code></strong></p><p>基于已有的服务进行扩展。例如我们已经有了一个 webapp 服务，模板文件为 <code>common.yml</code>。</p><pre class="line-numbers language-none"><code class="language-none"># common.ymlwebapp:  build: .&#x2F;webapp  environment:    - DEBUG&#x3D;false    - SEND_EMAILS&#x3D;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个新的 <code>development.yml</code> 文件，使用 <code>common.yml</code> 中的 webapp 服务进行扩展。</p><pre class="line-numbers language-none"><code class="language-none"># development.ymlweb:  extends:    file: common.yml    service: webapp  ports:    - &quot;8000:8000&quot;  links:    - db  environment:    - DEBUG&#x3D;truedb:  image: postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后者会自动继承 common.yml 中的 webapp 服务及相关环节变量。</p><p>**<br>**</p><p><strong><code>net</code></strong></p><p>设置网络模式。使用和 <code>docker client</code> 的 <code>--net</code> 参数一样的值。</p><pre class="line-numbers language-none"><code class="language-none">net: &quot;bridge&quot;net: &quot;none&quot;net: &quot;container:[name or id]&quot;net: &quot;host&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>**<br>**</p><p><strong><code>pid</code></strong></p><p>跟主机系统共享进程命名空间。打开该选项的容器可以相互通过进程 ID 来访问和操作。</p><pre class="line-numbers language-none"><code class="language-none">pid: &quot;host&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>dns</code></strong></p><p>配置 DNS 服务器。可以是一个值，也可以是一个列表。</p><pre class="line-numbers language-none"><code class="language-none">dns: 8.8.8.8dns:  - 8.8.8.8  - 9.9.9.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>cap_add, cap_drop</code></strong></p><p>添加或放弃容器的 Linux 能力（Capabiliity）。</p><pre class="line-numbers language-none"><code class="language-none">cap_add:  - ALLcap_drop:  - NET_ADMIN  - SYS_ADMIN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**<br>**</p><p><strong><code>dns_search</code></strong></p><p>配置 DNS 搜索域。可以是一个值，也可以是一个列表。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">dns_search</span><span class="token punctuation">:</span> example.com<span class="token key atrule">dns_search</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> domain1.example.com  <span class="token punctuation">-</span> domain2.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>**<br>**</p><p><strong><code>working_dir, entrypoint, user, hostname, domainname, mem_limit, privileged, restart, stdin_open, tty, cpu_shares</code></strong></p><p>这些都是和 <code>docker run</code> 支持的选项类似。</p><h2 id="八、安全"><a href="#八、安全" class="headerlink" title="八、安全"></a>八、安全</h2><h3 id="8-1-内核命名空间"><a href="#8-1-内核命名空间" class="headerlink" title="8.1 内核命名空间"></a>8.1 内核命名空间</h3><p>当使用 <code>docker run</code> 启动一个容器时，在后台 Docker 为容器创建一个独立的命名空间和控制集合。命名空间踢空了最基础的也是最直接的隔离，在容器中运行的进程不会被运行在主机上的进程和其他容器发现和作用。</p><h3 id="8-2-控制组"><a href="#8-2-控制组" class="headerlink" title="8.2 控制组"></a>8.2 控制组</h3><p>控制组是 Linux 容器机制的另一个关键组件，负责实现资源的审计和限制。</p><p>它提供了很多特性，确保哥哥容器可以公平地分享主机的内存、CPU、磁盘IO等资源；当然，更重要的是，控制组确保了当容器内的资源使用产生压力时不会连累主机系统。</p><h3 id="8-3-内核能力机制"><a href="#8-3-内核能力机制" class="headerlink" title="8.3 内核能力机制"></a>8.3 内核能力机制</h3><p>能力机制是 Linux 内核的一个强大特性，可以提供细粒度的权限访问控制。 可以作用在进程上，也可以作用在文件上。</p><p>例如一个服务需要绑定低于 1024 的端口权限，并不需要 root 权限，那么它只需要被授权 <code>net_bind_service</code> 能力即可。</p><p>默认情况下， Docker 启动的容器被严格限制只允许使用内核的一部分能力。</p><p>使用能力机制加强 Docker 容器的安全有很多好处，可以按需分配给容器权限，这样，即便攻击者在容器中取得了 root 权限，也不能获取宿主机较高权限，能进行的破坏也是有限的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>﻿</p><h3 id="Dockerfile指令详解-25-md-“-25-md”"><a href="#Dockerfile指令详解-25-md-“-25-md”" class="headerlink" title="Dockerfile指令详解(#25.md “#25.md”)"></a>Dockerfile指令详解(#25.md “#25.md”)</h3><p><code>Dockerfile</code> 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>命令格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token operator">&lt;</span>上下文路径/URL/-<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 构建一个名为 nginx:v3 的镜像</span>$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> nginx:v3 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="RUN-执行命令"><a href="#RUN-执行命令" class="headerlink" title="RUN 执行命令"></a>RUN 执行命令</h2><ol><li><code>shell</code>格式：RUN &lt;命令&gt;，就像直接在命令行中输入的命令一样。刚才写的 Dockrfile 中的 RUN 指令就是这种格式。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RUN <span class="token builtin class-name">echo</span> <span class="token string">'&lt;h1>Hello, Docker!&lt;/h1>'</span> <span class="token operator">></span> /usr/share/nginx/html/index.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><code>exec</code>格式：RUN [“可执行文件”, “参数1”, “参数2”]，这更像是函数调用中的格式。</li></ol><h2 id="COPY-复制文件"><a href="#COPY-复制文件" class="headerlink" title="COPY 复制文件"></a>COPY 复制文件</h2><p>格式：</p><ol><li><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></li><li><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code><br>和 <code>RUN</code> 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。<br>COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。比如：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">COPY package.json /usr/src/app/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">COPY hom* /mydir/COPY hom?.txt /mydir/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><h2 id="ADD更高级的复制文件"><a href="#ADD更高级的复制文件" class="headerlink" title="ADD更高级的复制文件"></a>ADD更高级的复制文件</h2><p><code>ADD</code> 指令和 <code>COPY</code> 的格式和性质基本一致。但是在 <code>COPY</code> 基础上增加了一些功能。</p><p>比如 <code>&lt;源路径&gt;</code> 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。所以不如直接使用 RUN 指令，然后使用 <code>wget</code> 或者 <code>curl</code> 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。</p><p>如果 &lt;源路径&gt; 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。</p><p>在 Docker 官方的最佳实践文档中要求，尽可能的使用 COPY 。</p><p>因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 <code>COPY</code> 指令，仅在需要自动解压缩的场合使用 <code>ADD</code>。</p><h2 id="CMD-容器启动命令"><a href="#CMD-容器启动命令" class="headerlink" title="CMD 容器启动命令"></a>CMD 容器启动命令</h2><p>CMD 指令的格式和 RUN 相似，也是两种格式：<br>1） shell 格式：<code>CMD &lt;命令&gt;</code><br>2） exec 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code><br>3） 参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。</p><p>Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。</p><p>在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的 CMD 是 &#x2F;bin&#x2F;bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat &#x2F;etc&#x2F;os-release。这就是用 cat &#x2F;etc&#x2F;os-release 命令替换了默认的 &#x2F;bin&#x2F;bash 命令了，输出了系统版本信息。</p><p>在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 “，而不要使用单引号。</p><h2 id="ENTRYPOINT-入口点"><a href="#ENTRYPOINT-入口点" class="headerlink" title="ENTRYPOINT 入口点"></a>ENTRYPOINT 入口点</h2><p>ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 –entrypoint 来指定。</p><p>当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>ENTRYPOINT<span class="token operator">></span> <span class="token string">"&lt;CMD>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>场景一：让镜像变成像命令一样使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM ubuntu:16.04RUN <span class="token function">apt-get</span> update <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span> <span class="token punctuation">\</span>    <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/apt/lists/*ENTRYPOINT <span class="token punctuation">[</span> <span class="token string">"curl"</span>, <span class="token string">"-s"</span>, <span class="token string">""</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run myip <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是因为当存在 ENTRYPOINT 后，CMD 的内容将会作为参数传给 ENTRYPOINT，而这里 -i 就是新的 CMD，因此会作为参数传给 curl，从而达到了我们预期的效果。</p></li><li><p>场景二：应用运行前的准备工作<br>可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 <CMD>）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM alpine:3.4<span class="token punctuation">..</span>.RUN addgroup <span class="token parameter variable">-S</span> redis <span class="token operator">&amp;&amp;</span> adduser <span class="token parameter variable">-S</span> <span class="token parameter variable">-G</span> redis redis<span class="token punctuation">..</span>.ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"docker-entrypoint.sh"</span><span class="token punctuation">]</span>EXPOSE <span class="token number">6379</span>CMD <span class="token punctuation">[</span> <span class="token string">"redis-server"</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT 为 docker-entrypoint.sh 脚本。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token punctuation">..</span>.<span class="token comment"># allow the container to be started with `--user`</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">'redis-server'</span> <span class="token parameter variable">-a</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span>"</span> <span class="token operator">=</span> <span class="token string">'0'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">chown</span> <span class="token parameter variable">-R</span> redis <span class="token builtin class-name">.</span>    <span class="token builtin class-name">exec</span> su-exec redis <span class="token string">"<span class="token variable">$0</span>"</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token keyword">fi</span><span class="token builtin class-name">exec</span> <span class="token string">"<span class="token variable">$@</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该脚本的内容就是根据 CMD 的内容来判断，如果是 redis-server 的话，则切换到 redis 用户身份启动服务器，否则依旧使用 root 身份执行。比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run <span class="token parameter variable">-it</span> redis <span class="token function">id</span><span class="token assign-left variable">uid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">gid</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token assign-left variable">groups</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="ENV-设置环境变量"><a href="#ENV-设置环境变量" class="headerlink" title="ENV 设置环境变量"></a>ENV 设置环境变量</h2><p>格式有两种：</p><ol><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ol><p>这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。</p><pre class="line-numbers language-none"><code class="language-none">ENV VERSION&#x3D;1.0 DEBUG&#x3D;on \    NAME&#x3D;&quot;Happy Feet&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。</p><p>定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像 Dockerfile 中，就有类似这样的代码：</p><pre class="line-numbers language-none"><code class="language-none">ENV NODE_VERSION 7.2.0RUN curl -SLO &quot;&quot; \  &amp;&amp; curl -SLO &quot;&quot; \  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \  &amp;&amp; grep &quot; node-v$NODE_VERSION-linux-x64.tar.xz\$&quot; SHASUMS256.txt | sha256sum -c - \  &amp;&amp; tar -xJf &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; -C &#x2F;usr&#x2F;local --strip-components&#x3D;1 \  &amp;&amp; rm &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; SHASUMS256.txt.asc SHASUMS256.txt \  &amp;&amp; ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。</p><p>下列指令可以支持环境变量展开： ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD。</p><p>可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。</p><h2 id="ARG-构建参数"><a href="#ARG-构建参数" class="headerlink" title="ARG 构建参数"></a>ARG 构建参数</h2><p>格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p>构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。</p><p>Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 docker build 中用 –build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。</p><p>在 1.13 之前的版本，要求 –build-arg 中的参数名，必须在 Dockerfile 中用 ARG 定义过了，换句话说，就是 –build-arg 指定的参数，必须在 Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 Dockerfile 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。</p><h2 id="VOLUME-定义匿名卷"><a href="#VOLUME-定义匿名卷" class="headerlink" title="VOLUME 定义匿名卷"></a>VOLUME 定义匿名卷</h2><p>格式为：</p><ol><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ol><p>之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">VOLUME /data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 &#x2F;data 目录就会在运行时自动挂载为匿名卷，任何向 &#x2F;data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> mydata:/data xxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这行命令中，就使用了 mydata 这个命名卷挂载到了 &#x2F;data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。</p><h2 id="EXPOSE-声明端口"><a href="#EXPOSE-声明端口" class="headerlink" title="EXPOSE 声明端口"></a>EXPOSE 声明端口</h2><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p><p>EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</p><p>此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 –icc&#x3D;false，当指定该参数后，容器间将默认无法互访，除非互相间使用了 –links 参数的容器才可以互通，并且只有镜像中 EXPOSE 所声明的端口才可以被访问。这个 –icc&#x3D;false 的用法，在引入了 docker network 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。</p><p>要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。</p><h2 id="WORKDIR-指定工作目录"><a href="#WORKDIR-指定工作目录" class="headerlink" title="WORKDIR 指定工作目录"></a>WORKDIR 指定工作目录</h2><p>格式为 WORKDIR &lt;工作目录路径&gt;。</p><p>使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p><p>之前提到一些初学者常犯的错误是把 Dockerfile 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RUN <span class="token builtin class-name">cd</span> /appRUN <span class="token builtin class-name">echo</span> <span class="token string">"hello"</span> <span class="token operator">></span> world.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 &#x2F;app&#x2F;world.txt 文件，或者其内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dokerfile 构建分层存储的概念不了解所导致的错误。</p><p>之前说过每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd &#x2F;app 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。</p><p>因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。</p><h2 id="USER-指定当前用户"><a href="#USER-指定当前用户" class="headerlink" title="USER 指定当前用户"></a>USER 指定当前用户</h2><p>格式：<code>USER &lt;用户名&gt;</code></p><p>USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。</p><p>当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p><pre class="line-numbers language-none"><code class="language-none">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redisUSER redisRUN [ &quot;redis-server&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果以 root 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 su 或者 sudo，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 gosu，可以从其项目网站看到进一步的信息：</p><pre class="line-numbers language-none"><code class="language-none"># 建立 redis 用户，并使用 gosu 换另一个用户执行命令RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis# 下载 gosuRUN wget -O &#x2F;usr&#x2F;local&#x2F;bin&#x2F;gosu &quot;&quot; \    &amp;&amp; chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;gosu \    &amp;&amp; gosu nobody true# 设置 CMD，并以另外的用户执行CMD [ &quot;exec&quot;, &quot;gosu&quot;, &quot;redis&quot;, &quot;redis-server&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HEALTHCHECK-健康检查"><a href="#HEALTHCHECK-健康检查" class="headerlink" title="HEALTHCHECK 健康检查"></a>HEALTHCHECK 健康检查</h2><p>格式：</p><ol><li><code>HEALTHCHECK [选项] CMD &lt;命令&gt;</code>：设置检查容器健康状况的命令</li><li><code>HEALTHCHECK NONE</code>：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</li></ol><p>HEALTHCHECK 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。</p><p>在没有 HEALTHCHECK 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。</p><p>而自 1.12 之后，Docker 提供了 HEALTHCHECK 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。</p><p>当在一个镜像指定了 HEALTHCHECK 指令后，用其启动容器，初始状态会为 starting，在 HEALTHCHECK 指令检查成功后变为 healthy，如果连续一定次数失败，则会变为 unhealthy。</p><p>HEALTHCHECK 支持下列选项：</p><ol><li><code>--interval=&lt;间隔&gt;</code>：两次健康检查的间隔，默认为 30 秒；</li><li><code>--timeout=&lt;时长&gt;</code>：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒；<br>3)<code>--retries=&lt;次数&gt;</code>：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。</li></ol><p>和 CMD, ENTRYPOINT 一样，HEALTHCHECK 只可以出现一次，如果写了多个，只有最后一个生效。</p><p>在 HEALTHCHECK [选项] CMD 后面的命令，格式和 ENTRYPOINT 一样，分为 shell 格式，和 exec 格式。命令的返回值决定了该次健康检查的成功与否：0：成功；1：失败；2：保留，不要使用这个值。</p><p>假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 curl 来帮助判断，其 Dockerfile 的 HEALTHCHECK 可以这么写：</p><pre class="line-numbers language-none"><code class="language-none">FROM nginxRUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;*HEALTHCHECK --interval&#x3D;5s --timeout&#x3D;3s \  CMD curl -fs  || exit 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 curl -fs  || exit 1 作为健康检查命令。</p><p>使用 docker build 来构建这个镜像：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> myweb:v1 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构建好了后，我们启动一个容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> web <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 myweb:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当运行该镜像后，可以通过 docker ps 看到最初的状态为 (health: starting)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                            PORTS               NAMES03e28eb00bd0        myweb:v1            <span class="token string">"nginx -g 'daemon off"</span>   <span class="token number">3</span> seconds ago       Up <span class="token number">2</span> seconds <span class="token punctuation">(</span>health: starting<span class="token punctuation">)</span>   <span class="token number">80</span>/tcp, <span class="token number">443</span>/tcp     web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在等待几秒钟后，再次 docker ps，就会看到健康状态变化为了 (healthy)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> <span class="token function">ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES03e28eb00bd0        myweb:v1            <span class="token string">"nginx -g 'daemon off"</span>   <span class="token number">18</span> seconds ago      Up <span class="token number">16</span> seconds <span class="token punctuation">(</span>healthy<span class="token punctuation">)</span>   <span class="token number">80</span>/tcp, <span class="token number">443</span>/tcp     web<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果健康检查连续失败超过了重试次数，状态就会变为 (unhealthy)。</p><p>为了帮助排障，健康检查命令的输出（包括 stdout 以及 stderr）都会被存储于健康状态里，可以用 docker inspect 来查看。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect <span class="token parameter variable">--format</span> <span class="token string">'&#123;&#123;json .State.Health&#125;&#125;'</span> web <span class="token operator">|</span> python <span class="token parameter variable">-m</span> json.tool<span class="token punctuation">&#123;</span>    <span class="token string">"FailingStreak"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,    <span class="token string">"Log"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"End"</span><span class="token builtin class-name">:</span> <span class="token string">"2016-11-25T14:35:37.940957051Z"</span>,            <span class="token string">"ExitCode"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,            <span class="token string">"Output"</span><span class="token builtin class-name">:</span> <span class="token string">"&lt;!DOCTYPE html><span class="token entity" title="\n">\n</span>&lt;html><span class="token entity" title="\n">\n</span>&lt;head><span class="token entity" title="\n">\n</span>&lt;title>Welcome to nginx!&lt;/title><span class="token entity" title="\n">\n</span>&lt;style><span class="token entity" title="\n">\n</span>    body &#123;<span class="token entity" title="\n">\n</span>        width: 35em;<span class="token entity" title="\n">\n</span>        margin: 0 auto;<span class="token entity" title="\n">\n</span>        font-family: Tahoma, Verdana, Arial, sans-serif;<span class="token entity" title="\n">\n</span>    &#125;<span class="token entity" title="\n">\n</span>&lt;/style><span class="token entity" title="\n">\n</span>&lt;/head><span class="token entity" title="\n">\n</span>&lt;body><span class="token entity" title="\n">\n</span>&lt;h1>Welcome to nginx!&lt;/h1><span class="token entity" title="\n">\n</span>&lt;p>If you see this page, the nginx web server is successfully installed and<span class="token entity" title="\n">\n</span>working. Further configuration is required.&lt;/p><span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>&lt;p>For online documentation and support please refer to<span class="token entity" title="\n">\n</span>&lt;a href=<span class="token entity" title="\&quot;">\"</span>http://nginx.org/<span class="token entity" title="\&quot;">\"</span>>nginx.org&lt;/a>.&lt;br/><span class="token entity" title="\n">\n</span>Commercial support is available at<span class="token entity" title="\n">\n</span>&lt;a href=<span class="token entity" title="\&quot;">\"</span>http://nginx.com/<span class="token entity" title="\&quot;">\"</span>>nginx.com&lt;/a>.&lt;/p><span class="token entity" title="\n">\n</span><span class="token entity" title="\n">\n</span>&lt;p>&lt;em>Thank you for using nginx.&lt;/em>&lt;/p><span class="token entity" title="\n">\n</span>&lt;/body><span class="token entity" title="\n">\n</span>&lt;/html><span class="token entity" title="\n">\n</span>"</span>,            <span class="token string">"Start"</span><span class="token builtin class-name">:</span> <span class="token string">"2016-11-25T14:35:37.780192565Z"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>,    <span class="token string">"Status"</span><span class="token builtin class-name">:</span> <span class="token string">"healthy"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ONBUILD-为他人做嫁衣裳"><a href="#ONBUILD-为他人做嫁衣裳" class="headerlink" title="ONBUILD 为他人做嫁衣裳"></a>ONBUILD 为他人做嫁衣裳</h2><p>格式：<code>ONBUILD &lt;其它指令&gt;</code>。</p><p>ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。</p><p>Dockerfile 中的其它指令都是为了定制当前镜像而准备的，唯有 ONBUILD 是为了帮助别人定制自己而准备的。</p><p>假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 npm 进行包管理，所有依赖、配置、启动信息等会放到 package.json 文件里。在拿到程序代码后，需要先进行 npm install 才可以获得所有需要的依赖。然后就可以通过 npm start 来启动应用。因此，一般来说会这样写 Dockerfile：</p><pre class="line-numbers language-none"><code class="language-none">FROM node:slimRUN &quot;mkdir &#x2F;app&quot;WORKDIR &#x2F;appCOPY .&#x2F;package.json &#x2F;appRUN [ &quot;npm&quot;, &quot;install&quot; ]COPY . &#x2F;app&#x2F;CMD [ &quot;npm&quot;, &quot;start&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把这个 Dockerfile 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 Dockerfile 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。</p><p>如果第一个 Node.js 项目在开发过程中，发现这个 Dockerfile 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 Dockerfile，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 Dockerfile 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 Dockerfile，而第二个项目的 Dockerfile 就会被自动修复。</p><p>那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 Dockerfile 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 Dockerfile 就会变为：</p><pre class="line-numbers language-none"><code class="language-none">FROM node:slimRUN &quot;mkdir &#x2F;app&quot;WORKDIR &#x2F;appCMD [ &quot;npm&quot;, &quot;start&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 my-node 的话，各个项目内的自己的 Dockerfile 就变为：</p><pre class="line-numbers language-none"><code class="language-none">FROM my-nodeCOPY .&#x2F;package.json &#x2F;appRUN [ &quot;npm&quot;, &quot;install&quot; ]COPY . &#x2F;app&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>基础镜像变化后，各个项目都用这个 Dockerfile 重新构建镜像，会继承基础镜像的更新。</p><p>那么，问题解决了么？没有。准确说，只解决了一半。如果这个 Dockerfile 里面有些东西需要调整呢？比如 npm install 都需要加一些参数，那怎么办？这一行 RUN 是不可能放入基础镜像的，因为涉及到了当前项目的 .&#x2F;package.json，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 Dockerfile 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。</p><p>ONBUILD 可以解决这个问题。让我们用 ONBUILD 重新写一下基础镜像的 Dockerfile:</p><pre class="line-numbers language-none"><code class="language-none">FROM node:slimRUN &quot;mkdir &#x2F;app&quot;WORKDIR &#x2F;appONBUILD COPY .&#x2F;package.json &#x2F;appONBUILD RUN [ &quot;npm&quot;, &quot;install&quot; ]ONBUILD COPY . &#x2F;app&#x2F;CMD [ &quot;npm&quot;, &quot;start&quot; ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次我们回到原始的 Dockerfile，但是这次将项目相关的指令加上 ONBUILD，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 Dockerfile 就变成了简单地：</p><pre class="line-numbers language-none"><code class="language-none">FROM my-node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是的，只有这么一行。当在各个项目目录中，用这个只有一行的 Dockerfile 构建镜像时，之前基础镜像的那三行 ONBUILD 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 npm install，生成应用镜像。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Docker–从入门到实践:<br>Dockerfie 官方文档：<br>Dockerfile 最佳实践文档：</p><p>﻿</p><h3 id="docker仓库-26-md-“-26-md”"><a href="#docker仓库-26-md-“-26-md”" class="headerlink" title="docker仓库(#26.md “#26.md”)"></a>docker仓库(#26.md “#26.md”)</h3><h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><p>目前 Docker 官方维护了一个公共仓库 <a href="">Docker Hub</a>，其中已经包括了超过 15,000 的镜像。大部分需求，都可以通过在 Docker Hub 中直接下载镜像来实现。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>可以通过执行 docker login 命令来输入用户名、密码和邮箱来完成注册和登录。 注册成功后，本地用户目录的 .dockercfg 中将保存用户的认证信息。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>用户无需登录即可通过 docker search 命令来查找官方仓库中的镜像，并利用 docker pull 命令来将它下载到本地。</p><p>例如以 centos 为关键词进行搜索：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> search centosNAME                                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATEDcentos                                          The official build of CentOS.                   <span class="token number">465</span>       <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>tianon/centos                                   CentOS <span class="token number">5</span> and <span class="token number">6</span>, created using rinse instea<span class="token punctuation">..</span>.   <span class="token number">28</span>blalor/centos                                   Bare-bones base CentOS <span class="token number">6.5</span> image                <span class="token number">6</span>                    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>saltstack/centos-6-minimal                                                                      <span class="token number">6</span>                    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>tutum/centos-6.4                                DEPRECATED. Use tutum/centos:6.4 instead. <span class="token punctuation">..</span>.   <span class="token number">5</span>                    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、星级（表示该镜像的受欢迎程度）、是否官方创建、是否自动创建。 官方的镜像说明是官方项目组创建和维护的，automated 资源允许用户验证镜像的来源和内容。</p><p>根据是否是官方提供，可将镜像资源分为两类。 一种是类似 centos 这样的基础镜像，被称为基础或根镜像。这些基础镜像是由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。 还有一种类型，比如 tianon&#x2F;centos 镜像，它是由 Docker 的用户创建并维护的，往往带有用户名称前缀。可以通过前缀 user_name&#x2F; 来指定使用某个用户提供的镜像，比如 tianon 用户。</p><p>另外，在查找的时候通过 -s N 参数可以指定仅显示评价为 N 星以上的镜像。</p><p>下载官方 centos 镜像到本地。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> pull centosPulling repository centos0b443ba03958: Download complete539c0211cd76: Download complete511136ea3c5a: Download complete7064731afe90: Download complete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户也可以在登录后通过 docker push 命令来将镜像推送到 Docker Hub。</p><h2 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h2><h3 id="安装-docker-registry"><a href="#安装-docker-registry" class="headerlink" title="安装 docker-registry"></a>安装 docker-registry</h3><h4 id="容器运行"><a href="#容器运行" class="headerlink" title="容器运行"></a>容器运行</h4><p>在安装了 Docker 后，可以通过获取官方 registry 镜像来运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将使用官方的 registry 镜像来启动本地的私有仓库。 用户可以通过指定参数来配置私有仓库位置，例如配置镜像存储到 Amazon S3 服务。</p><pre class="line-numbers language-none"><code class="language-none">$ sudo docker run \         -e SETTINGS_FLAVOR&#x3D;s3 \         -e AWS_BUCKET&#x3D;acme-docker \         -e STORAGE_PATH&#x3D;&#x2F;registry \         -e AWS_KEY&#x3D;AKIAHSHB43HS3J92MXZ \         -e AWS_SECRET&#x3D;xdDowwlK7TJajV1Y7EoOZrmuPEJlHYcNP2k4j49T \         -e SEARCH_BACKEND&#x3D;sqlalchemy \         -p 5000:5000 \         registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，还可以指定本地路径（如 &#x2F;home&#x2F;user&#x2F;registry-conf ）下的配置文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">-v</span> /home/user/registry-conf:/registry-conf <span class="token parameter variable">-e</span> <span class="token assign-left variable">DOCKER_REGISTRY_CONFIG</span><span class="token operator">=</span>/registry-conf/config.yml registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，仓库会被创建在容器的 &#x2F;tmp&#x2F;registry 下。可以通过 -v 参数来将镜像文件存放在本地的指定路径。 例如下面的例子将上传的镜像放到 &#x2F;opt&#x2F;data&#x2F;registry 目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">-v</span> /opt/data/registry:/tmp/registry registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h4><p>对于 Ubuntu 或 CentOS 等发行版，可以直接通过源安装。<br>1.Ubuntu</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> build-essential python-dev libevent-dev python-pip liblzma-dev$ <span class="token function">sudo</span> pip <span class="token function">install</span> docker-registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.CentOS</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> python-devel libevent-devel python-pip gcc xz-devel$ <span class="token function">sudo</span> python-pip <span class="token function">install</span> docker-registry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.源码安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential python-dev libevent-dev python-pip libssl-dev liblzma-dev libffi-dev$ <span class="token function">git</span> clone $ <span class="token builtin class-name">cd</span> docker-registry$ <span class="token function">sudo</span> python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后修改配置文件，主要修改 dev 模板段的 storage_path 到本地的存储仓库的路径。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> config/config_sample.yml config/config.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后启动 Web 服务。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> gunicorn <span class="token parameter variable">-c</span> contrib/gunicorn.py docker_registry.wsgi:application<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> gunicorn --access-logfile - --error-logfile - <span class="token parameter variable">-k</span> gevent <span class="token parameter variable">-b</span> <span class="token number">0.0</span>.0.0:5000 <span class="token parameter variable">-w</span> <span class="token number">4</span> --max-requests <span class="token number">100</span> docker_registry.wsgi:application<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时使用 curl 访问本地的 5000 端口，看到输出 docker-registry 的版本信息说明运行成功。</p><blockquote><p><em>注：config&#x2F;config_sample.yml 文件是示例配置文件。</em></p></blockquote><h3 id="在私有仓库上传、下载、搜索镜像"><a href="#在私有仓库上传、下载、搜索镜像" class="headerlink" title="在私有仓库上传、下载、搜索镜像"></a>在私有仓库上传、下载、搜索镜像</h3><p>创建好私有仓库之后，就可以使用 docker tag 来标记一个镜像，然后推送它到仓库，别的机器上就可以下载下来了。例如私有仓库地址为 192.168.7.26:5000。</p><p>先在本机查看已有的镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> imagesREPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZEubuntu                            latest              ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MBubuntu                            <span class="token number">14.04</span>               ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用docker tag 将 ba58 这个镜像标记为 192.168.7.26:5000&#x2F;test（格式为 docker tag IMAGE[:TAG] [REGISTRYHOST&#x2F;][USERNAME&#x2F;]NAME[:TAG]）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> tag ba58 <span class="token number">192.168</span>.7.26:5000/testroot ~ <span class="token comment"># docker images</span>REPOSITORY                        TAG                 IMAGE ID            CREATED             VIRTUAL SIZEubuntu                            <span class="token number">14.04</span>               ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MBubuntu                            latest              ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MB<span class="token number">192.168</span>.7.26:5000/test            latest              ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 docker push 上传标记的镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> push <span class="token number">192.168</span>.7.26:5000/testThe push refers to a repository <span class="token punctuation">[</span><span class="token number">192.168</span>.7.26:5000/test<span class="token punctuation">]</span> <span class="token punctuation">(</span>len: <span class="token number">1</span><span class="token punctuation">)</span>Sending image listPushing repository <span class="token number">192.168</span>.7.26:5000/test <span class="token punctuation">(</span><span class="token number">1</span> tags<span class="token punctuation">)</span>Image 511136ea3c5a already pushed, skippingImage 9bad880da3d2 already pushed, skippingImage 25f11f5fb0cb already pushed, skippingImage ebc34468f71d already pushed, skippingImage 2318d26665ef already pushed, skippingImage ba5877dc9bec already pushed, skippingPushing tag <span class="token keyword">for</span> <span class="token function">rev</span> <span class="token punctuation">[</span>ba5877dc9bec<span class="token punctuation">]</span> on <span class="token punctuation">&#123;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用 curl 查看仓库中的镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token punctuation">&#123;</span><span class="token string">"num_results"</span><span class="token builtin class-name">:</span> <span class="token number">7</span>, <span class="token string">"query"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>, <span class="token string">"results"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"library/miaxis_j2ee"</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"library/tomcat"</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"library/ubuntu"</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"library/ubuntu_office"</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"library/desktop_ubu"</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"dockerfile/ubuntu"</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">"description"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>, <span class="token string">"name"</span><span class="token builtin class-name">:</span> <span class="token string">"library/test"</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里可以看到 {“description”: “”, “name”: “library&#x2F;test”}，表明镜像已经被成功上传了。</p><p>现在可以到另外一台机器去下载这个镜像。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> pull <span class="token number">192.168</span>.7.26:5000/testPulling repository <span class="token number">192.168</span>.7.26:5000/testba5877dc9bec: Download complete511136ea3c5a: Download complete9bad880da3d2: Download complete25f11f5fb0cb: Download completeebc34468f71d: Download complete2318d26665ef: Download complete$ <span class="token function">sudo</span> <span class="token function">docker</span> imagesREPOSITORY                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZE<span class="token number">192.168</span>.7.26:5000/test             latest              ba5877dc9bec        <span class="token number">6</span> weeks ago         <span class="token number">192.7</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用 <a href="">这个脚本</a> 批量上传本地的镜像到注册服务器中，默认是本地注册服务器 127.0.0.1:5000。例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wget</span>  <span class="token function">sudo</span> <span class="token function">chmod</span> a+x push_images.sh$ ./push_images.sh ubuntu:latest centos:centos7The registry server is <span class="token number">127.0</span>.0.1Uploading ubuntu:latest<span class="token punctuation">..</span>.The push refers to a repository <span class="token punctuation">[</span><span class="token number">127.0</span>.0.1:5000/ubuntu<span class="token punctuation">]</span> <span class="token punctuation">(</span>len: <span class="token number">1</span><span class="token punctuation">)</span>Sending image listPushing repository <span class="token number">127.0</span>.0.1:5000/ubuntu <span class="token punctuation">(</span><span class="token number">1</span> tags<span class="token punctuation">)</span>Image 511136ea3c5a already pushed, skippingImage bfb8b5a2ad34 already pushed, skippingImage c1f3bdbd8355 already pushed, skippingImage 897578f527ae already pushed, skippingImage 9387bcc9826e already pushed, skippingImage 809ed259f845 already pushed, skippingImage 96864a7d2df3 already pushed, skippingPushing tag <span class="token keyword">for</span> <span class="token function">rev</span> <span class="token punctuation">[</span>96864a7d2df3<span class="token punctuation">]</span> on <span class="token punctuation">&#123;</span>Untagged: <span class="token number">127.0</span>.0.1:5000/ubuntu:latestDoneUploading centos:centos7<span class="token punctuation">..</span>.The push refers to a repository <span class="token punctuation">[</span><span class="token number">127.0</span>.0.1:5000/centos<span class="token punctuation">]</span> <span class="token punctuation">(</span>len: <span class="token number">1</span><span class="token punctuation">)</span>Sending image listPushing repository <span class="token number">127.0</span>.0.1:5000/centos <span class="token punctuation">(</span><span class="token number">1</span> tags<span class="token punctuation">)</span>Image 511136ea3c5a already pushed, skipping34e94e67e63a: Image successfully pushed70214e5d0a90: Image successfully pushedPushing tag <span class="token keyword">for</span> <span class="token function">rev</span> <span class="token punctuation">[</span>70214e5d0a90<span class="token punctuation">]</span> on <span class="token punctuation">&#123;</span>Untagged: <span class="token number">127.0</span>.0.1:5000/centos:centos7Done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="仓库配置文件"><a href="#仓库配置文件" class="headerlink" title="仓库配置文件"></a>仓库配置文件</h2><p>Docker 的 Registry 利用配置文件提供了一些仓库的模板（flavor），用户可以直接使用它们来进行开发或生产部署。</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>在 config_sample.yml 文件中，可以看到一些现成的模板段：</p><ul><li>common：基础配置</li><li>local：存储数据到本地文件系统</li><li>s3：存储数据到 AWS S3 中</li><li>dev：使用 local 模板的基本配置</li><li>test：单元测试使用</li><li>prod：生产环境配置（基本上跟s3配置类似）</li><li>gcs：存储数据到 Google 的云存储</li><li>swift：存储数据到 OpenStack Swift 服务</li><li>glance：存储数据到 OpenStack Glance 服务，本地文件系统为后备</li><li>glance-swift：存储数据到 OpenStack Glance 服务，Swift 为后备</li><li>elliptics：存储数据到 Elliptics key&#x2F;value 存储</li></ul><p>用户也可以添加自定义的模版段。</p><p>默认情况下使用的模板是 dev，要使用某个模板作为默认值，可以添加 SETTINGS_FLAVOR 到环境变量中，例如</p><pre class="line-numbers language-none"><code class="language-none">export SETTINGS_FLAVOR&#x3D;dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外，配置文件中支持从环境变量中加载值，语法格式为 <code>_env:VARIABLENAME[:DEFAULT]</code>。</p><h3 id="示例配置"><a href="#示例配置" class="headerlink" title="示例配置"></a>示例配置</h3><pre class="line-numbers language-none"><code class="language-none">common:    loglevel: info    search_backend: &quot;_env:SEARCH_BACKEND:&quot;    sqlalchemy_index_database:        &quot;_env:SQLALCHEMY_INDEX_DATABASE:&quot;prod:    loglevel: warn    storage: s3    s3_access_key: _env:AWS_S3_ACCESS_KEY    s3_secret_key: _env:AWS_S3_SECRET_KEY    s3_bucket: _env:AWS_S3_BUCKET    boto_bucket: _env:AWS_S3_BUCKET    storage_path: &#x2F;srv&#x2F;docker    smtp_host: localhost    from_addr: docker@myself.com    to_addr: my@myself.comdev:    loglevel: debug    storage: local    storage_path: &#x2F;home&#x2F;myself&#x2F;dockertest:    storage: local    storage_path: &#x2F;tmp&#x2F;tmpdockertmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="docker初体验-27-md-“-27-md”"><a href="#docker初体验-27-md-“-27-md”" class="headerlink" title="docker初体验(#27.md “#27.md”)"></a>docker初体验(#27.md “#27.md”)</h3><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><h3 id="笔者环境"><a href="#笔者环境" class="headerlink" title="笔者环境"></a>笔者环境</h3><p>操作系统：deepin 15.4 Desktop 64Bit</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 官方 的安装脚本</span>$ <span class="token function">curl</span> <span class="token parameter variable">-sSL</span>  <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 阿里云 的安装脚本</span>$ <span class="token function">curl</span> <span class="token parameter variable">-sSL</span>  <span class="token operator">|</span> <span class="token function">sh</span> -<span class="token comment"># DaoCloud 的安装脚本</span>$ <span class="token function">curl</span> <span class="token parameter variable">-sSL</span>  <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><p><a href="">Docker Hub</a> 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像并运行。<br>从 Docker Registry 获取镜像的命令是 docker pull。其命令格式为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> pull <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>Docker Registry地址<span class="token punctuation">]</span><span class="token operator">&lt;</span>仓库名<span class="token operator">></span>:<span class="token operator">&lt;</span>标签<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式。</p><ul><li>Docker Registry地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 <code>Docker Hub</code>。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，既 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> pull ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>有了镜像后，我们就可以以这个镜像为基础启动一个容器来运行。以上面的 <code>ubuntu</code> 为例，如果我们打算启动里面的 <code>bash</code> 并且进行交互式操作的话，可以执行下面的命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> ubunturoot@0ae011f7b5be:/<span class="token comment"># cat /etc/os-release  </span><span class="token assign-left variable">NAME</span><span class="token operator">=</span><span class="token string">"Ubuntu"</span><span class="token assign-left variable">VERSION</span><span class="token operator">=</span><span class="token string">"16.04.2 LTS (Xenial Xerus)"</span><span class="token assign-left variable">ID</span><span class="token operator">=</span>ubuntu<span class="token assign-left variable">ID_LIKE</span><span class="token operator">=</span>debian<span class="token assign-left variable">PRETTY_NAME</span><span class="token operator">=</span><span class="token string">"Ubuntu 16.04.2 LTS"</span><span class="token assign-left variable">VERSION_ID</span><span class="token operator">=</span><span class="token string">"16.04"</span><span class="token assign-left variable">HOME_URL</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">SUPPORT_URL</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">BUG_REPORT_URL</span><span class="token operator">=</span><span class="token string">""</span><span class="token assign-left variable">VERSION_CODENAME</span><span class="token operator">=</span>xenial<span class="token assign-left variable">UBUNTU_CODENAME</span><span class="token operator">=</span>xenial<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>docker run</code> 就是运行容器的命令</p><ul><li><code>-it</code>：这是两个参数，一个是 <code>-i</code>：交互式操作，一个是 <code>-t</code> 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。</li><li><code>--rm</code>：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 <code>docker rm</code>。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。</li><li><code>ubuntu</code>：这是指用 <code>ubuntu</code> 镜像为基础来启动容器。</li><li><code>bash</code>：放在镜像名后的是命令，这里我们希望有个交互式 <code>Shell</code>，因此用的是 <code>bash</code>。</li></ul><p>进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 <code>cat /etc/os-release</code>，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 <code>Ubuntu 16.04.2 LTS</code> 系统。</p><p>最后通过 exit 退出了这个容器。</p><p>﻿</p><h3 id="docker容器-28-md-“-28-md”"><a href="#docker容器-28-md-“-28-md”" class="headerlink" title="docker容器(#28.md “#28.md”)"></a>docker容器(#28.md “#28.md”)</h3><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个名为myubuntu的容器</span><span class="token comment"># -t:分配一个伪终端  -i:让容器的标准输入保持打开</span>$ <span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>myubuntu <span class="token parameter variable">-t</span> <span class="token parameter variable">-i</span> ubuntu /bin/bash<span class="token comment"># 创建一个名为webserver 的nginx容器，使用卷映射本机/home/faker/myspace/nginx目录到docker目录/usr/share/nginx/html</span>$ <span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>webserver <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> /home/faker/myspace/nginx:/usr/share/nginx/html <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 nginx<span class="token comment"># 查看容器的输出信息（打印信息，如 echo）</span><span class="token comment"># run的时候，使用-d将会不展示在宿主机上，可通过下面命令查看打印信息</span>$ <span class="token function">docker</span> run <span class="token parameter variable">-d</span> ubuntu:14.04 /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"while true; do echo hello world; sleep 1; done"</span>$ <span class="token function">docker</span> logs <span class="token punctuation">[</span>container ID or NAMES<span class="token punctuation">]</span><span class="token comment"># 启动容器 myubuntu</span>$ <span class="token function">docker</span> start myubuntu<span class="token comment"># 关闭容器 myubuntu</span>$ <span class="token function">docker</span> stop myubuntu<span class="token comment"># 查看已启动的容器 -a:查看包括未启动的容器在内的所有容器</span>$ <span class="token function">docker</span> <span class="token function">ps</span> <span class="token punctuation">[</span>-a<span class="token punctuation">]</span><span class="token comment"># 进入容器（Docker自带的命令）</span>$ <span class="token function">docker</span> attach <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token comment"># 进入容器（通过exec）</span>$ <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span> /bin/bash<span class="token comment"># 导出容器快照到本地文件</span>$ <span class="token function">docker</span> <span class="token builtin class-name">export</span> <span class="token punctuation">[</span>container id<span class="token punctuation">]</span> <span class="token operator">></span> ubuntu.tar<span class="token comment"># 将容器快照导入为镜像</span>$ <span class="token function">cat</span> ubuntu.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - test/ubuntu:v1.0<span class="token comment"># 从制定 URL 或者某个目录导入</span>$ <span class="token function">docker</span> <span class="token function">import</span>  example/imagerepo<span class="token comment"># 删除容器 -f:删除正在运行的容器</span>$ <span class="token function">docker</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token function">rm</span> myubuntu<span class="token comment"># 删除所有已关闭的容器</span>$ <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span class="token comment"># 查询各容器资源使用情况</span>$ <span class="token function">docker</span> stats <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>.Names<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="docker报错集锦-29-md-“-29-md”"><a href="#docker报错集锦-29-md-“-29-md”" class="headerlink" title="docker报错集锦(#29.md “#29.md”)"></a>docker报错集锦(#29.md “#29.md”)</h3><h2 id="docker创建容器"><a href="#docker创建容器" class="headerlink" title="docker创建容器"></a>docker创建容器</h2><h3 id="1-iptables-failed"><a href="#1-iptables-failed" class="headerlink" title="1. iptables failed"></a>1. iptables failed</h3><p>创建 <code>tale</code> 容器时，如下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--hostname</span> tale <span class="token parameter variable">--name</span> tale <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /home/tale:/var/tale_home <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:234:9000 <span class="token punctuation">\</span><span class="token parameter variable">-m</span> 1024m --memory-swap <span class="token parameter variable">-1</span> tale:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后就报了以下错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker: Error response from daemon: driver failed programming external connectivity on endpoint tale <span class="token punctuation">(</span>263775ff559176224428ec44dcec416a1c20e6c69198d9760b38f35849914260<span class="token punctuation">)</span>: iptables failed: iptables <span class="token parameter variable">--wait</span> <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-d</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">--dport</span> <span class="token number">234</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">172.17</span>.0.4:9000 <span class="token operator">!</span> <span class="token parameter variable">-i</span> docker0: iptables: No chain/target/match by that name. <span class="token punctuation">(</span>exit status <span class="token number">1</span><span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决办法：重启 docker 服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> <span class="token function">docker</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="docker数据管理-30-md-“-30-md”"><a href="#docker数据管理-30-md-“-30-md”" class="headerlink" title="docker数据管理(#30.md “#30.md”)"></a>docker数据管理(#30.md “#30.md”)</h3><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>数据卷默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：数据卷的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的数据卷。</p></blockquote><h3 id="创建一个数据卷"><a href="#创建一个数据卷" class="headerlink" title="创建一个数据卷"></a>创建一个数据卷</h3><p>在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。</p><p>下面创建一个名为 web 的容器，并加载一个数据卷到容器的 &#x2F;webapp 目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> web <span class="token parameter variable">-v</span> /webapp training/webapp python app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：也可以在 Dockerfile 中使用 VOLUME 来添加一个或者多个新的卷到由该镜像创建的任意容器。</p></blockquote><h3 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h3><p>数据卷是被设计用来持久化数据的，它的生命周期独立于容器，Docker不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的数据卷。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 docker rm -v 这个命令。无主的数据卷可能会占据很多空间，要清理会很麻烦。Docker官方正在试图解决这个问题，相关工作的进度可以查看这个<a href="">PR</a>。</p><h3 id="挂载一个主机目录作为数据卷"><a href="#挂载一个主机目录作为数据卷" class="headerlink" title="挂载一个主机目录作为数据卷"></a>挂载一个主机目录作为数据卷</h3><p>使用 -v 标记也可以指定挂载一个本地主机的目录到容器中去。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> web <span class="token parameter variable">-v</span> /src/webapp:/opt/webapp training/webapp python app.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令加载主机的 &#x2F;src&#x2F;webapp 目录到容器的 &#x2F;opt&#x2F;webapp 目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它。</p><blockquote><p>注意：Dockerfile 中不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的。然而，不同操作系统的路径格式不一样，所以目前还不能支持。</p></blockquote><p>Docker 挂载数据卷的默认权限是读写，用户也可以通过 :ro 指定为只读。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-P</span> <span class="token parameter variable">--name</span> web <span class="token parameter variable">-v</span> /src/webapp:/opt/webapp:rotraining/webapp python app.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>加了 :ro 之后，就挂载为只读了。</p><h3 id="查看数据卷的具体信息"><a href="#查看数据卷的具体信息" class="headerlink" title="查看数据卷的具体信息"></a>查看数据卷的具体信息</h3><p>在主机里使用以下命令可以查看指定容器的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">docker</span> inspect web<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在输出的内容中找到其中和数据卷相关的部分，可以看到所有的数据卷都是创建在主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;下面的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"Volumes"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"/webapp"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/fac362...80535"</span><span class="token punctuation">&#125;</span>,<span class="token string">"VolumesRW"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"/webapp"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：从Docker 1.8.0起，数据卷配置在”Mounts”Key下面，可以看到所有的数据卷都是创建在主机的&#x2F;mnt&#x2F;sda1&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;….下面了。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"Mounts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"b53ebd40054dae599faf7c9666acfe205c3e922fc3e8bc3f2fd178ed788f1c29"</span><span class="token punctuation">,</span>                <span class="token property">"Source"</span><span class="token operator">:</span> <span class="token string">"/mnt/sda1/var/lib/docker/volumes/b53ebd40054dae599faf7c9666acfe205c3e922fc3e8bc3f2fd178ed788f1c29/_data"</span><span class="token punctuation">,</span>                <span class="token property">"Destination"</span><span class="token operator">:</span> <span class="token string">"/webapp"</span><span class="token punctuation">,</span>                <span class="token property">"Driver"</span><span class="token operator">:</span> <span class="token string">"local"</span><span class="token punctuation">,</span>                <span class="token property">"Mode"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"RW"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"Propagation"</span><span class="token operator">:</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="挂载一个本地主机文件作为数据卷"><a href="#挂载一个本地主机文件作为数据卷" class="headerlink" title="挂载一个本地主机文件作为数据卷"></a>挂载一个本地主机文件作为数据卷</h3><p>-v 标记也可以从主机挂载单个文件到容器中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">-v</span> ~/.bash_history:/.bash_history ubuntu /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以记录在容器输入过的命令了。</p><blockquote><p>注意：如果直接挂载一个文件，很多文件编辑工具，包括 vi 或者 <code>sed --in-place</code>，可能会造成文件 inode 的改变，从 Docker 1.1 .0起，这会导致报错误信息。所以最简单的办法就直接挂载文件的父目录。</p></blockquote><h2 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h2><p>如果你有一些持续更新的数据需要在容器之间共享，最好创建数据卷容器。</p><p>数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。</p><p>首先，创建一个名为 dbdata 的数据卷容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-v</span> /dbdata <span class="token parameter variable">--name</span> dbdata training/postgres <span class="token builtin class-name">echo</span> Data-only container <span class="token keyword">for</span> postgres<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，在其他容器中使用 –volumes-from 来挂载 dbdata 容器中的数据卷。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> --volumes-from dbdata <span class="token parameter variable">--name</span> db1 training/postgres$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> --volumes-from dbdata <span class="token parameter variable">--name</span> db2 training/postgres<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用超过一个的 <code>--volumes-from</code> 参数来指定从多个容器挂载不同的数据卷。 也可以从其他已经挂载了数据卷的容器来级联挂载数据卷。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> db3 --volumes-from db1 training/postgres<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：使用 –volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态。</p></blockquote><p>如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。具体的操作将在下一节中进行讲解。</p><h2 id="利用数据卷容器来备份、恢复、迁移数据卷"><a href="#利用数据卷容器来备份、恢复、迁移数据卷" class="headerlink" title="利用数据卷容器来备份、恢复、迁移数据卷"></a>利用数据卷容器来备份、恢复、迁移数据卷</h2><p>可以利用数据卷对其中的数据进行进行备份、恢复和迁移。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>首先使用 –volumes-from 标记来创建一个加载 dbdata 容器卷的容器，并从主机挂载当前目录到容器的 &#x2F;backup 目录。命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run --volumes-from dbdata <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>:/backup ubuntu <span class="token function">tar</span> cvf /backup/backup.tar /dbdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>容器启动后，使用了 tar 命令来将 dbdata 卷备份为容器中 &#x2F;backup&#x2F;backup.tar 文件，也就是主机当前目录下的名为 backup.tar 的文件。</p><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>如果要恢复数据到一个容器，首先创建一个带有空数据卷的容器 dbdata2。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-v</span> /dbdata <span class="token parameter variable">--name</span> dbdata2 ubuntu /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后创建另一个容器，挂载 dbdata2 容器卷中的数据卷，并使用 untar 解压备份文件到挂载的容器卷中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run --volumes-from dbdata2 <span class="token parameter variable">-v</span> <span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>:/backup busybox <span class="token function">tar</span> xvf/backup/backup.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了查看&#x2F;验证恢复的数据，可以再启动一个容器挂载同样的容器卷来查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">docker</span> run --volumes-from dbdata2 busybox /bin/ls /dbdata<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="docker镜像-31-md-“-31-md”"><a href="#docker镜像-31-md-“-31-md”" class="headerlink" title="docker镜像(#31.md “#31.md”)"></a>docker镜像(#31.md “#31.md”)</h3><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><h2 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 官方 的安装脚本</span>$ <span class="token function">curl</span> <span class="token parameter variable">-sSL</span>  <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 阿里云 的安装脚本</span>$ <span class="token function">curl</span> <span class="token parameter variable">-sSL</span>  <span class="token operator">|</span> <span class="token function">sh</span> -<span class="token comment"># DaoCloud 的安装脚本</span>$ <span class="token function">curl</span> <span class="token parameter variable">-sSL</span>  <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><pre class="line-numbers language-none"><code class="language-none"># 获取镜像，registry为空默认从Docker Hub上获取docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt;# 交互式运行，退出删除: -i:交互式 ,-t:终端,--rm 退出删除 ,bash 启动bash窗口$ docker run -it --rm ubuntu:14.04 bash# 列出已下载的镜像（只显示顶层镜像） -a:显示所有镜像 image_name:指定列出某个镜像$ docker images [-a] [image_name]# 只显示虚悬镜像(dangling image) -f:--filter 过滤$ docker images -f dangling&#x3D;true# 过滤从mongo:3.2建立之后的镜像$ docker images -f since&#x3D;mongo:3.2# 通过label过滤$ docker images -f label&#x3D;com.example.version&#x3D;0.1# 只显示镜像id$ docker images -q# 只包含镜像ID和仓库名$ docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;# 以表格等距显示 有标题行，和默认一样，不过自己定义列$ docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;# 删除镜像ID为image_id的镜像$ docker rmi &lt;image_id&gt;# 删除虚悬镜像$ docker rmi $(docker images -q -f dangling&#x3D;true)# 将容器保存为镜像$ docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]# 将容器保存为镜像$ docker commit \    --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \    --message &quot;修改了默认网页&quot; \    webserver \    nginx:v2$ docker history nginx:v2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="el-drawer-实现鼠标拖拽宽度ElementUI"><a href="#el-drawer-实现鼠标拖拽宽度ElementUI" class="headerlink" title="el-drawer 实现鼠标拖拽宽度ElementUI"></a>el-drawer 实现鼠标拖拽宽度<a href="#32.md" title="#32.md">ElementUI</a></h3><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="/" alt="el-drawer-drag-width"></p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>通过指令的方式, 在 <code>drawer</code> 的左侧边缘, 添加一个触发拖拽的长条形区域, 监听鼠标左键按下时启动 <code>document.onmousemove</code> 的监听, 监听鼠标距离浏览器右边的距离, 设置为 <code>drawer</code> 的宽度, 并添加约束: 不能小于浏览器宽度的 20%, 不能大于浏览器宽度的 80%.</p><h3 id="指令代码"><a href="#指令代码" class="headerlink" title="指令代码"></a>指令代码</h3><p>创建文件 <code>src/directive/elment-ui/drawer-drag-width.js</code>, 内容如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">/** * el-drawer 拖拽指令 */</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'el-drawer-drag-width'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> drawerEle <span class="token operator">=</span> el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.el-drawer'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>drawerEle<span class="token punctuation">)</span>    <span class="token comment">// 创建触发拖拽的元素</span>    <span class="token keyword">const</span> dragItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>    <span class="token comment">// 将元素放置到抽屉的左边边缘</span>    dragItem<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssText <span class="token operator">=</span> <span class="token string">'height: 100%;width: 5px;cursor: w-resize;position: absolute;left: 0;'</span>    drawerEle<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dragItem<span class="token punctuation">)</span>    dragItem<span class="token punctuation">.</span><span class="token function-variable function">onmousedown</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">downEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 拖拽时禁用文本选中</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>userSelect <span class="token operator">=</span> <span class="token string">'none'</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmousemove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">moveEvent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取鼠标距离浏览器右边缘的距离</span>        <span class="token keyword">let</span> realWidth <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token operator">-</span> moveEvent<span class="token punctuation">.</span>pageX        <span class="token keyword">const</span> width30 <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token operator">*</span> <span class="token number">0.2</span>        <span class="token keyword">const</span> width80 <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth <span class="token operator">*</span> <span class="token number">0.8</span>        <span class="token comment">// 宽度不能大于浏览器宽度 80%，不能小于宽度的 20%</span>        realWidth <span class="token operator">=</span> realWidth <span class="token operator">></span> width80 <span class="token operator">?</span> width80 <span class="token operator">:</span> realWidth <span class="token operator">&lt;</span> width30 <span class="token operator">?</span> width30 <span class="token operator">:</span> realWidth        drawerEle<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> realWidth <span class="token operator">+</span> <span class="token string">'px'</span>      <span class="token punctuation">&#125;</span>      document<span class="token punctuation">.</span><span class="token function-variable function">onmouseup</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 拖拽时结束时，取消禁用文本选中</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>userSelect <span class="token operator">=</span> <span class="token string">'initial'</span>        document<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">null</span>        document<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 <code>main.js</code> 中将其导入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">'./directive/element-ui/drawer-drag-width'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="指令使用"><a href="#指令使用" class="headerlink" title="指令使用"></a>指令使用</h3><p>在 <code>el-drawer</code>  上添加指令 <code>v-el-drawer-drag-width</code> 即可, 如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-drawer</span>  <span class="token attr-name">v-el-drawer-drag-width</span>  <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helpDrawer.show<span class="token punctuation">"</span></span>  <span class="token attr-name">direction</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rtl<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-drawer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">#title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>draw-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; helpDrawer.title &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Editor</span>    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helpDrawer.html<span class="token punctuation">"</span></span>    <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helpDrawer.loading<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>my-wang-editor<span class="token punctuation">"</span></span>    <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>    <span class="token attr-name">:default-config</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helpDrawer.editorConfig<span class="token punctuation">"</span></span>    <span class="token attr-name">:mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helpDrawer.mode<span class="token punctuation">"</span></span>    <span class="token attr-name">@onCreated</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onCreatedHelp<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-drawer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘前端页面开发规范’-33-md-“-33-md”"><a href="#‘前端页面开发规范’-33-md-“-33-md”" class="headerlink" title="‘前端页面开发规范’(#33.md “#33.md”)"></a>‘前端页面开发规范’(#33.md “#33.md”)</h3><h2 id="一、前言-1"><a href="#一、前言-1" class="headerlink" title="一、前言"></a>一、前言</h2><p>随着开发人员的不断增加，在没有规范的情况下，就会导致开发的页面不统一，不像是一个系统。为了解决这个问题，就有了此规范的出现，当然为了不影响各个功能的灵活性，此规范要求不高， 请耐心阅读，并应用到日常开发中。</p><p>当然，如果你有更好的建议，可以通过邮件联系 <a href="mailto:&#121;&#97;&#110;&#103;&#x79;&#x6a;&#49;&#x33;&#64;&#108;&#x65;&#110;&#111;&#x76;&#111;&#46;&#99;&#111;&#109;">&#121;&#97;&#110;&#103;&#x79;&#x6a;&#49;&#x33;&#64;&#108;&#x65;&#110;&#111;&#x76;&#111;&#46;&#99;&#111;&#109;</a>，进行沟通来完善此篇规范。</p><h2 id="二、编程规范"><a href="#二、编程规范" class="headerlink" title="二、编程规范"></a>二、编程规范</h2><h3 id="2-1-命名规范"><a href="#2-1-命名规范" class="headerlink" title="2.1 命名规范"></a>2.1 命名规范</h3><h4 id="2-1-1-文件命名"><a href="#2-1-1-文件命名" class="headerlink" title="2.1.1 文件命名"></a>2.1.1 文件命名</h4><p>全部采用小写方式，以横杠分割。</p><p>正例: <code>resource.vue</code>、<code>user-info.vue</code></p><p>反例: <code>basic_data.vue</code>、<code>EventLog.vue</code></p><h4 id="2-1-2-目录命名"><a href="#2-1-2-目录命名" class="headerlink" title="2.1.2 目录命名"></a>2.1.2 目录命名</h4><p>全部采用小写方式，以横杠分割。</p><p>正例: <code>system</code>、<code>ship-support</code></p><p>反例: <code>errorPage</code>、<code>Components</code></p><h4 id="2-1-3-JS、CSS、SCSS、HTML、PNG文件命名"><a href="#2-1-3-JS、CSS、SCSS、HTML、PNG文件命名" class="headerlink" title="2.1.3 JS、CSS、SCSS、HTML、PNG文件命名"></a>2.1.3 JS、CSS、SCSS、HTML、PNG文件命名</h4><p>全部采用小写方式，以横杠分割。</p><p>正例: <code>btn.scss</code>、<code>element-ui.scss</code>、<code>lenovo-logo.png</code></p><p>反例: <code>leftSearch.scss</code>、<code>LeGrid.js</code></p><h4 id="2-1-4-命名规范性"><a href="#2-1-4-命名规范性" class="headerlink" title="2.1.4 命名规范性"></a>2.1.4 命名规范性</h4><p>代码中命名严禁使用拼音和英文混合的方式，更不允许直接使用中文的方式。说明: 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音的命名方式也要避免采用。</p><p>正例: <code>loading</code>、<code>searchForm</code>、<code>tableHeight</code>、<code>dmsLoading</code>、<code>rmb</code> 专有名词缩写，视同英文<br>反例: <code>getLiaoPanName</code>、<code>DMSLoading</code></p><h3 id="2-2-插件使用"><a href="#2-2-插件使用" class="headerlink" title="2.2 插件使用"></a>2.2 插件使用</h3><h4 id="2-2-1-eslint-代码规范"><a href="#2-2-1-eslint-代码规范" class="headerlink" title="2.2.1 eslint 代码规范"></a>2.2.1 eslint 代码规范</h4><p>注意：前端的代码格式化已经在 <code>eslint</code> 中声明了，所以确保自己已经启用了 <code>eslint</code>，并使 <code>eslint</code> 进行代码格式化。</p><h4 id="2-2-2-i18n-国际化"><a href="#2-2-2-i18n-国际化" class="headerlink" title="2.2.2 i18n 国际化"></a>2.2.2 i18n 国际化</h4><p>所有展示的内容都要支持国际化。国际化内容写到 <code>/src/lang/</code> 下的对应模块，通过 <code>this.$t(&#39;xx.xx.xx&#39;)</code> 来使用。</p><p>英文国际化的列或标签，请使用开头字母大写的方式，如: <code>UserId</code>、<code>Status</code>、<code>UserName</code>。</p><p><img src="/" alt="image-20211227175812563"></p><h3 id="2-3-组件使用"><a href="#2-3-组件使用" class="headerlink" title="2.3 组件使用"></a>2.3 组件使用</h3><h4 id="2-3-1-table-表格"><a href="#2-3-1-table-表格" class="headerlink" title="2.3.1 table 表格"></a>2.3.1 table 表格</h4><p>表格组件推荐使用 <a href="">vxe-table</a>，功能更加全面，之后也会主力优化此表格。比如可编辑表格的样式经过优化：<a href="">可编辑表格</a></p><h4 id="2-3-2-dialog-弹窗"><a href="#2-3-2-dialog-弹窗" class="headerlink" title="2.3.2 dialog 弹窗"></a>2.3.2 dialog 弹窗</h4><p>弹窗组件推荐使用 <a href="">vxe-modal</a>，代码设计更加合理，功能也更加全面。</p><h4 id="2-3-2-element-ui"><a href="#2-3-2-element-ui" class="headerlink" title="2.3.2 element-ui"></a>2.3.2 element-ui</h4><p>除 <code>table</code> 和 <code>modal</code> 外，其他组件比如 <code>form</code>、<code>button</code>、<code>DateTimePicker</code> 优先使用 <a href="">element-ui</a> 。</p><h5 id="2-3-2-1-icon-图标"><a href="#2-3-2-1-icon-图标" class="headerlink" title="2.3.2.1 icon 图标"></a>2.3.2.1 icon 图标</h5><p>图标优先使用  <a href="">element-ui</a> 的图标。如果没有合适的，可以在  上寻找到合适的图标后，找 <a href="mailto:&#x79;&#x61;&#x6e;&#103;&#121;&#x6a;&#x31;&#x33;&#x40;&#108;&#101;&#x6e;&#111;&#x76;&#x6f;&#x2e;&#99;&#x6f;&#x6d;">&#x79;&#x61;&#x6e;&#103;&#121;&#x6a;&#x31;&#x33;&#x40;&#108;&#101;&#x6e;&#111;&#x76;&#x6f;&#x2e;&#99;&#x6f;&#x6d;</a> 进行添加。</p><h5 id="2-3-2-2-button-按钮"><a href="#2-3-2-2-button-按钮" class="headerlink" title="2.3.2.2 button 按钮"></a>2.3.2.2 button 按钮</h5><p>按钮大小：除了在表格中的按钮要使用 <code>size=&quot;mini&quot;</code> 外，其他情况使用默认大小即可。</p><p>按钮颜色：普通的 查询&#x2F;修改&#x2F;操作 等按钮使用蓝色 <code>type=&quot;primary&quot;</code>，新增使用绿色 <code>type=&quot;success&quot;</code>，删除等“危险”操作使用红色 <code>type=&quot;danger&quot;</code>。推荐给按钮添加图标，可在 <a href="">element-ui-icon</a> 寻找合适的图标。</p><p><img src="/" alt="image-20211227172602560"></p><h4 id="2-3-3-其他组件"><a href="#2-3-3-其他组件" class="headerlink" title="2.3.3 其他组件"></a>2.3.3 其他组件</h4><p>如果上述组件并不能满足业务需求，可以优先在网上找到合适的组件后，与 <a href="mailto:&#x79;&#x61;&#x6e;&#103;&#121;&#x6a;&#x31;&#51;&#x40;&#108;&#x65;&#110;&#111;&#x6f;&#x76;&#46;&#x63;&#x6f;&#x6d;">&#x79;&#x61;&#x6e;&#103;&#121;&#x6a;&#x31;&#51;&#x40;&#108;&#x65;&#110;&#111;&#x6f;&#x76;&#46;&#x63;&#x6f;&#x6d;</a> 联系后添加。</p><h3 id="2-4-页面布局"><a href="#2-4-页面布局" class="headerlink" title="2.4 页面布局"></a>2.4 页面布局</h3><h4 id="2-4-1-新增-修改表单"><a href="#2-4-1-新增-修改表单" class="headerlink" title="2.4.1 新增&#x2F;修改表单"></a>2.4.1 新增&#x2F;修改表单</h4><p>普通的表单，采用中间对其的方案，也就是整个表单的 <code>label-width</code> 设置为一样的。</p><p>注意：一般的，新增修改使用弹窗的方式，展示表单。新增&#x2F;修改可以共用代码，具体可以参考 <code>common/system/va-config.vue</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span>        <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dialogForm<span class="token punctuation">"</span></span>        <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit.loading<span class="token punctuation">"</span></span>        <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit.form<span class="token punctuation">"</span></span>        <span class="token attr-name">:rules</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>edit.formRules<span class="token punctuation">"</span></span>        <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150px<span class="token punctuation">"</span></span>        <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">padding-right</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>      <span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/" alt="image-20211227170528261"></p><h4 id="2-4-2-查询表单-表格"><a href="#2-4-2-查询表单-表格" class="headerlink" title="2.4.2 查询表单+表格"></a>2.4.2 查询表单+表格</h4><p>这种应该是最长间的需求方案了，可以参考 <code>/common/system/user.vue</code>，在写的时候注意以下几点：</p><ol><li><code>label-width</code> 不要设置，保证标签文字开头和表格对齐。</li><li><code>el-form</code> 使用 <code>:inline=&quot;true&quot;</code> 设置表单内容行内显示。</li><li>设置 <code>vxe-table</code> 的 <code>height</code> 属性，保证表格底部贴住网页底部，又不会有滚动条（表格内允许有滚动条）</li><li>按钮也放到表单中，不要单独一行。</li></ol><p>最终效果如下：</p><p><img src="/" alt="image-20211227174221673"></p><p>﻿</p><h3 id="人生若只如初见-《围城》-34-md-“-34-md”"><a href="#人生若只如初见-《围城》-34-md-“-34-md”" class="headerlink" title="人生若只如初见-《围城》(#34.md “#34.md”)"></a>人生若只如初见-《围城》(#34.md “#34.md”)</h3><p><img src="/" alt="围城"></p><blockquote><p>婚姻是被围困的城堡，城外的人想冲进去，城里的人想逃出来  –法国谚语</p></blockquote><!--more--><p>方鸿渐对于鲍小姐，不堪抵抗；对于苏小姐的垂青，已再纠缠不清（导致方唐感情破裂的导火索）；最后与孙柔嘉的婚姻，因属于现实的无奈吧；至于唐晓芙，方对她应该有着最纯粹的爱意。</p><p>整部小说给我留下深刻印象的就是唐小姐，她在整部小说的占比是非常少的。</p><blockquote><p>总而言之，唐小姐是摩登文明社会里的那桩罕物――一个真正的女孩子。有许多都市女孩子已经是装模作样的早熟的女人，算不得孩子；有许多女孩子只是浑沌痴顽的无性别的孩子，还说不上女人。</p></blockquote><p>唐晓芙的聪明漂亮、活泼可爱，令方鸿渐一见倾心。</p><p>当初，是苏小姐的干预，激起了唐晓芙的逆反心理，不让接近我偏接近，书信往来，见面谈话，时间推移，俩人都投入了真正的感情。</p><p>作为苏的姐妹，唐晓芙骨子里也有跟苏小姐的高傲。</p><blockquote><p>方先生的过去太丰富了！我爱的人，我要能够占领他整个生命，他在碰见我以前，没有过去，留着空白等待我——</p></blockquote><p>方下定决心写信给苏撇清两人关系，苏的狭隘的心理从中挑拨导致方与唐之间的破裂</p><blockquote><p>他象一个受了责骂的孩子那样，泪水在眼睛里打转，却一句话也说不出口。</p></blockquote><p>所以当唐得知方的一些列斑斑劣迹后，愈心痛愈心恨，最后一次见方，连珠炮的发问，又恨方鸿渐为什么不辩护，她的心溶成了苦水。而方鸿渐的悲剧在于，他再次懦弱，该辩解时不辩解，该在屋外多淋雨时而过早走开，接到电话后，不问来人就大声呵斥，俩人都是好面子的人，看不到俩人为这段感情而去采取任何补救措施，而是各自松开了手。两人年轻，都不知退让，任彼此失之交臂。</p><p>从此直到最后，唐也没有再次出现。</p><p>但唐给我们的留下了一个近乎完美的形象，正是因为她没有和方走在一起，没有真实世俗的一面，才能留下那种只如初见的模样。</p><p>生活亦是如此，我们心目中的“女神”、“男神”，完美无缺的人，是那些我们曾经追求不得的人。想想若是得之，经过世俗的一面，ta的完美的形象，还会在你的心中站的稳吗。</p><blockquote><p>唐晓芙这个角色是钱老钟爱的角色，是钱老心中完美的女性形象，简单说就是女神！是围城里任何男人都配不上的，所以不舍得把她许配给任何人。</p></blockquote><div style="text-align:right;width:100%">--杨绛先生</div><p><img src="/" alt="钱老和杨先生"><br>《围城》写出了婚姻的一方面，但不是全部，很多人要冲进这座城，自有其道理，城中有争吵，但更有温情。愿诸位在现实生活中，相互欣赏，相敬如宾，如初见一样，相互爱戴，生活一定更加美好</p><p>在新春佳节祝大家幸福美满，阖家欢乐。</p><p>﻿</p><h3 id="FreeMarker语法详解-35-md-“-35-md”"><a href="#FreeMarker语法详解-35-md-“-35-md”" class="headerlink" title="FreeMarker语法详解(#35.md “#35.md”)"></a>FreeMarker语法详解(#35.md “#35.md”)</h3><p>FreeMarker是一款 <strong>模板引擎</strong> :即一种基于模板和要改变的数据，并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。<br>FreeMarker模板文件主要有4部分组成</p><ol><li><strong>文本</strong>，直接输出的部分</li><li><strong>注释</strong>，即&lt;#–…–&gt;格式不会输出</li><li><strong>插值</strong>（Interpolation）：即${..}或者#{..}格式的部分,将使用数据模型中的部分替代输出</li><li><strong>FTL指令</strong>：FreeMarker指令，和HTML标记类似，名字前加#予以区分，不会输出。</li></ol><!--more --><h2 id="一些规则"><a href="#一些规则" class="headerlink" title="一些规则"></a>一些规则</h2><h3 id="FTL指令规则"><a href="#FTL指令规则" class="headerlink" title="FTL指令规则"></a>FTL指令规则</h3><p>FreeMarker有三种FTL标签，这和HTML的标签是完全类似的<br>     开始标签：&lt;#directivename parameters&gt;<br>     结束标签：&lt;&#x2F;#directivename&gt;<br>     空标签： &lt;#directivename parameters &#x2F;&gt;<br>     实际上，使用标签时前面的#符号也可能变成@，如果该指令是一个用户指令而不是系统内建指令时，应将#符号改为@符号</p><h3 id="插值规则"><a href="#插值规则" class="headerlink" title="插值规则"></a>插值规则</h3><p>FreeMarker的插值有如下两种类型<br>    1、通用插值：${expr}<br>    2、数字格式化插值：#{expr}或者#{expr;format}<br>通用插值，有可以分为四种情况<br>    a、插值结果为字符串值：直接输出表达式结果<br>    b、插值结果为数字值：根据默认格式(#setting 指令设置)将表达式结果转换成文本输出。可以使用内建的字符串函数格式单个插值，例如</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#setting number_format <span class="token operator">=</span> <span class="token string">"currency"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>#assign str <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">/</span><span class="token operator">></span>$<span class="token punctuation">&#123;</span>str<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>str<span class="token operator">?</span>string<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>str<span class="token operator">?</span>string<span class="token punctuation">.</span>number<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>str<span class="token operator">?</span>string<span class="token punctuation">.</span>currency<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>str<span class="token operator">?</span>string<span class="token punctuation">.</span>percent<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>str<span class="token operator">?</span>string<span class="token punctuation">.</span>computer<span class="token punctuation">&#125;</span>日期处理$<span class="token punctuation">&#123;</span>openingTime<span class="token operator">?</span>string<span class="token punctuation">.</span><span class="token keyword">short</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>openingTime<span class="token operator">?</span>string<span class="token punctuation">.</span>medium<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>openingTime<span class="token operator">?</span>string<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>openingTime<span class="token operator">?</span>string<span class="token punctuation">.</span>full<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>nextDiscountDay<span class="token operator">?</span>string<span class="token punctuation">.</span><span class="token keyword">short</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>nextDiscountDay<span class="token operator">?</span>string<span class="token punctuation">.</span>medium<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>nextDiscountDay<span class="token operator">?</span>string<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>nextDiscountDay<span class="token operator">?</span>string<span class="token punctuation">.</span>full<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>lastUpdated<span class="token operator">?</span>string<span class="token punctuation">.</span><span class="token keyword">short</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>lastUpdated<span class="token operator">?</span>string<span class="token punctuation">.</span>medium<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>lastUpdated<span class="token operator">?</span>string<span class="token punctuation">.</span><span class="token keyword">long</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>lastUpdated<span class="token operator">?</span>string<span class="token punctuation">.</span>full<span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>lastUpdated<span class="token operator">?</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss zzzz"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>lastUpdated<span class="token operator">?</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"EEE, MMM d, ''yy"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>$<span class="token punctuation">&#123;</span>lastUpdated<span class="token operator">?</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"EEEE, MMMM dd, yyyy, hh:mm:ss a '('zzz')'"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if-elseif-elseif"><a href="#if-elseif-elseif" class="headerlink" title="if,elseif,elseif"></a>if,elseif,elseif</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#<span class="token keyword">if</span> condition<span class="token operator">></span>……<span class="token operator">&lt;</span>#elseif condition2<span class="token operator">></span>……<span class="token operator">&lt;</span>#<span class="token keyword">else</span><span class="token operator">></span>……<span class="token operator">&lt;</span><span class="token operator">/</span>#<span class="token keyword">if</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch,case"></a>switch,case</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#<span class="token keyword">switch</span> value<span class="token operator">></span>    <span class="token operator">&lt;</span>#<span class="token keyword">case</span> refValue1<span class="token operator">></span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token operator">&lt;</span>#<span class="token keyword">break</span><span class="token operator">></span>    <span class="token operator">&lt;</span>#<span class="token keyword">case</span> refValue2<span class="token operator">></span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token operator">&lt;</span>#<span class="token keyword">break</span><span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span>#<span class="token keyword">case</span> refValueN<span class="token operator">></span>           <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>           <span class="token operator">&lt;</span>#<span class="token keyword">break</span><span class="token operator">></span>    <span class="token operator">&lt;</span>#<span class="token keyword">default</span><span class="token operator">></span>         <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>#<span class="token keyword">switch</span><span class="token operator">></span>  <span class="token operator">&lt;</span>#t<span class="token operator">></span> 去掉左右空白和回车换行  <span class="token operator">&lt;</span>#lt<span class="token operator">></span>去掉左边空白和回车换行  <span class="token operator">&lt;</span>#rt<span class="token operator">></span>去掉右边空白和回车换行  <span class="token operator">&lt;</span>#nt<span class="token operator">></span>取消上面的效果  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#list sequence as item<span class="token operator">></span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">&lt;</span>#<span class="token keyword">if</span> item <span class="token operator">=</span> <span class="token string">"spring"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>#<span class="token keyword">break</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>#<span class="token keyword">if</span><span class="token operator">></span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>#list<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>iterm_index:当前值得下标，从0开始<br>item_has_next:判断list是否还有值</p></blockquote><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#include filename <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>options 包含两个属性<br>encoding&#x3D;”GBK”<br>parse&#x3D;”true” 是否作为ftl语法解析，默认是true<br>示例：&lt;#include “&#x2F;common&#x2F;copyright.ftl” encoding&#x3D;”GBK” parse&#x3D;”true”&gt;</p></blockquote><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#import path as hash<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>类似于java里的import,它导入文件，然后就可以在当前文件里使用被导入文件里的宏组件</p></blockquote><h3 id="compress"><a href="#compress" class="headerlink" title="compress"></a>compress</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#compress<span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>#compress<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="escape-noescape"><a href="#escape-noescape" class="headerlink" title="escape, noescape"></a>escape, noescape</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#escape identifier as expression<span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span>#noescape<span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>#noescape<span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>#escape<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>主要使用在相似的字符串变量输出，比如某一个模块的所有字符串输出都必须是html安全的，这个时候就可以使用该表达式<br>示例：</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#escape x as x<span class="token operator">?</span>html<span class="token operator">></span>    First name<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>firstName<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span>#noescape<span class="token operator">></span>Last name<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>lastName<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>#noescape<span class="token operator">></span>    Maiden name<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>maidenName<span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>#escape<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相同表达式</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">First name<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>firstName<span class="token operator">?</span>html<span class="token punctuation">&#125;</span>  Last name<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>lastName <span class="token punctuation">&#125;</span>  Maiden name<span class="token operator">:</span> $<span class="token punctuation">&#123;</span>maidenName<span class="token operator">?</span>html<span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="assign"><a href="#assign" class="headerlink" title="assign"></a>assign</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#assign name<span class="token operator">=</span>value<span class="token operator">></span>  <span class="token operator">&lt;</span>#<span class="token operator">--</span> 或则 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>#assign name1<span class="token operator">=</span>value1 name2<span class="token operator">=</span>value2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token operator">=</span>valueN<span class="token operator">></span>  <span class="token operator">&lt;</span>#<span class="token operator">--</span> 或则 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>#assign same as above<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> in namespacehash<span class="token operator">></span>  <span class="token operator">&lt;</span>#<span class="token operator">--</span> 或则 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>#assign name<span class="token operator">></span>    capture this  <span class="token operator">&lt;</span><span class="token operator">/</span>#assign<span class="token operator">></span>  <span class="token operator">&lt;</span>#<span class="token operator">--</span> 或则 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>#assign name in namespacehash<span class="token operator">></span>    capture this  <span class="token operator">&lt;</span><span class="token operator">/</span>#assign<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>生成变量,并且给变量赋值</p></blockquote><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#global name<span class="token operator">=</span>value<span class="token operator">></span>  <span class="token operator">&lt;</span>#<span class="token operator">--</span>或则<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>#global name1<span class="token operator">=</span>value1 name2<span class="token operator">=</span>value2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nameN<span class="token operator">=</span>valueN<span class="token operator">></span>  <span class="token operator">&lt;</span>#<span class="token operator">--</span>或则<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>#global name<span class="token operator">></span>    capture this  <span class="token operator">&lt;</span><span class="token operator">/</span>#global<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>全局赋值语法，利用这个语法给变量赋值，那么这个变量在所有的namespace [A1] 中是可见的, 如果这个变量被当前的assign 语法覆盖 如&lt;#global x&#x3D;2&gt; &lt;#assign x&#x3D;1&gt; 在当前页面里x&#x3D;2 将被隐藏，或者通过${.global.x} 来访问</p></blockquote><h3 id="setting"><a href="#setting" class="headerlink" title="setting"></a>setting</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#setting name<span class="token operator">=</span>value<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>用来设置整个系统的一个环境<br>locale<br>number_format<br>boolean_format<br>date_format , time_format , datetime_format<br>time_zone<br>classic_compatible</p></blockquote><h3 id="macro-nested-return"><a href="#macro-nested-return" class="headerlink" title="macro, nested, return"></a>macro, nested, return</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#macro name param1 param2 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> paramN<span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span>#nested loopvar1<span class="token punctuation">,</span> loopvar2<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> loopvarN<span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token operator">&lt;</span>#<span class="token keyword">return</span><span class="token operator">></span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>#macro<span class="token operator">></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="t-lt-rt"><a href="#t-lt-rt" class="headerlink" title="t, lt, rt"></a>t, lt, rt</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">&lt;</span>#t<span class="token operator">></span> 去掉左右空白和回车换行  <span class="token operator">&lt;</span>#lt<span class="token operator">></span>去掉左边空白和回车换行  <span class="token operator">&lt;</span>#rt<span class="token operator">></span>去掉右边空白和回车换行  <span class="token operator">&lt;</span>#nt<span class="token operator">></span>取消上面的效果  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="Git常用命令-36-md-“-36-md”"><a href="#Git常用命令-36-md-“-36-md”" class="headerlink" title="Git常用命令(#36.md “#36.md”)"></a>Git常用命令(#36.md “#36.md”)</h3><p>经常用到Git，但是很多命令记不住，将其整理于此。（大量摘自网络）</p><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要要记住60~100个命令。<br><img src="/" alt="git常用命令"></p><!--more --><p>下面整理的 Git 命令清单。几个专业名词的译名如下。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Workspace：工作区Index / Stage：暂存区Repository：仓库区（本地仓库）Remote：远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新建版本仓库"><a href="#新建版本仓库" class="headerlink" title="新建版本仓库"></a>新建版本仓库</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录新建一个Git代码库</span>$ <span class="token function">git</span> init<span class="token comment"># 新建一个目录，将其初始化为Git代码库</span>$ <span class="token function">git</span> init <span class="token punctuation">[</span>project-name<span class="token punctuation">]</span><span class="token comment"># 下载一个项目和它的整个代码历史, -o 给远程仓库起名:faker,默认origin</span>$ <span class="token function">git</span> clone <span class="token punctuation">[</span>-o faker<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示当前的Git配置</span>$ <span class="token function">git</span> config <span class="token parameter variable">--list</span><span class="token comment"># 编辑Git配置文件</span>$ <span class="token function">git</span> config <span class="token parameter variable">-e</span> <span class="token punctuation">[</span>--global<span class="token punctuation">]</span><span class="token comment"># 设置提交代码时的用户信息</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.name <span class="token string">"[name]"</span>$ <span class="token function">git</span> config <span class="token punctuation">[</span>--global<span class="token punctuation">]</span> user.email <span class="token string">"[email address]"</span><span class="token comment"># 设置大小写敏感（windows不区分大小写的解决办法）</span>$ <span class="token function">git</span> config core.ignorecase  <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 添加指定文件到暂存区</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 添加指定目录到暂存区，包括子目录</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment"># 添加当前目录的所有文件到暂存区</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 添加每个变化前，都会要求确认</span><span class="token comment"># 对于同一个文件的多处变化，可以实现分次提交</span>$ <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-p</span><span class="token comment"># 删除工作区文件，并且将这次删除放入暂存区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment"># 停止追踪指定文件，但该文件会保留在工作区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 改名文件，并且将这个改名放入暂存区</span>$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提交暂存区到仓库区</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 提交暂存区的指定文件到仓库区</span>$ <span class="token function">git</span> commit <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-a</span><span class="token comment"># 提交时显示所有diff信息</span>$ <span class="token function">git</span> commit <span class="token parameter variable">-v</span><span class="token comment"># 使用一次新的commit，替代上一次提交</span><span class="token comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>message<span class="token punctuation">]</span><span class="token comment"># 重做上一次commit，并包括指定文件的新变化</span>$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有本地分支</span>$ <span class="token function">git</span> branch<span class="token comment"># 列出所有远程分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-r</span><span class="token comment"># 列出所有本地分支和远程分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-a</span><span class="token comment"># 列出所有本地分支，并展示没有分支最后一次提交的信息</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-v</span><span class="token comment"># 列出所有本地分支，并展示没有分支最后一次提交的信息和远程分支的追踪情况</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-vv</span><span class="token comment"># 列出所有已经合并到当前分支的分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">--merged</span><span class="token comment"># 列出所有还没有合并到当前分支的分支</span>$ <span class="token function">git</span> branch --no-merged<span class="token comment"># 新建一个分支，但依然停留在当前分支</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，并切换到该分支</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 新建一个与远程分支同名的分支，并切换到该分支</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">--track</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，指向指定commit</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 新建一个分支，与指定的远程分支建立追踪关系</span>$ <span class="token function">git</span> branch <span class="token parameter variable">--track</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment"># 切换到指定分支，并更新工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 切换到上一个分支</span>$ <span class="token function">git</span> checkout -<span class="token comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span>$ <span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span><span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>$ <span class="token function">git</span> branch --set-upstream <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span> <span class="token comment"># 已被弃用</span><span class="token comment"># 合并指定分支到当前分支</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 中断此次合并（你可能不想处理冲突）</span>$ <span class="token function">git</span> merge <span class="token parameter variable">--abort</span><span class="token comment"># 选择一个commit，合并进当前分支</span>$ <span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 删除分支</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment">#新增远程分支 远程分支需先在本地创建,再进行推送</span>$ <span class="token function">git</span> push origin <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span><span class="token comment"># 删除远程分支</span>$ <span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token punctuation">[</span>branch-name<span class="token punctuation">]</span>$ <span class="token function">git</span> branch <span class="token parameter variable">-dr</span> <span class="token punctuation">[</span>remote/branch<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出所有tag</span>$ <span class="token function">git</span> tag<span class="token comment"># 新建一个tag在当前commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 新建一个tag在指定commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 删除本地tag</span>$ <span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 删除远程tag</span>$ <span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment"># 查看tag信息</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 提交指定tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment"># 提交所有tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--tags</span><span class="token comment"># 新建一个分支，指向某个tag</span>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看信息-搜索"><a href="#查看信息-搜索" class="headerlink" title="查看信息&#x2F;搜索"></a>查看信息&#x2F;搜索</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示有变更的文件</span>$ <span class="token function">git</span> status <span class="token punctuation">[</span>-sb<span class="token punctuation">]</span> <span class="token comment">#s:short,给一个短格式的展示，b:展示当前分支</span><span class="token comment"># 显示当前分支的版本历史</span>$ <span class="token function">git</span> log<span class="token comment"># 显示commit历史，以及每次commit发生变更的文件</span>$ <span class="token function">git</span> log <span class="token parameter variable">--stat</span><span class="token comment"># 搜索提交历史，根据关键词</span>$ <span class="token function">git</span> log <span class="token parameter variable">-S</span> <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span><span class="token comment"># 显示某个commit之后的所有变动，每个commit占据一行</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:%s<span class="token comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD <span class="token parameter variable">--grep</span> feature<span class="token comment"># 显示某个文件的版本历史，包括文件改名</span>$ <span class="token function">git</span> log <span class="token parameter variable">--follow</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span>$ <span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示指定文件相关的每一次diff</span>$ <span class="token function">git</span> log <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示过去5次提交</span>$ <span class="token function">git</span> log <span class="token parameter variable">-5</span> <span class="token parameter variable">--pretty</span> <span class="token parameter variable">--oneline</span><span class="token comment"># 图形化显示所有分支</span>$ <span class="token function">git</span> log <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--graph</span> <span class="token parameter variable">--all</span><span class="token comment"># 显示在分支2而不在分支1中的提交</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>分支1<span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">[</span>分支2<span class="token punctuation">]</span>$ <span class="token function">git</span> log ^<span class="token punctuation">[</span>分支1<span class="token punctuation">]</span> <span class="token punctuation">[</span>分支2<span class="token punctuation">]</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>分支2<span class="token punctuation">]</span> <span class="token parameter variable">--not</span> <span class="token punctuation">[</span>分支1<span class="token punctuation">]</span><span class="token comment"># 显示两个分支不同时包含的提交</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>分支1<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>分支2<span class="token punctuation">]</span><span class="token comment"># 显示所有提交过的用户，按提交次数排序</span>$ <span class="token function">git</span> shortlog <span class="token parameter variable">-sn</span><span class="token comment"># 显示指定文件是什么人在什么时间修改过</span>$ <span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示暂存区和工作区的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span><span class="token comment"># 显示暂存区和上一个commit的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 显示工作区与当前分支最新commit之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> HEAD<span class="token comment"># 显示两次提交之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>first-branch<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token punctuation">[</span>second-branch<span class="token punctuation">]</span><span class="token comment"># 显示今天你写了多少行代码</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--shortstat</span> <span class="token string">"@&#123;0 day ago&#125;"</span><span class="token comment"># 显示某次提交的元数据和内容变化</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 显示某次提交发生变化的文件</span>$ <span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 显示某次提交时，某个文件的内容</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span><span class="token comment"># 显示当前分支的最近几次提交</span>$ <span class="token function">git</span> reflog<span class="token comment"># 搜索你工作目录的文件，输出匹配行号</span>$ <span class="token function">git</span> <span class="token function">grep</span> <span class="token parameter variable">-n</span> <span class="token punctuation">[</span>关键字<span class="token punctuation">]</span><span class="token comment"># 搜索你工作目录的文件，输出每个文件包含多少个匹配</span>$ <span class="token function">git</span> <span class="token function">grep</span> <span class="token parameter variable">--count</span> <span class="token punctuation">[</span>关键字<span class="token punctuation">]</span><span class="token comment"># 优化阅读</span>$ <span class="token function">git</span> <span class="token function">grep</span> <span class="token parameter variable">--break</span> <span class="token parameter variable">--heading</span> <span class="token punctuation">[</span>关键字<span class="token punctuation">]</span><span class="token comment"># 查询iCheck这个字符串那次提交的</span>$ <span class="token function">git</span> log <span class="token parameter variable">-SiCheck</span> <span class="token parameter variable">--oneline</span><span class="token comment"># 查询git_deflate_bound函数每一次的变更</span>$ <span class="token function">git</span> log <span class="token parameter variable">-L</span> :git_deflate_bound:zlib.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载远程仓库的所有变动 [shortname] 为远程仓库的shortname, 如origin,为空时:默认origin</span>$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span><span class="token comment"># 显示所有远程仓库</span>$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span><span class="token comment">#显式地获得远程引用的完整列表 [shortname] 为远程仓库的shortname, 如origin,为空时:默认origin</span>$ <span class="token function">git</span> ls-remote <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span><span class="token comment"># 显示某个远程仓库的信息 [remote] 为远程仓库的shortname, 如origin</span>$ <span class="token function">git</span> remote show <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span><span class="token comment"># 增加一个新的远程仓库，并命名</span>$ <span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment"># 重命名一个远程仓库（shortname）</span>$ <span class="token function">git</span> remote <span class="token function">rename</span> <span class="token punctuation">[</span>旧仓库名<span class="token punctuation">]</span> <span class="token punctuation">[</span>新仓库名<span class="token punctuation">]</span><span class="token comment"># 删除一个远程链接</span>$ <span class="token function">git</span> remote <span class="token function">rm</span> <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span>$ <span class="token function">git</span> remote remove <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment"># 修改远程仓库地址</span>$ <span class="token function">git</span> remote set-url <span class="token punctuation">[</span>shortname<span class="token punctuation">]</span> <span class="token punctuation">[</span>url<span class="token punctuation">]</span><span class="token comment"># 取回远程仓库的变化，并与本地分支合并</span>$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 上传本地当前分支到远程仓库</span><span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span><span class="token comment"># 上传本地指定分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment"># 推送所有分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--all</span><span class="token comment"># 强行推送当前分支到远程仓库，即使有冲突</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote<span class="token punctuation">]</span> <span class="token parameter variable">--force</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 恢复暂存区的指定文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 恢复某个commit的指定文件到暂存区和工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>commit<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment"># 恢复暂存区的所有文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token builtin class-name">.</span><span class="token comment">#只会保留源码（工作区），回退commit(本地仓库)与index（暂存区）到某个版本</span>$ <span class="token function">git</span> reset <span class="token operator">&lt;</span>commit_id<span class="token operator">></span>   <span class="token comment">#默认为 --mixed模式</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--mixed</span> <span class="token operator">&lt;</span>commit_id<span class="token operator">></span><span class="token comment">#保留源码（工作区）和index（暂存区），只回退commit（本地仓库）到某个版本</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--soft</span> <span class="token operator">&lt;</span>commit_id<span class="token operator">></span><span class="token comment">#源码（工作区）、commit（本地仓库）与index（暂存区）都回退到某个版本</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>commit_id<span class="token operator">></span><span class="token comment"># 恢复到最后一次提交的状态</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD<span class="token comment"># 新建一个commit，用来撤销指定commit</span><span class="token comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ <span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment"># 将工作区和暂存区的代码全都存储起来了</span>$ <span class="token function">git</span> stash <span class="token punctuation">[</span>save<span class="token punctuation">]</span><span class="token comment"># 只保存工作区，不存储暂存区</span>$ <span class="token function">git</span> stash --keep-index<span class="token comment"># 存储工作区、暂存区和未跟踪文件</span>$ <span class="token function">git</span> stash <span class="token parameter variable">-u</span>$ <span class="token function">git</span> stash --include-untracked<span class="token comment"># 不存储所有改动的东西，但会交互式的提示那些改动想要被储藏、哪些改动需要保存在工作目录中</span>$ <span class="token function">git</span> stash <span class="token parameter variable">--patch</span><span class="token comment"># 不指定名字，Git认为指定最近的储藏，将存储的代码（工作区和暂存区）都应用到工作区</span>$ <span class="token function">git</span> stash apply <span class="token punctuation">[</span>stash@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># 存储的工作区和暂存区的代码应用到工作区和暂存区</span>$ <span class="token function">git</span> stash apply <span class="token punctuation">[</span>stash@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token parameter variable">--index</span><span class="token comment"># 将存储的代码（工作区和暂存区）都应用到工作区，并从栈上扔掉他</span>$ <span class="token function">git</span> stash pop<span class="token comment"># 删除stash@&#123;2&#125;的存储</span>$ <span class="token function">git</span> stash drop <span class="token punctuation">[</span>stash@<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token comment"># 获取储藏的列表</span>$ <span class="token function">git</span> stash list<span class="token comment"># 移除工作目录中所有未跟踪的文件及口口那个的子目录，不会移除.gitiignore忽略的文件</span>$ <span class="token function">git</span> clean <span class="token parameter variable">-f</span> <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 生成一个可供发布的压缩包</span>$ <span class="token function">git</span> archive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="Git统计操作-37-md-“-37-md”"><a href="#Git统计操作-37-md-“-37-md”" class="headerlink" title="Git统计操作(#37.md “#37.md”)"></a>Git统计操作(#37.md “#37.md”)</h3><h2 id="按commit统计"><a href="#按commit统计" class="headerlink" title="按commit统计"></a>按commit统计</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 统计当前作者今天（从凌晨1点开始）提交次数</span>$ <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> config <span class="token parameter variable">--get</span> user.name<span class="token variable">)</span></span>"</span> --no-merges <span class="token parameter variable">--since</span><span class="token operator">=</span>1am <span class="token parameter variable">--stat</span><span class="token comment"># 按提交作者统计，按提交次数排序</span>$ <span class="token function">git</span> shortlog <span class="token parameter variable">-sn</span>$ <span class="token function">git</span> shortlog <span class="token parameter variable">--numbered</span> <span class="token parameter variable">--summary</span><span class="token comment"># 只看某作者提交的commit数</span>$ <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"faker"</span> <span class="token parameter variable">--oneline</span> <span class="token parameter variable">--shortstat</span><span class="token comment"># 按提交作者统计，提交数量排名前5（看全部，去掉head管道即可）</span>$ <span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span><span class="token string">'%aN'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-k1</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-r</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">5</span><span class="token comment"># 按提交者邮箱统计，提交数量排名前5</span>$ <span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:%ae <span class="token operator">|</span> <span class="token function">gawk</span> -- <span class="token string">'&#123; ++c[$0]; &#125; END &#123; for(cc in c) printf "%5d %s\n",c[cc],cc; &#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-r</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">5</span><span class="token comment"># 统计贡献者数量</span>$ <span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span><span class="token string">'%aN'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token comment"># 统计提交数量</span>$ <span class="token function">git</span> log <span class="token parameter variable">--oneline</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="按代码行数统计"><a href="#按代码行数统计" class="headerlink" title="按代码行数统计"></a>按代码行数统计</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 统计指定作者增删行数</span>$ <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"faker"</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -<span class="token comment"># 统计当前作者增删行数</span>$ <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> config <span class="token parameter variable">--get</span> user.name<span class="token variable">)</span></span>"</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">gawk</span> <span class="token string">'&#123; add += $1 ; subs += $2 ; loc += $1 - $2 &#125; END &#123; printf "added lines: %s removed lines : %s total lines: %s\n",add,subs,loc &#125;'</span> -<span class="token comment"># 统计所有邮箱前缀的增删行数 -英文版</span>$ <span class="token function">git</span> log <span class="token parameter variable">--shortstat</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span><span class="token string">"%cE"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/\(.*\)@.*/\1/'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"^$"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN &#123; line=""; &#125; !/^ / &#123; if (line=="" || !match(line, $0)) &#123;line = $0 "," line &#125;&#125; /^ / &#123; print line " # " $0; line=""&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-E</span> <span class="token string">'s/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\1 0 insertions\(+\), \2/;s/\(\+\)$/\(\+\), 0 deletions\(-\)/;s/insertions?\(\+\), //;s/ deletions?\(-\)//'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN &#123;name=""; files=0; insertions=0; deletions=0;&#125; &#123;if ($1 != name &amp;&amp; name != "") &#123; print name ": " files " files changed, " insertions " insertions(+), " deletions " deletions(-), " insertions-deletions " net"; files=0; insertions=0; deletions=0; name=$1; &#125; name=$1; files+=$2; insertions+=$3; deletions+=$4&#125; END &#123;print name ": " files " files changed, " insertions " insertions(+), " deletions " deletions(-), " insertions-deletions " net";&#125;'</span><span class="token comment"># 统计所有邮箱前缀的增删行数 -中文版</span>$ <span class="token function">git</span> log <span class="token parameter variable">--shortstat</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span><span class="token string">"%cE"</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/\(.*\)@.*/\1/'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"^$"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN &#123; line=""; &#125; !/^ / &#123; if (line=="" || !match(line, $0)) &#123;line = $0 "," line &#125;&#125; /^ / &#123; print line " # " $0; line=""&#125;'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-E</span> <span class="token string">'s/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\1 0 insertions\(+\), \2/;s/\(\+\)$/\(\+\), 0 deletions\(-\)/;s/insertions?\(\+\), //;s/ deletions?\(-\)//'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN &#123;name=""; files=0; insertions=0; deletions=0;&#125; &#123;if ($1 != name &amp;&amp; name != "") &#123; print name ": " files " 个文件被改变, " insertions " 行被插入(+), " deletions " 行被删除(-), " insertions-deletions " 行剩余"; files=0; insertions=0; deletions=0; name=$1; &#125; name=$1; files+=$2; insertions+=$3; deletions+=$4&#125; END &#123;print name ": " files " 个文件被改变, " insertions " 行被插入(+), " deletions " 行被删除(-), " insertions-deletions " 行剩余";&#125;'</span><span class="token comment"># 统计所有作者增删行数 --英文版</span>$ <span class="token function">git</span> log <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'%aN'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token parameter variable">-en</span> <span class="token string">"<span class="token variable">$name</span><span class="token entity" title="\t">\t</span>"</span><span class="token punctuation">;</span> <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$name</span>"</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -<span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token comment"># 统计所有作者增删行数 --中文版</span>$ <span class="token function">git</span> log <span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">'%aN'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-u</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> name<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token parameter variable">-en</span> <span class="token string">"<span class="token variable">$name</span><span class="token entity" title="\t">\t</span>"</span><span class="token punctuation">;</span> <span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$name</span>"</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "添加行数: %s, 删除行数: %s, 总行数: %s\n", add, subs, loc &#125;'</span> -<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-log-说明"><a href="#git-log-说明" class="headerlink" title="git log 说明"></a>git log 说明</h2><blockquote><p>git log 参数说明：<br><code>--</code>author   指定作者<br><code>--</code>stat   显示每次更新的文件修改统计信息，会列出具体文件列表<br><code>--</code>shortstat    统计每个commit 的文件修改行数，包括增加，删除，但不列出文件列表：<br><code>--</code>numstat   统计每个commit 的文件修改行数，包括增加，删除，并列出文件列表：</p></blockquote><blockquote><p>-p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新<br>       例如：git log -p  -2<br><code>--</code>name-only 仅在提交信息后显示已修改的文件清单<br><code>--</code>name-status 显示新增、修改、删除的文件清单<br><code>--</code>abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符<br><code>--</code>relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）<br><code>--</code>graph 显示 ASCII 图形表示的分支合并历史<br><code>--</code>pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）<br>       <strong>例如：</strong><br>       <code>git log --pretty=oneline</code> ;<br>       <code>git log --pretty=short</code> ;<br>        <code>git log --pretty=full</code> ;<br>        git log –pretty&#x3D;fuller<br><code>--</code>pretty&#x3D;tformat:   可以定制要显示的记录格式，这样的输出便于后期编程提取分析<br>       <strong>例如：</strong><br>       <code>git log --pretty=format:&quot;&quot;%h - %an, %ar : %s&quot;&quot;</code><br>       下面列出了常用的格式占位符写法及其代表的意义。<br>       选项       说明<br>       %H      提交对象（commit）的完整哈希字串<br>       %h      提交对象的简短哈希字串<br>       %T      树对象（tree）的完整哈希字串<br>       %t      树对象的简短哈希字串<br>       %P      父对象（parent）的完整哈希字串<br>       %p      父对象的简短哈希字串<br>       %an     作者（author）的名字<br>       %ae     作者的电子邮件地址<br>       %ad     作者修订日期（可以用 -date&#x3D; 选项定制格式）<br>       %ar     作者修订日期，按多久以前的方式显示<br>       %cn     提交者(committer)的名字<br>       %ce     提交者的电子邮件地址<br>       %cd     提交日期<br>       %cr     提交日期，按多久以前的方式显示<br>       %s      提交说明<br><code>--</code>since  限制显示输出的范围，<br>       例如： <code>git log --since=2.weeks</code>    显示最近两周的提交<br>       选项 说明<br>       -(n)    仅显示最近的 n 条提交<br>       <code>--</code>since, <code>--</code>after 仅显示指定时间之后的提交。<br>       <code>--</code>until, <code>--</code>before 仅显示指定时间之前的提交。<br>       <code>--</code>author 仅显示指定作者相关的提交。<br>       <code>--</code>committer 仅显示指定提交者相关的提交。</p></blockquote><blockquote><p>   <strong>一些例子：</strong><br><code>git log --until=1.minute.ago</code> &#x2F;&#x2F; 一分钟之前的所有 log<br><code>git log --since=1.day.ago</code> &#x2F;&#x2F;一天之内的log<br><code>git log --since=1.hour.ago</code> &#x2F;&#x2F;一个小时之内的 log<br><code>git log --since=1.month.ago --until=2.weeks.ago</code> &#x2F;&#x2F;一个月之前到半个月之前的log<br><code>git log --since ==2013-08.01 --until=2013-09-07</code> &#x2F;&#x2F;某个时间段的 log<br><code>git blame</code> 看看某一个文件的相关历史记录<br>例如：<code>git blame index.html --date short</code></p></blockquote><p>﻿<br>在使用git的过程中，总有一天你会遇到下面的问题：）<br>这些也是在开发过程中很常见的问题，以下也是作者的经验之谈，有不对的地方还请指出。</p><!--more --><h3 id="最后一次commit信息写错了"><a href="#最后一次commit信息写错了" class="headerlink" title="最后一次commit信息写错了"></a>最后一次commit信息写错了</h3><p>如果只是提交信息写错了信息，可以通过以下命令单独修改提交信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>注意：</strong> 通过这样的过程修改提交信息后，相当于删除原来的提交，重新提交了一次。所有如果你在修改前已经将错误的那次提交push到服务端，那在修改后就需要通过 git pull 来合并代码（类似于两个分支了）。<br>通过 <code>git log --graph --oneline</code> 查看就会发现两个分支合并的痕迹</p></blockquote><h3 id="最后一次commit少添加一个文件"><a href="#最后一次commit少添加一个文件" class="headerlink" title="最后一次commit少添加一个文件"></a>最后一次commit少添加一个文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">add</span> file1$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="最后一次commit多添加一个文件"><a href="#最后一次commit多添加一个文件" class="headerlink" title="最后一次commit多添加一个文件"></a>最后一次commit多添加一个文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> file1$ <span class="token function">git</span> commit <span class="token parameter variable">--amend</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="移除add过的文件"><a href="#移除add过的文件" class="headerlink" title="移除add过的文件"></a>移除add过的文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方法一</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cache</span> <span class="token punctuation">[</span>文件名<span class="token punctuation">]</span><span class="token comment">#方法二</span>$ <span class="token function">git</span> reset <span class="token function">head</span> <span class="token punctuation">[</span>文件/文件夹<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回退本地commit（还未push）"><a href="#回退本地commit（还未push）" class="headerlink" title="回退本地commit（还未push）"></a>回退本地commit（还未push）</h3><p>这种情况发生在你的本地仓库，可能你add，commit以后发现代码有点问题，打算取消提交，用到下面命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#只会保留源码（工作区），回退commit(本地仓库)与index（暂存区）到某个版本</span>$ <span class="token function">git</span> reset <span class="token operator">&lt;</span>commit_id<span class="token operator">></span>   <span class="token comment">#默认为 --mixed模式</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--mixed</span> <span class="token operator">&lt;</span>commit_id<span class="token operator">></span><span class="token comment">#保留源码（工作区）和index（暂存区），只回退commit（本地仓库）到某个版本</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--soft</span> <span class="token operator">&lt;</span>commit_id<span class="token operator">></span><span class="token comment">#源码（工作区）、commit（本地仓库）与index（暂存区）都回退到某个版本</span>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token operator">&lt;</span>commit_id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然有人在push代码以后，也是用reset –hard回退代码到某个版本之前，但是这样会有一个问题，你线上的代码没有变化。</p><blockquote><p>!!!可以通过 git push –force 将本地的回退推送到服务端,但是除非你很清楚在这么做, 不推荐.</p></blockquote><p>所以，这种情况你要使用下面的方式了。</p><h3 id="回退本地commit（已经push）"><a href="#回退本地commit（已经push）" class="headerlink" title="回退本地commit（已经push）"></a>回退本地commit（已经push）</h3><p>对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> revert <span class="token operator">&lt;</span>commit_id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>git revert 用于反转提交，执行命令时要求工作树必须是干净的。</li><li>git revert 用一个新的提交来消除一个历时提交所做出的修改</li></ol><h3 id="回退单个文件的历史版本"><a href="#回退单个文件的历史版本" class="headerlink" title="回退单个文件的历史版本"></a>回退单个文件的历史版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看历史版本</span><span class="token function">git</span> log <span class="token number">1</span>.txt<span class="token comment">#回退该文件到指定版本</span><span class="token function">git</span> reset <span class="token punctuation">[</span>commit_id<span class="token punctuation">]</span> <span class="token number">1</span>.txt<span class="token function">git</span> checkout <span class="token number">1</span>.txt<span class="token comment">#提交</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"回退1.txt的历史版本"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改提交历史中的author和email"><a href="#修改提交历史中的author和email" class="headerlink" title="修改提交历史中的author和email"></a>修改提交历史中的author和email</h3><p>旧的：author:<code>Old-Author</code> email:<code>old@mail.com</code><br>新的：author:<code>New-Author</code> email:<code>new@mail.com</code><br>1.在git仓库内创建下面的脚本，如<code>change.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># !/bin/sh</span><span class="token function">git</span> filter-branch --env-filter <span class="token string">'an="$GIT_AUTHOR_NAME"am="$GIT_AUTHOR_EMAIL"cn="$GIT_COMMITTER_NAME"cm="$GIT_COMMITTER_EMAIL"if [ "$GIT_COMMITTER_EMAIL" = "old@mail.com" ]then    cn="New-Author"    cm="new@mail.com"fiif [ "$GIT_AUTHOR_EMAIL" = "old@mail.com" ]then    an="New-Author"    am="new@mail.com"fiexport GIT_AUTHOR_NAME="$an"export GIT_AUTHOR_EMAIL="$am"export GIT_COMMITTER_NAME="$cn"export GIT_COMMITTER_EMAIL="$cm"'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.运行脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sh</span> change.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略已提交的文件（-iml）"><a href="#忽略已提交的文件（-iml）" class="headerlink" title="忽略已提交的文件（.iml）"></a>忽略已提交的文件（.iml）</h3><ol><li>删除已提交的文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除项目中所有的.iml后缀的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.iml"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>添加<code>.gitignore</code>文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">*.iml/**/*.iml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><hr><h3 id="Git操作之高手过招-38-md-“-38-md”"><a href="#Git操作之高手过招-38-md-“-38-md”" class="headerlink" title="Git操作之高手过招(#38.md “#38.md”)"></a>Git操作之高手过招(#38.md “#38.md”)</h3><p>持续更新中～～～</p><p>﻿</p><h3 id="Git之reset揭秘-39-md-“-39-md”"><a href="#Git之reset揭秘-39-md-“-39-md”" class="headerlink" title="Git之reset揭秘(#39.md “#39.md”)"></a>Git之reset揭秘(#39.md “#39.md”)</h3><p>本文主要选自于《Pro Git》这本书，加上自己平时使用时的理解整理于此，以此给大家借鉴。<br>本文主要讨论 <code>reset</code> 与 <code>checkout</code>。它们能做很多事情，所以我们要真正理解他们到底在底层做了哪些工作，以便能够恰当的运用它们。</p><!--more --><h2 id="三棵树"><a href="#三棵树" class="headerlink" title="三棵树"></a>三棵树</h2><p>理解 <code>reset</code> 和 <code>checkout</code> 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。）</p><table><thead><tr><th align="left">树</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">HEAD</td><td align="left">上一次提交的快照，下一次提交的父结点</td></tr><tr><td align="left">Index</td><td align="left">预期的下一次提交的快照</td></tr><tr><td align="left">Working Directory</td><td align="left">沙盒</td></tr></tbody></table><h2 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h2><p>HEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。 通常，理解 HEAD 的最简方式，就是将它看做 <strong>你的上一次提交</strong> 的快照。</p><p>其实，查看快照的样子很容易。 下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> cat-file <span class="token parameter variable">-p</span> HEADtree cfda3bf379e4f8dba8717dee55aab78aef7f4dafauthor Scott Chacon  <span class="token number">1301511835</span> <span class="token parameter variable">-0700</span>committer Scott Chacon  <span class="token number">1301511835</span> <span class="token parameter variable">-0700</span>initial commit$ <span class="token function">git</span> ls-tree <span class="token parameter variable">-r</span> HEAD<span class="token number">100644</span> blob a906cb2a4a904a152<span class="token punctuation">..</span>.   README<span class="token number">100644</span> blob 8f94139338f9404f2<span class="token punctuation">..</span>.   Rakefile040000 tree 99f1a6d12cb4b6f19<span class="token punctuation">..</span>.   lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>cat-file</code> 与 <code>ls-tree</code> 是底层命令，它们一般用于底层工作，在日常工作中并不使用。不过它们能帮助我们了解到底发生了什么。</p><h2 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引(Index)"></a>索引(Index)</h2><p>索引是你的 <strong>预期的下一次提交</strong>。 我们也会将这个概念引用为 Git 的 “暂存区域”，这就是当你运行 <code>git commit</code> 时 Git 看起来的样子。</p><p>Git 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> ls-files <span class="token parameter variable">-s</span><span class="token number">100644</span> a906cb2a4a904a152e80877d4088654daad0c859 <span class="token number">0</span>README<span class="token number">100644</span> 8f94139338f9404f26296befa88755fc2598c289 <span class="token number">0</span>Rakefile<span class="token number">100644</span> 47c6340d6459e05787f644c2447d2595f5d3a54b <span class="token number">0</span>lib/simplegit.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再说一次，我们在这里又用到了 <code>ls-files</code> 这个幕后的命令，它会显示出索引当前的样子。</p><p>确切来说，索引并非技术上的树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。</p><h2 id="工作目录-Working-Directory"><a href="#工作目录-Working-Directory" class="headerlink" title="工作目录(Working Directory)"></a>工作目录(Working Directory)</h2><p>最后，你就有了自己的工作目录。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 <code>.git</code> 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 <strong>沙盒</strong>。在你将修改提交到暂存区并记录到历史之前，可以随意更改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tree<span class="token builtin class-name">.</span>├── README├── Rakefile└── lib    └── simplegit.rb<span class="token number">1</span> directory, <span class="token number">3</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>Git 主要的目的是通过操纵这三棵树来以更加连续的状态记录项目的快照。<br><img src="/" alt="工作流程"><br>让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 <strong>v1</strong> 版本，将它标记为蓝色。 现在运行 <code>git init</code>，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的分支（<code>master</code> 还不存在）。<br><img src="/" alt="git初始化情况"><br>此时，只有工作目录有内容。</p><p>现在我们想要提交这个文件，所以用 <code>git add</code> 来获取工作目录中的内容，并将其复制到索引中。<br><img src="/" alt="git add之后情况"><br>接着运行 <code>git commit</code>，它首先会移除索引中的内容并将它保存为一个永久的快照，然后创建一个指向该快照的提交对象，最后更新 <code>master</code> 来指向本次提交。<br><img src="/" alt="git commit之后情况"><br>此时如果我们运行 <code>git status</code>，会发现没有任何改动，因为现在三棵树完全相同。</p><p>现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 <strong>v2</strong> 版本，并将它标记为红色。<br><img src="/" alt="编辑文件"><br>如果现在运行 <code>git status</code>，我们会看到文件显示在 “Changes not staged for commit,” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 <code>git add</code> 来将它暂存到索引中。<br><img src="/" alt="git add之后情况"><br>此时，由于索引和 HEAD 不同，若运行 <code>git status</code> 的话就会看到 “Changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 <code>git commit</code> 来完成提交。<br><img src="/" alt="git add之后情况"><br>现在运行 <code>git status</code> 会没有输出，因为三棵树又变得相同了。</p><p>切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 <strong>HEAD</strong> 指向新的分支引用，将 <strong>索引</strong> 填充为该次提交的快照，然后将 <strong>索引</strong> 的内容复制到 工作目录 中。</p><h2 id="重置的作用"><a href="#重置的作用" class="headerlink" title="重置的作用"></a>重置的作用</h2><p>在以下情景中观察 <code>reset</code> 命令会更有意义。</p><p>为了演示这些例子，假设我们再次修改了 <code>file.txt</code> 文件并第三次提交它。 现在的历史看起来是这样的：</p><p>让我们跟着 <code>reset</code> 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。</p><h3 id="1-移动-HEAD"><a href="#1-移动-HEAD" class="headerlink" title="1.移动 HEAD"></a>1.移动 HEAD</h3><p><code>reset</code> 做的第一件事是移动 HEAD 的指向。 这与改变 HEAD 自身不同（<code>checkout</code> 所做的）；<code>reset</code> 移动 HEAD 指向的分支。 这意味着如果 HEAD 设置为 <code>master</code> 分支（例如，你正在 <code>master</code> 分支上），运行 <code>git reset 9e5e64a</code> 将会使 <code>master</code> 指向 <code>9e5e64a</code>。<br><img src="/" alt="git reset --soft"><br>无论你调用了何种形式的带有一个提交的 <code>reset</code>，它首先都会尝试这样做。 使用 <code>reset --soft</code>，它将仅仅停在那儿。</p><p>现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 <code>git commit</code> 命令。 当你在运行 <code>git commit</code> 时，Git 会创建一个新的提交，并移动 HEAD 所指向的分支来使其指向该提交。 当你将它 <code>reset</code> 回 <code>HEAD~</code>（HEAD 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 <code>git commit</code> 来完成 <code>git commit --amend</code> 所要做的事情了。</p><h3 id="2-更新索引-–mixed"><a href="#2-更新索引-–mixed" class="headerlink" title="2.更新索引(–mixed)"></a>2.更新索引(–mixed)</h3><p>注意，如果你现在运行 <code>git status</code> 的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。</p><p>接下来，<code>reset</code> 会用 HEAD 指向的当前快照的内容来更新索引。<br><img src="/" alt="git reset --mixed"><br>如果指定 <code>--mixed</code> 选项，<code>reset</code> 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 <code>git reset HEAD~</code>），这就是命令将会停止的地方。</p><p>现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 <code>git add</code> 和 <code>git commit</code> 的命令执行之前。</p><h3 id="3-更新工作目录"><a href="#3-更新工作目录" class="headerlink" title="3.更新工作目录"></a>3.更新工作目录</h3><p><code>reset</code> 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 –hard 选项，它将会继续这一步。<br><img src="/" alt="git reset --hard"><br>现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、<code>git add</code> 和 <code>git commit</code> 命令以及工作目录中的所有工作。</p><p>必须注意，<code>--hard</code> 标记是 <code>reset</code> 命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 <code>--hard</code> 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 <strong>v3</strong> 版本，我们可以通过 <code>reflog</code> 来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。</p><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>reset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：</p><ol><li>移动 HEAD 分支的指向 （若指定了 <code>--soft</code>，则到此停止）</li><li>使索引看起来像 HEAD （不带参数或 <code>--mixed</code>，则到此停止）</li><li>使工作目录看起来像索引 (指定了 <code>--hard</code>)</li></ol><h3 id="通过路径来重置"><a href="#通过路径来重置" class="headerlink" title="通过路径来重置"></a>通过路径来重置</h3><p>前面讲述了 <code>reset</code> 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，<code>reset</code> 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。</p><p>现在，假如我们运行 <code>git reset file.txt</code> （这其实是 <code>git reset --mixed HEAD file.txt</code> 的简写形式，因为你既没有指定一个提交的 SHA-1 或分支，也没有指定 <code>--soft</code> 或 <code>--hard</code>），它会：</p><ol><li>移动 HEAD 分支的指向 （已跳过）</li><li>让索引看起来像 HEAD （到此处停止）</li></ol><p>所以它本质上只是将 <code>file.txt</code> 从 HEAD 复制到索引中。<br><img src="/" alt="git reset"><br>它还有 <em>取消暂存文件</em> 的实际效果。 如果我们查看该命令的示意图，然后再想想 <code>git add</code> 所做的事，就会发现它们正好相反。<br><img src="/" alt="git add"></p><p>这就是为什么 <code>git status</code> 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。）</p><p>我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 <code>git reset eb43bf file.txt</code> 的命令即可。<br><img src="/" alt="git reset eb43 -- file.txt"><br>它其实做了同样的事情，也就是把工作目录中的文件恢复到 <strong>v1</strong> 版本，运行 <code>git add</code> 添加它，然后再将它恢复到 <strong>v3</strong> 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 <code>git commit</code>，它就会记录一条“将该文件恢复到 <strong>v1</strong> 版本”的更改，尽管我们并未在工作目录中真正地再次拥有它。</p><p>还有一点同 <code>git add</code> 一样，就是 <code>reset</code> 命令也可以接受一个 <code>--patch</code> 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。</p><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>我们来看看如何利用这种新的功能来做一些有趣的事情 - 压缩提交。</p><p>假设你的一系列提交信息中有 “oops.”、“WIP” 和 “forgot this file”， 聪明的你就能使用 <code>reset</code> 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 <code>reset</code> 更简单。）</p><p>假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。<br><img src="/" alt="git reset --hard"><br>那么可以运行 <code>git reset --soft HEAD~2</code> 来将 HEAD 分支移动到一个旧一点的提交上（即你想要保留的第一个提交）：<br><img src="/" alt="git reset --soft HEAD~2"><br>然后只需再次运行 <code>git commit</code>：<br><img src="/" alt="git commit"><br>现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 <strong>v1</strong> 版 <code>file-a.txt</code> 的提交，接着第二个提交将 <code>file-a.txt</code> 修改成了 <strong>v3</strong> 版并增加了 <code>file-b.txt</code>。 包含 <strong>v2</strong> 版本的文件已经不在历史中了。</p><h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><p>最后，你大概还想知道 <code>checkout</code> 和 <code>reset</code> 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。</p><h3 id="不带路径"><a href="#不带路径" class="headerlink" title="不带路径"></a>不带路径</h3><p>运行 <code>git checkout [branch]</code> 与运行 <code>git reset --hard [branch]</code> 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。</p><p>首先不同于 <code>reset --hard，checkout</code> 对工作目录是安全的，它会通过检查来确保不会将已更改的文件吹走。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 <code>reset --hard</code> 则会不做检查就全面地替换所有东西。</p><p>第二个重要的区别是如何更新 HEAD。 reset 会移动 HEAD 分支的指向，而 checkout 只会移动 HEAD 自身来指向另一个分支。</p><p>例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 HEAD 指向它）。 如果我们运行 <code>git reset master</code>，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 <code>git checkout master</code> 的话，develop 不会移动，HEAD 自身会移动。 现在 HEAD 将会指向 master。</p><p>所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但_做法_是非常不同的。 reset 会移动 HEAD 分支的指向，而 checkout 则移动 HEAD 自身。</p><h3 id="带路径"><a href="#带路径" class="headerlink" title="带路径"></a>带路径</h3><p>运行 <code>checkout</code> 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 HEAD。 它就像 <code>git reset [branch] file</code> 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 <code>git reset --hard [branch] file</code>（如果 reset 允许你这样运行的话）- 这样对工作目录并不安全，它也不会移动 HEAD。</p><p>此外，同 <code>git reset</code> 和 <code>git add</code> 一样，<code>checkout</code> 也接受一个 –patch 选项，允许你根据选择一块一块地恢复文件内容。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>希望你现在熟悉并理解了 <code>reset</code> 命令，不过关于它和 <code>checkout</code> 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。</p><p>下面的速查表列出了命令对树的影响。 “HEAD” 一列中的 “REF” 表示该命令移动了 HEAD 指向的分支引用，而‘HEAD’ 则表示只移动了 HEAD 自身。 特别注意 <em>WD Safe?</em> 一列 - 如果它标记为 NO，那么运行该命令之前请考虑一下。</p><table><tr><td></td><td>**head**</td><td>**index**</td><td>**workdir**</td><td>**wd safe**</td></tr><tr><td>**commit level**</td><td colspan="4"></td></tr><tr><td>`reset --soft [commit]`</td><td>ref</td><td>no</td><td>no</td><td>yes</td></tr><tr><td>`reset [commit]`</td><td>ref</td><td>yes</td><td>no</td><td>yes</td></tr><tr><td>`reset --hard [commit]`</td><td>ref</td><td>yes</td><td>yes</td><td>no</td></tr><tr><td>`checkout [commit]`</td><td>head</td><td>yes</td><td>yes</td><td>yes</td></tr><tr><td>**file level**</td><td colspan="4"></td></tr><tr><td>`reset (commit) [file]`</td><td>no</td><td>yes</td><td>no</td><td>yes</td></tr><tr><td>`checkout (commit) [file]`</td><td>no</td><td>yes</td><td>yes</td><td>no</td></tr></table><p>﻿</p><h3 id="Git之SSH与HTTPS免密码配置-40-md-“-40-md”"><a href="#Git之SSH与HTTPS免密码配置-40-md-“-40-md”" class="headerlink" title="Git之SSH与HTTPS免密码配置(#40.md “#40.md”)"></a>Git之SSH与HTTPS免密码配置(#40.md “#40.md”)</h3><p>Git作为当前最受欢迎的版本控制软件，使用是很频繁的。但每次使用git push等操作时都要输入密码，实在是挺麻烦的。本文对使用ssh与https两种通讯协议讨论一下免密码配置。<br>注：这个过程在所有操作系统上都是相似的：）</p><!--more --><h2 id="SSH通信协议"><a href="#SSH通信协议" class="headerlink" title="SSH通信协议"></a>SSH通信协议</h2><h3 id="GitHub版"><a href="#GitHub版" class="headerlink" title="GitHub版"></a>GitHub版</h3><p>许多Git服务器都使用SSH公钥进行认证，当然也包括github。<br>首先你需要确认一下自己是否已经拥有密钥了，默认情况下，用户的 SSH 密钥存储在其 <code>~/.ssh</code> 目录下。进入该目录并列出其中内容，你变可以下快速确认自己是否已经拥有密钥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> ~/.ssh$ <span class="token function">ls</span>authorized_keys2  id_rsa       known_hostsconfig            id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要寻找一对 <code>id_rsa</code> 或 <code>id_dsa</code> 命名的文件，其中一个带 <code>.pub</code> 扩展名。 ‘.pub’文件是你的公钥，另一个则是私钥。如果没有找不到这样的文件（或者根本就没有<code>.ssh</code>目录），我们可以通过 <code>ssh-keygen</code> 程序来创建它们。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#邮箱可以随便填</span>$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"xx@xx.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先 <code>ssh-keygen</code> 会确认密钥的存储位置和文件名（默认是 <code>.ssh/id_rsa</code>）,然后他会要求你输入两次密钥口令，留空即可。所以一般选用默认，全部回车即可。</p><p>接下来我们登陆到GitHub上，右上角小头像-&gt;Setting-&gt;SSH and GPG keys中，点击new SSH key。<br><code>Title：</code>可以随便填写，但最好起的名字能让自己知道这个公钥是哪个设备的。<br><code>Key：</code>将上面生成的<code>.pub</code>文件中的所有内容复制到这里。<br>点击下面的Add SSH key即可。<br>然后你就会发现可以免密码访问了</p><h3 id="Git服务器"><a href="#Git服务器" class="headerlink" title="Git服务器"></a>Git服务器</h3><p>如果服务端是自己搭建的git服务器，生成密钥公钥对的步骤是一样的。<br>然后将生成的 <code>.pub</code> 文件内容，导入到git服务器 <code>/home/git/.ssh/authorized_keys</code> 文件内，一行一个。<br>然后你就会发现git push 不再需要密码了<br>搭建git服务器和相关免登陆的详细步骤可参考我的另一篇 </p><h2 id="HTTPS通信协议"><a href="#HTTPS通信协议" class="headerlink" title="HTTPS通信协议"></a>HTTPS通信协议</h2><p>上面讲了SSH方式的免密码，接下来讲一下越来越常用的HTTPS方式的免密码<br>新建文件并保存密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> ~/.git-credentials$ <span class="token function">vim</span> ~/.git-credentials<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加git配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> credential.helper store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看～&#x2F;.gitconfig文件变化</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">[credential]    helper = store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后再尝试一下git push不再在需要密码了</p><p>﻿</p><h3 id="完美替代多说-gitment-41-md-“-41-md”"><a href="#完美替代多说-gitment-41-md-“-41-md”" class="headerlink" title="完美替代多说-gitment(#41.md “#41.md”)"></a>完美替代多说-gitment(#41.md “#41.md”)</h3><p>自从多说要停止服务时，就开始关注第三方评论系统，现在的评论系统都有这样或那样的问题，见  。忽然看到作者 孙士权 的一片文章 <a href="">Gitment：使用 GitHub Issues 搭建评论系统</a> 。</p><p>立即就将 <code>gitment</code> 集成到 <code>3-hexo</code> 主题内。本篇文章只讲在 <code>3-hexo</code> 内如何使用，如果想自定义，可以参考上面原文。</p><h2 id="注册-OAuth-Application"><a href="#注册-OAuth-Application" class="headerlink" title="注册 OAuth Application"></a>注册 OAuth Application</h2><p><a href="">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如<br><img src="/" alt="作者是这样填的"></p><h2 id="使用-gitment-评论系统"><a href="#使用-gitment-评论系统" class="headerlink" title="使用 gitment 评论系统"></a>使用 gitment 评论系统</h2><p>修改主题 <code>_config.yml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">gitment:  on: true  # 启用gitment评论系统  owner: yelog  # 你的github账号  repo: yelog.github.io  # 评论issue保存的仓库，我选择保存在blog仓库，也可以新建一个仓库  client_id: d64ceca0d8a4e8b1f5c9   # 上一步注册后生成的client_id  client_secret: fb17d5f0aba31372f61a03df707bb20a39a73a06 # 上一步注册后生成的client_secret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署并初始化"><a href="#部署并初始化" class="headerlink" title="部署并初始化"></a>部署并初始化</h2><p>1.发布 hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo <span class="token function">clear</span> <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.打开发布的blog，登录github账号，并点击 <code>Initialize Comments</code>。<br><img src="/" alt="初始化本页的评论"></p><p>3.现在其他人就可以进行评论了</p><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>整体评论系统做的简洁，整体来说是个不错的系统。</p><p>﻿<br>对于github page来说，只要在根目录又404.html，当页面找不到时，就会被转发到&#x2F;404.html页面，所以我们只要更改这个页面，就可以实现自定义404页面了。</p><p>但是我们通常会需要与本主题相符的404页面。那我们就需要以下操作</p><h3 id="新建404页面"><a href="#新建404页面" class="headerlink" title="新建404页面"></a>新建404页面</h3><ol><li>进入 Hexo 所在文件夹，输入 <code>hexo new page 404</code> ;</li><li>打开刚新建的页面文件，默认在 Hexo 文件夹根目录下 &#x2F;source&#x2F;404&#x2F;index.md；</li><li>在顶部插入一行，写上 <code>enlink: /404</code>，这表示指定该页固定链接为 “主页”&#x2F;404.html&#96;</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">---###  Hexo创建404页面(#42.md "#42.md")## 页面未找到！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><blockquote><p>举个404例子](举个404例子)</p></blockquote><p> <img src="/" alt="404"></p><p>﻿</p><h3 id="hexo报错合集-43-md-“-43-md”"><a href="#hexo报错合集-43-md-“-43-md”" class="headerlink" title="hexo报错合集(#43.md “#43.md”)"></a>hexo报错合集(#43.md “#43.md”)</h3><h2 id="hexo-server时报错"><a href="#hexo-server时报错" class="headerlink" title="hexo server时报错"></a>hexo server时报错</h2><h3 id="FATAL-watch-…-ENOSPC"><a href="#FATAL-watch-…-ENOSPC" class="headerlink" title="FATAL watch … ENOSPC"></a>FATAL watch … ENOSPC</h3><p>日志：2017-03-27 执行 <code>hexo server</code> 后报错。<br><strong>如图：</strong><br><img src="/" alt="watch ENOSPC"><br><strong>分析问题：</strong><br>node.js 中 watch 的文件数是有限制的。<br><strong>解决问题：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token assign-left variable">fs.inotify.max_user_watches</span><span class="token operator">=</span><span class="token number">524288</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/sysctl.conf <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">-p</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="Hexo加速渲染速度之fragment-cache-44-md-“-44-md”"><a href="#Hexo加速渲染速度之fragment-cache-44-md-“-44-md”" class="headerlink" title="Hexo加速渲染速度之fragment_cache(#44.md “#44.md”)"></a>Hexo加速渲染速度之fragment_cache(#44.md “#44.md”)</h3><h2 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h2><p>从开发 <code>3-hexo</code> 主题到现在已过去 9 个月时间了，累计在博客中写 132 篇文章了。</p><p>现在发现了严重的问题，<code>hexo generate</code> 渲染的速度越来越慢，现在132篇左右，每次渲染时间到达了 50+ s，相当不爽。</p><p>今日抽时间，查看了官方api，看到了 <code>fragment_cache</code> 局部缓存这个东西，解决了渲染速度的问题。</p><h2 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><p>局部缓存。它储存局部内容，下次使用时就能直接使用缓存。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">fragment_cache</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="替换简单文本区域"><a href="#替换简单文本区域" class="headerlink" title="替换简单文本区域"></a>替换简单文本区域</h3><p>a. 我们可以将所有页面都一样的区域，如下所示，缓存下来。当下一篇文章在渲染到这个位置时，将不再渲染，直接拿缓存数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">fragment_cache</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'&lt;head>&lt;/head>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>b. 文章模块也可以使用，原来公共引用部分（没有和当前文章耦合的内容）使用下面的方式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/header'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改进为以下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">fragment_cache</span><span class="token punctuation">(</span><span class="token string">'header'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/header'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个语法只适用于所有页面都相同，不随文章内容变化的部分。</p><p>作者在 <code>3-hexo</code> 中加入了此语法，渲染132篇文章的速度已从 50+s 到现在 3s 左右了。</p><p>﻿</p><h3 id="Hexo-Git服务器搭建blog-45-md-“-45-md”"><a href="#Hexo-Git服务器搭建blog-45-md-“-45-md”" class="headerlink" title="Hexo+Git服务器搭建blog(#45.md “#45.md”)"></a>Hexo+Git服务器搭建blog(#45.md “#45.md”)</h3><p>博主最近在服务器上搭建Hexo发布平台，感觉整个搭建过程和搭建思想蛮有意思，在此记录一下，供猿友参考<br>Hexo 是一个快速，简单，功能强大，主题社区特别庞大的开源blog框架-》<a href="">官网</a><br>本次搭建是通过在服务器上搭建Git服务器来实现一键发布blog</p><!--more --><h2 id="搭建思路"><a href="#搭建思路" class="headerlink" title="搭建思路"></a>搭建思路</h2><p><img src="/" alt="图解"></p><ol><li>客户端就是自己的电脑,可以把hexo的静态资源目录当成一个git仓库.</li><li>首先配置好远程git仓库,通过 hexo d 将静态网站资源push到远程git仓库</li><li>git仓库接收到push处理完成后,自动触发post-receive这个钩子.</li><li>执行钩子内容,进入到 &#x2F;var&#x2F;www&#x2F;blog 目录(也是一个git仓库),拉取刚才hexo推送到git服务端的静态网站资源.</li><li>配置nginx,将80端口映射到 &#x2F;var&#x2F;www&#x2F;blog 目录.</li><li>就可以直接通过ip访问到静态blog了</li></ol><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="在服务器上安装git并创建git远程仓库-如-blog-git"><a href="#在服务器上安装git并创建git远程仓库-如-blog-git" class="headerlink" title="在服务器上安装git并创建git远程仓库 如 blog.git"></a>在服务器上安装git并创建git远程仓库 如 <code>blog.git</code></h4><p>搭建过程移步 </p><h4 id="在-config-yml-中配置git服务器"><a href="#在-config-yml-中配置git服务器" class="headerlink" title="在 _config.yml 中配置git服务器"></a>在 <code>_config.yml</code> 中配置git服务器</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">deploy:    type: git    repo: git@server:/home/git/blog.git    branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果ssh端口不是默认的22的话，如下配置,8080改为自己服务器上ssh端口</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">deploy:    type: git    repo:     branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h4><p>现在已经可以使用 <code>hexo d</code> 将hexo中的生成的静态资源发送到远程服务器中，接下来我们要配置nginx来配置静态web。<br>安装过程可以自行Google，在此只说明nginx如何配置静态web<br>首先创建一个目录作为存放web资源（hexo生成的）的目录，如： <code>/var/www/blog</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/www<span class="token comment">#创建blog目录，并克隆blog.git仓库的内容</span><span class="token function">git</span> clone /home/git/blog.git blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>找到 <code>nginx.conf</code> 添加以下信息</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">server &#123;    listen 80;    charset utf-8;    root   /var/www/blog;    index  index.htm index.html index.jsp;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#重启并加载配置文件</span>$ nginx <span class="token parameter variable">-s</span> reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置git服务器hooks"><a href="#配置git服务器hooks" class="headerlink" title="配置git服务器hooks"></a>配置git服务器hooks</h4><p>这个钩子的作用是，当git服务器接受客户端push完成更新，执行此文件内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建并编辑post-receive</span>$ <span class="token function">vim</span> blog.git/hooks/post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>内容如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token builtin class-name">unset</span> GIT_DIR <span class="token comment">#还原环境变量，否则会拉不到代码</span><span class="token builtin class-name">cd</span> /var/www/blog<span class="token function">git</span> pull origin master <span class="token comment">#拉取最新代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h4><p>在本地的hexo下执行 <code>hexo d</code><br>查看 &#x2F;var&#x2F;www&#x2F;blog文件夹内的内容也发生变化</p><p>﻿</p><h3 id="Hexo-GitHub-Pages搭建属于自己的blog-46-md-“-46-md”"><a href="#Hexo-GitHub-Pages搭建属于自己的blog-46-md-“-46-md”" class="headerlink" title="Hexo+GitHub Pages搭建属于自己的blog(#46.md “#46.md”)"></a>Hexo+GitHub Pages搭建属于自己的blog(#46.md “#46.md”)</h3><p>Hexo是一个快速，简单，功能强大的开源博客框架-》<a href="">官网</a><br>GitHub Pages 是一个不受限的网站空间。<br>两者相得益彰。给那些喜欢自己折腾的人提供一些借鉴。</p><!--more --><h2 id="搭建过程-1"><a href="#搭建过程-1" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>博主使用系统：Deepin Linux 15.3桌面版<br>安装 node与npm</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化blog"><a href="#初始化blog" class="headerlink" title="初始化blog"></a>初始化blog</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，本地blog已经创建完成，是不是很简单，简单到没朋友</p><h3 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h3><p>可以在<a href="">hexo官网</a>查看自己喜欢的主题<br>通过git clone [url] themes&#x2F;xxx 将主题克隆到本地，<br>修改 <code>_config.yml</code> 中的theme：xxx</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#创建一个新的文章</span>$ hexo new <span class="token string">"文章名"</span><span class="token comment">#生成静态文件</span>$ hexo generate<span class="token comment">#将一个草稿发布出去</span>$ hexo publish <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span><span class="token comment">#启动一个本地服务器</span>$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多命令移步<a href="">官方文档</a></p><h3 id="搭建github-pages"><a href="#搭建github-pages" class="headerlink" title="搭建github pages"></a>搭建github pages</h3><p>本地blog已经搭建完成，现在可以发布到github pages上</p><h4 id="注册github账户"><a href="#注册github账户" class="headerlink" title="注册github账户"></a>注册github账户</h4><p>到<a href="">github官网</a>注册一个github账户</p><h4 id="配置登录免密码"><a href="#配置登录免密码" class="headerlink" title="配置登录免密码"></a>配置登录免密码</h4><p>移步 </p><h4 id="创建github远程仓库"><a href="#创建github远程仓库" class="headerlink" title="创建github远程仓库"></a>创建github远程仓库</h4><p>在github上创建一个仓库 <code>xxx.github.io</code> xxx为自己的github用户名</p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><p>修改 <code>_comfig.yml</code>,xxx为你的用户名</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">deploy:   type: git   repo: git@github.com:xxx/xxx.github.io.git   branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="推送服务器"><a href="#推送服务器" class="headerlink" title="推送服务器"></a>推送服务器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>若出现<code>ERROR Deployer not found: git</code>报错，请执行上面安装插件步骤</p></blockquote><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>打开 <code>xxx.github.io</code> ，就能看到你的blog了</p><p>﻿</p><h3 id="为Hexo添加RSS和Sitemap-47-md-“-47-md”"><a href="#为Hexo添加RSS和Sitemap-47-md-“-47-md”" class="headerlink" title="为Hexo添加RSS和Sitemap(#47.md “#47.md”)"></a>为Hexo添加RSS和Sitemap(#47.md “#47.md”)</h3><h2 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h2><p>使用<code>RSS</code>是为自己的blog提供订阅功能。</p><h3 id="1-用npm安装插件"><a href="#1-用npm安装插件" class="headerlink" title="1.用npm安装插件"></a>1.用<code>npm</code>安装插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置根目录-config-yml"><a href="#2-配置根目录-config-yml" class="headerlink" title="2.配置根目录_config.yml"></a>2.配置根目录_config.yml</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Extensions</span><span class="token comment">## Plugins: </span><span class="token comment">#RSS订阅</span><span class="token key atrule">plugin</span><span class="token punctuation">:</span><span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>feed<span class="token comment">#Feed Atom</span><span class="token key atrule">feed</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> atom<span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml<span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-验证配置是否成功"><a href="#3-验证配置是否成功" class="headerlink" title="3.验证配置是否成功"></a>3.验证配置是否成功</h3><p>执行 <code>hexo g</code>，查看一下public目录下，如果有 <code>atom.xml</code> 文件，则表明配置成功。</p><h3 id="4-显示RSS图标"><a href="#4-显示RSS图标" class="headerlink" title="4.显示RSS图标"></a>4.显示RSS图标</h3><p>这里以3-hexo主题为例，给rss添加链接<code>/atom.xml</code>修改<code>/themes/3-hexo/_config.yml</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">link:  rss: /atom.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-效果"><a href="#5-效果" class="headerlink" title="5.效果"></a>5.效果</h3><p><strong>链接图标：</strong><br><img src="/" alt="图标"><br><strong>链接地址效果</strong><br><img src="/" alt="效果"></p><h2 id="添加Sitemap"><a href="#添加Sitemap" class="headerlink" title="添加Sitemap"></a>添加Sitemap</h2><p>Sitemap，网站地图，是网站优化中重要的一环，无论是对于访问者还是对于搜索引擎。</p><h3 id="1-用npm安装插件-1"><a href="#1-用npm安装插件-1" class="headerlink" title="1.用npm安装插件"></a>1.用<code>npm</code>安装插件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置根目录-config-yml-1"><a href="#2-配置根目录-config-yml-1" class="headerlink" title="2.配置根目录_config.yml"></a>2.配置根目录_config.yml</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">plugin:- hexo-generator-feed- hexo-generator-sitemap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-验证配置是否成功-1"><a href="#3-验证配置是否成功-1" class="headerlink" title="3.验证配置是否成功"></a>3.验证配置是否成功</h3><p>执行 <code>hexo g</code>，查看一下public目录下，如果有 <code>sitemap.xml</code> 文件，则表明配置成功。</p><h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h3><p>访问 &#x2F;sitemap.xml 就能看到生成的站点地图了<br><img src="/" alt="站点地图效果"></p><p>﻿<br>近期在写3-hexo主题时，发现文章（<code>site.posts</code>）排序按照.md文件的创建时间排序，而没有按照文章中的date排序。</p><p>这就导致了一个问题，我重装了一次电脑，.md文件通过git备份了，还原回来的时候，md的创建时间都是一样的，所以文章列表就按照文章标题排序了</p><p>随后就想起了以前使用yilia主题时，设置过置顶文章。所以做了排序，顺便做了置顶的功能。</p><blockquote><p><strong><a href="">@牵猪的松鼠</a>根据这篇文章写了一个npm插件 <a href="">hexo-generator-topindex</a><br>安装插件命令： <code>npm install hexo-generator-topindex --save</code><br>如果安装插件，可跳过第一部分 <a href="#%E4%BF%AE%E6%94%B9hexo%E7%9A%84js%E4%BB%A3%E7%A0%81">#修改hexo的js代码</a>，直接看第二部分 <a href="#%E8%AE%BE%E7%BD%AE%E7%BD%AE%E9%A1%B6">#设置置顶</a></strong></p></blockquote><h2 id="修改hexo的js代码"><a href="#修改hexo的js代码" class="headerlink" title="修改hexo的js代码"></a>修改hexo的js代码</h2><p>直接上操作，修改<code>node_modules/hexo-generator-index/lib/generator.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">var</span> pagination <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hexo-pagination'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">locals</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span>  <span class="token keyword">var</span> posts <span class="token operator">=</span> locals<span class="token punctuation">.</span>posts<span class="token punctuation">;</span>    posts<span class="token punctuation">.</span>data <span class="token operator">=</span> posts<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 两篇文章top都有定义</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>top <span class="token operator">==</span> b<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span>date <span class="token operator">-</span> a<span class="token punctuation">.</span>date<span class="token punctuation">;</span> <span class="token comment">// 若top值一样则按照文章日期降序排</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span>top <span class="token operator">-</span> a<span class="token punctuation">.</span>top<span class="token punctuation">;</span> <span class="token comment">// 否则按照top值降序排</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>b<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span>top <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">.</span>top<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> b<span class="token punctuation">.</span>date <span class="token operator">-</span> a<span class="token punctuation">.</span>date<span class="token punctuation">;</span> <span class="token comment">// 都没定义按照文章日期降序排</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> paginationDir <span class="token operator">=</span> config<span class="token punctuation">.</span>pagination_dir <span class="token operator">||</span> <span class="token string">'page'</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">pagination</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> posts<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">perPage</span><span class="token operator">:</span> config<span class="token punctuation">.</span>index_generator<span class="token punctuation">.</span>per_page<span class="token punctuation">,</span>    <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token string">'archive'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token literal-property property">format</span><span class="token operator">:</span> paginationDir <span class="token operator">+</span> <span class="token string">'/%d/'</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">__index</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置置顶"><a href="#设置置顶" class="headerlink" title="设置置顶"></a>设置置顶</h2><p>给需要置顶的文章加入top参数，如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">###  Hexo置顶及排序问题(#48.md "#48.md")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果存在多个置顶文章，top后的参数越大，越靠前。</p><h2 id="2020-05-20-更新"><a href="#2020-05-20-更新" class="headerlink" title="2020-05-20 更新"></a>2020-05-20 更新</h2><p>3-hexo 主题已经内置排序算法，无需上面下载插件或修改源码，可以直接使用，具体可看  中的排序相关内容</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>　　Netcan 的 <a href="">解决Hexo置顶问题</a></p><p>﻿</p><h3 id="Hexo加入字数统计WordCount-49-md-“-49-md”"><a href="#Hexo加入字数统计WordCount-49-md-“-49-md”" class="headerlink" title="Hexo加入字数统计WordCount(#49.md “#49.md”)"></a>Hexo加入字数统计WordCount(#49.md “#49.md”)</h3><p>只需要安装一个插件 WordCount</p><h2 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> i hexo-wordcount <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h2><p>单篇文章字数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%=wordcount(post.content) %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有文章的总字数</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%=totalcount(site) %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>2017年3月9日，给3-hexo添加字数统计功能</p><p>﻿</p><h3 id="idea常用快捷键-50-md-“-50-md”"><a href="#idea常用快捷键-50-md-“-50-md”" class="headerlink" title="idea常用快捷键(#50.md “#50.md”)"></a>idea常用快捷键(#50.md “#50.md”)</h3><blockquote><p>工欲善其事 , 必先利其器</p></blockquote><!--more --><p>Idea作为IDE是相当niubility,但是要运用自如还得掌握一些常用快捷键,才能在开发过程中运用自如<br>以下是idea的默认快捷键,如果英语能力没有问题,可以在Help-&gt;Keymap Reference 查看官方文档<br>当然作为一款优秀的IDE,怎么会少了自定义快捷键(File-&gt;Setting-&gt;Keymap,可通过动作名&#x2F;快捷键组合双向查找)<br>好了,下面是博主在Java相关开发过程中常用到的一些快捷键</p><h2 id="常用快捷键组合"><a href="#常用快捷键组合" class="headerlink" title="常用快捷键组合"></a>常用快捷键组合</h2><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><table><thead><tr><th align="left">序号</th><th align="left">快捷键组合</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"></td><td align="left">Ctrl+D</td><td align="left">重复光标所在行&#x2F;或选中部分</td></tr><tr><td align="left"></td><td align="left">Ctrl+C</td><td align="left">复制光标所在行&#x2F;或选中部分</td></tr><tr><td align="left"></td><td align="left">Ctrl+V</td><td align="left">粘贴</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+V</td><td align="left">选择粘贴最近5次复制的内容</td></tr><tr><td align="left"></td><td align="left">Ctrl+X</td><td align="left">删除光标所在行&#x2F;或选中部分</td></tr><tr><td align="left"></td><td align="left">Ctrl+Y</td><td align="left">删除光标所在行&#x2F;或选中行</td></tr><tr><td align="left"></td><td align="left">Shift+Enter</td><td align="left">向下插入新行</td></tr><tr><td align="left"></td><td align="left">Alt+Shift+↑&#x2F;↓</td><td align="left">移动当前行到上&#x2F;下一行</td></tr><tr><td align="left"></td><td align="left">Ctrl+Alt+←&#x2F;→</td><td align="left">定位到上&#x2F;下一次光标位置</td></tr><tr><td align="left"></td><td align="left">Ctrl+I</td><td align="left">实现接口方法</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+o</td><td align="left">删除没用的import</td></tr><tr><td align="left"></td><td align="left">Ctrl+O</td><td align="left">重写父类方法</td></tr><tr><td align="left"></td><td align="left">Ctrl+W</td><td align="left">选中当前单词</td></tr><tr><td align="left"></td><td align="left">Ctrl+P</td><td align="left">提示参数</td></tr><tr><td align="left"></td><td align="left">Ctrl+Q</td><td align="left">查看方法&#x2F;类的注释文档</td></tr><tr><td align="left"></td><td align="left">Ctrl+Alt+L</td><td align="left">格式化当前模板</td></tr><tr><td align="left"></td><td align="left">Ctrl+&#x2F;</td><td align="left">注释当前行,或选中行</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+&#x2F;</td><td align="left">注释选中部分</td></tr><tr><td align="left"></td><td align="left">&#x2F;**+回车(类&#x2F;方法&#x2F;属性前)</td><td align="left">添加注释</td></tr></tbody></table><h3 id="搜索-替换"><a href="#搜索-替换" class="headerlink" title="搜索&#x2F;替换"></a>搜索&#x2F;替换</h3><table><thead><tr><th align="left">序号</th><th align="left">快捷键组合</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"></td><td align="left">Ctrl+N</td><td align="left">通过类名(文件名)的关键字快速打开文件(仅限.java文件)</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+N</td><td align="left">通过文件名关键字快速打开文件</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+N(两次)</td><td align="left">通过文件名关键字快速打开文件(包括非本项目内文件,如Maven引入的)</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+Alt+N</td><td align="left">通过关键字(包括类名&#x2F;方法名&#x2F;url映射)快速打开文件,定位到类名&#x2F;方法名&#x2F;url映射的方法</td></tr><tr><td align="left"></td><td align="left">Ctrl+F</td><td align="left">搜索关键字(支持正则)在当前文件</td></tr><tr><td align="left"></td><td align="left">F3</td><td align="left">找下一个</td></tr><tr><td align="left"></td><td align="left">Shift+F3</td><td align="left">找上一个</td></tr><tr><td align="left"></td><td align="left">Ctrl+R</td><td align="left">替换关键字(支持正则)在当前文件</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+F</td><td align="left">在所有文件(可以指定过滤文件)中查找关键字(支持正则)</td></tr><tr><td align="left"></td><td align="left">Ctrl+Shift+R</td><td align="left">在所有文件(可以指定过滤文件)中替换关键字(支持正则)</td></tr></tbody></table><h3 id="debugging"><a href="#debugging" class="headerlink" title="debugging"></a>debugging</h3><table><thead><tr><th align="left">序号</th><th align="left">快捷键组合</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"></td><td align="left">F8</td><td align="left">Step over(跳过下一行)</td></tr><tr><td align="left"></td><td align="left">F7</td><td align="left">Step into(跳入当前行调用的方法体内)</td></tr><tr><td align="left"></td><td align="left">Shift+F7</td><td align="left">Smart Step into(跳过)</td></tr></tbody></table><h3 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h3><p>﻿</p><h3 id="ideavim-使用百分号-支持xml的对应标签跳转-51-md-“-51-md”"><a href="#ideavim-使用百分号-支持xml的对应标签跳转-51-md-“-51-md”" class="headerlink" title="ideavim 使用百分号%支持xml的对应标签跳转(#51.md “#51.md”)"></a>ideavim 使用百分号%支持xml的对应标签跳转(#51.md “#51.md”)</h3><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>由于最近几年使用 vim 的频率越来越高, 所以在 idea 中也大量开始使用 vim 技巧, 在一年多前碰到个问题, 终于在最近解决了。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在 idea 中, 在 normal 模式下, 使用 % 不能在匹配标签(xml&#x2F;html等) 之间跳转</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在 <code>~/.ideavimrc</code> 中添加如下设置, 重启 idea 即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> matchit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><h2 id="最后-1"><a href="#最后-1" class="headerlink" title="最后"></a>最后</h2><p>最近会把一些加的 tips 分享出来，大家有什么建议和问题都可以在评论区讨论.</p><p>﻿</p><h3 id="‘-译-Java内存泄露介绍’-52-md-“-52-md”"><a href="#‘-译-Java内存泄露介绍’-52-md-“-52-md”" class="headerlink" title="‘[译]Java内存泄露介绍’(#52.md “#52.md”)"></a>‘[译]Java内存泄露介绍’(#52.md “#52.md”)</h3><p>内存管理是Java最大的优势之一；你可以很简单的创建一个对象，内存的分配和释放则交给Java垃圾收集器处理；然而实际情况并非如此简单，因为在Java应用程序中会频繁的发生内存泄露。</p><p>这个教程将会说明内存泄露是什么？它为什么会发生？我们如何防止它？</p><h2 id="内存泄露是什么"><a href="#内存泄露是什么" class="headerlink" title="内存泄露是什么"></a>内存泄露是什么</h2><p>内存泄露的定义：对象不再被应用程序使用，但是由于它们还在被引用，垃圾收集器不能清除掉它们。</p><p>为了理解这个定义，我们需要理解对象在内存中的状态；下面的图表说明什么是未被使用和未被引用。</p><p>图表中，有被引用的对象和未被引用的对象；未被引用的对象将会被当做垃圾回收，而被引用的对象将不会被当做垃圾回收；未被引用的对象由于没有被其他对象引用，它当然也是不被使用的对象，然而，不被使用的对象不全是不被引用的，它们中的一些是被引用的！这就是内存泄露的来源。</p><h2 id="内存泄露为什么会发生"><a href="#内存泄露为什么会发生" class="headerlink" title="内存泄露为什么会发生"></a>内存泄露为什么会发生</h2><p>让我们来看一下下面这个例子，它说明了内存泄露为什么会发生。在下面这个列子中，对象A引用了对象B，A的生命周期（t1<del>t4）是比B（t2</del>t3）的长；当B不再被应用程序使用时，A仍然在引用它；在这种情况下，垃圾收集器不能从内存中移除B；如果A引用了很多类似B这样的对象，它们不能被回收，又消耗着内存空间的资源，这样很有可能造成内存不足的问题。</p><p>还有一种可能的事情，B又引用了一些对象，这些被B引用的对象也不能被回收，那所有这些不被使用的对象将消耗大量宝贵的内存空间。</p><h2 id="如何防止内存泄露"><a href="#如何防止内存泄露" class="headerlink" title="如何防止内存泄露"></a>如何防止内存泄露</h2><p>下面有一些防止内存泄露的快速实践技巧</p><ol><li>注意集合类，如：HashMap、ArrayList等等，因为它们是在常见的地方发生内存泄露；当它们被<code>static</code>声明时，它们和应用程序的生命周期是一样长的。</li><li>注意事件监听和回调，当一个监听事件被注册，而这个类再也没有被使用时可能会发生内存泄露。</li><li>“如果一个类管理自己的内存，程序员应该被提醒内存泄漏了”，通常，一个对象的指向其他对象的成员变量需要被置为null。</li></ol><p>References：<br><a href="%60(?(exp)yes%7Cno)%60">1</a> Program Creek :<a href="">The Introduction of Java Memory Leaks</a></p><p>﻿</p><h3 id="jQuery之checkbox-radio-select操作-53-md-“-53-md”"><a href="#jQuery之checkbox-radio-select操作-53-md-“-53-md”" class="headerlink" title="jQuery之checkbox|radio|select操作(#53.md “#53.md”)"></a>jQuery之checkbox|radio|select操作(#53.md “#53.md”)</h3><p>jQuery1.6中添加了prop方法,看起来和用起来都和attr方法一样,但是在一些特殊情况下,attribute和properties的区别非常大,在jQuery1.6之前，.attr()方法在获取一些attributes的时候使用了property值，这样会导致一些不一致的行为。在jQuery1.6中，.prop()方法提供了一中明确的获取property值得方式，这样.attr()方法仅返回attributes。 –摘自jQuery API文档</p><!--more --><h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>checkbox<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>3<span class="token punctuation">'</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]"</span><span class="token punctuation">)</span>                    <span class="token comment">//获取所有的checkbox</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]:checked"</span><span class="token punctuation">)</span>            <span class="token comment">//获取所有的被选中的checkbox</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]:not(:checked)"</span><span class="token punctuation">)</span>      <span class="token comment">//获取所有未被选中的checkbox</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token string">":checked"</span><span class="token punctuation">)</span>    <span class="token comment">//获取所有未被选中的checkbox</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]:first"</span><span class="token punctuation">)</span>              <span class="token comment">//获取第一个checkbox的value值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length     <span class="token comment">//获取被选中checkbox的数量</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span>               <span class="token comment">//判断第一个checkbox是否被选中</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checkbox"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>         <span class="token comment">//选中第一个checkbox</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]:not(:checked)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//全选</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]:checkbox"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>     <span class="token comment">//都不选中</span><span class="token comment">//反选</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=checkbox]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="radio"><a href="#radio" class="headerlink" title="radio"></a>radio</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>radio<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>rank<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>radio<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>rank<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>radio<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>rank<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>3<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=radio]"</span><span class="token punctuation">)</span>                 <span class="token comment">//获取所有的radio</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=radio]:checked"</span><span class="token punctuation">)</span>         <span class="token comment">//获取被选中的radio</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=radio]:not(:checkbox)"</span><span class="token punctuation">)</span>  <span class="token comment">//获取所有没有被选中的radio</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=radio]:checked"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">//获取被选中的radio的value值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=radio]:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span>       <span class="token comment">//判断第一个radio是否被选中</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=radio]:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">//选中第一个radio</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>4<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select option:selected"</span><span class="token punctuation">)</span>        <span class="token comment">//获取被选中的option</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token comment">//获取选中option的value值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select option:selected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取被选中的option的text值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select option:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"selected"</span><span class="token punctuation">)</span>           <span class="token comment">//判断第一个option是否被选中</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select option:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"selected"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token comment">//选中第一个option</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select option:selected"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"selected"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">//取消当前选中,然后默认选中第一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="jQuery选择器与节点操作-54-md-“-54-md”"><a href="#jQuery选择器与节点操作-54-md-“-54-md”" class="headerlink" title="jQuery选择器与节点操作(#54.md “#54.md”)"></a>jQuery选择器与节点操作(#54.md “#54.md”)</h3><p>jQuery 是一个 JavaScript 函数库。jQuery的语法设计使得许多操作变得容易，如操作文档对象（document）、选择文档对象模型（DOM）元素、创建动画效果、处理事件、以及开发Ajax程序。jQuery也提供了给开发人员在其上创建插件的能力。这使开发人员可以对底层交互与动画、高级效果和高级主题化的组件进行抽象化。</p><!--more--><h2 id="jQuery获取元素"><a href="#jQuery获取元素" class="headerlink" title="jQuery获取元素"></a>jQuery获取元素</h2><h3 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F;元素选择器 &lt;div &gt;$(&quot;div&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F;id选择器 &lt;div id&#x3D;&#39;id&#39;&gt;$(&quot;#id&quot;) $(&quot;div#id&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="class选择器"><a href="#class选择器" class="headerlink" title="class选择器"></a>class选择器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//class选择器 &lt;div class='class'></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div.class"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>check<span class="token punctuation">'</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>li_01<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>li_02<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>li_03<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//通过属性获取 如果属性值为有特殊字符，一定要加引号</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[type]"</span><span class="token punctuation">)</span>                  <span class="token comment">//获取有type属性的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[type='li_01']"</span><span class="token punctuation">)</span>          <span class="token comment">//获取type值等于'li_01'的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[type!='li_01']"</span><span class="token punctuation">)</span>         <span class="token comment">//获取type值不等于'li_01'的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[type*='li']"</span><span class="token punctuation">)</span>            <span class="token comment">//模糊匹配 获取type值包含'li'的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[type^='li']"</span><span class="token punctuation">)</span>            <span class="token comment">//模糊匹配 获取type值以'li'开始的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[type$='01']"</span><span class="token punctuation">)</span>            <span class="token comment">//模糊匹配 获取type值以'01'结尾的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li[class='check'][type]"</span><span class="token punctuation">)</span> <span class="token comment">//获取多个条件同时满足的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择器"><a href="#选择器" class="headerlink" title="* 选择器"></a>* 选择器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//遍历form下的所有元素,将其margin设置0</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'form *'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'margin'</span><span class="token punctuation">,</span><span class="token string">'0px'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="并列选择器"><a href="#并列选择器" class="headerlink" title="并列选择器"></a>并列选择器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p, div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将p元素和div元素的字体颜色设置为red</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="层叠选择器"><a href="#层叠选择器" class="headerlink" title="层叠选择器"></a>层叠选择器</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>a<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>                  <span class="token comment">&lt;!-- 父级div --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>a1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 子级div1 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>a11<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 孙级div1 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>a2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 子级div2 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>a3<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token comment">&lt;!-- 子级div3 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                <span class="token comment">&lt;!-- 子级span1 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".a div"</span><span class="token punctuation">)</span>       <span class="token comment">//选择class=a的元素下所有的div 即选择到子级div1,2,3 孙级div1</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".a > div"</span><span class="token punctuation">)</span>     <span class="token comment">//选择class=a的元素的所有子div元素, 即选择到子级div1,2,3;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div + span"</span><span class="token punctuation">)</span>   <span class="token comment">//选择所有的div元素的下一个input元素节点,即选择到:子级div3</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".a1 ~ div"</span><span class="token punctuation">)</span>    <span class="token comment">//同胞选择器,返回class为a2的标签元素的所有属于同一个父元素的div标签,即div1,2,3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:first"</span><span class="token punctuation">)</span>     <span class="token comment">//选择所有li元素的第一个</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:last"</span><span class="token punctuation">)</span>      <span class="token comment">//选择所有li元素的最后一个</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:even"</span><span class="token punctuation">)</span>      <span class="token comment">//选择所有li元素的第0,2,4... ...个元素(序号从0开始)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:odd"</span><span class="token punctuation">)</span>       <span class="token comment">//选择所有li元素的第1,3,5... ...个元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:eq(2)"</span><span class="token punctuation">)</span>     <span class="token comment">//选择所有li元素中的第三个(即序号为2)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:gt(3)"</span><span class="token punctuation">)</span>     <span class="token comment">//选择所有li元素中序号大于3的li元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:ll(2)"</span><span class="token punctuation">)</span>     <span class="token comment">//选择所有li元素中序号小于2的li元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type='checkbox']:checked"</span><span class="token punctuation">)</span>        <span class="token comment">//获取所有已被选中的type等于checkbox的input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type='checkbox']:not(:checked)"</span><span class="token punctuation">)</span>  <span class="token comment">//获取所有未被选中的type等于checkbox的input元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:contains('Faker')"</span><span class="token punctuation">)</span>     <span class="token comment">//选择所有div中含有Faker文本的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:empty"</span><span class="token punctuation">)</span>                 <span class="token comment">//选择所有div中为空(不包含任何元素/文本)的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:has('p')"</span><span class="token punctuation">)</span>              <span class="token comment">//选择所有div中包含p元素的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:parent"</span><span class="token punctuation">)</span>                <span class="token comment">//选择所有的含有子元素或文本的div</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可视化过滤器"><a href="#可视化过滤器" class="headerlink" title="可视化过滤器"></a>可视化过滤器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:hidden"</span><span class="token punctuation">)</span>            <span class="token comment">//选择所有被hidden的div元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:not(:hidden)"</span><span class="token punctuation">)</span>      <span class="token comment">//选择所有没有被hidden的div元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:visible"</span><span class="token punctuation">)</span>           <span class="token comment">//所有可视化的div元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div:not(:visible)"</span><span class="token punctuation">)</span>     <span class="token comment">//所有非可视化的div元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子元素过滤器"><a href="#子元素过滤器" class="headerlink" title="子元素过滤器"></a>子元素过滤器</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>d1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>d11<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>d111<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body div:first-child"</span><span class="token punctuation">)</span>  <span class="token comment">//返回所有的body元素下 所有div 为父元素的第一个元素 的元素.</span><span class="token comment">//:first 与 :first-child 的区别用法</span><span class="token comment">//$("body div:first")只匹配到第一个合适的元素 即只匹配到 d1</span><span class="token comment">//$("body div:first-child") 匹配所有合适的元素:d1是body的第一个元素,d11是d1的第一个元素..</span><span class="token comment">//所以匹配到d1,d11,d111</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div span:last-child"</span><span class="token punctuation">)</span>   <span class="token comment">//返回所有的body元素下 所有div 为父元素的最后一个元素 的元素.</span><span class="token comment">//:last 与 :last-child 的区别参考first</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div button:only-child"</span><span class="token punctuation">)</span> <span class="token comment">//如果button是它父级元素的唯一子元素,此button将会被匹配</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表单元素选择器"><a href="#表单元素选择器" class="headerlink" title="表单元素选择器"></a>表单元素选择器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":input"</span><span class="token punctuation">)</span>    <span class="token comment">//选择所有的表单输入元素，包括input, textarea, select 和 button</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":text"</span><span class="token punctuation">)</span>     <span class="token comment">//选择所有的text input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":password"</span><span class="token punctuation">)</span> <span class="token comment">//选择所有的password input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":radio"</span><span class="token punctuation">)</span>    <span class="token comment">//选择所有的radio input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checkbox"</span><span class="token punctuation">)</span> <span class="token comment">//选择所有的checkbox input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":submit"</span><span class="token punctuation">)</span>   <span class="token comment">//选择所有的submit input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":image"</span><span class="token punctuation">)</span>    <span class="token comment">//选择所有的image input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":reset"</span><span class="token punctuation">)</span>    <span class="token comment">//选择所有的reset input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":button"</span><span class="token punctuation">)</span>   <span class="token comment">//选择所有的button input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":file"</span><span class="token punctuation">)</span>     <span class="token comment">//选择所有的file input元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":hidden"</span><span class="token punctuation">)</span>   <span class="token comment">//选择所有类型为hidden的input元素或表单的隐藏域</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表单元素过滤器"><a href="#表单元素过滤器" class="headerlink" title="表单元素过滤器"></a>表单元素过滤器</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":enabled"</span><span class="token punctuation">)</span>               <span class="token comment">//选择所有的可操作的表单元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":disabled"</span><span class="token punctuation">)</span>              <span class="token comment">//选择所有的不可操作的表单元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":checked"</span><span class="token punctuation">)</span>               <span class="token comment">//选择所有的被checked的表单元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"select option:selected"</span><span class="token punctuation">)</span> <span class="token comment">//选择所有的select 的子元素中被selected的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><h3 id="获取和操作节点属性"><a href="#获取和操作节点属性" class="headerlink" title="获取和操作节点属性"></a>获取和操作节点属性</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>index.html<span class="token punctuation">'</span></span> <span class="token attr-name">data-type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>a<span class="token punctuation">'</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>user<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//获取href属性值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span><span class="token string">"about.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置href属性值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//获取data-type属性值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//通过key(color/display/....)获取css值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span><span class="token string">"black"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//通过key/value 设置css属性</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">//获取a的文本节点值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置a的文本节点值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//获取input的value值</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置input的value值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入节点的方法"><a href="#插入节点的方法" class="headerlink" title="插入节点的方法"></a>插入节点的方法</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Faker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".head"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span>  <span class="token comment">//在.head中的最后插入一段html</span><span class="token comment">//结果: &lt;div class="head">&lt;span>Faker&lt;/span>&lt;span>hello&lt;/span>&lt;/div></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">".head"</span><span class="token punctuation">)</span> <span class="token comment">//在.head中的最后插入一段html,</span><span class="token comment">//结果: &lt;div class="head">&lt;span>Faker&lt;/span>&lt;span>hello&lt;/span>&lt;/div></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".head"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prepend</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span>  <span class="token comment">//在.head中的开始插入一段html,</span><span class="token comment">//结果: &lt;div class="head">&lt;span>hello&lt;/span>&lt;span>Faker&lt;/span>&lt;/div></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prependTo</span><span class="token punctuation">(</span><span class="token string">".head"</span><span class="token punctuation">)</span>  <span class="token comment">//在.head中的开始插入一段html,</span><span class="token comment">//结果: &lt;div class="head">&lt;span>hello&lt;/span>&lt;span>Faker&lt;/span>&lt;/div></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".head *:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span>  <span class="token comment">//在.head中的第一个元素后插入一段html,</span><span class="token comment">//结果: &lt;div class="head">&lt;span>Faker&lt;/span>&lt;span>hello&lt;/span>&lt;/div></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertAfter</span><span class="token punctuation">(</span><span class="token string">".head *:first"</span><span class="token punctuation">)</span>  <span class="token comment">//在.head中的第一个元素后插入一段html,</span><span class="token comment">//结果: &lt;div class="head">&lt;span>Faker&lt;/span>&lt;span>hello&lt;/span>&lt;/div></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".head *:first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span>  <span class="token comment">//在.head中的第一个元素前插入一段html,</span><span class="token comment">//结果: &lt;div class="head">&lt;span>hello&lt;/span>&lt;span>Faker&lt;/span>&lt;/div></span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"&lt;span>hello&lt;/span>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span><span class="token string">".head *:first"</span><span class="token punctuation">)</span>  <span class="token comment">//在.head中的第一个元素后插入一段html,</span><span class="token comment">//结果: &lt;div class="head">&lt;span>hello&lt;/span>&lt;span>Faker&lt;/span>&lt;/div></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="load-方法"><a href="#load-方法" class="headerlink" title="$.load()方法"></a>$.load()方法</h3><blockquote><p>在指定位置加载请求回来的html页面</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>head<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".head"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">[</span><span class="token punctuation">,</span>data<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token literal-property property">url</span><span class="token operator">:</span>           请求<span class="token constant">HTML</span>页面的<span class="token constant">URL</span>地址<span class="token function">data</span><span class="token punctuation">(</span>可选<span class="token punctuation">)</span><span class="token operator">:</span>     请求的key<span class="token operator">/</span>value参数<span class="token function">callback</span><span class="token punctuation">(</span>可选<span class="token punctuation">)</span>  请求完成的回调函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="JSP操作记录-55-md-“-55-md”"><a href="#JSP操作记录-55-md-“-55-md”" class="headerlink" title="JSP操作记录(#55.md “#55.md”)"></a>JSP操作记录(#55.md “#55.md”)</h3><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="EL表达式失效"><a href="#EL表达式失效" class="headerlink" title="EL表达式失效"></a>EL表达式失效</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- jsp渲染器不识别el表达式，结果页面展示效果如下 --></span>&#123;person.id&#125; &#123;person.name&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解决方法：</strong><br>在页面内加入下面代码即可</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%@ page isELIgnored="false" %><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map&#125;<span class="token punctuation">"</span></span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>entry<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>out</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;entry.key&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>out</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;entry.value&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">c:</span>forEach</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>out</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;map[key]&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们的 SpringCloud 是部署在 k8s 上的, 当通过 k8s 进行滚动升级时, 会有请求 500 的情况, 不利于用户体验, 严重的可能造成数据错误的问题</p><blockquote><p>k8s 滚动更新策略介绍<br>假设我们要升级的微服务在环境上为3个副本的集群, 升级应用时, 会先启动1个新版本的副本, 然后下线一个旧版本的副本, 之后再启动1个新版本的副本, 一次类推,直到所有旧副本都替换新副本.</p></blockquote><p>通过链路追踪分析, 报错的原因分别由以下两种情况</p><ol><li>SpringCloud 中的微服务在升级过程中, 当旧的微服务中还有没有处理完成的请求时, 就开始关闭动作, 造成请求中断</li><li>当旧应用执行关闭动作时, 已经开始拒绝请求, 但是 nacos 中的路由并没有及时更新, 造成 gateway&#x2F;openfeign 在路由时仍会命中正在关闭的应用, 造成请求报错</li></ol><p>为了解决这个问题, 我们将利用 springboot 的 graceful shutdown 功能和 nacos 的主动下线功能来解决这个问题. 具体思路如下:</p><p>比如当我们执行订单微服务(3个副本)滚动更新时</p><ol><li>先启动一个新版本<code>副本4</code></li><li>然后准备关闭<code>副本1</code>, 在关闭之前先通知 nacos 订单服务的<code>副本1</code>下线, 然后由 nacos 通知给其他应用(nacos2.x 是grpc, 所以通知速度比较快), 这样, 订单服务的<code>副本1</code>就不会再接收到请求, 然后执行 graceful shutdown(springboot 原生支持, 启用方法可以看后面代码), 所有请求处理完成后关闭应用. 这样就完成了 <code>副本1</code> 的关闭</li><li>启动新版本<code>副本5</code></li><li>再优雅关闭<code>副本2</code>(参考第2点<code>副本1</code>的流程)</li><li>然后启动新版本<code>副本6</code></li><li>再优雅关闭<code>副本3</code></li><li>完成了服务不中断的应用升级</li></ol><h2 id="实现关键点"><a href="#实现关键点" class="headerlink" title="实现关键点"></a>实现关键点</h2><p>为了实现上面背景中提到的思路, 主要从一下几个方面入手</p><h3 id="创建从-nacos-中下线副本的API"><a href="#创建从-nacos-中下线副本的API" class="headerlink" title="创建从 nacos 中下线副本的API"></a>创建从 nacos 中下线副本的API</h3><p>我们通过创建自定义名为 <code>deregister</code> 的 <code>endpoint</code> 来通知 <code>nacos</code> 下线副</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span></span><span class="token class-name">NacosDiscoveryProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">NacosRegistration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>nacos<span class="token punctuation">.</span>registry<span class="token punctuation">.</span></span><span class="token class-name">NacosServiceRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span></span><span class="token class-name">Log4j2</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Endpoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ReadOperation</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Endpoint</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"deregister"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Log4j2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LemesNacosServiceDeregisterEndpoint</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosRegistration</span> nacosRegistration<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosServiceRegistry</span> nacosServiceRegistry<span class="token punctuation">;</span>    <span class="token comment">/**     * 从 nacos 中主动下线，用于 k8s 滚动更新时，提前下线分流流量     *     * @param     * @return com.lenovo.lemes.framework.core.util.ResultData&lt;java.lang.String>     * @author Yujie Yang     * @date 4/6/22 2:57 PM     */</span>    <span class="token annotation punctuation">@ReadOperation</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">endpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> serviceName <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> groupName <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> clusterName <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getClusterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ip <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"deregister from nacos, serviceName:&#123;&#125;, groupName:&#123;&#125;, clusterName:&#123;&#125;, ip:&#123;&#125;, port:&#123;&#125;"</span><span class="token punctuation">,</span> serviceName<span class="token punctuation">,</span> groupName<span class="token punctuation">,</span> clusterName<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置服务下线</span>        nacosServiceRegistry<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>nacosRegistration<span class="token punctuation">,</span> <span class="token string">"DOWN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="支持-Graceful-Shutdown"><a href="#支持-Graceful-Shutdown" class="headerlink" title="支持 Graceful Shutdown"></a>支持 Graceful Shutdown</h3><p>由于 springboot 原生支持, 我们只需要在 <code>bootstrap.yaml</code> 中添加一下配置即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token comment"># 开启优雅下线</span>  <span class="token key atrule">shutdown</span><span class="token punctuation">:</span> graceful<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>    <span class="token comment"># 优雅下线超时时间</span>    <span class="token key atrule">timeout-per-shutdown-phase</span><span class="token punctuation">:</span> 5m<span class="token comment"># 暴露 shutdown 接口</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>    <span class="token key atrule">shutdown</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="K8s-配置"><a href="#K8s-配置" class="headerlink" title="K8s 配置"></a>K8s 配置</h3><p>有了上面两个 API, 接下来就配置到 k8s 上</p><ol><li>terminationGracePeriodSeconds 如果关闭应用的时间超过 10 分钟, 则向容器发送 TERM 信号, 防止应用长时间下线不了</li><li>preStop 先执行下线操作, 等待30s, 留够通知到其他应用的时间, 然后执行 graceful shutdown 关闭应用</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token comment">###  '基于 nacos/springcloud/k8s 的不停机服务更新[graceful shutdown]'(#56.md "#56.md")</span><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> lemes<span class="token punctuation">-</span>service<span class="token punctuation">-</span>common  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> lemes<span class="token punctuation">-</span>service<span class="token punctuation">-</span>common<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span>  <span class="token key atrule">selector</span><span class="token punctuation">:</span>    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>      <span class="token key atrule">app</span><span class="token punctuation">:</span> lemes<span class="token punctuation">-</span>service<span class="token punctuation">-</span>common<span class="token comment">#  strategy:</span><span class="token comment">#    type: RollingUpdate</span><span class="token comment">#    rollingUpdate:</span><span class="token comment">##     replicas - maxUnavailable &lt; running num  &lt; replicas + maxSurge</span><span class="token comment">#      maxUnavailable: 1</span><span class="token comment">#      maxSurge: 1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> lemes<span class="token punctuation">-</span>service<span class="token punctuation">-</span>common    <span class="token key atrule">spec</span><span class="token punctuation">:</span><span class="token comment">#      容器重启策略 Never Always OnFailure</span><span class="token comment">#      restartPolicy: Never</span><span class="token comment">#     如果关闭时间超过10分钟， 则向容器发送 TERM 信号</span>      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">600</span>      <span class="token key atrule">affinity</span><span class="token punctuation">:</span>        <span class="token key atrule">podAntiAffinity</span><span class="token punctuation">:</span>          <span class="token key atrule">preferredDuringSchedulingIgnoredDuringExecution</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">podAffinityTerm</span><span class="token punctuation">:</span>                <span class="token key atrule">topologyKey</span><span class="token punctuation">:</span> <span class="token string">"kubernetes.io/hostname"</span>                <span class="token key atrule">labelSelector</span><span class="token punctuation">:</span>                  <span class="token key atrule">matchExpressions</span><span class="token punctuation">:</span>                    <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> app                      <span class="token key atrule">operator</span><span class="token punctuation">:</span> In                      <span class="token key atrule">values</span><span class="token punctuation">:</span>                        <span class="token punctuation">-</span> lemes<span class="token punctuation">-</span>service<span class="token punctuation">-</span>common              <span class="token key atrule">weight</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token comment">#          requiredDuringSchedulingIgnoredDuringExecution:</span><span class="token comment">#            - labelSelector:</span><span class="token comment">#                matchExpressions:</span><span class="token comment">#                  - key: app</span><span class="token comment">#                    operator: In</span><span class="token comment">#                    values:</span><span class="token comment">#                      - lemes-service-common</span><span class="token comment">#              topologyKey: "kubernetes.io/hostname"</span>      <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lemes<span class="token punctuation">-</span>host<span class="token punctuation">-</span>path          <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>            <span class="token key atrule">path</span><span class="token punctuation">:</span> /data/logs            <span class="token key atrule">type</span><span class="token punctuation">:</span> DirectoryOrCreate        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sidecar          <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>      <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lemes<span class="token punctuation">-</span>service<span class="token punctuation">-</span>common          <span class="token key atrule">image</span><span class="token punctuation">:</span> 10.176.66.20<span class="token punctuation">:</span>5000/lemes<span class="token punctuation">-</span>cloud/lemes<span class="token punctuation">-</span>service<span class="token punctuation">-</span>common<span class="token punctuation">-</span>server<span class="token punctuation">:</span>v0.1          <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lemes<span class="token punctuation">-</span>host<span class="token punctuation">-</span>path              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /data/logs            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sidecar              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /sidecar          <span class="token key atrule">ports</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>          <span class="token key atrule">resources</span><span class="token punctuation">:</span><span class="token comment">#           资源通常情况下的占用</span>            <span class="token key atrule">requests</span><span class="token punctuation">:</span>              <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">'2048Mi'</span><span class="token comment">#           资源占用上限</span>            <span class="token key atrule">limits</span><span class="token punctuation">:</span>              <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">'4096Mi'</span>          <span class="token key atrule">livenessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /actuator/health/liveness              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>            <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token comment">#           探针可以连续失败的次数</span>            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token comment">#           探针超时时间</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token comment">#           多久执行一次探针查询</span>            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">startupProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /actuator/health/liveness              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>            <span class="token key atrule">failureThreshold</span><span class="token punctuation">:</span> <span class="token number">30</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>            <span class="token key atrule">httpGet</span><span class="token punctuation">:</span>              <span class="token key atrule">path</span><span class="token punctuation">:</span> /actuator/health/readiness              <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span>            <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>            <span class="token key atrule">timeoutSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>            <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span>          <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>            <span class="token key atrule">preStop</span><span class="token punctuation">:</span>              <span class="token key atrule">exec</span><span class="token punctuation">:</span><span class="token comment">#               应用关闭操作：1. 从 nacos 下线，2. 等待30s, 保证 nacos 通知到其他应用 2.触发 springboot 的 graceful shutdown</span>                <span class="token key atrule">command</span><span class="token punctuation">:</span>                  <span class="token punctuation">-</span> sh                  <span class="token punctuation">-</span> <span class="token punctuation">-</span>c                  <span class="token punctuation">-</span> curl  30;curl <span class="token punctuation">-</span>X POST <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（1）-ls’-57-md-“-57-md”"><a href="#‘每天一个linux命令（1）-ls’-57-md-“-57-md”" class="headerlink" title="‘每天一个linux命令（1）: ls’(#57.md “#57.md”)"></a>‘每天一个linux命令（1）: ls’(#57.md “#57.md”)</h3><p>　　ls命令是linux下最常用的命令。ls命令就是list的缩写，缺省下ls用来打印出当前目录的清单，如果ls指定其他目录，那么就会显示指定目录里的文件及文件夹清单。 通过ls命令不仅可以查看linux文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)、查看目录信息等等。ls命令在日常的linux操作中用的很多!</p><!--more --><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>目录名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>列出目标目录中所有的子目录和文件。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-a,–all</td><td align="left">列出目录下的所有文件，包括以 . 开头的隐含文件</td></tr><tr><td align="left">-A</td><td align="left">同-a，但不列出“.”(表示当前目录)和“..”(表示当前目录的父目录)。</td></tr><tr><td align="left">-c  配合 -lt</td><td align="left">根据 ctime 排序及显示 ctime (文件状态最后更改的时间)配合 -lt：显示 ctime 但根据名称排序否则：根据 ctime 排序</td></tr><tr><td align="left">-C</td><td align="left">每栏由上至下列出项目</td></tr><tr><td align="left">-color[&#x3D;WHEN]</td><td align="left">控制是否使用色彩分辨文件。WHEN 可以是’never’、’always’或’auto’其中之一</td></tr><tr><td align="left">-d,–directory</td><td align="left">将目录象文件一样显示，而不是显示其下的文件。</td></tr><tr><td align="left">-D,–dired</td><td align="left">产生适合 Emacs 的 dired 模式使用的结果</td></tr><tr><td align="left">-f</td><td align="left">对输出的文件不进行排序，-aU 选项生效，-lst 选项失效</td></tr><tr><td align="left">-g</td><td align="left">类似 -l,但不列出所有者</td></tr><tr><td align="left">-G, –no-group</td><td align="left">不列出任何有关组的信息</td></tr><tr><td align="left">-h,–human-readable</td><td align="left">以容易理解的格式列出文件大小 (例如 1K 234M 2G)</td></tr><tr><td align="left">–si</td><td align="left">类似 -h,但文件大小取 1000 的次方而不是 1024</td></tr><tr><td align="left">-H, –dereference-command-line</td><td align="left">使用命令列中的符号链接指示的真正目的地</td></tr><tr><td align="left">–indicator-style&#x3D;&lt;方式&gt;</td><td align="left">指定在每个项目名称后加上指示符号&lt;方式&gt;：none (默认)，classify (-F)，file-type (-p)</td></tr><tr><td align="left">-i, –inode</td><td align="left">印出每个文件的 inode 号</td></tr><tr><td align="left">-I,–ignore&#x3D;样式</td><td align="left">不印出任何符合 shell 万用字符&lt;样式&gt;的项目</td></tr><tr><td align="left">-k</td><td align="left">即 –block-size&#x3D;1K,以 k 字节的形式表示文件的大小</td></tr><tr><td align="left">-l</td><td align="left">除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。</td></tr><tr><td align="left">-L, –dereference</td><td align="left"></td></tr><tr><td align="left">-m</td><td align="left">所有项目以逗号分隔，并填满整行行宽</td></tr><tr><td align="left">-o</td><td align="left">类似 -l,显示文件的除组信息外的详细信息。</td></tr><tr><td align="left">-r, –reverse</td><td align="left">依相反次序排列</td></tr><tr><td align="left">-R, –recursive</td><td align="left">同时列出所有子目录层</td></tr><tr><td align="left">-s,–size</td><td align="left">以块大小为单位列出所有文件的大小</td></tr><tr><td align="left">-S</td><td align="left">根据文件大小排序</td></tr><tr><td align="left">–sort&#x3D;WORD</td><td align="left">可选用的 WORD 和它们代表的相应选项： <br>extension -X status -c<br>none -U time -t<br>size -S atime -u<br>time -t access -u<br>version -v use -u</td></tr><tr><td align="left">-t</td><td align="left">以文件修改时间排序</td></tr><tr><td align="left">-u</td><td align="left">配合 -lt:显示访问时间而且依访问时间排序<br>配合 -l:显示访问时间但根据名称排序<br>否则：根据访问时间排序</td></tr><tr><td align="left">-U</td><td align="left">不进行排序;依文件系统原有的次序列出项目</td></tr><tr><td align="left">-v</td><td align="left">根据版本进行排序</td></tr><tr><td align="left">-w, –width&#x3D;COLS</td><td align="left">自行指定屏幕宽度而不使用目前的数值</td></tr><tr><td align="left">-x</td><td align="left">逐行列出项目而不是逐栏列出</td></tr><tr><td align="left">-X</td><td align="left">根据扩展名排序</td></tr><tr><td align="left">-1</td><td align="left">每行只列出一个文件</td></tr><tr><td align="left">–help</td><td align="left">显示此帮助信息并离开</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息并离开</td></tr></tbody></table><h3 id="常用范例"><a href="#常用范例" class="headerlink" title="常用范例"></a>常用范例</h3><p><strong><code>例一</code>：列出&#x2F;home&#x2F;faker&#x2F; 文件夹下的所有文件和目录的详细资料</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">-R</span> /home/faker$ <span class="token function">ls</span> <span class="token parameter variable">-lR</span> /home/faker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：列出当前目录中所有以“t”开头的目录的详细内容，可以使用如下命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> t*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：只列出文件下的子目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-F</span> /opt/soft <span class="token operator">|</span><span class="token function">grep</span> /$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：列出文件下的子目录详细情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> /opt/soft <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"^d"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：列出目前工作目录下所有名称是s 开头的文件，愈新的排愈后面，可以使用如下命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-ltr</span> s*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：列出目前工作目录下所有档案及目录;目录于名称后加”&#x2F;“, 可执行档于名称后加<code>*</code></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-AF</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：计算当前目录下的文件数和目录数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> * <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"^-"</span><span class="token operator">|</span><span class="token function">wc</span> <span class="token parameter variable">-l</span>    目录个数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例八</code>：在ls中列出文件的绝对路径</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">"s:^:<span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>/:"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例九</code>：列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token environment constant">$PWD</span> <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">ls</span> <span class="token parameter variable">-ld</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十</code>：列出当前目录下的所有文件（包括隐藏文件）的绝对路径， 对目录不做递归</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token environment constant">$PWD</span> <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">ls</span> <span class="token parameter variable">-ld</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十</code>：递归列出当前目录下的所有文件（包括隐藏文件）的绝对路径</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token environment constant">$PWD</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">ls</span> <span class="token parameter variable">-ld</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十</code>：指定文件时间输出格式</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-tl</span> --time-style<span class="token operator">=</span>full-iso$ <span class="token function">ls</span> <span class="token parameter variable">-ctl</span> --time-style<span class="token operator">=</span>long-iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2016</span>-08-05 <span class="token number">22</span>:17:06.020535551 +0800<span class="token number">2016</span>-10-29 <span class="token number">12</span>:03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（10）-cat’-58-md-“-58-md”"><a href="#‘每天一个linux命令（10）-cat’-58-md-“-58-md”" class="headerlink" title="‘每天一个linux命令（10）: cat’(#58.md “#58.md”)"></a>‘每天一个linux命令（10）: cat’(#58.md “#58.md”)</h3><p>　　cat命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</p><!--more --><h3 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-1"><a href="#命令功能-1" class="headerlink" title="命令功能"></a>命令功能</h3><p><strong>cat主要有三大功能</strong></p><ol><li>一次显示整个文件:<code>cat filename</code></li><li>从键盘创建一个文件:<code>cat &gt; filename</code> 只能创建新文件,不能编辑已有文件.</li><li>将几个文件合并为一个文件:<code>cat file1 file2 &gt; file</code></li></ol><h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-A, –show-all</td><td align="left">等价于 -vET</td></tr><tr><td align="left">-b, –number-nonblank</td><td align="left">对非空输出行编号</td></tr><tr><td align="left">-e</td><td align="left">等价于 -vE</td></tr><tr><td align="left">-E, –show-ends</td><td align="left">在每行结束处显示 $</td></tr><tr><td align="left">-n, –number</td><td align="left">对输出的所有行编号,由1开始对所有输出的行数编号</td></tr><tr><td align="left">-s, –squeeze-blank</td><td align="left">有连续两行以上的空白行，就代换为一行的空白行</td></tr><tr><td align="left">-t</td><td align="left">与 -vT 等价</td></tr><tr><td align="left">-T, –show-tabs</td><td align="left">将跳格字符显示为 ^I</td></tr><tr><td align="left">-u</td><td align="left">(被忽略)</td></tr><tr><td align="left">-v, –show-nonprinting</td><td align="left">使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</td></tr></tbody></table><h3 id="命令实例"><a href="#命令实例" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token parameter variable">-n</span> log2012.log log2013.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token parameter variable">-b</span> log2012.log log2013.log log.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：把 log2012.log 的文件内容加上行号后输入 log.log 这个文件里</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token parameter variable">-n</span> log2012.log <span class="token operator">></span> log.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：使用here doc来生成文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token operator">></span>log.txt <span class="token operator">&lt;&lt;</span>EOF<span class="token operator">></span> Hello<span class="token operator">></span> World<span class="token operator">></span> Linux<span class="token operator">></span> <span class="token assign-left variable"><span class="token environment constant">PWD</span></span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token operator">></span> EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例五</code>：tac (反向列示)</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tac</span> log.txt<span class="token assign-left variable"><span class="token environment constant">PWD</span></span><span class="token operator">=</span>/opt/soft/testLinuxWorldHello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>tac 是将 cat 反写过来，所以他的功能就跟 cat 相反， cat 是由第一行到最后一行连续显示在萤幕上，而 tac 则是由最后一行到第一行反向在萤幕上显示出来！</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（11）-nl’-59-md-“-59-md”"><a href="#‘每天一个linux命令（11）-nl’-59-md-“-59-md”" class="headerlink" title="‘每天一个linux命令（11）: nl’(#59.md “#59.md”)"></a>‘每天一个linux命令（11）: nl’(#59.md “#59.md”)</h3><p>　　nl命令在linux系统中用来计算文件中行号。nl 可以将输出的文件内容自动的加上行号！其默认的结果与 cat -n 有点不太一样， nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。</p><!--more --><h3 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nl</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-2"><a href="#命令功能-2" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　nl 命令读取 File 参数（缺省情况下标准输入），计算输入中的行号，将计算过的行号写入标准输出。 在输出中，nl 命令根据您在命令行中指定的标志来计算左边的行。 输入文本必须写在逻辑页中。每个逻辑页有头、主体和页脚节（可以有空节）。 除非使用 -p 标志，nl 命令在每个逻辑页开始的地方重新设置行号。 可以单独为头、主体和页脚节设置行计算标志（例如，头和页脚行可以被计算然而文本行不能）。</p><h3 id="命令参数-1"><a href="#命令参数-1" class="headerlink" title="命令参数"></a>命令参数</h3><p>| 种类 | 参数 | 描述     |<br>| :-| :—- |<br>| -b |-b a | 表示不论是否为空行，也同样列出行号(类似 cat -n) |<br>|  |-b t | 如果有空行，空的那一行不要列出行号(默认值) |<br>| -n |-n ln | 行号在萤幕的最左方显示 |<br>|  |-n rn | 行号在自己栏位的最右方显示，且不加 0 |<br>|  |-n rz | 行号在自己栏位的最右方显示，且加 0 |<br>| -w |-w | 行号栏位的占用的位数 |<br>| -p |-p | 在逻辑定界符处不重新开始计算 |</p><h3 id="命令实例-1"><a href="#命令实例-1" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：用 nl 列出 log2012.log 的内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 文件中的空白行，nl 不会加上行号</span>$ <span class="token function">nl</span> log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：用 nl 列出 log2012.log 的内容，空本行也加上行号</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nl</span> <span class="token parameter variable">-b</span> a log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：让行号前面自动补上0,统一输出格式</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nl</span> <span class="token parameter variable">-b</span> a <span class="token parameter variable">-n</span> rz log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>nl -b a -n rz 命令行号默认为六位，要调整位数可以加上参数 -w 3 调整为3位。</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（12）-more’-60-md-“-60-md”"><a href="#‘每天一个linux命令（12）-more’-60-md-“-60-md”" class="headerlink" title="‘每天一个linux命令（12）: more’(#60.md “#60.md”)"></a>‘每天一个linux命令（12）: more’(#60.md “#60.md”)</h3><p>　　more命令，功能类似 cat ，cat命令是整个文件的内容从上到下显示在屏幕上。 more会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能 。more命令从前向后读取文件，因此在启动时就加载整个文件。</p><!--more --><h3 id="命令格式-3"><a href="#命令格式-3" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">more</span> <span class="token punctuation">[</span>-dlfpcsu <span class="token punctuation">]</span> <span class="token punctuation">[</span>-num <span class="token punctuation">]</span> <span class="token punctuation">[</span>+/ pattern<span class="token punctuation">]</span> <span class="token punctuation">[</span>+ linenum<span class="token punctuation">]</span> <span class="token punctuation">[</span>file <span class="token punctuation">..</span>. <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-3"><a href="#命令功能-3" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　more命令和cat的功能一样都是查看文件里的内容，但有所不同的是more可以按页来查看文件的内容，还支持直接跳转行等功能。</p><h3 id="命令参数-2"><a href="#命令参数-2" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+n</td><td align="left">从笫n行开始显示</td></tr><tr><td align="left">-n</td><td align="left">定义屏幕大小为n行</td></tr><tr><td align="left">+&#x2F;pattern</td><td align="left">每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示</td></tr><tr><td align="left">-c</td><td align="left">从顶部清屏，然后显示</td></tr><tr><td align="left">-d</td><td align="left">提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</td></tr><tr><td align="left">-l</td><td align="left">忽略Ctrl+l（换页）字符</td></tr><tr><td align="left">-p</td><td align="left">通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</td></tr><tr><td align="left">-s</td><td align="left">把连续的多个空行显示为一行</td></tr><tr><td align="left">-u</td><td align="left">把文件内容中的下画线去掉</td></tr></tbody></table><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Enter</td><td align="left">向下n行，需要定义。默认为1行</td></tr><tr><td align="left">Ctrl+F</td><td align="left">向下滚动一屏</td></tr><tr><td align="left">空格键</td><td align="left">向下滚动一屏</td></tr><tr><td align="left">Ctrl+B</td><td align="left">返回上一屏</td></tr><tr><td align="left">&#x3D;</td><td align="left">输出当前行的行号</td></tr><tr><td align="left">：f</td><td align="left">输出文件名和当前行的行号</td></tr><tr><td align="left">V</td><td align="left">调用vi编辑器</td></tr><tr><td align="left">!命令</td><td align="left">调用Shell，并执行命令</td></tr><tr><td align="left">q</td><td align="left">退出more</td></tr></tbody></table><h3 id="命令实例-2"><a href="#命令实例-2" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：显示文件中从第3行起的内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">more</span> +3 log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：从文件中查找第一个出现”day3”字符串的行，并从该处前两行开始显示输出</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">more</span> +/day3 log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：设定每屏显示行数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">more</span> <span class="token parameter variable">-5</span> log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：列一个目录下的文件，由于内容太多，我们应该学会用more来分页显示。这得和管道 | 结合起来</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-l</span>  <span class="token operator">|</span> <span class="token function">more</span> <span class="token parameter variable">-5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong>每页显示5个文件信息，按 Ctrl+F 或者 空格键 将会显示下5条文件信息。</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（13）-less’-61-md-“-61-md”"><a href="#‘每天一个linux命令（13）-less’-61-md-“-61-md”" class="headerlink" title="‘每天一个linux命令（13）: less’(#61.md “#61.md”)"></a>‘每天一个linux命令（13）: less’(#61.md “#61.md”)</h3><p>　　less 工具也是对文件或其它输出进行分页显示的工具，应该说是linux正统查看文件内容的工具，功能极其强大。less 的用法比起 more 更加的有弹性。在 more 的时候，我们并没有办法向前面翻， 只能往后面看，但若使用了 less 时，就可以使用 [pageup] [pagedown] 等按键的功能来往前往后翻看文件，更容易用来查看一个文件的内容！除此之外，在 less 里头可以拥有更多的搜索功能，不止可以向下搜，也可以向上搜。</p><!--more --><h3 id="命令格式-4"><a href="#命令格式-4" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">less</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>  文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-4"><a href="#命令功能-4" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><h3 id="命令参数-3"><a href="#命令参数-3" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">&lt;缓冲区大小&gt; 设置缓冲区的大小</td></tr><tr><td align="left">-e</td><td align="left">当文件显示结束后，自动离开</td></tr><tr><td align="left">-f</td><td align="left">强迫打开特殊文件，例如外围设备代号、目录和二进制文件</td></tr><tr><td align="left">-g</td><td align="left">只标志最后搜索的关键词</td></tr><tr><td align="left">-i</td><td align="left">忽略搜索时的大小写</td></tr><tr><td align="left">-m</td><td align="left">显示类似more命令的百分比</td></tr><tr><td align="left">-N</td><td align="left">显示每行的行号</td></tr><tr><td align="left">-o &lt;文件名&gt;</td><td align="left">将less 输出的内容在指定文件中保存起来</td></tr><tr><td align="left">-Q</td><td align="left">不使用警告音</td></tr><tr><td align="left">-s</td><td align="left">显示连续空行为一行</td></tr><tr><td align="left">-S</td><td align="left">行过长时间将超出部分舍弃</td></tr><tr><td align="left">-x &lt;数字&gt;</td><td align="left">将“tab”键显示为规定的数字空格</td></tr><tr><td align="left">&#x2F;字符串</td><td align="left">向下搜索“字符串”的功能</td></tr><tr><td align="left">?字符串</td><td align="left">向上搜索“字符串”的功能</td></tr><tr><td align="left">n</td><td align="left">重复前一个搜索（与 &#x2F; 或 ? 有关）</td></tr><tr><td align="left">N</td><td align="left">反向重复前一个搜索（与 &#x2F; 或 ? 有关）</td></tr><tr><td align="left">b</td><td align="left">向后翻一页</td></tr><tr><td align="left">d</td><td align="left">向后翻半页</td></tr><tr><td align="left">h</td><td align="left">显示帮助界面</td></tr><tr><td align="left">Q</td><td align="left">退出less 命令</td></tr><tr><td align="left">u</td><td align="left">向前滚动半页</td></tr><tr><td align="left">y</td><td align="left">向前滚动一行</td></tr><tr><td align="left">空格键</td><td align="left">滚动一行</td></tr><tr><td align="left">回车键</td><td align="left">滚动一页</td></tr><tr><td align="left">[pagedown]</td><td align="left">向下翻动一页</td></tr><tr><td align="left">[pageup]</td><td align="left">向上翻动一页</td></tr></tbody></table><h3 id="常用操作-1"><a href="#常用操作-1" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="全屏导航"><a href="#全屏导航" class="headerlink" title="全屏导航"></a>全屏导航</h4><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ctrl + F</td><td align="left">向前移动一屏</td></tr><tr><td align="left">ctrl + B</td><td align="left">向后移动一屏</td></tr><tr><td align="left">ctrl + D</td><td align="left">向前移动半屏</td></tr><tr><td align="left">ctrl + U</td><td align="left">向后移动半屏</td></tr></tbody></table><h4 id="单行导航"><a href="#单行导航" class="headerlink" title="单行导航"></a>单行导航</h4><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">j</td><td align="left">向前移动一行</td></tr><tr><td align="left">k</td><td align="left">向后移动一行</td></tr></tbody></table><h4 id="其他导航"><a href="#其他导航" class="headerlink" title="其他导航"></a>其他导航</h4><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">G</td><td align="left">移动到最后一行</td></tr><tr><td align="left">g</td><td align="left">移动到第一行</td></tr><tr><td align="left">q &#x2F; ZZ</td><td align="left">退出 less 命令</td></tr></tbody></table><h4 id="其它有用的命令"><a href="#其它有用的命令" class="headerlink" title="其它有用的命令"></a>其它有用的命令</h4><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">v</td><td align="left">使用配置的编辑器编辑当前文件</td></tr><tr><td align="left">h</td><td align="left">显示 less 的帮助文档</td></tr><tr><td align="left">&amp;pattern</td><td align="left">仅显示匹配模式的行，而不是整个文件</td></tr></tbody></table><h4 id="标记导航"><a href="#标记导航" class="headerlink" title="标记导航"></a>标记导航</h4><blockquote><p>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置</p></blockquote><table><thead><tr><th align="left">操作</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ma</td><td align="left">使用 a 标记文本的当前位置</td></tr><tr><td align="left">‘a</td><td align="left">导航到标记 a 处</td></tr></tbody></table><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查看文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">less</span> log2013.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：ps查看进程信息并通过less分页显示</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span><span class="token function">less</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：查看命令历史使用记录并通过less分页显示</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">history</span> <span class="token operator">|</span> <span class="token function">less</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：浏览多个文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ Less log2013.log log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>输入 ：n后，切换到 log2014.log<br>输入 ：p 后，切换到log2013.log</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（14）-head’-62-md-“-62-md”"><a href="#‘每天一个linux命令（14）-head’-62-md-“-62-md”" class="headerlink" title="‘每天一个linux命令（14）: head’(#62.md “#62.md”)"></a>‘每天一个linux命令（14）: head’(#62.md “#62.md”)</h3><p>　　head 与 tail 就像它的名字一样的浅显易懂，它是用来显示开头或结尾某个数量的文字区块，head 用来显示档案的开头至标准输出中，而 tail 想当然尔就是看档案的结尾。</p><!--more --><h3 id="命令格式-5"><a href="#命令格式-5" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">head</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span class="token punctuation">..</span>.  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-5"><a href="#命令功能-5" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　head 用来显示档案的开头至标准输出中，默认head命令打印其相应文件的开头10行。</p><h3 id="命令参数-4"><a href="#命令参数-4" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-q</td><td align="left">隐藏文件名</td></tr><tr><td align="left">-v</td><td align="left">显示文件名</td></tr><tr><td align="left">-c&lt;字节&gt;</td><td align="left">显示字节数</td></tr><tr><td align="left">-n&lt;行数&gt;</td><td align="left">显示的行数</td></tr></tbody></table><h3 id="使用实例-1"><a href="#使用实例-1" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示文件的前n行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">5</span> log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：显示文件前n个字节</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">head</span> <span class="token parameter variable">-c</span> <span class="token number">20</span> log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：文件的除了最后n个字节以外的内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">head</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-32</span> log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：输出文件除了最后n行的全部内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-6</span> log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（15）-tail’-63-md-“-63-md”"><a href="#‘每天一个linux命令（15）-tail’-63-md-“-63-md”" class="headerlink" title="‘每天一个linux命令（15）: tail’(#63.md “#63.md”)"></a>‘每天一个linux命令（15）: tail’(#63.md “#63.md”)</h3><p>　　tail 命令从指定点开始将文件写到标准输出.使用tail命令的-f选项可以方便的查阅正在改变的日志文件,tail -f filename会把filename里最尾部的内容显示在屏幕上,并且不但刷新,使你看到最新的文件内容.</p><!--more --><h3 id="命令格式-6"><a href="#命令格式-6" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tail<span class="token punctuation">[</span>必要参数<span class="token punctuation">]</span><span class="token punctuation">[</span>选择参数<span class="token punctuation">]</span><span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-6"><a href="#命令功能-6" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><h3 id="命令参数-5"><a href="#命令参数-5" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-f</td><td align="left">循环读取</td></tr><tr><td align="left">-q</td><td align="left">不显示处理信息</td></tr><tr><td align="left">-v</td><td align="left">显示详细的处理信息</td></tr><tr><td align="left">-c&lt;数目&gt;</td><td align="left">显示的字节数</td></tr><tr><td align="left">-n&lt;行数&gt;</td><td align="left">显示行数</td></tr><tr><td align="left">–pid&#x3D;PID</td><td align="left">与-f合用,表示在进程ID,PID死掉之后结束</td></tr><tr><td align="left">-q, –quiet, –silent</td><td align="left">从不输出给出文件名的首部</td></tr><tr><td align="left">-s, –sleep-interval&#x3D;S</td><td align="left">与-f合用,表示在每次反复的间隔休眠S秒</td></tr></tbody></table><h3 id="使用实例-2"><a href="#使用实例-2" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示文件末尾内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示文件最后5行内容</span>$ <span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">5</span> log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：循环查看文件内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tail</span> <span class="token parameter variable">-f</span> test.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：从第5行开始显示文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tail</span> <span class="token parameter variable">-n</span> +5 log2014.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（16）-which’-64-md-“-64-md”"><a href="#‘每天一个linux命令（16）-which’-64-md-“-64-md”" class="headerlink" title="‘每天一个linux命令（16）: which’(#64.md “#64.md”)"></a>‘每天一个linux命令（16）: which’(#64.md “#64.md”)</h3><p>　　我们经常在linux要查找某个文件，但不知道放在哪里了，可以使用下面的一些命令来搜索：<br><code>which</code>  查看可执行文件的位置。<br><code>whereis</code> 查看文件的位置。<br><code>locate</code>   配合数据库查看文件位置。<br><code>find</code>   实际搜寻硬盘查询文件名称。<br>　　which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p><!--more --><h3 id="命令格式-7"><a href="#命令格式-7" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">which</span> 可执行文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-7"><a href="#命令功能-7" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　which指令会在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。</p><h3 id="命令参数-6"><a href="#命令参数-6" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-n</td><td align="left">指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名</td></tr><tr><td align="left">-p</td><td align="left">与-n参数相同，但此处的包括了文件的路径</td></tr><tr><td align="left">-w</td><td align="left">指定输出时栏位的宽度</td></tr><tr><td align="left">-V</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例-3"><a href="#使用实例-3" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找文件、显示命令路径</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># which 是根据使用者所配置的 PATH 变量内的目录去搜寻可运行档的！</span><span class="token comment"># 所以，不同的 PATH 配置内容所找到的命令当然不一样的！</span>$ <span class="token function">which</span> <span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例二</code>：用 which 去找出 which</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 竟然会有两个 which ，其中一个是 alias 这就是所谓的『命令别名』，意思是输入 which 会等於后面接的那串命令！</span>$ <span class="token function">which</span> <span class="token function">which</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：找出 cd 这个命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cd 这个常用的命令竟然找不到啊！为什么呢？这是因为 cd 是bash 内建的命令！</span><span class="token comment"># 但是 which 默认是找 PATH 内所规范的目录，所以当然一定找不到的！</span>$ <span class="token function">which</span> <span class="token builtin class-name">cd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（17）-whereis’-65-md-“-65-md”"><a href="#‘每天一个linux命令（17）-whereis’-65-md-“-65-md”" class="headerlink" title="‘每天一个linux命令（17）: whereis’(#65.md “#65.md”)"></a>‘每天一个linux命令（17）: whereis’(#65.md “#65.md”)</h3><p>　　whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。</p><!--more --><p>　　和find相比，whereis查找的速度非常快，这是因为linux系统会将 系统内的所有文件都记录在一个数据库文件中，当使用whereis和下面即将介绍的locate时，会从数据库中查找数据，而不是像find命令那样，通 过遍历硬盘来查找，效率自然会很高。</p><p>　　但是该数据库文件并不是实时更新，默认情况下时一星期更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。</p><h3 id="命令格式-8"><a href="#命令格式-8" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">whereis</span> <span class="token punctuation">[</span>-bmsu<span class="token punctuation">]</span> <span class="token punctuation">[</span>BMS 目录名 <span class="token parameter variable">-f</span> <span class="token punctuation">]</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-8"><a href="#命令功能-8" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　whereis命令是定位可执行文件、源代码文件、帮助文件在文件系统中的位置。这些文件的属性应属于原始代码，二进制文件，或是帮助文件。whereis 程序还具有搜索源代码、指定备用搜索路径和搜索不寻常项的能力。</p><h3 id="命令参数-7"><a href="#命令参数-7" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">定位可执行文件</td></tr><tr><td align="left">-m</td><td align="left">定位帮助文件</td></tr><tr><td align="left">-s</td><td align="left">定位源代码文件</td></tr><tr><td align="left">-u</td><td align="left">搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件</td></tr><tr><td align="left">-B</td><td align="left">指定搜索可执行文件的路径</td></tr><tr><td align="left">-M</td><td align="left">指定搜索帮助文件的路径</td></tr><tr><td align="left">-S</td><td align="left">指定搜索源代码文件的路径</td></tr></tbody></table><h3 id="使用实例-4"><a href="#使用实例-4" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：将和git文件相关的文件都查找出来</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">whereis</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：只将二进制文件 查找出来</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">whereis</span> <span class="token parameter variable">-b</span> svn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>whereis -m svn</code> 查出说明文档路径，<code>whereis -s svn</code> 找source源文件</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（18）-locate’-66-md-“-66-md”"><a href="#‘每天一个linux命令（18）-locate’-66-md-“-66-md”" class="headerlink" title="‘每天一个linux命令（18）: locate’(#66.md “#66.md”)"></a>‘每天一个linux命令（18）: locate’(#66.md “#66.md”)</h3><p>　　locate 让使用者可以很快速的搜寻档案系统内是否有指定的档案。其方法是先建立一个包括系统内所有档案名称及路径的数据库，之后当寻找时就只需查询这个数据库，而不必实际深入档案系统之中了。在一般的 distribution 之中，数据库的建立都被放在 crontab 中自动执行。</p><!--more --><h3 id="命令格式-9"><a href="#命令格式-9" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">locate</span> <span class="token punctuation">[</span>选择参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>样式<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-9"><a href="#命令功能-9" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　locate命令可以在搜寻数据库时快速找到档案，数据库由updatedb程序来更新，updatedb是由cron daemon周期性建立的，locate命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是locate所找到的档案若是最近才建立或 刚更名的，可能会找不到，在内定值中，updatedb每天会跑一次，可以由修改crontab来更新设定值。(etc&#x2F;crontab)</p><p>　　locate指定用在搜寻符合条件的档案，它会去储存档案与目录名称的数据库内，寻找合乎范本样式条件的档案或目录录，可以使用特殊字元（如<code>*</code> 或 <code>?</code>等）来指定范本样式，如指定范本为<code>kcpa*ner</code>, locate会找出所有起始字串为kcpa且结尾为ner的档案或目录，如名称为kcpartner若目录录名称为kcpa_ner则会列出该目录下包括 子目录在内的所有档案。</p><p>　　locate指令和find找寻档案的功能类似，但locate是透过update程序将硬盘中的所有档案和目录资料先建立一个索引数据库，在 执行loacte时直接找该索引，查询速度会较快，索引数据库一般是由操作系统管理，但也可以直接下达update强迫系统立即修改索引数据库。</p><h3 id="命令参数-8"><a href="#命令参数-8" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-e</td><td align="left">将排除在寻找的范围之外</td></tr><tr><td align="left">-1</td><td align="left">如果 是 1．则启动安全模式。在安全模式下，使用者不会看到权限无法看到的档案。这会始速度减慢，因为 locate 必须至实际的档案系统中取得档案的权限资料</td></tr><tr><td align="left">-f</td><td align="left">将特定的档案系统排除在外，例如我们没有到理要把 proc 档案系统中的档案放在资料库中</td></tr><tr><td align="left">-q</td><td align="left">安静模式，不会显示任何错误讯息</td></tr><tr><td align="left">-n</td><td align="left">至多显示 n个输出</td></tr><tr><td align="left">-r</td><td align="left">使用正规运算式 做寻找的条件</td></tr><tr><td align="left">-o</td><td align="left">指定资料库存的名称</td></tr><tr><td align="left">-d</td><td align="left">指定资料库的路径</td></tr><tr><td align="left">-h</td><td align="left">显示辅助讯息</td></tr><tr><td align="left">-V</td><td align="left">显示程式的版本讯息</td></tr></tbody></table><h3 id="使用实例-5"><a href="#使用实例-5" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找和pwd相关的所有文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">locate</span> <span class="token builtin class-name">pwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：搜索etc目录下所有以sh开头的文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">locate</span> /etc/sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（19）-find命令概览’-67-md-“-67-md”"><a href="#‘每天一个linux命令（19）-find命令概览’-67-md-“-67-md”" class="headerlink" title="‘每天一个linux命令（19）: find命令概览’(#67.md “#67.md”)"></a>‘每天一个linux命令（19）: find命令概览’(#67.md “#67.md”)</h3><p>　　Linux下find命令在目录结构中搜索文件，并执行指定的操作。Linux下find命令提供了相当多的查找条件，功能很强大。由于find具有强大的功能，所以它的选项也很多，其中大部分选项都值得我们花时间来了解一下。即使系统中含有网络文件系统( NFS)，find命令在该文件系统中同样有效，只你具有相应的权限。 在运行一个非常消耗资源的find命令时，很多人都倾向于把它放在后台执行，因为遍历一个大的文件系统可能会花费很长的时间(这里是指30G字节以上的文件系统)。</p><!--more --><h3 id="命令格式-10"><a href="#命令格式-10" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> pathname <span class="token parameter variable">-options</span> <span class="token punctuation">[</span>-print <span class="token parameter variable">-exec</span> <span class="token parameter variable">-ok</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-10"><a href="#命令功能-10" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用于在文件树种查找文件，并作出相应的处理</p><h3 id="命令参数-9"><a href="#命令参数-9" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">pathname</td><td align="left">find命令所查找的目录路径。例如用.来表示当前目录，用&#x2F;来表示系统根目录</td></tr><tr><td align="left">-print</td><td align="left">find命令将匹配的文件输出到标准输出</td></tr><tr><td align="left">-exec</td><td align="left">find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为’command’ {  } ;，注意{   }和\；之间的空格</td></tr><tr><td align="left">-ok</td><td align="left">和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行</td></tr></tbody></table><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-name</td><td align="left">按照文件名查找文件</td></tr><tr><td align="left">-perm</td><td align="left">按照文件权限来查找文件</td></tr><tr><td align="left">-prune</td><td align="left">使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用-depth选项，那么-prune将被find命令忽略</td></tr><tr><td align="left">-user</td><td align="left">按照文件属主来查找文件</td></tr><tr><td align="left">-group</td><td align="left">按照文件所属的组来查找文件</td></tr><tr><td align="left">-mtime -n +n</td><td align="left">按照文件的更改时间来查找文件， - n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前。<br>find命令还有-atime和-ctime 选项，但它们都和-m time选项</td></tr><tr><td align="left">-nogroup</td><td align="left">查找无有效所属组的文件，即该文件所属的组在&#x2F;etc&#x2F;groups中不存在</td></tr><tr><td align="left">-nouser</td><td align="left">查找无有效属主的文件，即该文件的属主在&#x2F;etc&#x2F;passwd中不存在</td></tr><tr><td align="left">-newer file1 ! file2</td><td align="left">查找更改时间比文件file1新但比文件file2旧的文件</td></tr><tr><td align="left">-type</td><td align="left">查找某一类型的文件,诸如：<br>b - 块设备文件<br>d - 目录<br>c - 字符设备文件<br>p - 管道文件<br>l - 符号链接文件<br>f - 普通文件</td></tr><tr><td align="left">-size n：[c]</td><td align="left">查找文件长度为n块的文件，带有c时表示文件长度以字节计。-depth：在查找文件时，首先查找当前目录中的文件，然后再在其子目录中查找</td></tr><tr><td align="left">-fstype</td><td align="left">查找位于某一类型文件系统中的文件，这些文件系统类型通常可以在配置文件&#x2F;etc&#x2F;fstab中找到，该配置文件中包含了本系统中有关文件系统的信息</td></tr><tr><td align="left">-mount</td><td align="left">在查找文件时不跨越文件系统mount点</td></tr><tr><td align="left">-follow</td><td align="left">如果find命令遇到符号链接文件，就跟踪至链接所指向的文件</td></tr><tr><td align="left">-cpio</td><td align="left">对匹配的文件使用cpio命令，将这些文件备份到磁带设备中</td></tr><tr><td align="left">-amin n</td><td align="left">查找系统中最后N分钟访问的文件</td></tr><tr><td align="left">-atime n</td><td align="left">查找系统中最后n*24小时访问的文件</td></tr><tr><td align="left">-cmin n</td><td align="left">查找系统中最后N分钟被改变文件状态的文件</td></tr><tr><td align="left">-ctime n</td><td align="left">查找系统中最后n*24小时被改变文件状态的文件</td></tr><tr><td align="left">-mmin n</td><td align="left">查找系统中最后N分钟被改变文件数据的文件</td></tr><tr><td align="left">-mtime n</td><td align="left">查找系统中最后n*24小时被改变文件数据的文件</td></tr></tbody></table><h3 id="使用实例-6"><a href="#使用实例-6" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找指定时间内修改过的文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找48小时内修改过的文件</span>$ <span class="token function">find</span> <span class="token parameter variable">-atime</span> <span class="token parameter variable">-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：根据关键字查找</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录查找一.log结尾的文件。 ". "代表当前目录</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：按照目录或文件的权限来查找文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找/opt/soft/test/目录下 权限为 777的文件</span>$ <span class="token function">find</span> /opt/soft/test/ <span class="token parameter variable">-perm</span> <span class="token number">777</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例四</code>：按类型查找</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找当目录，以.log结尾的普通文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例五</code>：查找当前所有目录并排序</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> d <span class="token operator">|</span> <span class="token function">sort</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：按大小查找文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找当前目录大于1K的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-size</span> +1000c <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（2）-cd’-68-md-“-68-md”"><a href="#‘每天一个linux命令（2）-cd’-68-md-“-68-md”" class="headerlink" title="‘每天一个linux命令（2）: cd’(#68.md “#68.md”)"></a>‘每天一个linux命令（2）: cd’(#68.md “#68.md”)</h3><p>　　Linux cd 命令可以说是Linux中最基本的命令语句，其他的命令语句要进行操作，都是建立在使用 cd 命令上的。所以，学习Linux 常用命令，首先就要学好 cd 命令的使用方法技巧。</p><!--more--><h3 id="命令格式-11"><a href="#命令格式-11" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token punctuation">[</span>目录名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-11"><a href="#命令功能-11" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　切换当前目录至目标目录</p><h3 id="常用范例-1"><a href="#常用范例-1" class="headerlink" title="常用范例"></a>常用范例</h3><p><strong><code>例一</code>：进入系统根目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：进入父级目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>//<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：使用 cd 命令进入当前用户主目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span>$ <span class="token builtin class-name">cd</span> ~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例四</code>：跳转到指定目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /usr/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：返回进入此目录之前所在的目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：把上个命令的参数作为cd参数使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> <span class="token operator">!</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（20）-find命令之exec’-69-md-“-69-md”"><a href="#‘每天一个linux命令（20）-find命令之exec’-69-md-“-69-md”" class="headerlink" title="‘每天一个linux命令（20）: find命令之exec’(#69.md “#69.md”)"></a>‘每天一个linux命令（20）: find命令之exec’(#69.md “#69.md”)</h3><p>　　find是我们很常用的一个Linux命令，但是我们一般查找出来的并不仅仅是看看而已，还会有进一步的操作，这个时候exec的作用就显现出来了</p><!--more --><h3 id="命令介绍"><a href="#命令介绍" class="headerlink" title="命令介绍"></a>命令介绍</h3><p>　　<code>-exec</code>  参数后面跟的是command命令，它的终止是以;为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠。</p><p>　　<code>&#123;&#125;</code>  花括号代表前面find查找出来的文件名。</p><p>　　使用find时，只要把想要的操作写在一个文件里，就可以用exec来配合find查找，很方便的。在有些操作系统中只允许-exec选项执行诸如ls或ls -l这样的命令。大多数用户使用这一选项是为了查找旧文件并删除它们。建议在真正执行rm命令删除文件之前，最好先用ls命令看一下，确认它们是所要删除的文件。 exec选项后面跟随着所要执行的命令或脚本，然后是一对儿{ }，一个空格和一个\，最后是一个分号。为了使用exec选项，必须要同时使用print选项。如果验证一下find命令，会发现该命令只输出从当前路径起的相对路径及文件名。</p><h3 id="使用实例-7"><a href="#使用实例-7" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：ls -l命令放在find命令的-exec选项中</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># find命令匹配到了当前目录下的所有普通文件，并在-exec选项中使用ls -l命令将它们列出</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-exec</span> <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：在目录中查找更改时间在n日以前的文件并删除它们</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mtime</span> +14 <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：在目录中查找更改时间在n日以前的文件并删除它们，在删除之前先给出提示</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token parameter variable">-mtime</span> +5 <span class="token parameter variable">-ok</span> <span class="token function">rm</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：-exec中使用grep命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> /etc <span class="token parameter variable">-name</span> <span class="token string">"passwd*"</span> <span class="token parameter variable">-exec</span> <span class="token function">grep</span> <span class="token string">"root"</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：查找文件移动到指定目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token parameter variable">-exec</span> <span class="token function">mv</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">..</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：用exec选项执行cp命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token parameter variable">-exec</span> <span class="token function">cp</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> test3 <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（21）-find命令之xargs’-70-md-“-70-md”"><a href="#‘每天一个linux命令（21）-find命令之xargs’-70-md-“-70-md”" class="headerlink" title="‘每天一个linux命令（21）: find命令之xargs’(#70.md “#70.md”)"></a>‘每天一个linux命令（21）: find命令之xargs’(#70.md “#70.md”)</h3><p>　　在使用 find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。</p><!--more --><p>　　find命令把匹配到的文件传递给xargs命令，而xargs命令每次只获取一部分文件而不是全部，不像-exec选项那样。这样它可以先处理最先获取的一部分文件，然后是下一批，并如此继续下去。  </p><p>　　在有些系统中，使用-exec选项会为处理每一个匹配到的文件而发起一个相应的进程，并非将匹配到的文件全部作为参数一次执行；这样在有些情况下就会出现进程过多，系统性能下降的问题，因而效率不高； 而使用xargs命令则只有一个进程。另外，在使用xargs命令时，究竟是一次获取所有的参数，还是分批取得参数，以及每一次获取参数的数目都会根据该命令的选项及系统内核中相应的可调参数来确定。</p><h3 id="使用实例-8"><a href="#使用实例-8" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找系统中的每一个普通文件，然后使用xargs命令来测试它们分别属于哪类文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：在整个系统中查找内存信息转储文件(core dump) ，然后把结果保存到&#x2F;tmp&#x2F;core.log 文件中</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"core"</span> <span class="token parameter variable">-print</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">></span>/tmp/core.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：在当前目录下查找所有用户具有读、写和执行权限的文件，并收回相应的写权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-perm</span> <span class="token parameter variable">-7</span> <span class="token parameter variable">-print</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">chmod</span> o-w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：用grep命令在所有的普通文件中搜索hostname这个词</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"hostname"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：用grep命令在当前目录下的所有普通文件中搜索hostnames这个词</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># \用来取消find命令中的*在shell中的特殊含义</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token punctuation">\</span>* <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"hostnames"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例六</code>：使用xargs执行mv</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-i</span> <span class="token function">mv</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> test4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：find后执行xargs提示xargs: argument line too long解决方法</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -l1是一次处理一个；-t是处理之前打印出命令</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-atime</span> +0 <span class="token parameter variable">-print0</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-0</span> <span class="token parameter variable">-l1</span> <span class="token parameter variable">-t</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例八</code>：使用-i参数默认的前面输出用{}代替，-I参数可以指定其他代替字符，如例子中的[]</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$  <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"file"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">cp</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例九</code>：xargs的-p参数的使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -p参数会提示让你确认是否执行后面的命令,y执行，n不执行</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">-i</span> <span class="token function">mv</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（22）-find命令的参数详解’-71-md-“-71-md”"><a href="#‘每天一个linux命令（22）-find命令的参数详解’-71-md-“-71-md”" class="headerlink" title="‘每天一个linux命令（22）: find命令的参数详解’(#71.md “#71.md”)"></a>‘每天一个linux命令（22）: find命令的参数详解’(#71.md “#71.md”)</h3><p>　　find一些常用参数的一些常用实例和一些具体用法和注意事项。</p><!--more --><h3 id="使用name选项"><a href="#使用name选项" class="headerlink" title="使用name选项"></a>使用name选项</h3><p>　　文件名选项是find命令最常用的选项，要么单独使用该选项，要么和其他选项一起使用。可以使用某种文件名模式来匹配文件，记住要用引号将文件名模式引起来。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在自己的根目录$HOME中查找文件名符合*.log的文件，使用~作为 'pathname'参数，波浪号~代表了你的$HOME目录。</span>$ <span class="token function">find</span> ~ <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token parameter variable">-print</span><span class="token comment"># 在当前目录及子目录中查找所有的‘ *.log‘文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token parameter variable">-print</span><span class="token comment"># 当前目录及子目录中查找文件名以一个大写字母开头的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"[A-Z]*"</span> <span class="token parameter variable">-print</span><span class="token comment"># 在/etc目录中查找文件名以host开头的文件</span>$ <span class="token function">find</span> /etc <span class="token parameter variable">-name</span> <span class="token string">"host*"</span> <span class="token parameter variable">-print</span><span class="token comment"># 想要查找$HOME目录中的文件</span>$ <span class="token function">find</span> ~ <span class="token parameter variable">-name</span> <span class="token string">"*"</span> <span class="token parameter variable">-print</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-print</span><span class="token comment"># 让系统高负荷运行，就从根目录开始查找所有的文件</span>$ <span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"*"</span> <span class="token parameter variable">-print</span><span class="token comment"># 在当前目录查找文件名以一个个小写字母开头，最后是4到9加上.log结束的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"[a-z]*[4-9].log"</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用perm选项"><a href="#用perm选项" class="headerlink" title="用perm选项"></a>用perm选项</h3><p>　　按照文件权限模式用-perm选项,按文件权限模式来查找文件的话。最好使用八进制的权限表示法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录下查找文件权限位为755的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-perm</span> <span class="token number">755</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>　　还有一种表达方法：在八进制数字前面要加一个横杠-，表示都匹配，如-007就相当于777，-005相当于555,</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-perm</span> <span class="token parameter variable">-005</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略某个目录"><a href="#忽略某个目录" class="headerlink" title="忽略某个目录"></a>忽略某个目录</h3><p>　　如果在查找文件时希望忽略某个目录，因为你知道那个目录中没有你所要查找的文件，那么可以使用-prune选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略。如果希望在test目录下查找文件，但不希望在test&#x2F;test3目录下查找，可以用:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-path</span> <span class="token string">"test/test3"</span> <span class="token parameter variable">-prune</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用find查找文件的时候怎么避开某个文件目录"><a href="#使用find查找文件的时候怎么避开某个文件目录" class="headerlink" title="使用find查找文件的时候怎么避开某个文件目录"></a>使用find查找文件的时候怎么避开某个文件目录</h3><p><strong><code>例一</code>：在test 目录下查找不在test4子目录之内的所有文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-path</span> <span class="token string">"test/test4"</span> <span class="token parameter variable">-prune</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>find [-path ..] [expression]<br>在路径列表的后面的是表达式<br>-path “test” -prune -o -print 是 -path “test” -a -prune -o -print 的简写表达式按顺序求值, -a 和 -o 都是短路求值，与 shell 的 &amp;&amp; 和 || 类似如果<br>-path “test” 为真，则求值 -prune , -prune 返回真，与逻辑表达式为真；否则不求值 -prune，与逻辑表达式为假。如果 -path “test” -a -prune 为假，则求值 -print ，-print返回真，或逻辑表达式为真；否则不求值 -print，或逻辑表达式为真。<br>这个表达式组合特例可以用伪码写为:<br>if -path “test” then<br>-prune<br>else<br>-print  </p></blockquote><p><strong><code>例二</code>：避开多个文件夹</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 圆括号表示表达式的结合。\ 表示引用，即指示 shell 不对后面的字符作特殊解释，而留给 find 命令去解释其意义</span>$ <span class="token function">find</span> <span class="token builtin class-name">test</span> <span class="token punctuation">\</span><span class="token punctuation">(</span> <span class="token parameter variable">-path</span> test/test4 <span class="token parameter variable">-o</span> <span class="token parameter variable">-path</span> test/test3 <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token parameter variable">-prune</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：查找某一确定文件，-name等选项加在-o 之后</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">find</span> <span class="token builtin class-name">test</span> <span class="token punctuation">\</span><span class="token punctuation">(</span>-path test/test4 <span class="token parameter variable">-o</span> <span class="token parameter variable">-path</span> test/test3 <span class="token punctuation">\</span><span class="token punctuation">)</span> <span class="token parameter variable">-prune</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-name</span> <span class="token string">"*.log"</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用user和nouser选项"><a href="#使用user和nouser选项" class="headerlink" title="使用user和nouser选项"></a>使用user和nouser选项</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在$HOME目录中查找文件属主为peida的文件</span>$ <span class="token function">find</span> ~ <span class="token parameter variable">-user</span> peida <span class="token parameter variable">-print</span><span class="token comment"># 在/etc目录下查找文件属主为peida的文件</span>$ <span class="token function">find</span> /etc <span class="token parameter variable">-user</span> peida <span class="token parameter variable">-print</span><span class="token comment"># 为了查找属主帐户已经被删除的文件，可以使用-nouser选项。在/home目录下查找所有的这类文件</span>$ <span class="token function">find</span> /home <span class="token parameter variable">-nouser</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用group和nogroup选项"><a href="#使用group和nogroup选项" class="headerlink" title="使用group和nogroup选项"></a>使用group和nogroup选项</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在/apps目录下查找属于gem用户组的文件</span>$ <span class="token function">find</span> /apps <span class="token parameter variable">-group</span> gem <span class="token parameter variable">-print</span><span class="token comment"># 查找没有有效所属用户组的所有文件</span>$ <span class="token function">find</span> / -nogroup-print<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="按照更改时间或访问时间等查找文件"><a href="#按照更改时间或访问时间等查找文件" class="headerlink" title="按照更改时间或访问时间等查找文件"></a>按照更改时间或访问时间等查找文件</h3><p>　　如果希望按照更改时间来查找文件，可以使用mtime,atime或ctime选项。如果系统突然没有可用空间了，很有可能某一个文件的长度在此期间增长迅速，这时就可以用mtime选项来查找这样的文件。<br>用减号<code>-</code>来限定更改时间在距今n日以内的文件，而用加号<code>+</code>来限定更改时间在距今n日以前的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在系统根目录下查找更改时间在5日以内的文件</span>$ <span class="token function">find</span> / <span class="token parameter variable">-mtime</span> <span class="token parameter variable">-5</span> <span class="token parameter variable">-print</span><span class="token comment"># 在/var/adm目录下查找更改时间在3日以前的文件</span>$ <span class="token function">find</span> /var/adm <span class="token parameter variable">-mtime</span> +3 <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找比某个文件新或旧的文件"><a href="#查找比某个文件新或旧的文件" class="headerlink" title="查找比某个文件新或旧的文件"></a>查找比某个文件新或旧的文件</h3><p>　　如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找更改时间比文件log2012.log新但比文件log2017.log旧的文件</span>$ <span class="token function">find</span> <span class="token parameter variable">-newer</span> log2012.log <span class="token operator">!</span> <span class="token parameter variable">-newer</span> log2017.log<span class="token comment"># 查找更改时间在比log2012.log文件新的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-newer</span> log2012.log <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用type选项"><a href="#使用type选项" class="headerlink" title="使用type选项"></a>使用type选项</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在/etc目录下查找所有的目录</span>$ <span class="token function">find</span> /etc <span class="token parameter variable">-type</span> d <span class="token parameter variable">-print</span><span class="token comment"># 在当前目录下查找除目录以外的所有类型的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token operator">!</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-print</span><span class="token comment"># 在/etc目录下查找所有的符号链接文件</span>$ <span class="token function">find</span> /etc <span class="token parameter variable">-type</span> l <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用size选项"><a href="#使用size选项" class="headerlink" title="使用size选项"></a>使用size选项</h3><p>　　可以按照文件长度来查找文件，这里所指的文件长度既可以用块（block）来计量，也可以用字节来计量。以字节计量文件长度的表达形式为N c；以块计量文件长度只用数字表示即可。<br>在按照文件长度查找文件时，一般使用这种以字节表示的文件长度，在查看文件系统的大小，因为这时使用块来计量更容易转换。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录下查找文件长度大于1 M字节的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-size</span> +1000000c <span class="token parameter variable">-print</span><span class="token comment"># 在/home/apache目录下查找文件长度恰好为100字节的文件</span>$ <span class="token function">find</span> /home/apache <span class="token parameter variable">-size</span> 100c <span class="token parameter variable">-print</span><span class="token comment"># 在当前目录下查找长度超过10块的文件（一块等于512字节）</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-size</span> +10 <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用depth选项"><a href="#使用depth选项" class="headerlink" title="使用depth选项"></a>使用depth选项</h3><p>　　在使用find命令时，可能希望先匹配所有的文件，再在子目录中查找。使用depth选项就可以使find命令这样做。这样做的一个原因就是，当在使用find命令向磁带上备份文件系统时，希望首先备份所有的文件，其次再备份子目录中的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># find命令从文件系统的根目录开始，查找一个名为CON.FILE的文件</span><span class="token comment"># 它将首先匹配所有的文件然后再进入子目录中查找</span>$ <span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"CON.FILE"</span> <span class="token parameter variable">-depth</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用mount选项"><a href="#使用mount选项" class="headerlink" title="使用mount选项"></a>使用mount选项</h3><p>　　在当前的文件系统中查找文件（不进入其他文件系统），可以使用find命令的mount选项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从当前目录开始查找位于本文件系统中文件名以XC结尾的文件</span>$ <span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">"*.XC"</span> <span class="token parameter variable">-mount</span> <span class="token parameter variable">-print</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（23）-用SecureCRT来上传和下载文件’-72-md-“-72-md”"><a href="#‘每天一个linux命令（23）-用SecureCRT来上传和下载文件’-72-md-“-72-md”" class="headerlink" title="‘每天一个linux命令（23）: 用SecureCRT来上传和下载文件’(#72.md “#72.md”)"></a>‘每天一个linux命令（23）: 用SecureCRT来上传和下载文件’(#72.md “#72.md”)</h3><p>　　用SSH管理linux服务器时经常需要远程与本地之间交互文件.而直接用SecureCRT自带的上传下载功能无疑是最方便的，SecureCRT下的文件传输协议有ASCII、Xmodem、Zmodem。</p><!--more --><p><strong>文件传输协议</strong><br>　　文件传输是数据交换的主要形式。在进行文件传输时，为使文件能被正确识别和传送，我们需要在两台计算机之间建立统一的传输协议。这个协议包括了文件的识别、传送的起止时间、错误的判断与纠正等内容。常见的传输协议有以下几种：</p><ol><li>ASCII：这是最快的传输协议，单只能传输文本文件。</li><li>Xmodem：这种古老的传输协议速度较慢，但由于使用了CRC错误侦测方法，传输的准确率可高达99.6%。</li><li>Ymodem：这是Xmodem的改良版，使用了1024位区段传送，速度比Xmodem要快</li><li>Zmodem：Zmodem采用了串流式（streaming）传输方式，传输速度较快，而且还具有自动改变区段大小和断点续传、快速错误侦测等功能。这是目前最流行的文件传输协议。</li></ol><p>　　除以上几种外，还有Imodem、Jmodem、Bimodem、Kermit、Lynx等协议，由于没有多数厂商支持，这里就略去不讲。</p><p>　　SecureCRT可以使用linux下的zmodem协议来快速的传送文件,使用非常方便.具体步骤：</p><h3 id="在使用SecureCRT上传下载之前需要给服务器安装lrzsz"><a href="#在使用SecureCRT上传下载之前需要给服务器安装lrzsz" class="headerlink" title="在使用SecureCRT上传下载之前需要给服务器安装lrzsz"></a>在使用SecureCRT上传下载之前需要给服务器安装lrzsz</h3><ul><li>从下面的地址下载 lrzsz-0.12.20.tar.gz</li></ul><p><a href="">我是下载地址</a></p><ul><li>查看里面的INSTALL文档了解安装参数说明和细节</li><li>解压文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> zxvf lrzsz-0.12.20.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>进入目录，配置编译</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> lrzsz-0.12.20$ ./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/lrzsz$ <span class="token function">make</span>$ <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建立软链接</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /usr/bin$ <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/lrzsz/bin/lrz rz$ <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/lrzsz/bin/lsz sz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>测试</li></ul><p>　　运行 rz 弹出 SecureCrt上传窗口，用SecureCRT来上传和下载文件。</p><h3 id="设置SecureCRT上传和下载的默认目录"><a href="#设置SecureCRT上传和下载的默认目录" class="headerlink" title="设置SecureCRT上传和下载的默认目录"></a>设置SecureCRT上传和下载的默认目录</h3><p>　　options-&gt;session options -&gt;Terminal-&gt;Xmodem&#x2F;Zmodem<br>　　右栏directory设置上传和下载的目录</p><h3 id="使用Zmodem从客户端上传文件到linux服务器"><a href="#使用Zmodem从客户端上传文件到linux服务器" class="headerlink" title="使用Zmodem从客户端上传文件到linux服务器"></a>使用Zmodem从客户端上传文件到linux服务器</h3><p>　　用SecureCRT登陆linux终端</p><p>　　选中你要放置上传文件的路径，在目录下然后输入rz命令,SecureCRT会弹出文件选择对话框，在查找范围中找到你要上传的文件，按Add按钮。然后OK就可以把文件上传到linux上了。</p><p>　　或者在Transfer-&gt;Zmodem Upoad list弹出文件选择对话框，选好文件后按Add按钮。然后OK窗口自动关闭。然后在linux下选中存放文件的目录，输入rz命令。liunx就把那个文件上传到这个目录下了。</p><h3 id="使用Zmodem下载文件到客户端"><a href="#使用Zmodem下载文件到客户端" class="headerlink" title="使用Zmodem下载文件到客户端"></a>使用Zmodem下载文件到客户端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ sz filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　zmodem 接收可以自行启动.下载的文件存放在你设定的默认下载目录下</p><blockquote><p><code>rz</code>，<code>sz</code> 是 Linux&#x2F;Unix 同 Windows 进行 ZModem 文件传输的命令行工具 , windows 端需要支持ZModem的telnet&#x2F;ssh客户端，SecureCRT 就可以用 SecureCRT 登陆到 Unix&#x2F;Linux 主机（telnet或ssh均可）O 运行命令rz，即是接收文件，SecureCRT就会弹出文件选择对话框，选好文件之后关闭对话框，文件就会上传到当前目录 O 运行命令sz file1 file2就是发文件到windows上（保存的目录是可以配置） 比ftp命令方便多了，而且服务器不用再开FTP服务了</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（24）-tar’-73-md-“-73-md”"><a href="#‘每天一个linux命令（24）-tar’-73-md-“-73-md”" class="headerlink" title="‘每天一个linux命令（24）: tar’(#73.md “#73.md”)"></a>‘每天一个linux命令（24）: tar’(#73.md “#73.md”)</h3><p>　　通过SSH访问服务器，难免会要用到压缩，解压缩，打包，解包等，这时候tar命令就是是必不可少的一个功能强大的工具。linux中最流行的tar是麻雀虽小，五脏俱全，功能强大。</p><!--more --><p>　　tar命令可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输是非常有用的。</p><p>　　首先要弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。</p><p>　　为什么要区分这两个概念呢？这源于Linux中很多压缩程序只能针对一个文件进行压缩，这样当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）。</p><p>　　linux下最常用的打包程序就是tar了，使用tar程序打出来的包我们常称为tar包，tar包文件的命令通常都是以.tar结尾的。生成tar包后，就可以用其它的程序来进行压缩。</p><h3 id="命令格式-12"><a href="#命令格式-12" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> <span class="token punctuation">[</span>必要参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>选择参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-12"><a href="#命令功能-12" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的</p><h3 id="命令参数-10"><a href="#命令参数-10" class="headerlink" title="命令参数"></a>命令参数</h3><p><span><strong>必要参数</strong></span></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-A</td><td align="left">新增压缩文件到已存在的压缩</td></tr><tr><td align="left">-B</td><td align="left">设置区块大小</td></tr><tr><td align="left">-c</td><td align="left">建立新的压缩文件</td></tr><tr><td align="left">-d</td><td align="left">记录文件的差别</td></tr><tr><td align="left">-r</td><td align="left">添加文件到已经压缩的文件</td></tr><tr><td align="left">-u</td><td align="left">添加改变了和现有的文件到已经存在的压缩文件</td></tr><tr><td align="left">-x</td><td align="left">从压缩的文件中提取文件</td></tr><tr><td align="left">-t</td><td align="left">显示压缩文件的内容</td></tr><tr><td align="left">-z</td><td align="left">支持gzip解压文件</td></tr><tr><td align="left">-j</td><td align="left">支持bzip2解压文件</td></tr><tr><td align="left">-Z</td><td align="left">支持compress解压文件</td></tr><tr><td align="left">-v</td><td align="left">显示操作过程</td></tr><tr><td align="left">-l</td><td align="left">文件系统边界设置</td></tr><tr><td align="left">-k</td><td align="left">保留原有文件不覆盖</td></tr><tr><td align="left">-m</td><td align="left">保留文件不被覆盖</td></tr><tr><td align="left">-W</td><td align="left">确认压缩文件的正确性</td></tr><tr><td align="left"><strong>可选参数</strong></td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">设置区块数目</td></tr><tr><td align="left">-C</td><td align="left">切换到指定目录</td></tr><tr><td align="left">-f</td><td align="left">指定压缩文件</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使常见解压-压缩命令"><a href="#使常见解压-压缩命令" class="headerlink" title="使常见解压&#x2F;压缩命令"></a>使常见解压&#x2F;压缩命令</h3><p><strong><code>例一</code>：.tar文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> xvf FileName.tar <span class="token comment"># 解包</span>$ <span class="token function">tar</span> cvf FileName.tar DirName <span class="token comment"># 打包</span><span class="token comment"># 注：tar是打包，不是压缩！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例二</code>：.gz文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压</span>$ gunzip FileName.gz$ <span class="token function">gzip</span> <span class="token parameter variable">-d</span> FileName.gz<span class="token comment"># 压缩</span><span class="token function">gzip</span> FileName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例三</code>：.tar.gz和.tgz文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> xvf FileName.tar.gz <span class="token comment"># 解包</span>$ <span class="token function">tar</span> cvf FileName.tar.gz DirName <span class="token comment"># 打包</span><span class="token comment"># 注：tar是打包，不是压缩！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例四</code>：.bz2文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压</span>$ <span class="token function">bzip2</span> <span class="token parameter variable">-d</span> FileName.bz2$ bunzip2 FileName.bz2<span class="token comment"># 压缩</span>$ <span class="token function">bzip2</span> <span class="token parameter variable">-z</span> FileName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例五</code>：.tar.bz2文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> jxvf FileName.tar.bz2 <span class="token comment"># 解压</span>$ <span class="token function">tar</span> jcvf FileName.tar.bz2 DirName <span class="token comment"># 压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例六</code>：.bz文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压</span>$ <span class="token function">bzip2</span> <span class="token parameter variable">-d</span> FileName.bz$ bunzip2 FileName.bz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例七</code>：.tar.bz文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> jxvf FileName.tar.bz <span class="token comment"># 解压</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例八</code>：.Z文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ uncompress FileName.Z <span class="token comment"># 解压</span>$ compress FileName <span class="token comment"># 压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例九</code>：.tar.Z文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> Zxvf FileName.tar.Z <span class="token comment"># 解压</span>$ <span class="token function">tar</span> Zcvf FileName.tar.Z DirName <span class="token comment"># 压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例十</code>：.zip文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">unzip</span> FileName.zip <span class="token comment"># 解压</span>$ <span class="token function">zip</span> FileName.zip DirName <span class="token comment"># 压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例十一</code>：.rar文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rar</span> x FileName.rar <span class="token comment"># 解压</span>$ <span class="token function">rar</span> a FileName.rar DirName <span class="token comment"># 压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用实例-9"><a href="#使用实例-9" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：将文件全部打包成tar包</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> <span class="token parameter variable">-cvf</span> log.tar log2012.log   <span class="token comment"># 仅打包，不压缩！</span>$ <span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> log.tar.gz log2012.log <span class="token comment"># 打包后，以 gzip 压缩</span>$ <span class="token function">tar</span> <span class="token parameter variable">-jcvf</span> log.tar.bz2 log2012.log <span class="token comment"># 打包后，以 bzip2 压缩</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar包； 如果加 j 参数，则以 .tar.bz2 来作为tar包名。</p></blockquote><p><strong><code>例二</code>：查阅上述 tar包内有哪些文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> <span class="token parameter variable">-ztvf</span> log.tar.gz<span class="token comment"># 由于我们使用 gzip 压缩的log.tar.gz，所以要查阅log.tar.gz包内的文件时，就得要加上 z 这个参数了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：将tar 包解压缩</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> /opt/soft/test/log.tar.gz<span class="token comment"># 在预设的情况下，我们可以将压缩档在任何地方解开的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例四</code>：只将 &#x2F;tar 内的 部分文件解压出来</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> /opt/soft/test/log30.tar.gz log2013.log<span class="token comment"># 我可以透过 tar -ztvf 来查阅 tar 包内的文件名称，如果单只要一个文件，就可以透过这个方式来解压部分文件！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例五</code>：文件备份下来，并且保存其权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> <span class="token parameter variable">-zcvpf</span> log31.tar.gz log2014.log log2015.log log2016.log<span class="token comment"># 这个 -p 的属性是很重要的，尤其是当您要保留原本文件的属性时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例六</code>：在 文件夹当中，比某个日期新的文件才备份</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> <span class="token parameter variable">-N</span> <span class="token string">"2012/11/13"</span> <span class="token parameter variable">-zcvf</span> log17.tar.gz <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：备份文件夹内容是排除部分文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">tar</span> <span class="token parameter variable">--exclude</span> scf/service <span class="token parameter variable">-zcvf</span> scf.tar.gz scf/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（25）-gzip’-74-md-“-74-md”"><a href="#‘每天一个linux命令（25）-gzip’-74-md-“-74-md”" class="headerlink" title="‘每天一个linux命令（25）: gzip’(#74.md “#74.md”)"></a>‘每天一个linux命令（25）: gzip’(#74.md “#74.md”)</h3><p>　　减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。gzip是在Linux系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。gzip不仅可以用来压缩大的、较少使用的文件以节省磁盘空间，还可以和tar命令一起构成Linux操作系统中比较流行的压缩文件格式。据统计，gzip命令对文本文件有60%～70%的压缩率。</p><!--more --><h3 id="命令格式-13"><a href="#命令格式-13" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件或者目录<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-13"><a href="#命令功能-13" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多出”.gz”的扩展名。</p><h3 id="命令参数-11"><a href="#命令参数-11" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a或–ascii</td><td align="left">使用ASCII文字模式。</td></tr><tr><td align="left">-c或–stdout或–to-stdout</td><td align="left">把压缩后的文件输出到标准输出设备，不去更动原始文件。</td></tr><tr><td align="left">-d或–decompress或-suffix&lt;压缩字尾字符串&gt;</td><td align="left">更改压缩字尾字符串。</td></tr><tr><td align="left">-t或–test</td><td align="left">测试压缩文件是否正确无误。</td></tr><tr><td align="left">-v或–verbose</td><td align="left">显示指令执行过程。</td></tr><tr><td align="left">-V或–version</td><td align="left">显示版本信息。</td></tr><tr><td align="left">-num</td><td align="left">用指定的数字num调整压缩的速度，-1或–fast表示最快压缩方法（低压缩比），-9或–best表示最慢压缩方法（高压缩比）。系统缺省值为6。</td></tr></tbody></table><h3 id="命令实例-3"><a href="#命令实例-3" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：把test目录下的每个文件压缩成.gz文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 忽略目录，只打包其中文件</span>$ <span class="token function">gzip</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：把例1中每个压缩的文件解压，并列出详细的信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> <span class="token parameter variable">-dv</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：详细显示例1中每个压缩的文件的信息，并不解压</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> <span class="token parameter variable">-l</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：压缩一个tar备份文件，此时压缩文件的扩展名为.tar.gz</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> <span class="token parameter variable">-r</span> log.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：递归的压缩目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> <span class="token parameter variable">-rv</span> test6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：递归地解压目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">gzip</span> <span class="token parameter variable">-dr</span> test6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（26）-chmod’-75-md-“-75-md”"><a href="#‘每天一个linux命令（26）-chmod’-75-md-“-75-md”" class="headerlink" title="‘每天一个linux命令（26）: chmod’(#75.md “#75.md”)"></a>‘每天一个linux命令（26）: chmod’(#75.md “#75.md”)</h3><p>　　chmod命令用于改变linux系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</p><!--more --><p>　　Linux系统中的每个文件和目录都有访问许可权限，用它来确定谁可以通过何种方式对文件和目录进行访问和操作。</p><p>　　文件或目录的访问权限分为只读，只写和可执行三种。以文件为例，只读权限表示只允许读其内容，而禁止对其做任何的更改操作。可执行权限表示允许将该文件作为一个程序执行。文件被创建时，文件所有者自动拥有对该文件的读、写和可执行权限，以便于对文件的阅读和修改。用户也可根据需要把访问权限设置为需要的任何组合。</p><p>　　有三种不同类型的用户可对文件或目录进行访问：文件所有者，同组用户、其他用户。所有者一般是文件的创建者。所有者可以允许同组用户有权访问文件，还可以将文件的访问权限赋予系统中的其他用户。在这种情况下，系统中每一位用户都能访问该用户拥有的文件或目录。</p><p>　　每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。当用ls -l命令显示文件或目录的详细信息时，最左边的一列为文件的访问权限。 例如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ls</span> <span class="token parameter variable">-al</span>-rw-r--r-- <span class="token number">1</span> root root 296K <span class="token number">11</span>-13 06:03 log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>　　第一列共有10个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是d，表示是一个目录。从第二个字符开始到第十个共9个字符，3个字符一组，分别表示了3组用户对文件或者目录的权限。权限字符用横线代表空许可，r代表只读，w代表写，x代表可执行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">- rw- r-- r--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　表示log2012.log是一个普通文件；log2012.log的属主有读写权限；与log2012.log属主同组的用户只有读权限；其他用户也只有读权限。</p><p>　　确定了一个文件的访问权限后，用户可以利用Linux系统提供的chmod命令来重新设定不同的访问权限。也可以利用chown命令来更改某个文件或目录的所有者。利用chgrp命令来更改某个文件或目录的用户组。</p><p>　　chmod命令是非常重要的，用于改变文件或目录的访问权限。用户用它控制文件或目录的访问权限。chmod命令详细情况如下。</p><h3 id="命令格式-14"><a href="#命令格式-14" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token punctuation">[</span>-cfvR<span class="token punctuation">]</span> <span class="token punctuation">[</span>--help<span class="token punctuation">]</span> <span class="token punctuation">[</span>--version<span class="token punctuation">]</span> mode <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-14"><a href="#命令功能-14" class="headerlink" title="命令功能"></a>命令功能</h3><p>用于改变文件或目录的访问权限，用它控制文件或目录的访问权限。</p><h3 id="命令参数-12"><a href="#命令参数-12" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">当发生改变时，报告处理信息</td></tr><tr><td align="left">-f</td><td align="left">错误信息不输出</td></tr><tr><td align="left">-R</td><td align="left">处理指定目录以及其子目录下的所有文件</td></tr><tr><td align="left">-v</td><td align="left">运行时显示详细处理信息</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">–reference&#x3D;&lt;目录或者文件&gt;</td><td align="left">设置成具有指定目录或者文件具有相同的权限</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr><tr><td align="left">&lt;权限范围&gt;+&lt;权限设置&gt;</td><td align="left">使权限范围内的目录或者文件具有指定的权限</td></tr><tr><td align="left">&lt;权限范围&gt;-&lt;权限设置&gt;</td><td align="left">删除权限范围的目录或者文件的指定权限</td></tr><tr><td align="left">&lt;权限范围&gt;&#x3D;&lt;权限设置&gt;</td><td align="left">设置权限范围内的目录或者文件的权限为指定的值</td></tr></tbody></table><p><strong>权限范围</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">u</td><td align="left">目录或者文件的当前的用户</td></tr><tr><td align="left">g</td><td align="left">目录或者文件的当前的群组</td></tr><tr><td align="left">o</td><td align="left">除了目录或者文件的当前用户或群组之外的用户或者群组</td></tr><tr><td align="left">a</td><td align="left">所有的用户及群组</td></tr></tbody></table><p><strong>权限代号</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">r</td><td align="left">读权限，用数字4表示</td></tr><tr><td align="left">w</td><td align="left">写权限，用数字2表示</td></tr><tr><td align="left">x</td><td align="left">执行权限，用数字1表示</td></tr><tr><td align="left">-</td><td align="left">删除权限，用数字0表示</td></tr><tr><td align="left">s</td><td align="left">特殊权限》该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。</td></tr></tbody></table><blockquote><p><strong>文字设定法</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> ［who］ ［+ <span class="token operator">|</span> - <span class="token operator">|</span> <span class="token operator">=</span>］ ［mode］ 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>数字设定法</strong><br>　　我们必须首先了解用数字表示的属性的含义：0表示没有权限，1表示可执行权限，2表示可写权限，4表示可读权限，然后将其相加。所以数字属性的格式应为3个从0到7的八进制数，其顺序是（u）（g）（o）。<br>    例如，如果想让某个文件的属主有“读&#x2F;写”二种权限，需要把4（可读）+2（可写）＝6（读&#x2F;写）。<br>　　数字设定法的一般形式为：<br>　　<code>chmod ［mode］ 文件名</code><br><strong>数字与字符对应关系如下：</strong><br>r&#x3D;4，w&#x3D;2，x&#x3D;1<br>若要rwx属性则4+2+1&#x3D;7<br>若要rw-属性则4+2&#x3D;6；<br>若要r-x属性则4+1&#x3D;7。</p><h3 id="命令实例-4"><a href="#命令实例-4" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：增加文件所有用户组可执行权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> a+x log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：同时修改不同用户权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> ug+w,o-x log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：删除文件权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> a-x log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：使用“&#x3D;”设置权限</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token assign-left variable">u</span><span class="token operator">=</span>x log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：其他</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给file的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限</span>$ <span class="token function">chmod</span> <span class="token number">751</span> <span class="token function">file</span><span class="token comment"># 上例的另一种形式</span>$ <span class="token function">chmod</span> <span class="token assign-left variable">u</span><span class="token operator">=</span>rwx,g<span class="token operator">=</span>rx,o<span class="token operator">=</span>x <span class="token function">file</span><span class="token comment"># 为所有用户分配读权限</span>$ <span class="token function">chmod</span> <span class="token operator">=</span>r <span class="token function">file</span><span class="token comment"># 同上例</span>$ <span class="token function">chmod</span> <span class="token number">444</span> <span class="token function">file</span><span class="token comment"># 同上例</span>$ <span class="token function">chmod</span> a-wx,a+r   <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（27）-chgrp’-76-md-“-76-md”"><a href="#‘每天一个linux命令（27）-chgrp’-76-md-“-76-md”" class="headerlink" title="‘每天一个linux命令（27）: chgrp’(#76.md “#76.md”)"></a>‘每天一个linux命令（27）: chgrp’(#76.md “#76.md”)</h3><p>　　在lunix系统里，文件或目录的权限的掌控以拥有者及所诉群组来管理。可以使用chgrp指令取变更文件与目录所属群组，这种方式采用群组名称或群组识别码都可以。Chgrp命令就是change group的缩写！要被改变的组名必须要在&#x2F;etc&#x2F;group文件内存在才行。</p><!--more --><h3 id="命令格式-15"><a href="#命令格式-15" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chgrp</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>组<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-15"><a href="#命令功能-15" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　chgrp命令可采用群组名称或群组识别码的方式改变文件或目录的所属群组。使用权限是超级用户。</p><h3 id="命令参数-13"><a href="#命令参数-13" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">当发生改变时，报告处理信息</td></tr><tr><td align="left">-f</td><td align="left">不显示错误信息</td></tr><tr><td align="left">-R</td><td align="left">处理指定目录以及其子目录下的所有文件</td></tr><tr><td align="left">-v</td><td align="left">运行时显示详细的处理信息</td></tr><tr><td align="left">–dereference</td><td align="left">作用于符号链接的指向，而不是符号链接本身</td></tr><tr><td align="left">–no-dereference</td><td align="left">作用于符号链接本身</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">–reference&#x3D;&lt;文件或者目录&gt;</td><td align="left">设置为和指定的文件或目录的权限一样</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="命令实例-5"><a href="#命令实例-5" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：改变文件的群组属性</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将log2012.log文件由root群组改为bin群组</span>$ <span class="token function">chgrp</span> <span class="token parameter variable">-v</span> bin log2012.log“log2012.log” 的所属组已更改为 bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例二</code>：根据指定文件改变文件的群组属性</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 改变文件log2013.log 的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同</span>$ <span class="token function">chgrp</span> <span class="token parameter variable">--reference</span><span class="token operator">=</span>log2012.log log2013.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：改变指定目录以及其子目录下的所有文件的群组属性</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 改变指定目录以及其子目录下的所有文件的群组属性</span>$ <span class="token function">chgrp</span> <span class="token parameter variable">-R</span> bin test6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例四</code>：通过群组识别码改变文件群组属性</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过群组识别码改变文件群组属性，100为users群组的识别码，具体群组和群组识别码可以去/etc/group文件中查看</span>$ <span class="token function">chgrp</span> <span class="token parameter variable">-R</span> <span class="token number">100</span> test6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（28）-chown’-77-md-“-77-md”"><a href="#‘每天一个linux命令（28）-chown’-77-md-“-77-md”" class="headerlink" title="‘每天一个linux命令（28）: chown’(#77.md “#77.md”)"></a>‘每天一个linux命令（28）: chown’(#77.md “#77.md”)</h3><p>　　chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。</p><!--more --><h3 id="命令格式-16"><a href="#命令格式-16" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chown</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>所有者<span class="token punctuation">]</span><span class="token punctuation">[</span>:<span class="token punctuation">[</span>组<span class="token punctuation">]</span><span class="token punctuation">]</span> 文件<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-16"><a href="#命令功能-16" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　通过chown改变文件的拥有者和群组。在更改文件的所有者或所属群组时，可以使用用户名称和用户识别码设置。普通用户不能将自己的文件改变成其他的拥有者。其操作权限一般为管理员。</p><h3 id="命令参数-14"><a href="#命令参数-14" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">显示更改的部分的信息</td></tr><tr><td align="left">-f</td><td align="left">忽略错误信息</td></tr><tr><td align="left">-h</td><td align="left">修复符号链接</td></tr><tr><td align="left">-R</td><td align="left">处理指定目录以及其子目录下的所有文件</td></tr><tr><td align="left">-v</td><td align="left">显示详细的处理信息</td></tr><tr><td align="left">-deference</td><td align="left">作用于符号链接的指向，而不是链接文件本身</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">–reference&#x3D;&lt;目录或文件&gt;</td><td align="left">把指定的目录&#x2F;文件作为参考，把操作的文件&#x2F;目录设置成参考文件&#x2F;目录相同拥有者和群组</td></tr><tr><td align="left">–from&#x3D;&lt;当前用户：当前群组&gt;</td><td align="left">只有当前用户和群组跟指定的用户和群组相同时才进行改变</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="命令实例-6"><a href="#命令实例-6" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：改变拥有者和群组</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chown</span> mail:mail log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：改变文件拥有者和群组</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 组可为空，默认为root所在组</span>$ <span class="token function">chown</span> root: log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：改变文件群组</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只改变所在组</span>$ <span class="token function">chown</span> :mail log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例四</code>：改变指定目录以及其子目录下的所有文件的拥有者和群组</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chown</span> <span class="token parameter variable">-R</span> <span class="token parameter variable">-v</span> root:mail test6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（29）-etc-group文件详解’-78-md-“-78-md”"><a href="#‘每天一个linux命令（29）-etc-group文件详解’-78-md-“-78-md”" class="headerlink" title="‘每天一个linux命令（29）: &#x2F;etc&#x2F;group文件详解’(#78.md “#78.md”)"></a>‘每天一个linux命令（29）: &#x2F;etc&#x2F;group文件详解’(#78.md “#78.md”)</h3><p>　　Linux &#x2F;etc&#x2F;group文件与&#x2F;etc&#x2F;passwd和&#x2F;etc&#x2F;shadow文件都是有关于系统管理员对用户和用户组管理时相关的文件。linux &#x2F;etc&#x2F;group文件是有关于系统管理员对用户和用户组管理的文件,linux用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。具有某种共同特征的用户集合起来就是用户组（Group）。用户组（Group）配置文件主要有 &#x2F;etc&#x2F;group和&#x2F;etc&#x2F;gshadow，其中&#x2F;etc&#x2F;gshadow是&#x2F;etc&#x2F;group的加密信息文件。</p><!--more --><p>　　将用户分组是Linux系统中对用户进行管理及控制访问权限的一种手段。每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不 同的组。当一个用户同时是多个组中的成员时，在&#x2F;etc&#x2F;passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>　　用户组的所有信息都存放在&#x2F;etc&#x2F;group文件中。此文件的格式是由冒号(:)隔开若干个字段，这些字段具体如下：</p><p>　　组名:口令:组标识号:组内用户列表</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p><strong>组名：</strong> 组名是用户组的名称，由字母或数字构成。与&#x2F;etc&#x2F;passwd中的登录名一样，组名不应重复。<br><strong>口令：</strong> 口令字段存放的是用户组加密后的口令字。一般Linux系统的用户组都没有口令，即这个字段一般为空，或者是<code>*</code>。<br><strong>组标识号：</strong> 组标识号与用户标识号类似，也是一个整数，被系统内部用来标识组。别称GID.<br><strong>组内用户列表：</strong> 是属于这个组的所有用户的列表，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</p><h3 id="使用实例-10"><a href="#使用实例-10" class="headerlink" title="使用实例"></a>使用实例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> /etc/group<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong> 我们以root:x:0:root,linuxsir 为例： 用户组root，x是密码段，表示没有设置密码，GID是0,root用户组下包括root、linuxsir以及GID为0的其它用户。</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（3）-pwd’-79-md-“-79-md”"><a href="#‘每天一个linux命令（3）-pwd’-79-md-“-79-md”" class="headerlink" title="‘每天一个linux命令（3）: pwd’(#79.md “#79.md”)"></a>‘每天一个linux命令（3）: pwd’(#79.md “#79.md”)</h3><p>　　Linux中用 pwd 命令来查看”当前工作目录“的完整路径。 简单得说，每当你在终端进行操作时，你都会有一个当前工作目录。<br>　　在不太确定当前位置时，就会使用pwd来判定当前目录在文件系统内的确切位置。</p><!--more --><h3 id="命令格式-17"><a href="#命令格式-17" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">pwd</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-17"><a href="#命令功能-17" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　查看”当前工作目录“的完整路径</p><h3 id="常用参数-1"><a href="#常用参数-1" class="headerlink" title="常用参数"></a>常用参数</h3><p>一般情况下不带任何参数<br>如果目录是链接时：<br>格式：pwd -P 显示出实际路径，而非使用链接（link） 的路径</p><h3 id="实用实例"><a href="#实用实例" class="headerlink" title="实用实例"></a>实用实例</h3><p><strong><code>例一</code>：用 pwd 命令查看当前工作目录的完整路径</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">pwd</span>/home/faker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：目录连接链接时，pwd -P  显示出实际路径，而非使用连接（link）路径；pwd显示的是连接路径</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#目录为链接时，输出链接路径</span>$ <span class="token builtin class-name">pwd</span> <span class="token parameter variable">-L</span><span class="token comment">#目录为链接时，输出物理路径</span>$ <span class="token builtin class-name">pwd</span> <span class="token parameter variable">-P</span>/home/faker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例三</code>：当前目录被删除了，而pwd命令仍然显示那个目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> /opt/soft$ <span class="token function">rm</span> <span class="token punctuation">..</span>/soft <span class="token parameter variable">-rf</span>$ <span class="token builtin class-name">pwd</span>/opt/soft$ /bin/pwd/bin/pwd: couldnt <span class="token function">find</span> directory entry <span class="token keyword">in</span> “<span class="token punctuation">..</span>” with matching i-node/home/faker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（30）-df’-80-md-“-80-md”"><a href="#‘每天一个linux命令（30）-df’-80-md-“-80-md”" class="headerlink" title="‘每天一个linux命令（30）: df’(#80.md “#80.md”)"></a>‘每天一个linux命令（30）: df’(#80.md “#80.md”)</h3><p>　　linux中df命令的功能是用来检查linux服务器的文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><!-- more --><h3 id="命令格式-18"><a href="#命令格式-18" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-18"><a href="#命令功能-18" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　显示指定磁盘文件的可用空间。如果没有文件名被指定，则所有当前被挂载的文件系统的可用空间将被显示。默认情况下，磁盘空间将以 1KB 为单位进行显示，除非环境变量 POSIXLY_CORRECT 被指定，那样将以512字节为单位进行显示</p><h3 id="命令参数-15"><a href="#命令参数-15" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">全部文件系统列表</td></tr><tr><td align="left">-h</td><td align="left">方便阅读方式显示</td></tr><tr><td align="left">-H</td><td align="left">等于“-h”，但是计算式，1K&#x3D;1000，而不是1K&#x3D;1024</td></tr><tr><td align="left">-i</td><td align="left">显示inode信息</td></tr><tr><td align="left">-k</td><td align="left">区块为1024字节</td></tr><tr><td align="left">-l</td><td align="left">只显示本地文件系统</td></tr><tr><td align="left">-m</td><td align="left">区块为1048576字节</td></tr><tr><td align="left">–no-sync</td><td align="left">忽略 sync 命令</td></tr><tr><td align="left">-P</td><td align="left">输出格式为POSIX</td></tr><tr><td align="left">–sync</td><td align="left">在取得磁盘信息前，先执行sync命令</td></tr><tr><td align="left">-T</td><td align="left">文件系统类型</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">–block-size&#x3D;&lt;区块大小&gt;</td><td align="left">指定区块大小</td></tr><tr><td align="left">-t&lt;文件系统类型&gt;</td><td align="left">只显示选定文件系统的磁盘信息</td></tr><tr><td align="left">-x&lt;文件系统类型&gt;</td><td align="left">不显示选定文件系统的磁盘信息</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例-11"><a href="#使用实例-11" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示磁盘使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong> linux中df命令的输出清单的第1列是代表文件系统对应的设备文件的路径名（一般是硬盘上的分区）；第2列给出分区包含的数据块（1024字节）的数目；第3，4列分别表示已用的和可用的数据块数目。用户也许会感到奇怪的是，第3，4列块数之和不等于第2列中的块数。这是因为缺省的每个分区都留了少量空间供系统管理员使用。即使遇到普通用户空间已满的情况，管理员仍能登录和留有解决问题所需的工作空间。清单中Use% 列表示普通用户空间使用的百分比，即使这一数字达到100％，分区仍然留有系统管理员使用的空间。最后，Mounted on列表示文件系统的挂载点。</p></blockquote><p><strong><code>例二</code>：以inode模式来显示磁盘使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：显示指定类型磁盘</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> <span class="token parameter variable">-t</span> ext3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：列出各文件系统的i节点使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> <span class="token parameter variable">-ia</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：列出文件系统的类型</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> <span class="token parameter variable">-T</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：以更易读的方式显示目前磁盘空间和使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>-h更具目前磁盘空间和使用情况 以更易读的方式显示<br>-H根上面的-h参数相同,不过在根式化的时候,采用1000而不是1024进行容量转换<br>-k以单位显示磁盘的使用情况<br>-l显示本地的分区的磁盘空间使用率,如果服务器nfs了远程服务器的磁盘,那么在df上加上-l后系统显示的是过滤nsf驱动器后的结果<br>-i显示inode的使用情况。linux采用了类似指针的方式管理磁盘空间影射.这也是一个比较关键应用</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（31）-du’-81-md-“-81-md”"><a href="#‘每天一个linux命令（31）-du’-81-md-“-81-md”" class="headerlink" title="‘每天一个linux命令（31）: du’(#81.md “#81.md”)"></a>‘每天一个linux命令（31）: du’(#81.md “#81.md”)</h3><p>　　Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的.</p><!-- more--><h3 id="命令格式-19"><a href="#命令格式-19" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-19"><a href="#命令功能-19" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　显示每个文件和目录的磁盘使用空间。</p><h3 id="命令参数-16"><a href="#命令参数-16" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a或-all</td><td align="left">显示目录中个别文件的大小。</td></tr><tr><td align="left">-b或-bytes</td><td align="left">显示目录或文件大小时，以byte为单位。</td></tr><tr><td align="left">-c或–total</td><td align="left">除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</td></tr><tr><td align="left">-k或–kilobytes</td><td align="left">以KB(1024bytes)为单位输出。</td></tr><tr><td align="left">-m或–megabytes</td><td align="left">以MB为单位输出。</td></tr><tr><td align="left">-s或–summarize</td><td align="left">仅显示总计，只列出最后加总的值。</td></tr><tr><td align="left">-h或–human-readable</td><td align="left">以K，M，G为单位，提高信息的可读性。</td></tr><tr><td align="left">-x或–one-file-xystem</td><td align="left">以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</td></tr><tr><td align="left">-L&lt;符号链接&gt;或–dereference&lt;符号链接&gt;</td><td align="left">显示选项中所指定符号链接的源文件大小。</td></tr><tr><td align="left">-S或–separate-dirs</td><td align="left">显示个别目录的大小时，并不含其子目录的大小。</td></tr><tr><td align="left">-X&lt;文件&gt;或–exclude-from&#x3D;&lt;文件&gt;</td><td align="left">在&lt;文件&gt;指定目录或文件。</td></tr><tr><td align="left">–exclude&#x3D;&lt;目录或文件&gt;</td><td align="left">略过指定的目录或文件。</td></tr><tr><td align="left">-D或–dereference-args</td><td align="left">显示指定符号链接的源文件大小。</td></tr><tr><td align="left">-H或–si</td><td align="left">与-h参数相同，但是K，M，G是以1000为换算单位。</td></tr><tr><td align="left">-l或–count-links</td><td align="left">重复计算硬件链接的文件。</td></tr></tbody></table><h3 id="使用实例-12"><a href="#使用实例-12" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示目录或者文件所占空间</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong> 只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小</p></blockquote><p><strong><code>例二</code>：显示指定文件所占空间</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> log2012.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：查看指定目录的所占空间</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> scf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：显示多个文件所占空间</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> log30.tar.gz log31.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：只显示总和的大小</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：方便阅读的格式显示</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> <span class="token parameter variable">-h</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：文件和目录都显示</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> <span class="token parameter variable">-ah</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例八</code>：显示几个文件或目录各自占用磁盘空间的大小，还统计它们的总和</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> <span class="token parameter variable">-c</span> log30.tar.gz log31.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong> 加上-c选项后，du不仅显示两个目录各自占用磁盘空间的大小，还在最后一行统计它们的总和。</p></blockquote><p><strong><code>例九</code>：按照空间大小排序</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span><span class="token operator">|</span><span class="token function">sort</span> -nr<span class="token operator">|</span><span class="token function">more</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十</code>：输出当前目录下各个子目录所使用的空间</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">du</span> <span class="token parameter variable">-h</span>  --max-depth<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（32）-top’-82-md-“-82-md”"><a href="#‘每天一个linux命令（32）-top’-82-md-“-82-md”" class="headerlink" title="‘每天一个linux命令（32）: top’(#82.md “#82.md”)"></a>‘每天一个linux命令（32）: top’(#82.md “#82.md”)</h3><p>　　top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。下面详细介绍它的使用方法。top是一个动态显示过程,即可以通过用户按键来不断刷新当前状态.如果在前台执行该命令,它将独占前台,直到用户终止该程序为止.比较准确的说,top命令提供了实时的对系统处理器的状态监视.它将显示系统中CPU最“敏感”的任务列表.该命令可以按CPU使用.内存使用和执行时间对任务进行排序；而且该命令的很多特性都可以通过交互式命令或者在个人定制文件中进行设定。</p><!--more --><h3 id="命令格式-20"><a href="#命令格式-20" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-20"><a href="#命令功能-20" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等</p><h3 id="命令参数-17"><a href="#命令参数-17" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">批处理</td></tr><tr><td align="left">-c</td><td align="left">显示完整的治命令</td></tr><tr><td align="left">-I</td><td align="left">忽略失效过程</td></tr><tr><td align="left">-s</td><td align="left">保密模式</td></tr><tr><td align="left">-S</td><td align="left">累积模式</td></tr><tr><td align="left">-i&lt;时间&gt;</td><td align="left">设置间隔时间</td></tr><tr><td align="left">-u&lt;用户名&gt;</td><td align="left">指定用户名</td></tr><tr><td align="left">-p&lt;进程号&gt;</td><td align="left">指定进程</td></tr><tr><td align="left">-n&lt;次数&gt;</td><td align="left">循环显示的次数</td></tr></tbody></table><h3 id="top交互命令"><a href="#top交互命令" class="headerlink" title="top交互命令"></a>top交互命令</h3><p>　　在top 命令执行过程中可以使用的一些交互命令。这些命令都是单字母的，如果在命令行中使用了s 选项， 其中一些命令可能会被屏蔽。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">h</td><td align="left">显示帮助画面，给出一些简短的命令总结说明</td></tr><tr><td align="left">k</td><td align="left">终止一个进程。</td></tr><tr><td align="left">i</td><td align="left">忽略闲置和僵死进程。这是一个开关式命令</td></tr><tr><td align="left">q</td><td align="left">退出程序</td></tr><tr><td align="left">r</td><td align="left">重新安排一个进程的优先级别</td></tr><tr><td align="left">S</td><td align="left">切换到累计模式</td></tr><tr><td align="left">s</td><td align="left">改变两次刷新之间的延迟时间（单位为s），如果有小数，就换算成m s。输入0值则系统将不断刷新，默认值是5 s</td></tr><tr><td align="left">f或者F</td><td align="left">从当前显示中添加或者删除项目</td></tr><tr><td align="left">o或者O</td><td align="left">改变显示项目的顺序</td></tr><tr><td align="left">l</td><td align="left">切换显示平均负载和启动时间信息</td></tr><tr><td align="left">m</td><td align="left">切换显示内存信息</td></tr><tr><td align="left">t</td><td align="left">切换显示进程和CPU状态信息</td></tr><tr><td align="left">c</td><td align="left">切换显示命令名称和完整命令行</td></tr><tr><td align="left">M</td><td align="left">根据驻留内存大小进行排序</td></tr><tr><td align="left">P</td><td align="left">根据CPU使用百分比大小进行排序</td></tr><tr><td align="left">T</td><td align="left">根据时间&#x2F;累计时间进行排序</td></tr><tr><td align="left">W</td><td align="left">将当前设置写入~&#x2F;.toprc文件中</td></tr></tbody></table><h3 id="使用实例-13"><a href="#使用实例-13" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示进程信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>top讲解</strong><br><img src="/" alt="top命令"><br><strong>其他技巧</strong></p><ol><li>数字<code>1</code>，可监控每个逻辑CPU的状况</li><li>键盘<code>b</code>（打开&#x2F;关闭加亮效果），运行状态的进程</li><li>键盘<code>x</code> 打开&#x2F;关闭排序列的加亮效果</li><li><code>shift + &gt;</code>或<code>shift + &lt;</code>改变排序列</li></ol><p><strong><code>例二</code>：显示 完整命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span> <span class="token parameter variable">-c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：以批处理模式显示程序信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span> <span class="token parameter variable">-b</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：以累积模式显示程序信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span> <span class="token parameter variable">-S</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：设置信息更新次数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 表示更新两次后终止更新显示</span>$ <span class="token function">top</span> <span class="token parameter variable">-n</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例六</code>：设置信息更新时间</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 表示更新周期为3秒</span>$ <span class="token function">top</span> <span class="token parameter variable">-d</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例七</code>：显示指定的进程信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">top</span> <span class="token parameter variable">-p</span> <span class="token number">574</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（33）-free’-83-md-“-83-md”"><a href="#‘每天一个linux命令（33）-free’-83-md-“-83-md”" class="headerlink" title="‘每天一个linux命令（33）: free’(#83.md “#83.md”)"></a>‘每天一个linux命令（33）: free’(#83.md “#83.md”)</h3><p>　　free命令可以显示Linux系统中空闲的、已用的物理内存及swap内存,及被内核使用的buffer。在Linux系统监控的工具中，free命令是最经常使用的命令之一。</p><!--more --><h3 id="命令格式-21"><a href="#命令格式-21" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">free</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-21"><a href="#命令功能-21" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　free 命令显示系统使用和空闲的内存情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。共享内存将被忽略</p><!--more --><h3 id="命令参数-18"><a href="#命令参数-18" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">以Byte为单位显示内存使用情况</td></tr><tr><td align="left">-k</td><td align="left">以KB为单位显示内存使用情况</td></tr><tr><td align="left">-m</td><td align="left">以MB为单位显示内存使用情况</td></tr><tr><td align="left">-g</td><td align="left">以GB为单位显示内存使用情况</td></tr><tr><td align="left">-o</td><td align="left">不显示缓冲区调节列</td></tr><tr><td align="left">-s&lt;间隔秒数&gt;</td><td align="left">持续观察内存使用状况</td></tr><tr><td align="left">-t</td><td align="left">显示内存总和列</td></tr><tr><td align="left">-V</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例-14"><a href="#使用实例-14" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示内存使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">free</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:       <span class="token number">12095180</span>     <span class="token number">8362640</span>      <span class="token number">198460</span>     <span class="token number">1379116</span>     <span class="token number">3534080</span>     <span class="token number">2100004</span>Swap:       <span class="token number">8185112</span>       <span class="token number">40008</span>     <span class="token number">8145104</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>total:总计物理内存的大小。<br>used:已使用多大。<br>free:可用有多少。<br>Shared:多个进程共享的内存总额。<br>Buffers&#x2F;cached:磁盘缓存的大小。</p></blockquote><p><strong><code>例二</code>：显示内存使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">free</span> <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：周期性的查询内存使用信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 每10s 执行一次命令</span>$ <span class="token function">free</span> <span class="token parameter variable">-s</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（34）-vmstat’-84-md-“-84-md”"><a href="#‘每天一个linux命令（34）-vmstat’-84-md-“-84-md”" class="headerlink" title="‘每天一个linux命令（34）: vmstat’(#84.md “#84.md”)"></a>‘每天一个linux命令（34）: vmstat’(#84.md “#84.md”)</h3><p>　　vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控。他是对系统的整体情况进行统计，不足之处是无法对某个进程进行深入分析。vmstat 工具提供了一种低开销的系统性能观察方式。因为 vmstat 本身就是低开销工具，在非常高负荷的服务器上，你需要查看并监控系统的健康情况,在控制窗口还是能够使用vmstat 输出结果。在学习vmstat命令前，我们先了解一下Linux系统中关于物理内存和虚拟内存相关信息。</p><!--more --><h3 id="物理内存和虚拟内存区别"><a href="#物理内存和虚拟内存区别" class="headerlink" title="物理内存和虚拟内存区别"></a>物理内存和虚拟内存区别</h3><p>　　我们知道，直接从物理内存读写数据要比从硬盘读写数据要快的多，因此，我们希望所有数据的读取和写入都在内存完成，而内存是有限的，这样就引出了物理内存与虚拟内存的概念。</p><p>　　物理内存就是系统硬件提供的内存大小，是真正的内存，相对于物理内存，在linux下还有一个虚拟内存的概念，虚拟内存就是为了满足物理内存的不足而提出的策略，它是利用磁盘空间虚拟出的一块逻辑内存，用作虚拟内存的磁盘空间被称为交换空间（Swap Space）。</p><p>　　作为物理内存的扩展，linux会在物理内存不足时，使用交换分区的虚拟内存，更详细的说，就是内核会将暂时不用的内存块信息写到交换空间，这样以来，物理内存得到了释放，这块内存就可以用于其它目的，当需要用到原始的内容时，这些信息会被重新从交换空间读入物理内存。</p><p>　　linux的内存管理采取的是分页存取机制，为了保证物理内存能得到充分的利用，内核会在适当的时候将物理内存中不经常使用的数据块自动交换到虚拟内存中，而将经常使用的信息保留到物理内存。</p><p>　　要深入了解linux内存运行机制，需要知道下面提到的几个方面：</p><p>　　首先，Linux系统会不时的进行页面交换操作，以保持尽可能多的空闲物理内存，即使并没有什么事情需要内存，Linux也会交换出暂时不用的内存页面。这可以避免等待交换所需的时间。</p><p>　　其次，linux进行页面交换是有条件的，不是所有页面在不用时都交换到虚拟内存，linux内核根据”最近最经常使用“算法，仅仅将一些不经常使用的页面文件交换到虚拟内存，有时我们会看到这么一个现象：linux物理内存还有很多，但是交换空间也使用了很多。其实，这并不奇怪，例如，一个占用很大内存的进程运行时，需要耗费很多内存资源，此时就会有一些不常用页面文件被交换到虚拟内存中，但后来这个占用很多内存资源的进程结束并释放了很多内存时，刚才被交换出去的页面文件并不会自动的交换进物理内存，除非有这个必要，那么此刻系统物理内存就会空闲很多，同时交换空间也在被使用，就出现了刚才所说的现象了。关于这点，不用担心什么，只要知道是怎么一回事就可以了。</p><p>　　最后，交换空间的页面在使用时会首先被交换到物理内存，如果此时没有足够的物理内存来容纳这些页面，它们又会被马上交换出去，如此以来，虚拟内存中可能没有足够空间来存储这些交换页面，最终会导致linux出现假死机、服务异常等问题，linux虽然可以在一段时间内自行恢复，但是恢复后的系统已经基本不可用了。</p><p>　　因此，合理规划和设计linux内存的使用，是非常重要的。</p><h3 id="虚拟内存原理："><a href="#虚拟内存原理：" class="headerlink" title="虚拟内存原理："></a>虚拟内存原理：</h3><p>　　在系统中运行的每个进程都需要使用到内存，但不是每个进程都需要每时每刻使用系统分配的内存空间。当系统运行所需内存超过实际的物理内存，内核会释放某些进程所占用但未使用的部分或所有物理内存，将这部分资料存储在磁盘上直到进程下一次调用，并将释放出的内存提供给有需要的进程使用。</p><p>　　在Linux内存管理中，主要是通过“调页Paging”和“交换Swapping”来完成上述的内存调度。调页算法是将内存中最近不常使用的页面换到磁盘上，把活动页面保留在内存中供进程使用。交换技术是将整个进程，而不是部分页面，全部交换到磁盘上。</p><p>　　分页(Page)写入磁盘的过程被称作Page-Out，分页(Page)从磁盘重新回到内存的过程被称作Page-In。当内核需要一个分页时，但发现此分页不在物理内存中(因为已经被Page-Out了)，此时就发生了分页错误（Page Fault）。</p><p>　　当系统内核发现可运行内存变少时，就会通过Page-Out来释放一部分物理内存。经管Page-Out不是经常发生，但是如果Page-out频繁不断的发生，直到当内核管理分页的时间超过运行程式的时间时，系统效能会急剧下降。这时的系统已经运行非常慢或进入暂停状态，这种状态亦被称作thrashing(颠簸)。</p><h3 id="命令格式-22"><a href="#命令格式-22" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vmstat</span> <span class="token punctuation">[</span>-a<span class="token punctuation">]</span> <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>-S unit<span class="token punctuation">]</span> <span class="token punctuation">[</span>delay <span class="token punctuation">[</span> count<span class="token punctuation">]</span><span class="token punctuation">]</span>$ <span class="token function">vmstat</span> <span class="token punctuation">[</span>-s<span class="token punctuation">]</span> <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>-S unit<span class="token punctuation">]</span>$ <span class="token function">vmstat</span> <span class="token punctuation">[</span>-m<span class="token punctuation">]</span> <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>delay <span class="token punctuation">[</span> count<span class="token punctuation">]</span><span class="token punctuation">]</span>$ <span class="token function">vmstat</span> <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>delay <span class="token punctuation">[</span> count<span class="token punctuation">]</span><span class="token punctuation">]</span>$ <span class="token function">vmstat</span> <span class="token punctuation">[</span>-p disk partition<span class="token punctuation">]</span> <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> <span class="token punctuation">[</span>delay <span class="token punctuation">[</span> count<span class="token punctuation">]</span><span class="token punctuation">]</span>$ <span class="token function">vmstat</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span>$ <span class="token function">vmstat</span> <span class="token punctuation">[</span>-V<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令功能-22"><a href="#命令功能-22" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用来显示虚拟内存的信息</p><h3 id="命令参数-19"><a href="#命令参数-19" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">显示活跃和非活跃内存</td></tr><tr><td align="left">-f</td><td align="left">显示从系统启动至今的fork数量</td></tr><tr><td align="left">-m</td><td align="left">显示slabinfo</td></tr><tr><td align="left">-n</td><td align="left">只在开始时显示一次各字段名称</td></tr><tr><td align="left">-s</td><td align="left">显示内存相关统计信息及多种系统活动数量</td></tr><tr><td align="left">delay</td><td align="left">刷新时间间隔。如果不指定，只显示一条结果</td></tr><tr><td align="left">count</td><td align="left">刷新次数。如果不指定刷新次数，但指定了刷新时间间隔，这时刷新次数为无穷</td></tr><tr><td align="left">-d</td><td align="left">显示磁盘相关统计信息</td></tr><tr><td align="left">-p</td><td align="left">显示指定磁盘分区统计信息</td></tr><tr><td align="left">-S</td><td align="left">使用指定单位显示。参数有 k 、K 、m 、M ，分别代表1000、1024、1000000、1048576字节（byte）。默认单位为K（1024 bytes）</td></tr><tr><td align="left">-V</td><td align="left">显示vmstat版本信息</td></tr></tbody></table><h3 id="使用实例-15"><a href="#使用实例-15" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示虚拟内存使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vmstat</span>procs   -  <span class="token parameter variable">--io</span>  r  b   swpd    <span class="token function">free</span>   buff   cache   si   so    bi    bo   <span class="token keyword">in</span>   cs us sy <span class="token function">id</span> wa st <span class="token number">0</span>  <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">7108340</span> <span class="token number">129544</span> <span class="token number">3155916</span>    <span class="token number">0</span>    <span class="token number">0</span>   <span class="token number">184</span>    <span class="token number">53</span>  <span class="token number">203</span>  <span class="token number">995</span>  <span class="token number">4</span>  <span class="token number">1</span> <span class="token number">95</span>  <span class="token number">0</span>  <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br><code>Procs（进程）：</code><br>r: 运行队列中进程数量<br>b: 等待IO的进程数量<br>Memory（内存）：<br>swpd: 使用虚拟内存大小<br>free: 可用内存大小<br>buff: 用作缓冲的内存大小<br>cache: 用作缓存的内存大小<br><code>Swap：</code><br>si: 每秒从交换区写到内存的大小<br>so: 每秒写入交换区的内存大小<br>IO：（现在的Linux版本块的大小为1024bytes）<br>bi: 每秒读取的块数<br>bo: 每秒写入的块数<br><code>系统：</code><br>in: 每秒中断数，包括时钟中断。<br>cs: 每秒上下文切换数。<br>CPU（以百分比表示）：<br>us: 用户进程执行时间(user time)<br>sy: 系统进程执行时间(system time)<br>id: 空闲时间(包括IO等待时间),中央处理器的空闲时间 。以百分比表示。<br>wa: 等待IO时间<br><strong>备注：</strong> 如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。如果pi，po 长期不等于0，表示内存不足。如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。Linux在具有高稳定性、可靠性的同时，具有很好的可伸缩性和扩展性，能够针对不同的应用和硬件环境调整，优化出满足当前应用需要的最佳性能。因此企业在维护Linux系统、进行系统调优时，了解系统性能分析工具是至关重要的。<br>命令：vmstat 5 5<br>表示在5秒时间内进行5次采样。将得到一个数据汇总他能够反映真正的系统情况。</p></blockquote><p><strong><code>例二</code>：显示活跃和非活跃内存</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vmstat</span> <span class="token parameter variable">-a</span> <span class="token number">2</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>使用-a选项显示活跃和非活跃内存时，所显示的内容除增加inact和active外，其他显示内容与例子1相同。<br>Memory（内存）：<br>inact: 非活跃内存大小（当使用-a选项时显示）<br>active: 活跃的内存大小（当使用-a选项时显示）</p></blockquote><p><strong><code>例三</code>：查看系统已经fork了多少次</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vmstat</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>这个数据是从&#x2F;proc&#x2F;stat中的processes字段里取得的</p></blockquote><p><strong><code>例四</code>：查看内存使用的详细信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vmstat</span> <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>这些信息的分别来自于&#x2F;proc&#x2F;meminfo,&#x2F;proc&#x2F;stat和&#x2F;proc&#x2F;vmstat。</p></blockquote><p><strong><code>例五</code>：查看磁盘的读&#x2F;写</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vmstat</span> <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>这些信息主要来自于&#x2F;proc&#x2F;diskstats.<br>merged:表示一次来自于合并的写&#x2F;读请求,一般系统会把多个连接&#x2F;邻近的读&#x2F;写请求合并到一起来操作.</p></blockquote><p><strong><code>例六</code>：查看&#x2F;dev&#x2F;sda1磁盘的读&#x2F;写</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vmstat</span> <span class="token parameter variable">-p</span> /dev/sda1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>这些信息主要来自于&#x2F;proc&#x2F;diskstats。<br>reads:来自于这个分区的读的次数。<br>read sectors:来自于这个分区的读扇区的次数。<br>writes:来自于这个分区的写的次数。<br>requested writes:来自于这个分区的写请求次数。</p></blockquote><p><strong><code>例七</code>：查看系统的slab信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">vmstat</span> <span class="token parameter variable">-m</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>这组信息来自于&#x2F;proc&#x2F;slabinfo。<br>slab:由于内核会有许多小对象，这些对象构造销毁十分频繁，比如i-node，dentry，这些对象如果每次构建的时候就向内存要一个页(4kb)，而其实只有几个字节，这样就会非常浪费，为了解决这个问题，就引入了一种新的机制来处理在同一个页框中如何分配小存储区，而slab可以对小对象进行分配,这样就不用为每一个对象分配页框，从而节省了空间，内核对一些小对象创建析构很频繁，slab对这些小对象进行缓冲,可以重复利用,减少内存分配次数。</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（35）-iostat’-85-md-“-85-md”"><a href="#‘每天一个linux命令（35）-iostat’-85-md-“-85-md”" class="headerlink" title="‘每天一个linux命令（35）: iostat’(#85.md “#85.md”)"></a>‘每天一个linux命令（35）: iostat’(#85.md “#85.md”)</h3><p>　　Linux系统中的 iostat是I&#x2F;O statistics（输入&#x2F;输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。iostat属于sysstat软件包。可以用yum install sysstat 直接安装。</p><!--more --><h3 id="命令格式-23"><a href="#命令格式-23" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ iostat <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">[</span>时间<span class="token punctuation">]</span><span class="token punctuation">[</span>次数<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-23"><a href="#命令功能-23" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　通过iostat方便查看CPU、网卡、tty设备、磁盘、CD-ROM 等等设备的活动情况,负载信息。</p><h3 id="命令参数-20"><a href="#命令参数-20" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-C</td><td align="left">显示CPU使用情况</td></tr><tr><td align="left">-d</td><td align="left">显示磁盘使用情况</td></tr><tr><td align="left">-k</td><td align="left">以 KB 为单位显示</td></tr><tr><td align="left">-m</td><td align="left">以 M 为单位显示</td></tr><tr><td align="left">-N</td><td align="left">显示磁盘阵列(LVM) 信息</td></tr><tr><td align="left">-n</td><td align="left">显示 NFS 使用情况</td></tr><tr><td align="left">-p[磁盘]</td><td align="left">显示磁盘和分区的情况</td></tr><tr><td align="left">-t</td><td align="left">显示终端和CPU的信息</td></tr><tr><td align="left">-x</td><td align="left">显示详细信息</td></tr><tr><td align="left">-V</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例-16"><a href="#使用实例-16" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示所有设备负载情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ iostatLinux <span class="token number">3.10</span>.0-327.el7.x86_64 <span class="token punctuation">(</span>s88<span class="token punctuation">)</span> <span class="token number">2017</span>年01月22日 _x86_64_<span class="token punctuation">(</span><span class="token number">24</span> CPU<span class="token punctuation">)</span>avg-cpu:  %user   %nice %system %iowait  %steal   %idle           <span class="token number">0.62</span>    <span class="token number">0.00</span>    <span class="token number">0.20</span>    <span class="token number">1.46</span>    <span class="token number">0.00</span>   <span class="token number">97.72</span>Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtnsda              <span class="token number">64.59</span>      <span class="token number">1726.21</span>       <span class="token number">255.56</span>    <span class="token number">3159941</span>     <span class="token number">467823</span>dm-0              <span class="token number">3.55</span>       <span class="token number">141.11</span>         <span class="token number">4.46</span>     <span class="token number">258319</span>       <span class="token number">8162</span>dm-1              <span class="token number">0.10</span>         <span class="token number">0.83</span>         <span class="token number">0.00</span>       <span class="token number">1520</span>          <span class="token number">0</span>dm-2              <span class="token number">0.10</span>         <span class="token number">2.78</span>         <span class="token number">1.14</span>       <span class="token number">5080</span>       <span class="token number">2082</span>dm-3             <span class="token number">60.44</span>      <span class="token number">1565.98</span>       <span class="token number">248.84</span>    <span class="token number">2866640</span>     <span class="token number">455511</span>dm-4             <span class="token number">27.54</span>       <span class="token number">463.29</span>       <span class="token number">105.38</span>     <span class="token number">848088</span>     <span class="token number">192897</span>dm-5              <span class="token number">1.25</span>        <span class="token number">25.57</span>        <span class="token number">17.57</span>      <span class="token number">46804</span>      <span class="token number">32170</span>dm-6              <span class="token number">0.64</span>        <span class="token number">12.86</span>         <span class="token number">2.07</span>      <span class="token number">23535</span>       <span class="token number">3786</span>dm-7              <span class="token number">4.14</span>        <span class="token number">80.43</span>        <span class="token number">36.60</span>     <span class="token number">147240</span>      <span class="token number">67004</span>dm-8              <span class="token number">1.13</span>        <span class="token number">20.52</span>         <span class="token number">2.42</span>      <span class="token number">37566</span>       <span class="token number">4428</span>dm-9              <span class="token number">1.13</span>        <span class="token number">21.18</span>         <span class="token number">2.40</span>      <span class="token number">38766</span>       <span class="token number">4396</span>dm-10             <span class="token number">1.15</span>        <span class="token number">21.35</span>         <span class="token number">2.41</span>      <span class="token number">39082</span>       <span class="token number">4412</span>dm-11             <span class="token number">0.70</span>        <span class="token number">14.40</span>         <span class="token number">2.21</span>      <span class="token number">26355</span>       <span class="token number">4043</span>dm-12             <span class="token number">1.42</span>        <span class="token number">22.42</span>         <span class="token number">6.85</span>      <span class="token number">41035</span>      <span class="token number">12541</span>dm-13             <span class="token number">0.46</span>        <span class="token number">12.17</span>         <span class="token number">1.25</span>      <span class="token number">22275</span>       <span class="token number">2289</span>dm-14             <span class="token number">1.15</span>        <span class="token number">20.47</span>         <span class="token number">2.42</span>      <span class="token number">37470</span>       <span class="token number">4432</span>dm-15             <span class="token number">8.28</span>       <span class="token number">101.07</span>        <span class="token number">16.51</span>     <span class="token number">185018</span>      <span class="token number">30220</span>dm-16             <span class="token number">1.10</span>        <span class="token number">20.02</span>         <span class="token number">2.45</span>      <span class="token number">36646</span>       <span class="token number">4488</span>dm-17             <span class="token number">1.81</span>        <span class="token number">29.08</span>         <span class="token number">4.15</span>      <span class="token number">53232</span>       <span class="token number">7591</span>dm-18             <span class="token number">0.68</span>        <span class="token number">18.40</span>         <span class="token number">1.43</span>      <span class="token number">33689</span>       <span class="token number">2611</span>dm-19             <span class="token number">2.33</span>        <span class="token number">43.89</span>         <span class="token number">4.63</span>      <span class="token number">80340</span>       <span class="token number">8483</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br><code>cpu属性值说明：</code><br>%user：CPU处在用户模式下的时间百分比。<br>%nice：CPU处在带NICE值的用户模式下的时间百分比。<br>%system：CPU处在系统模式下的时间百分比。<br>%iowait：CPU等待输入输出完成时间的百分比。<br>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。<br>%idle：CPU空闲时间百分比。<br><code>备注：</code>如果%iowait的值过高，表示硬盘存在I&#x2F;O瓶颈，%idle值高，表示CPU较空闲，如果%idle值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量。%idle值如果持续低于10，那么系统的CPU处理能力相对较低，表明系统中最需要解决的资源是CPU。<br><code>disk属性值说明：</code><br>rrqm&#x2F;s:  每秒进行 merge 的读操作数目。即 rmerge&#x2F;s<br>wrqm&#x2F;s:  每秒进行 merge 的写操作数目。即 wmerge&#x2F;s<br>r&#x2F;s:  每秒完成的读 I&#x2F;O 设备次数。即 rio&#x2F;s<br>w&#x2F;s:  每秒完成的写 I&#x2F;O 设备次数。即 wio&#x2F;s<br>rsec&#x2F;s:  每秒读扇区数。即 rsect&#x2F;s<br>wsec&#x2F;s:  每秒写扇区数。即 wsect&#x2F;s<br>rkB&#x2F;s:  每秒读K字节数。是 rsect&#x2F;s 的一半，因为每扇区大小为512字节。<br>wkB&#x2F;s:  每秒写K字节数。是 wsect&#x2F;s 的一半。<br>avgrq-sz:  平均每次设备I&#x2F;O操作的数据大小 (扇区)。<br>avgqu-sz:  平均I&#x2F;O队列长度。<br>await:  平均每次设备I&#x2F;O操作的等待时间 (毫秒)。<br>svctm: 平均每次设备I&#x2F;O操作的服务时间 (毫秒)。<br>%util:  一秒中有百分之多少的时间用于 I&#x2F;O 操作，即被io消耗的cpu百分比<br><code>备注：</code>如果 %util 接近 100%，说明产生的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷，该磁盘可能存在瓶颈。如果 svctm 比较接近 await，说明 I&#x2F;O 几乎没有等待时间；如果 await 远大于 svctm，说明I&#x2F;O 队列太长，io响应太慢，则需要进行必要优化。如果avgqu-sz比较大，也表示有当量io在等待。</p></blockquote><p><strong><code>例二</code>：定时显示所有信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 每隔 2秒刷新显示，且显示3次</span>$ iostat <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：显示指定磁盘信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ iostat <span class="token parameter variable">-d</span> sda1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：显示tty和Cpu信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ iostat <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：以M为单位显示所有信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ iostat <span class="token parameter variable">-m</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：查看TPS和吞吐量信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ iostat <span class="token parameter variable">-d</span> <span class="token parameter variable">-k</span> <span class="token number">1</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>tps：该设备每秒的传输次数（Indicate the number of transfers per second that were issued to the device.）。“一次传输”意思是“一次I&#x2F;O请求”。多个逻辑请求可能会被合并为“一次I&#x2F;O请求”。“一次传输”请求的大小是未知的。<br>kB_read&#x2F;s：每秒从设备（drive expressed）读取的数据量；<br>kB_wrtn&#x2F;s：每秒向设备（drive expressed）写入的数据量；<br>kB_read：读取的总数据量；kB_wrtn：写入的总数量数据量；<br>这些单位都为Kilobytes。<br>上面的例子中，我们可以看到磁盘sda以及它的各个分区的统计数据，当时统计的磁盘总TPS是22.73，下面是各个分区的TPS。（因为是瞬间值，所以总TPS并不严格等于各个分区TPS的总和）</p></blockquote><p><strong><code>例七</code>：查看设备使用率（%util）、响应时间（await）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ iostat <span class="token parameter variable">-d</span> <span class="token parameter variable">-x</span> <span class="token parameter variable">-k</span> <span class="token number">1</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>rrqm&#x2F;s：  每秒进行 merge 的读操作数目.即 delta(rmerge)&#x2F;s<br>wrqm&#x2F;s： 每秒进行 merge 的写操作数目.即 delta(wmerge)&#x2F;s<br>r&#x2F;s：  每秒完成的读 I&#x2F;O 设备次数.即 delta(rio)&#x2F;s<br>w&#x2F;s：  每秒完成的写 I&#x2F;O 设备次数.即 delta(wio)&#x2F;s<br>rsec&#x2F;s：  每秒读扇区数.即 delta(rsect)&#x2F;s<br>wsec&#x2F;s： 每秒写扇区数.即 delta(wsect)&#x2F;s<br>rkB&#x2F;s：  每秒读K字节数.是 rsect&#x2F;s 的一半,因为每扇区大小为512字节.(需要计算)<br>wkB&#x2F;s：  每秒写K字节数.是 wsect&#x2F;s 的一半.(需要计算)<br>avgrq-sz：平均每次设备I&#x2F;O操作的数据大小 (扇区).delta(rsect+wsect)&#x2F;delta(rio+wio)<br>avgqu-sz：平均I&#x2F;O队列长度.即 delta(aveq)&#x2F;s&#x2F;1000 (因为aveq的单位为毫秒).<br>await：  平均每次设备I&#x2F;O操作的等待时间 (毫秒).即 delta(ruse+wuse)&#x2F;delta(rio+wio)<br>svctm： 平均每次设备I&#x2F;O操作的服务时间 (毫秒).即 delta(use)&#x2F;delta(rio+wio)<br>%util： 一秒中有百分之多少的时间用于 I&#x2F;O 操作,或者说一秒中有多少时间 I&#x2F;O 队列是非空的，即 delta(use)&#x2F;s&#x2F;1000 (因为use的单位为毫秒)<br>　　如果 %util 接近 100%，说明产生的I&#x2F;O请求太多，I&#x2F;O系统已经满负荷，该磁盘可能存在瓶颈。<br>　　idle小于70% IO压力就较大了，一般读取速度有较多的wait。<br>同时可以结合vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比，高过30%时IO压力高)。<br>　　另外 await 的参数也要多和 svctm 来参考。差的过高就一定有 IO 的问题。<br>　　avgqu-sz 也是个做 IO 调优时需要注意的地方，这个就是直接每次操作的数据的大小，如果次数多，但数据拿的小的话，其实 IO 也会很小。如果数据拿的大，才IO 的数据会高。也可以通过 avgqu-sz × ( r&#x2F;s or w&#x2F;s ) &#x3D; rsec&#x2F;s or wsec&#x2F;s。也就是讲，读定速度是这个来决定的。<br>　　svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了)，svctm 的大小一般和磁盘性能有关，CPU&#x2F;内存的负荷也会对其有影响，请求过多也会间接导致 svctm 的增加。await 的大小一般取决于服务时间(svctm) 以及 I&#x2F;O 队列的长度和 I&#x2F;O 请求的发出模式。如果 svctm 比较接近 await，说明 I&#x2F;O 几乎没有等待时间；如果 await 远大于 svctm，说明 I&#x2F;O 队列太长，应用得到的响应时间变慢，如果响应时间超过了用户可以容许的范围，这时可以考虑更换更快的磁盘，调整内核 elevator 算法，优化应用，或者升级 CPU。<br>　　队列长度(avgqu-sz)也可作为衡量系统 I&#x2F;O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I&#x2F;O 洪水。<br><code>形象的比喻：</code><br>r&#x2F;s+w&#x2F;s 类似于交款人的总数<br>平均队列长度(avgqu-sz)类似于单位时间里平均排队人的个数<br>平均服务时间(svctm)类似于收银员的收款速度<br>平均等待时间(await)类似于平均每人的等待时间<br>平均I&#x2F;O数据(avgrq-sz)类似于平均每人所买的东西多少<br>I&#x2F;O 操作率 (%util)类似于收款台前有人排队的时间比例<br>　　设备IO操作:总IO(io)&#x2F;s &#x3D; r&#x2F;s(读) +w&#x2F;s(写) &#x3D;1.46 + 25.28&#x3D;26.74<br>　　平均每次设备I&#x2F;O操作只需要0.36毫秒完成,现在却需要10.57毫秒完成，因为发出的请求太多(每秒26.74个)，假如请求时同时发出的，可以这样计算平均等待时间:<br>　　平均等待时间&#x3D;单个I&#x2F;O服务器时间*(1+2+…+请求总数-1)&#x2F;请求总数<br>　　每秒发出的I&#x2F;0请求很多,但是平均队列就4,表示这些请求比较均匀,大部分处理还是比较及时。</p></blockquote><p><strong><code>例八</code>：查看cpu状态</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ iostat <span class="token parameter variable">-c</span> <span class="token number">1</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（36）-lsof’-86-md-“-86-md”"><a href="#‘每天一个linux命令（36）-lsof’-86-md-“-86-md”" class="headerlink" title="‘每天一个linux命令（36）: lsof’(#86.md “#86.md”)"></a>‘每天一个linux命令（36）: lsof’(#86.md “#86.md”)</h3><p>　　lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p><!--more --><h3 id="命令格式-24"><a href="#命令格式-24" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-24"><a href="#命令功能-24" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。找回&#x2F;恢复删除的文件。是十分方便的系统监视工具，因为 lsof 需要访问核心内存和各种文件，所以需要root用户执行。<br>lsof打开的文件可以是：</p><ol><li>普通文件</li><li>目录</li><li>网络文件系统的文件</li><li>字符或设备文件</li><li>(函数)共享库</li><li>管道，命名管道</li><li>符号链接</li><li>网络文件（例如：NFS file、网络socket，unix域名socket）</li><li>还有其它类型的文件，等等</li></ol><h3 id="命令参数-21"><a href="#命令参数-21" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">列出打开文件存在的进程</td></tr><tr><td align="left">-c&lt;进程名&gt;</td><td align="left">列出指定进程所打开的文件</td></tr><tr><td align="left">-g</td><td align="left">列出GID号进程详情</td></tr><tr><td align="left">-d&lt;文件号&gt;</td><td align="left">列出占用该文件号的进程</td></tr><tr><td align="left">+d&lt;目录&gt;</td><td align="left">列出目录下被打开的文件</td></tr><tr><td align="left">+D&lt;目录&gt;</td><td align="left">递归列出目录下被打开的文件</td></tr><tr><td align="left">-n&lt;目录&gt;</td><td align="left">列出使用NFS的文件</td></tr><tr><td align="left">-i&lt;条件&gt;</td><td align="left">列出符合条件的进程。（4、6、协议、:端口、 @ip ）</td></tr><tr><td align="left">-p&lt;进程号&gt;</td><td align="left">列出指定进程号所打开的文件</td></tr><tr><td align="left">-u</td><td align="left">列出UID号进程详情</td></tr><tr><td align="left">-h</td><td align="left">显示帮助信息</td></tr><tr><td align="left">-v</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例-17"><a href="#使用实例-17" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：无任何参数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span>COMMAND     PID <span class="token environment constant">USER</span>   FD      TYPE             DEVICE     SIZE       NODE NAMEinit          <span class="token number">1</span> root  cwd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /init          <span class="token number">1</span> root  rtd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /init          <span class="token number">1</span> root  txt       REG                <span class="token number">8,2</span>    <span class="token number">43496</span>    <span class="token number">6121706</span> /sbin/initinit          <span class="token number">1</span> root  mem       REG                <span class="token number">8,2</span>   <span class="token number">143600</span>    <span class="token number">7823908</span> /lib64/ld-2.5.soinit          <span class="token number">1</span> root  mem       REG                <span class="token number">8,2</span>  <span class="token number">1722304</span>    <span class="token number">7823915</span> /lib64/libc-2.5.soinit          <span class="token number">1</span> root  mem       REG                <span class="token number">8,2</span>    <span class="token number">23360</span>    <span class="token number">7823919</span> /lib64/libdl-2.5.soinit          <span class="token number">1</span> root  mem       REG                <span class="token number">8,2</span>    <span class="token number">95464</span>    <span class="token number">7824116</span> /lib64/libselinux.so.1init          <span class="token number">1</span> root  mem       REG                <span class="token number">8,2</span>   <span class="token number">247496</span>    <span class="token number">7823947</span> /lib64/libsepol.so.1init          <span class="token number">1</span> root   10u     FIFO               <span class="token number">0,17</span>                <span class="token number">1233</span> /dev/initctlmigration     <span class="token number">2</span> root  cwd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /migration     <span class="token number">2</span> root  rtd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /migration     <span class="token number">2</span> root  txt   unknown                                        /proc/2/exeksoftirqd     <span class="token number">3</span> root  cwd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /ksoftirqd     <span class="token number">3</span> root  rtd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /ksoftirqd     <span class="token number">3</span> root  txt   unknown                                        /proc/3/exemigration     <span class="token number">4</span> root  cwd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /migration     <span class="token number">4</span> root  rtd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /migration     <span class="token number">4</span> root  txt   unknown                                        /proc/4/exeksoftirqd     <span class="token number">5</span> root  cwd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /ksoftirqd     <span class="token number">5</span> root  rtd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /ksoftirqd     <span class="token number">5</span> root  txt   unknown                                        /proc/5/exeevents/0      <span class="token number">6</span> root  cwd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /events/0      <span class="token number">6</span> root  rtd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /events/0      <span class="token number">6</span> root  txt   unknown                                        /proc/6/exeevents/1      <span class="token number">7</span> root  cwd       DIR                <span class="token number">8,2</span>     <span class="token number">4096</span>          <span class="token number">2</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>lsof输出各列信息的意义如下：<br>COMMAND：进程的名称<br>PID：进程标识符<br>PPID：父进程标识符（需要指定-R参数）<br>USER：进程所有者<br>PGID：进程所属组<br>FD：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等<br>（1）cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改<br>（2）txt ：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 &#x2F;sbin&#x2F;init 程序<br>（3）lnn：library references (AIX);<br>（4）er：FD information error (see NAME column);<br>（5）jld：jail directory (FreeBSD);<br>（6）ltx：shared library text (code and data);<br>（7）mxx ：hex memory-mapped type number xx.<br>（8）m86：DOS Merge mapped file;<br>（9）mem：memory-mapped file;<br>（10）mmap：memory-mapped device;<br>（11）pd：parent directory;<br>（12）rtd：root directory;<br>（13）tr：kernel trace file (OpenBSD);<br>（14）v86  VP&#x2F;ix mapped file;<br>（15）0：表示标准输出<br>（16）1：表示标准输入<br>（17）2：表示标准错误<br>一般在标准输出、标准错误、标准输入后还跟着文件状态模式：r、w、u等<br>（1）u：表示该文件被打开并处于读取&#x2F;写入模式<br>（2）r：表示该文件被打开并处于只读模式<br>（3）w：表示该文件被打开并处于<br>（4）空格：表示该文件的状态模式为unknow，且没有锁定<br>（5）-：表示该文件的状态模式为unknow，且被锁定<br>同时在文件状态模式后面，还跟着相关的锁<br>（1）N：for a Solaris NFS lock of unknown type;<br>（2）r：for read lock on part of the file;<br>（3）R：for a read lock on the entire file;<br>（4）w：for a write lock on part of the file;（文件的部分写锁）<br>（5）W：for a write lock on the entire file;（整个文件的写锁）<br>（6）u：for a read and write lock of any length;<br>（7）U：for a lock of unknown type;<br>（8）x：for an SCO OpenServer Xenix lock on part      of the file;<br>（9）X：for an SCO OpenServer Xenix lock on the      entire file;<br>（10）space：if there is no lock.<br>TYPE：文件类型，如DIR、REG等，常见的文件类型<br>（1）DIR：表示目录<br>（2）CHR：表示字符类型<br>（3）BLK：块设备类型<br>（4）UNIX： UNIX 域套接字<br>（5）FIFO：先进先出 (FIFO) 队列<br>（6）IPv4：网际协议 (IP) 套接字<br>DEVICE：指定磁盘的名称<br>SIZE：文件的大小<br>NODE：索引节点（文件在磁盘上的标识）<br>NAME：打开文件的确切名称</p></blockquote><p><strong><code>例二</code>：查看谁正在使用某个文件，也就是说查找某个文件相关的进程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> /bin/bashCOMMAND   PID <span class="token environment constant">USER</span>  FD   TYPE DEVICE   SIZE    NODE NAME<span class="token function">bash</span>    <span class="token number">24159</span> root txt    REG    <span class="token number">8,2</span> <span class="token number">801528</span> <span class="token number">5368780</span> /bin/bash<span class="token function">bash</span>    <span class="token number">24909</span> root txt    REG    <span class="token number">8,2</span> <span class="token number">801528</span> <span class="token number">5368780</span> /bin/bash<span class="token function">bash</span>    <span class="token number">24941</span> root txt    REG    <span class="token number">8,2</span> <span class="token number">801528</span> <span class="token number">5368780</span> /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例三</code>：递归查看某个目录的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> test/test3COMMAND   PID <span class="token environment constant">USER</span>   FD   TYPE DEVICE SIZE    NODE NAME<span class="token function">bash</span>    <span class="token number">24941</span> root  cwd    DIR    <span class="token number">8,2</span> <span class="token number">4096</span> <span class="token number">2258872</span> test/test3<span class="token function">vi</span>      <span class="token number">24976</span> root  cwd    DIR    <span class="token number">8,2</span> <span class="token number">4096</span> <span class="token number">2258872</span> test/test3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong> 使用了+D，对应目录下的所有子目录和文件都会被列出</p></blockquote><p><strong><code>例四</code>：不使用+D选项，遍历查看某个目录的所有文件信息的方法</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'test/test3'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：列出某个用户打开的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -u 选项，u其实是user的缩写</span>$ <span class="token function">lsof</span> <span class="token parameter variable">-u</span> username<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例六</code>：列出某个程序进程所打开的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-c</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong>-c 选项将会列出所有以mysql这个进程开头的程序的文件，其实你也可以写成 lsof | grep mysql, 但是第一种方法明显比第二种方法要少打几个字符了</p></blockquote><p><strong><code>例七</code>：列出多个进程多个打开的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-c</span> mysql <span class="token parameter variable">-c</span> apache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例八</code>：列出某个用户以及某个进程所打开的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span>  <span class="token parameter variable">-u</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-c</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例九</code>：列出除了某个用户外的被打开的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ^这个符号在用户名之前，将会把是root用户打开的进程不让显示</span>$ <span class="token function">lsof</span> <span class="token parameter variable">-u</span> ^root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例十</code>：通过某个进程号显示该进行打开的文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-p</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十一</code>：列出多个进程号对应的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-p</span> <span class="token number">1,2</span>,3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十二</code>：列出除了某个进程号，其他进程号所打开的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-p</span> ^1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十三</code>：列出所有的网络连接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十四</code>：列出所有tcp 网络连接信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-i</span> tcp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十五</code>：列出所有udp网络连接信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-i</span> udp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十六</code>：列出谁在使用某个端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-i</span> :3306<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十七</code>：列出谁在使用某个特定的udp&#x2F;tcp端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-i</span> udp:55$ <span class="token function">lsof</span> <span class="token parameter variable">-i</span> tcp:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例十八</code>：列出某个用户的所有活跃的网络端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-u</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十九</code>：列出所有网络文件系统</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-N</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二十</code>：域名socket文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-u</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二十一</code>：某个用户组所打开的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-g</span> <span class="token number">5555</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二十二</code>：根据文件描述列出对应的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-d</span> description<span class="token punctuation">(</span>like <span class="token number">2</span><span class="token punctuation">)</span>例如：lsof  <span class="token parameter variable">-d</span>  txt例如：lsof  <span class="token parameter variable">-d</span>  <span class="token number">1</span>例如：lsof  <span class="token parameter variable">-d</span>  <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>0表示标准输入，1表示标准输出，2表示标准错误，从而可知：所以大多数应用程序所打开的文件的 FD 都是从 3 开始</p></blockquote><p><strong><code>例二十三</code>：根据文件描述范围列出文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-d</span> <span class="token number">2</span>-3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二十四</code>：列出COMMAND列中包含字符串” sshd”，且文件描符的类型为txt的文件信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-c</span> sshd <span class="token parameter variable">-a</span> <span class="token parameter variable">-d</span> txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二十五</code>：列出被进程号为1234的进程所打开的所有IPV4 network files</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-i</span> <span class="token number">4</span> <span class="token parameter variable">-a</span> <span class="token parameter variable">-p</span> <span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二十六</code>：列出目前连接主机peida.linux上端口为：20，21，22，25，53，80相关的所有文件信息，且每隔3秒不断的执行lsof指令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">lsof</span> <span class="token parameter variable">-i</span> @peida.linux:20,21,22,25,53,80  <span class="token parameter variable">-r</span>  <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（37）-ifconfig’-87-md-“-87-md”"><a href="#‘每天一个linux命令（37）-ifconfig’-87-md-“-87-md”" class="headerlink" title="‘每天一个linux命令（37）: ifconfig’(#87.md “#87.md”)"></a>‘每天一个linux命令（37）: ifconfig’(#87.md “#87.md”)</h3><p>　　许多windows非常熟悉ipconfig命令行工具，它被用来获取网络接口配置信息并对此进行修改。Linux系统拥有一个类似的工具，也就是ifconfig(interfaces config)。通常需要以root身份登录或使用sudo以便在Linux机器上使用ifconfig工具。依赖于ifconfig命令中使用一些选项属性，ifconfig工具不仅可以被用来简单地获取网络接口配置信息，还可以修改这些配置。</p><!--more --><h3 id="命令格式-25"><a href="#命令格式-25" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ifconfig</span> <span class="token punctuation">[</span>网络设备<span class="token punctuation">]</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-25"><a href="#命令功能-25" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　ifconfig 命令用来查看和配置网络设备。当网络环境发生改变时可通过此命令对网络进行相应的配置。</p><blockquote><p><strong>注意：</strong>  用ifconfig命令配置的网卡信息，在网卡重启后机器重启后，配置就不存在。要想将上述的配置信息永远的存的电脑里，那就要修改网卡的配置文件了。</p></blockquote><h3 id="命令参数-22"><a href="#命令参数-22" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">up</td><td align="left">启动指定网络设备&#x2F;网卡</td></tr><tr><td align="left">down</td><td align="left">关闭指定网络设备&#x2F;网卡。该参数可以有效地阻止通过指定接口的IP信息流，如果想永久地关闭一个接口，我们还需要从核心路由表中将该接口的路由信息全部删除</td></tr><tr><td align="left">arp</td><td align="left">设置指定网卡是否支持ARP协议</td></tr><tr><td align="left">-promisc</td><td align="left">设置是否支持网卡的promiscuous模式，如果选择此参数，网卡将接收网络中发给它所有的数据包</td></tr><tr><td align="left">-allmulti</td><td align="left">设置是否支持多播模式，如果选择此参数，网卡将接收网络中所有的多播数据包</td></tr><tr><td align="left">-a</td><td align="left">显示全部接口信息</td></tr><tr><td align="left">-s</td><td align="left">显示摘要信息（类似于 netstat -i）</td></tr><tr><td align="left">add</td><td align="left">给指定网卡配置IPv6地址</td></tr><tr><td align="left">del</td><td align="left">删除指定网卡的IPv6地址</td></tr><tr><td align="left">&lt;硬件地址&gt;</td><td align="left">配置网卡最大的传输单元</td></tr><tr><td align="left">mtu&lt;字节数&gt;</td><td align="left">设置网卡的最大传输单元 (bytes)</td></tr><tr><td align="left">netmask&lt;子网掩码&gt;</td><td align="left">设置网卡的子网掩码。掩码可以是有前缀0x的32位十六进制数，也可以是用点分开的4个十进制数。如果不打算将网络分成子网，可以不管这一选项；如果要使用子网，那么请记住，网络中每一个系统必须有相同子网掩码</td></tr><tr><td align="left">tunel</td><td align="left">建立隧道</td></tr><tr><td align="left">dstaddr</td><td align="left">设定一个远端地址，建立点对点通信</td></tr><tr><td align="left">-broadcast&lt;地址&gt;</td><td align="left">为指定网卡设置广播协议</td></tr><tr><td align="left">-pointtopoint&lt;地址&gt;</td><td align="left">为网卡设置点对点通讯协议</td></tr><tr><td align="left">multicast</td><td align="left">为网卡设置组播标志</td></tr><tr><td align="left">address</td><td align="left">为网卡设置IPv4地址</td></tr><tr><td align="left">txqueuelen&lt;长度&gt;</td><td align="left">为网卡设置传输列队的长度</td></tr></tbody></table><h3 id="使用实例-18"><a href="#使用实例-18" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示网络设备信息（激活状态的）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ifconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　eth0 表示第一块网卡， 其中 HWaddr 表示网卡的物理地址，可以看到目前这个网卡的物理地址(MAC地址）是 00:50:56:BF:26:20<br>　　inet addr 用来表示网卡的IP地址，此网卡的 IP地址是 192.168.120.204，广播地址， Bcast:192.168.120.255，掩码地址Mask:255.255.255.0<br>　　lo 是表示主机的回坏地址，这个一般是用来测试一个网络程序，但又不想让局域网或外网的用户能够查看，只能在此台主机上运行和查看所用的网络接口。比如把 HTTPD服务器的指定到回坏地址，在浏览器输入 127.0.0.1 就能看到你所架WEB网站了。但只是您能看得到，局域网的其它主机或用户无从知道。<br>　　第一行：连接类型：Ethernet（以太网）HWaddr（硬件mac地址）<br>　　第二行：网卡的IP地址、子网、掩码<br>　　第三行：UP（代表网卡开启状态）RUNNING（代表网卡的网线被接上）MULTICAST（支持组播）MTU:1500（最大传输单元）：1500字节<br>　　第四、五行：接收、发送数据包情况统计<br>　　第七行：接收、发送数据字节数统计信息。</p></blockquote><p><strong><code>例二</code>：启动关闭指定网卡</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动eth0网卡</span>$ <span class="token function">ifconfig</span> eth0 up<span class="token comment"># 关闭eth0网卡</span>$ <span class="token function">ifconfig</span> eth0 down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意：</strong> ssh登陆linux服务器操作要小心，关闭了就不能开启了，除非你有多网卡。</p></blockquote><p><strong><code>例三</code>：为网卡配置和删除IPv6地址</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置IPv6的地址</span>$ <span class="token function">ifconfig</span> eth0 <span class="token function">add</span> 33ffe:3240:800:1005::2/64<span class="token comment"># 删除IPv6的地址</span>$ <span class="token function">ifconfig</span> eth0 del 33ffe:3240:800:1005::2/64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例四</code>：用ifconfig修改MAC地址</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ifconfig</span> eth0 hw ether 00:AA:BB:CC:DD:EE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：配置IP地址</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置ip</span>$ <span class="token function">ifconfig</span> eth0 <span class="token number">192.168</span>.120.56<span class="token comment"># 配置ip和掩码地址</span>$ <span class="token function">ifconfig</span> eth0 <span class="token number">192.168</span>.120.56 netmask <span class="token number">255.255</span>.255.0<span class="token comment"># 配置ip、掩码地址和广播地址</span>$ <span class="token function">ifconfig</span> eth0 <span class="token number">192.168</span>.120.56 netmask <span class="token number">255.255</span>.255.0 broadcast <span class="token number">192.168</span>.120.255<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例六</code>：启用和关闭ARP协议</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启用eth0的ARP协议</span>$ <span class="token function">ifconfig</span> eth0 arp<span class="token comment"># 关闭eth0的ARP协议</span>$ <span class="token function">ifconfig</span> eth0 <span class="token parameter variable">-arp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例七</code>：设置最大传输单元</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置能通过的最大数据包大小为 1500 bytes</span>$ <span class="token function">ifconfig</span> eth0 mtu <span class="token number">1500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（38）-route’-88-md-“-88-md”"><a href="#‘每天一个linux命令（38）-route’-88-md-“-88-md”" class="headerlink" title="‘每天一个linux命令（38）: route’(#88.md “#88.md”)"></a>‘每天一个linux命令（38）: route’(#88.md “#88.md”)</h3><p>　　Linux系统的route命令用于显示和操作IP路由表（show &#x2F; manipulate the IP routing table）。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问Internet，那么就需要将这台机器的IP地址设置为Linux机器的默认路由。要注意的是，直接在命令行下执行route命令来添加路由，不会永久保存，当网卡重启或者机器重启之后，该路由就失效了；可以在&#x2F;etc&#x2F;rc.local中添加route命令来保证该路由设置永久有效。</p><!--more --><h3 id="命令格式-26"><a href="#命令格式-26" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">route <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> <span class="token punctuation">[</span>Command <span class="token punctuation">[</span>Destination<span class="token punctuation">]</span> <span class="token punctuation">[</span>mask Netmask<span class="token punctuation">]</span> <span class="token punctuation">[</span>Gateway<span class="token punctuation">]</span> <span class="token punctuation">[</span>metric Metric<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>if Interface<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-26"><a href="#命令功能-26" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　Route命令是用于操作基于内核ip路由表，它的主要作用是创建一个静态路由让指定一个主机或者一个网络通过一个网络接口，如eth0。当使用”add”或者”del”参数时，路由表被修改，如果没有参数，则显示路由表当前的内容。</p><h3 id="命令参数-23"><a href="#命令参数-23" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">显示更多信息</td></tr><tr><td align="left">-n</td><td align="left">不解析名字</td></tr><tr><td align="left">-v</td><td align="left">显示详细的处理信息</td></tr><tr><td align="left">-F</td><td align="left">显示发送信息</td></tr><tr><td align="left">-C</td><td align="left">显示路由缓存</td></tr><tr><td align="left">-f</td><td align="left">清除所有网关入口的路由表</td></tr><tr><td align="left">-p 与 add 命令</td><td align="left">-p 与 add 命令一起使用时使路由具有永久性。</td></tr><tr><td align="left">add</td><td align="left">添加一条新路由</td></tr><tr><td align="left">del</td><td align="left">删除一条路由</td></tr><tr><td align="left">-net</td><td align="left">目标地址是一个网络</td></tr><tr><td align="left">-host</td><td align="left">目标地址是一个主机</td></tr><tr><td align="left">netmask</td><td align="left">当添加一个网络路由时，需要使用网络掩码</td></tr><tr><td align="left">gw</td><td align="left">路由数据包通过网关。注意，你指定的网关必须能够达到</td></tr><tr><td align="left">metric</td><td align="left">设置路由跳数</td></tr><tr><td align="left">Command</td><td align="left">指定您想运行的命令 (Add&#x2F;Change&#x2F;Delete&#x2F;Print)</td></tr><tr><td align="left">Destination</td><td align="left">指定该路由的网络目标</td></tr><tr><td align="left">mask Netmask</td><td align="left">指定与网络目标相关的网络掩码（也被称作子网掩码）</td></tr><tr><td align="left">Gateway</td><td align="left">指定网络目标定义的地址集和子网掩码可以到达的前进或下一跃点 IP 地址</td></tr><tr><td align="left">metric Metric</td><td align="left">为路由指定一个整数成本值标（从 1 至 9999），当在路由表(与转发的数据包目标地址最匹配)的多个路由中进行选择时可以使用</td></tr><tr><td align="left">if Interface</td><td align="left">为可以访问目标的接口指定接口索引。若要获得一个接口列表和它们相应的接口索引，使用 route print 命令的显示功能。可以使用十进制或十六进制值进行接口索引</td></tr></tbody></table><h3 id="使用实例-19"><a href="#使用实例-19" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示当前路由</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ route$ route <span class="token parameter variable">-n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># route</span>Kernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface<span class="token number">192.168</span>.120.0   *               <span class="token number">255.255</span>.255.0   U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0e192.168.0.0     <span class="token number">192.168</span>.120.1   <span class="token number">255.255</span>.0.0     UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span class="token number">10.0</span>.0.0        <span class="token number">192.168</span>.120.1   <span class="token number">255.0</span>.0.0       UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0default         <span class="token number">192.168</span>.120.240 <span class="token number">0.0</span>.0.0         UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment"># route -n</span>Kernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface<span class="token number">192.168</span>.120.0   <span class="token number">0.0</span>.0.0         <span class="token number">255.255</span>.255.0   U     <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span class="token number">192.168</span>.0.0     <span class="token number">192.168</span>.120.1   <span class="token number">255.255</span>.0.0     UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span class="token number">10.0</span>.0.0        <span class="token number">192.168</span>.120.1   <span class="token number">255.0</span>.0.0       UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span class="token number">0.0</span>.0.0         <span class="token number">192.168</span>.120.240 <span class="token number">0.0</span>.0.0         UG    <span class="token number">0</span>      <span class="token number">0</span>        <span class="token number">0</span> eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　第一行表示主机所在网络的地址为192.168.120.0，若数据传送目标是在本局域网内通信，则可直接通过eth0转发数据包;<br>　　第四行表示数据传送目的是访问Internet，则由接口eth0，将数据包发送到网关192.168.120.240<br>　　其中Flags为路由标志，标记当前网络节点的状态。<br>　　Flags标志说明：<br>　　U Up表示此路由当前为启动状态<br>　　H Host，表示此网关为一主机<br>　　G Gateway，表示此网关为一路由器<br>　　R Reinstate Route，使用动态路由重新初始化的路由<br>　　D Dynamically,此路由是动态性地写入<br>　　M Modified，此路由是由路由守护程序或导向器动态修改<br>　　! 表示此路由当前为关闭状态<br><strong>备注：</strong><br>　　route -n (-n 表示不解析名字,列出速度会比route 快)</p></blockquote><p><strong><code>例二</code>：添加网关&#x2F;设置网关</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 增加一条 到达244.0.0.0的路由</span>$ route <span class="token function">add</span> <span class="token parameter variable">-net</span> <span class="token number">224.0</span>.0.0 netmask <span class="token number">240.0</span>.0.0 dev eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：屏蔽一条路由</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 增加一条屏蔽的路由，目的地址为 224.x.x.x 将被拒绝</span>$ route <span class="token function">add</span> <span class="token parameter variable">-net</span> <span class="token number">224.0</span>.0.0 netmask <span class="token number">240.0</span>.0.0 reject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例四</code>：删除路由记录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ route del <span class="token parameter variable">-net</span> <span class="token number">224.0</span>.0.0 netmask <span class="token number">240.0</span>.0.0$ route del <span class="token parameter variable">-net</span> <span class="token number">224.0</span>.0.0 netmask <span class="token number">240.0</span>.0.0 reject<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例五</code>：删除和添加设置默认网关</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ route del default gw <span class="token number">192.168</span>.120.240$ route <span class="token function">add</span> default gw <span class="token number">192.168</span>.120.240<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（39）-ping’-89-md-“-89-md”"><a href="#‘每天一个linux命令（39）-ping’-89-md-“-89-md”" class="headerlink" title="‘每天一个linux命令（39）: ping’(#89.md “#89.md”)"></a>‘每天一个linux命令（39）: ping’(#89.md “#89.md”)</h3><p>　　Linux系统的ping命令是常用的网络命令，它通常用来测试与目标主机的连通性，我们经常会说“ping一下某机器，看是不是开着”、不能打开网页时会说“你先ping网关地址192.168.1.1试试”。它通过发送ICMP ECHO_REQUEST数据包到网络主机（send ICMP ECHO_REQUEST to network hosts），并显示响应情况，这样我们就可以根据它输出的信息来确定目标主机是否可访问（但这不是绝对的）。有些服务器为了防止通过ping探测到，通过防火墙设置了禁止ping或者在内核参数中禁止ping，这样就不能通过ping确定该主机是否还处于开启状态。<br>  <!--more --><br>　　linux下的ping和windows下的ping稍有区别,linux下ping不会自动终止,需要按ctrl+c终止或者用参数-c指定要求完成的回应次数。</p><h3 id="命令格式-27"><a href="#命令格式-27" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ping</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>主机名或IP地址<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-27"><a href="#命令功能-27" class="headerlink" title="命令功能"></a>命令功能</h3><p>  ping命令用于：确定网络和各外部主机的状态；跟踪和隔离硬件和软件问题；测试、评估和管理网络。如果主机正在运行并连在网上，它就对回送信号进行响应。每个回送信号请求包含一个网际协议（IP）和 ICMP 头，后面紧跟一个 tim 结构，以及来填写这个信息包的足够的字节。缺省情况是连续发送回送信号请求直到接收到中断信号（Ctrl-C）。<br>  ping 命令每秒发送一个数据报并且为每个接收到的响应打印一行输出。ping 命令计算信号往返时间和(信息)包丢失情况的统计信息，并且在完成之后显示一个简要总结。ping 命令在程序超时或当接收到 SIGINT 信号时结束。Host 参数或者是一个有效的主机名或者是因特网地址。</p><h3 id="命令参数-24"><a href="#命令参数-24" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d</td><td align="left">使用Socket的SO_DEBUG功能</td></tr><tr><td align="left">-f</td><td align="left">极限检测。大量且快速地送网络封包给一台机器，看它的回应</td></tr><tr><td align="left">-n</td><td align="left">只输出数值</td></tr><tr><td align="left">-q</td><td align="left">不显示任何传送封包的信息，只显示最后的结果</td></tr><tr><td align="left">-r</td><td align="left">忽略普通的Routing Table，直接将数据包送到远端主机上。通常是查看本机的网络接口是否有问题</td></tr><tr><td align="left">-R</td><td align="left">记录路由过程</td></tr><tr><td align="left">-v</td><td align="left">详细显示指令的执行过程</td></tr><tr><td align="left"><p>-c 数目</td><td align="left">在发送指定数目的包后停止</td></tr><tr><td align="left">-i 秒数</td><td align="left">设定间隔几秒送一个网络封包给一台机器，预设值是一秒送一次</td></tr><tr><td align="left">-I 网络界面</td><td align="left">使用指定的网络界面送出数据包</td></tr><tr><td align="left">-l 前置载入</td><td align="left">设置在送出要求信息之前，先行发出的数据包</td></tr><tr><td align="left">-p 范本样式</td><td align="left">设置填满数据包的范本样式</td></tr><tr><td align="left">-s 字节数</td><td align="left">指定发送的数据字节数，预设值是56，加上8字节的ICMP头，一共是64ICMP数据字节</td></tr><tr><td align="left">-t 存活数值</td><td align="left">设置存活数值TTL的大小</td></tr></tbody></table><h3 id="使用实例-20"><a href="#使用实例-20" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：ping通的情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ping</span> <span class="token number">192.168</span>.0.1PING <span class="token number">192.168</span>.0.1 <span class="token punctuation">(</span><span class="token number">192.168</span>.0.1<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.238</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.202</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.232</span> ms<span class="token number">64</span> bytes from <span class="token number">192.168</span>.0.1: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.210</span> ms<span class="token number">6</span> packets transmitted, <span class="token number">6</span> received, <span class="token number">0</span>% packet loss, <span class="token function">time</span> 4997ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例二</code>：ping不通的情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ping</span> <span class="token number">192.168</span>.0.222PING <span class="token number">192.168</span>.0.222 <span class="token punctuation">(</span><span class="token number">192.168</span>.0.222<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.From <span class="token number">192.168</span>.0.101 <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> Destination Host UnreachableFrom <span class="token number">192.168</span>.0.101 <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> Destination Host UnreachableFrom <span class="token number">192.168</span>.0.101 <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> Destination Host Unreachable<span class="token number">7</span> packets transmitted, <span class="token number">0</span> received, +6 errors, <span class="token number">100</span>% packet loss, <span class="token function">time</span> 6032mspipe <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例二</code>：ping指定次数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ping</span> <span class="token parameter variable">-c</span> <span class="token number">192.168</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：时间间隔和次数限制的ping</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ping</span> <span class="token parameter variable">-c</span> <span class="token number">10</span> <span class="token parameter variable">-i</span> <span class="token number">0.5</span> <span class="token number">192.168</span>.120.206<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：通过域名ping公网上的站点</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ping</span> <span class="token parameter variable">-c</span> <span class="token number">5</span> yelog.github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：多参数使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -i 3 发送周期为 3秒 -s 设置发送包的大小为1024 -t 设置TTL值为 255</span>$ <span class="token function">ping</span> <span class="token parameter variable">-i</span> <span class="token number">3</span> <span class="token parameter variable">-s</span> <span class="token number">1024</span> <span class="token parameter variable">-t</span> yelog.github.comPING github.map.fastly.net <span class="token punctuation">(</span><span class="token number">151.101</span>.192.133<span class="token punctuation">)</span> <span class="token number">1024</span><span class="token punctuation">(</span><span class="token number">1052</span><span class="token punctuation">)</span> bytes of data.<span class="token number">1032</span> bytes from <span class="token number">151.101</span>.192.133 <span class="token punctuation">(</span><span class="token number">151.101</span>.192.133<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">191</span> ms<span class="token number">1032</span> bytes from <span class="token number">151.101</span>.192.133 <span class="token punctuation">(</span><span class="token number">151.101</span>.192.133<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">190</span> ms<span class="token number">1032</span> bytes from <span class="token number">151.101</span>.192.133 <span class="token punctuation">(</span><span class="token number">151.101</span>.192.133<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">189</span> ms<span class="token number">1032</span> bytes from <span class="token number">151.101</span>.192.133 <span class="token punctuation">(</span><span class="token number">151.101</span>.192.133<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">56</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">190</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（4）-mkdir’-90-md-“-90-md”"><a href="#‘每天一个linux命令（4）-mkdir’-90-md-“-90-md”" class="headerlink" title="‘每天一个linux命令（4）: mkdir’(#90.md “#90.md”)"></a>‘每天一个linux命令（4）: mkdir’(#90.md “#90.md”)</h3><p>　　linux mkdir 命令用来创建指定的名称的目录，要求创建目录的用户在当前目录中具有写权限，并且指定的目录名不能是当前目录中已有的目录。</p><!--more --><h3 id="命令格式-28"><a href="#命令格式-28" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 目录<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-28"><a href="#命令功能-28" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　通过 mkdir 命令可以实现在指定位置创建以 DirName(指定的文件名)命名的文件夹或目录。要创建文件夹或目录的用户必须对所创建的文件夹的父文件夹具有写权限。并且，所创建的文件夹(目录)不能与其父目录(即父文件夹)中的文件名重名，即同一个目录下不能有同名的(区分大小写)。</p><h3 id="命令参数-25"><a href="#命令参数-25" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-m, –mode&#x3D;模式</td><td align="left">设定权限&lt;模式&gt; (类似 chmod)，而不是 rwxrwxrwx 减 umask</td></tr><tr><td align="left">-p, –parents</td><td align="left">可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后,系统将自动建立好那些尚不存在的目录,即一次可以建立多个目录</td></tr><tr><td align="left">-v, –verbose</td><td align="left">每次创建新目录都显示信息</td></tr><tr><td align="left">–help</td><td align="left">显示此帮助信息并退出</td></tr><tr><td align="left">–version</td><td align="left">输出版本信息并退出</td></tr></tbody></table><h3 id="命令是实例"><a href="#命令是实例" class="headerlink" title="命令是实例"></a>命令是实例</h3><p><strong><code>例一</code>：创建一个空目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：递归创建多个目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在当前目录创建一个嵌套文件夹test1/test11</span>$ <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> test1/test11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：创建权限为777的目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> <span class="token parameter variable">-m</span> <span class="token number">777</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：创建新目录都显示信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> <span class="token parameter variable">-v</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：一个命令创建项目的目录结构</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> <span class="token parameter variable">-vp</span> scf/<span class="token punctuation">&#123;</span>lib/,bin/,doc/<span class="token punctuation">&#123;</span>info,product<span class="token punctuation">&#125;</span>,logs/<span class="token punctuation">&#123;</span>info,product<span class="token punctuation">&#125;</span>,service/deploy/<span class="token punctuation">&#123;</span>info,product<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>mkdir: 已创建目录 “scf”mkdir: 已创建目录 “scf/lib”mkdir: 已创建目录 “scf/bin”mkdir: 已创建目录 “scf/doc”mkdir: 已创建目录 “scf/doc/info”mkdir: 已创建目录 “scf/doc/product”mkdir: 已创建目录 “scf/logs”mkdir: 已创建目录 “scf/logs/info”mkdir: 已创建目录 “scf/logs/product”mkdir: 已创建目录 “scf/service”mkdir: 已创建目录 “scf/service/deploy”mkdir: 已创建目录 “scf/service/deploy/info”mkdir: 已创建目录 “scf/service/deploy/product”<span class="token punctuation">[</span>root@localhost test<span class="token punctuation">]</span><span class="token comment"># tree scf/</span>scf/<span class="token operator">|</span>-- bin<span class="token operator">|</span>-- doc<span class="token operator">|</span>   <span class="token operator">|</span>-- info<span class="token operator">|</span>   <span class="token variable"><span class="token variable">`</span>-- product<span class="token operator">|</span>-- lib<span class="token operator">|</span>-- logs<span class="token operator">|</span>   <span class="token operator">|</span>-- info<span class="token operator">|</span>   <span class="token variable">`</span></span>-- product<span class="token variable"><span class="token variable">`</span>-- <span class="token function">service</span>    <span class="token variable">`</span></span>-- deploy        <span class="token operator">|</span>-- info        `-- product<span class="token number">12</span> directories, <span class="token number">0</span> files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（40）-traceroute’-91-md-“-91-md”"><a href="#‘每天一个linux命令（40）-traceroute’-91-md-“-91-md”" class="headerlink" title="‘每天一个linux命令（40）: traceroute’(#91.md “#91.md”)"></a>‘每天一个linux命令（40）: traceroute’(#91.md “#91.md”)</h3><p>　　通过traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。linux系统中，我们称之为traceroute,在MS Windows中为tracert。 traceroute通过发送小的数据包到目的设备直到其返回，来测量其需要多长时间。一条路径上的每个设备traceroute要测3次。输出结果中包括每次测试的时间(ms)和设备的名称（如有的话）及其IP地址。</p><!--more --><p>　　在大多数情况下，我们会在linux主机系统下，直接执行命令行：<br>　　　　<code>traceroute hostname</code><br>　　而在Windows系统下是执行tracert的命令：<br>　　　　<code>tracert hostname</code></p><h3 id="命令格式-29"><a href="#命令格式-29" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">traceroute</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>主机<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-29"><a href="#命令功能-29" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　traceroute指令让你追踪网络数据包的路由途径，预设数据包大小是40Bytes，用户可另行设置。<br>　　具体参数格式：traceroute [-dFlnrvx][-f&lt;存活数值&gt;][-g&lt;网关&gt;…][-i&lt;网络界面&gt;][-m&lt;存活数值&gt;][-p&lt;通信端口&gt;][-s&lt;来源地址&gt;][-t&lt;服务类型&gt;][-w&lt;超时秒数&gt;][主机名称或IP地址][数据包大小]</p><h3 id="命令参数-26"><a href="#命令参数-26" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d</td><td align="left">使用Socket层级的排错功能</td></tr><tr><td align="left">-f</td><td align="left">设置第一个检测数据包的存活数值TTL的大小</td></tr><tr><td align="left">-F</td><td align="left">设置勿离断位</td></tr><tr><td align="left">-g</td><td align="left">设置来源路由网关，最多可设置8个</td></tr><tr><td align="left">-i</td><td align="left">使用指定的网络界面送出数据包</td></tr><tr><td align="left">-I</td><td align="left">使用ICMP回应取代UDP资料信息</td></tr><tr><td align="left">-m</td><td align="left">设置检测数据包的最大存活数值TTL的大小</td></tr><tr><td align="left">-n</td><td align="left">直接使用IP地址而非主机名称</td></tr><tr><td align="left">-p</td><td align="left">设置UDP传输协议的通信端口</td></tr><tr><td align="left">-r</td><td align="left">忽略普通的Routing Table，直接将数据包送到远端主机上</td></tr><tr><td align="left">-s</td><td align="left">设置本地主机送出数据包的IP地址</td></tr><tr><td align="left">-t</td><td align="left">设置检测数据包的TOS数值</td></tr><tr><td align="left">-v</td><td align="left">详细显示指令的执行过程</td></tr><tr><td align="left">-w</td><td align="left">设置等待远端主机回报的时间</td></tr><tr><td align="left">-x</td><td align="left">开启或关闭数据包的正确性检验</td></tr></tbody></table><h3 id="使用实例-21"><a href="#使用实例-21" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：traceroute 用法简单、最常用的用法</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">traceroute</span> yelog.github.com<span class="token function">traceroute</span> to yelog.github.com <span class="token punctuation">(</span><span class="token number">151.101</span>.192.133<span class="token punctuation">)</span>, <span class="token number">30</span> hops max, <span class="token number">60</span> byte packets <span class="token number">1</span>  vrouter <span class="token punctuation">(</span><span class="token number">192.168</span>.0.1<span class="token punctuation">)</span>  <span class="token number">0.443</span> ms  <span class="token number">0.565</span> ms  <span class="token number">0.684</span> ms <span class="token number">2</span>  <span class="token number">112.208</span>.32.1.pldt.net <span class="token punctuation">(</span><span class="token number">112.208</span>.32.1<span class="token punctuation">)</span>  <span class="token number">14.518</span> ms  <span class="token number">22.454</span> ms  <span class="token number">23.080</span> ms <span class="token number">3</span>  <span class="token number">119.93</span>.255.197 <span class="token punctuation">(</span><span class="token number">119.93</span>.255.197<span class="token punctuation">)</span>  <span class="token number">24.492</span> ms  <span class="token number">25.380</span> ms  <span class="token number">26.328</span> ms <span class="token number">4</span>  <span class="token number">210.213</span>.131.66.static.pldt.net <span class="token punctuation">(</span><span class="token number">210.213</span>.131.66<span class="token punctuation">)</span>  <span class="token number">29.942</span> ms <span class="token number">210.213</span>.131.70.static.pldt.net <span class="token punctuation">(</span><span class="token number">210.213</span>.131.70<span class="token punctuation">)</span>  <span class="token number">28.209</span> ms  <span class="token number">28.992</span> ms <span class="token number">5</span>  <span class="token number">122.2</span>.175.30.static.pldt.net <span class="token punctuation">(</span><span class="token number">122.2</span>.175.30<span class="token punctuation">)</span>  <span class="token number">32.429</span> ms  <span class="token number">32.765</span> ms <span class="token number">210.213</span>.128.29.static.pldt.net <span class="token punctuation">(</span><span class="token number">210.213</span>.128.29<span class="token punctuation">)</span>  <span class="token number">35.165</span> ms <span class="token number">6</span>  <span class="token number">210.213</span>.130.162.static.pldt.net <span class="token punctuation">(</span><span class="token number">210.213</span>.130.162<span class="token punctuation">)</span>  <span class="token number">32.147</span> ms  <span class="token number">31.403</span> ms  <span class="token number">32.107</span> ms <span class="token number">7</span>  las-b3-link.telia.net <span class="token punctuation">(</span><span class="token number">62.115</span>.13.128<span class="token punctuation">)</span>  <span class="token number">198.546</span> ms  <span class="token number">190.829</span> ms  <span class="token number">191.039</span> ms <span class="token number">8</span>  las-b21-link.telia.net <span class="token punctuation">(</span><span class="token number">213.155</span>.131.82<span class="token punctuation">)</span>  <span class="token number">194.301</span> ms las-b21-link.telia.net <span class="token punctuation">(</span><span class="token number">62.115</span>.116.179<span class="token punctuation">)</span>  <span class="token number">191.927</span> ms las-b21-link.telia.net <span class="token punctuation">(</span><span class="token number">213.155</span>.131.84<span class="token punctuation">)</span>  <span class="token number">194.433</span> ms <span class="token number">9</span>  * * *<span class="token number">10</span>  * * *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 4  ，表示向每个网关发送4个数据包。<br>　　有时我们traceroute 一台主机时，会看到有一些行是以星号表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。<br>　　有时我们在某一网关处延时比较长，有可能是某台网关比较阻塞，也可能是物理设备本身的原因。当然如果某台DNS出现问题时，不能解析主机名、域名时，也会 有延时长的现象；您可以加-n 参数来避免DNS解析，以IP格式输出数据。<br>　　如果在局域网中的不同网段之间，我们可以通过traceroute 来排查问题所在，是主机的问题还是网关的问题。如果我们通过远程来访问某台服务器遇到问题时，我们用到traceroute 追踪数据包所经过的网关，提交IDC服务商，也有助于解决问题；但目前看来在国内解决这样的问题是比较困难的，就是我们发现问题所在，IDC服务商也不可能帮助我们解决。</p></blockquote><p><strong><code>例二</code>：跳数设置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">traceroute</span> <span class="token parameter variable">-m</span> <span class="token number">10</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：显示IP地址，不查主机名</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">traceroute</span> <span class="token parameter variable">-n</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：探测包使用的基本UDP端口设置6888</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">traceroute</span> <span class="token parameter variable">-p</span> <span class="token number">6888</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：把探测包的个数设置为值4</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">traceroute</span> <span class="token parameter variable">-q</span> <span class="token number">4</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：绕过正常的路由表，直接发送到网络相连的主机</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">traceroute</span> <span class="token parameter variable">-r</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：把对外发探测包的等待响应时间设置为3秒</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">traceroute</span> <span class="token parameter variable">-w</span> <span class="token number">3</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>Traceroute的工作原理</strong><br>　　Traceroute最简单的基本用法是：traceroute hostname<br>　　Traceroute程序的设计是利用ICMP及IP header的TTL（Time To Live）栏位（field）。首先，traceroute送出一个TTL是1的IP datagram（其实，每次送出的为3个40字节的包，包括源地址，目的地址和包发出的时间标签）到目的地，当路径上的第一个路由器（router）收到这个datagram时，它将TTL减1。此时，TTL变为0了，所以该路由器会将此datagram丢掉，并送回一个「ICMP time exceeded」消息（包括发IP包的源地址，IP包的所有内容及路由器的IP地址），traceroute 收到这个消息后，便知道这个路由器存在于这个路径上，接着traceroute 再送出另一个TTL是2 的datagram，发现第2 个路由器…… traceroute 每次将送出的datagram的TTL 加1来发现另一个路由器，这个重复的动作一直持续到某个datagram 抵达目的地。当datagram到达目的地后，该主机并不会送回ICMP time exceeded消息，因为它已是目的地了，那么traceroute如何得知目的地到达了呢？<br>　　Traceroute在送出UDP datagrams到目的地时，它所选择送达的port number 是一个一般应用程序都不会用的号码（30000 以上），所以当此UDP datagram 到达目的地后该主机会送回一个「ICMP port unreachable」的消息，而当traceroute 收到这个消息时，便知道目的地已经到达了。所以traceroute 在Server端也是没有所谓的Daemon 程式。<br>　　Traceroute提取发 ICMP TTL到期消息设备的IP地址并作域名解析。每次 ，Traceroute都打印出一系列数据,包括所经过的路由设备的域名及 IP地址,三个包每次来回所花时间。</p></blockquote><h3 id="windows之tracert"><a href="#windows之tracert" class="headerlink" title="windows之tracert"></a>windows之tracert</h3><blockquote><p><strong>格式：</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tracert <span class="token punctuation">[</span>-d<span class="token punctuation">]</span> <span class="token punctuation">[</span>-h maximum_hops<span class="token punctuation">]</span> <span class="token punctuation">[</span>-j host-list<span class="token punctuation">]</span> <span class="token punctuation">[</span>-w timeout<span class="token punctuation">]</span> target_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>参数说明</strong><br>　　tracert [-d] [-h maximum_hops] [-j computer-list] [-w timeout] target_name<br>　　该诊断实用程序通过向目的地发送具有不同生存时间 (TL) 的 Internet 控制信息协议 (CMP) 回应报文，以确定至目的地的路由。路径上的每个路由器都要在转发该 ICMP 回应报文之前将其 TTL 值至少减 1，因此 TTL 是有效的跳转计数。当报文的 TTL 值减少到 0 时，路由器向源系统发回 ICMP 超时信息。通过发送 TTL 为 1 的第一个回应报文并且在随后的发送中每次将 TTL 值加 1，直到目标响应或达到最大 TTL 值，Tracert 可以确定路由。通过检查中间路由器发发回的 ICMP 超时 (ime Exceeded) 信息，可以确定路由器。注意，有些路由器“安静”地丢弃生存时间 (TLS) 过期的报文并且对 tracert 无效。<br><strong>参数：</strong><br>-d 指定不对计算机名解析地址。<br>-h maximum_hops 指定查找目标的跳转的最大数目。<br>-jcomputer-list 指定在 computer-list 中松散源路由。<br>-w timeout 等待由 timeout 对每个应答指定的毫秒数。<br>target_name 目标计算机的名称。</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（41）-netstat’-92-md-“-92-md”"><a href="#‘每天一个linux命令（41）-netstat’-92-md-“-92-md”" class="headerlink" title="‘每天一个linux命令（41）: netstat’(#92.md “#92.md”)"></a>‘每天一个linux命令（41）: netstat’(#92.md “#92.md”)</h3><p>　　netstat命令用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。netstat是在内核中访问网络及相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。</p><!--more --><p>　　如果你的计算机有时候接收到的数据报导致出错数据或故障，你不必感到奇怪，TCP&#x2F;IP可以容许这些类型的错误，并能够自动重发数据报。但如果累计的出错情况数目占到所接收的IP数据报相当大的百分比，或者它的数目正迅速增加，那么你就应该使用netstat查一查为什么会出现这些情况了。</p><h3 id="命令格式-30"><a href="#命令格式-30" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token punctuation">[</span>-acCeFghilMnNoprstuvVwx<span class="token punctuation">]</span><span class="token punctuation">[</span>-A<span class="token operator">&lt;</span>网络类型<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">[</span>--ip<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-30"><a href="#命令功能-30" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　netstat用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p><h3 id="命令参数-27"><a href="#命令参数-27" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a或–all</td><td align="left">显示所有连线中的Socket</td></tr><tr><td align="left">-A&lt;网络类型&gt;或–&lt;网络类型&gt;</td><td align="left">列出该网络类型连线中的相关地址</td></tr><tr><td align="left">-c或–continuous</td><td align="left">持续列出网络状态</td></tr><tr><td align="left">-C或–cache</td><td align="left">显示路由器配置的快取信息</td></tr><tr><td align="left">-e或–extend</td><td align="left">显示网络其他相关信息</td></tr><tr><td align="left">-F或–fib</td><td align="left">显示FIB</td></tr><tr><td align="left">-g或–groups</td><td align="left">显示多重广播功能群组组员名单</td></tr><tr><td align="left">-h或–help</td><td align="left">在线帮助</td></tr><tr><td align="left">-i或–interfaces</td><td align="left">显示网络界面信息表单</td></tr><tr><td align="left">-l或–listening</td><td align="left">显示监控中的服务器的Socket</td></tr><tr><td align="left">-M或–masquerade</td><td align="left">显示伪装的网络连线</td></tr><tr><td align="left">-n或–numeric</td><td align="left">直接使用IP地址，而不通过域名服务器</td></tr><tr><td align="left">-N或–netlink或–symbolic</td><td align="left">显示网络硬件外围设备的符号连接名称</td></tr><tr><td align="left">-o或–timers</td><td align="left">显示计时器</td></tr><tr><td align="left">-p或–programs</td><td align="left">显示正在使用Socket的程序识别码和程序名称</td></tr><tr><td align="left">-r或–route</td><td align="left">显示Routing Table</td></tr><tr><td align="left">-s或–statistice</td><td align="left">显示网络工作信息统计表</td></tr><tr><td align="left">-t或–tcp</td><td align="left">显示TCP传输协议的连线状况</td></tr><tr><td align="left">-u或–udp</td><td align="left">显示UDP传输协议的连线状况</td></tr><tr><td align="left">-v或–verbose</td><td align="left">显示指令执行过程</td></tr><tr><td align="left">-V或–version</td><td align="left">显示版本信息</td></tr><tr><td align="left">-w或–raw</td><td align="left">显示RAW传输协议的连线状况</td></tr><tr><td align="left">-x或–unix</td><td align="left">此参数的效果和指定”-A unix”参数相同</td></tr><tr><td align="left">–ip或–inet</td><td align="left">此参数的效果和指定”-A inet”参数相同</td></tr></tbody></table><h3 id="使用实例-22"><a href="#使用实例-22" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：无参数使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span>Active Internet connections <span class="token punctuation">(</span>w/o servers<span class="token punctuation">)</span>Proto Recv-Q Send-Q Local Address               Foreign Address             State      tcp        <span class="token number">0</span>    <span class="token number">268</span> <span class="token number">192.168</span>.120.204:ssh         <span class="token number">10.2</span>.0.68:62420             ESTABLISHEDudp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">192.168</span>.120.204:4371        <span class="token number">10.58</span>.119.119:domain        ESTABLISHEDActive UNIX domain sockets <span class="token punctuation">(</span>w/o servers<span class="token punctuation">)</span>Proto RefCnt Flags       Type       State         I-Node Pathunix  <span class="token number">2</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         DGRAM                    <span class="token number">1491</span>   @/org/kernel/udev/udevdunix  <span class="token number">4</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         DGRAM                    <span class="token number">7337</span>   /dev/logunix  <span class="token number">2</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         DGRAM                    <span class="token number">708823</span>unix  <span class="token number">2</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         DGRAM                    <span class="token number">7539</span>   unix  <span class="token number">3</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         STREAM     CONNECTED     <span class="token number">7287</span>   unix  <span class="token number">3</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         STREAM     CONNECTED     <span class="token number">7286</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　从整体上看，netstat的输出结果可以分为两个部分：<br>　　一个是Active Internet connections，称为有源TCP连接，其中”Recv-Q”和”Send-Q”指的是接收队列和发送队列。这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积。这种情况只能在非常少的情况见到。<br>　　另一个是Active UNIX domain sockets，称为有源Unix域套接口(和网络套接字一样，但是只能用于本机通信，性能可以提高一倍)。<br>　　Proto显示连接使用的协议,RefCnt表示连接到本套接口上的进程号,Types显示套接口的类型,State显示套接口当前的状态,Path表示连接到套接口的其它进程使用的路径名。<br><strong>套接口类型：</strong><br>　　-t ：TCP<br>　　-u ：UDP<br>　　-raw ：RAW类型<br>　　–unix ：UNIX域类型<br>　　–ax25 ：AX25类型<br>　　–ipx ：ipx类型<br>　　–netrom ：netrom类型<br><strong>状态说明：</strong><br>　　LISTEN：侦听来自远方的TCP端口的连接请求<br>　　SYN-SENT：再发送连接请求后等待匹配的连接请求（如果有大量这样的状态包，检查是否中招了）<br>　　SYN-RECEIVED：再收到和发送一个连接请求后等待对方对连接请求的确认（如有大量此状态，估计被flood攻击了）<br>　　ESTABLISHED：代表一个打开的连接<br>　　FIN-WAIT-1：等待远程TCP连接中断请求，或先前的连接中断请求的确认<br>　　FIN-WAIT-2：从远程TCP等待连接中断请求<br>　　CLOSE-WAIT：等待从本地用户发来的连接中断请求<br>　　CLOSING：等待远程TCP对连接中断的确认<br>　　LAST-ACK：等待原来的发向远程TCP的连接中断请求的确认（不是什么好东西，此项出现，检查是否被攻击）<br>　　TIME-WAIT：等待足够的时间以确保远程TCP接收到连接中断请求的确认<br>　　CLOSED：没有任何连接状态</p></blockquote><p><strong><code>例二</code>：列出所有端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-a</span>Active Internet connections <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span>Proto Recv-Q Send-Q Local Address               Foreign Address             State      tcp        <span class="token number">0</span>      <span class="token number">0</span> localhost:smux              *:*                         LISTEN      tcp        <span class="token number">0</span>      <span class="token number">0</span> *:svn                       *:*                         LISTEN      tcp        <span class="token number">0</span>      <span class="token number">0</span> *:ssh                       *:*                         LISTEN      tcp        <span class="token number">0</span>    <span class="token number">284</span> <span class="token number">192.168</span>.120.204:ssh         <span class="token number">10.2</span>.0.68:62420             ESTABLISHEDudp        <span class="token number">0</span>      <span class="token number">0</span> localhost:syslog            *:*                                     udp        <span class="token number">0</span>      <span class="token number">0</span> *:snmp                      *:*                                     Active UNIX domain sockets <span class="token punctuation">(</span>servers and established<span class="token punctuation">)</span>Proto RefCnt Flags       Type       State         I-Node Pathunix  <span class="token number">2</span>      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     <span class="token number">708833</span> /tmp/ssh-yKnDB15725/agent.15725unix  <span class="token number">2</span>      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     <span class="token number">7296</span>   /var/run/audispd_eventsunix  <span class="token number">2</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         DGRAM                    <span class="token number">1491</span>   @/org/kernel/udev/udevdunix  <span class="token number">4</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         DGRAM                    <span class="token number">7337</span>   /dev/logunix  <span class="token number">2</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         DGRAM                    <span class="token number">708823</span>unix  <span class="token number">2</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         DGRAM                    <span class="token number">7539</span>   unix  <span class="token number">3</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         STREAM     CONNECTED     <span class="token number">7287</span>   unix  <span class="token number">3</span>      <span class="token punctuation">[</span> <span class="token punctuation">]</span>         STREAM     CONNECTED     <span class="token number">7286</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED），也包括监听连接请（LISTENING）的那些连接</p></blockquote><p><strong><code>例三</code>：显示当前UDP连接状况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-nu</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：显示UDP端口号的使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-apu</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：显示UDP端口号的使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-i</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：显示组播组的关系</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：显示网络统计信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-s</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　按照各个协议分别显示其统计数据。如果我们的应用程序（如Web浏览器）运行速度比较慢，或者不能显示Web页之类的数据，那么我们就可以用本选项来查看一下所显示的信息。我们需要仔细查看统计数据的各行，找到出错的关键字，进而确定问题所在。</p></blockquote><p><strong><code>例八</code>：显示监听的套接口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例九</code>：显示所有已建立的有效连接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-n</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十</code>：显示关于以太网的统计数据</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-e</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　用于显示关于以太网的统计数据。它列出的项目包括传送的数据报的总字节数、错误数、删除数、数据报的数量和广播的数量。这些统计数据既有发送的数据报数量，也有接收的数据报数量。这个选项可以用来统计一些基本的网络流量）</p></blockquote><p><strong><code>例十一</code>：显示关于路由表的信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十二</code>：列出所有 tcp 端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-at</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十三</code>：统计机器中网络连接各个状态个数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十四</code>：把状态全都取出来后使用uniq -c统计后再进行排序</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-nat</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $6&#125;'</span><span class="token operator">|</span><span class="token function">sort</span><span class="token operator">|</span><span class="token function">uniq</span> <span class="token parameter variable">-c</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十五</code>：查看连接某服务端口最多的的IP地址</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-nat</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"192.168.120.20:16067"</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print $5&#125;'</span><span class="token operator">|</span><span class="token function">awk</span> -F: <span class="token string">'&#123;print $4&#125;'</span><span class="token operator">|</span><span class="token function">sort</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> -nr<span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十六</code>：找出程序运行的端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-ap</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十七</code>：在 netstat 输出中显示 PID 和进程名称</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-pt</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　netstat -p 可以与其它开关一起使用，就可以添加 “PID&#x2F;进程名称” 到 netstat 输出中，这样 debugging 的时候可以很方便的发现特定端口运行的程序</p></blockquote><p><strong><code>例十八</code>：查看所有端口使用情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-tln</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十九</code>：找出运行在指定端口的进程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">netstat</span> <span class="token parameter variable">-anpt</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">':4000'</span><span class="token punctuation">(</span>Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.<span class="token punctuation">)</span>tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">0.0</span>.0.0:4000            <span class="token number">0.0</span>.0.0:*               LISTEN      <span class="token number">5362</span>/hexo           tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:4000          <span class="token number">127.0</span>.0.1:45884         ESTABLISHED <span class="token number">5362</span>/hexo           tcp        <span class="token number">0</span>      <span class="token number">0</span> <span class="token number">127.0</span>.0.1:4000          <span class="token number">127.0</span>.0.1:45886         ESTABLISHED <span class="token number">5362</span>/hexo  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　运行在端口4000的进程id为5362，再通过ps命令就可以找到具体的应用程序了</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（42）-ss’-93-md-“-93-md”"><a href="#‘每天一个linux命令（42）-ss’-93-md-“-93-md”" class="headerlink" title="‘每天一个linux命令（42）: ss’(#93.md “#93.md”)"></a>‘每天一个linux命令（42）: ss’(#93.md “#93.md”)</h3><p>　　ss是Socket Statistics的缩写。顾名思义，ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效。</p><!--more --><p>　　当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat &#x2F;proc&#x2F;net&#x2F;tcp，执行速度都会很慢。可能你不会有切身的感受，但请相信我，当服务器维持的连接达到上万个的时候，使用netstat等于浪费 生命，而用ss才是节省时间。</p><p>　　天下武功唯快不破。ss快的秘诀在于，它利用到了TCP协议栈中tcp_diag。tcp_diag是一个用于分析统计的模块，可以获得Linux 内核中第一手的信息，这就确保了ss的快捷高效。当然，如果你的系统中没有tcp_diag，ss也可以正常运行，只是效率会变得稍慢。（但仍然比 netstat要快。）</p><h3 id="命令格式-31"><a href="#命令格式-31" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token punctuation">[</span>参数<span class="token punctuation">]</span>$ ss<span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>过滤<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="命令功能-31"><a href="#命令功能-31" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　ss(Socket Statistics的缩写)命令可以用来获取 socket统计信息，此命令输出的结果类似于 netstat输出的内容，但它能显示更多更详细的 TCP连接状态的信息，且比 netstat 更快速高效。它使用了 TCP协议栈中 tcp_diag（是一个用于分析统计的模块），能直接从获得第一手内核信息，这就使得 ss命令快捷高效。在没有 tcp_diag，ss也可以正常运行。</p><h3 id="命令参数-28"><a href="#命令参数-28" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-h, –help</td><td align="left">帮助信息</td></tr><tr><td align="left">-V, –version</td><td align="left">程序版本信息</td></tr><tr><td align="left">-n, –numeric</td><td align="left">不解析服务名称</td></tr><tr><td align="left">-r, –resolve</td><td align="left">解析主机名</td></tr><tr><td align="left">-a, –all</td><td align="left">显示所有套接字（sockets）</td></tr><tr><td align="left">-l, –listening</td><td align="left">显示监听状态的套接字（sockets）</td></tr><tr><td align="left">-o, –options</td><td align="left">显示计时器信息</td></tr><tr><td align="left">-e, –extended</td><td align="left">显示详细的套接字（sockets）信息</td></tr><tr><td align="left">-m, –memory</td><td align="left">显示套接字（socket）的内存使用情况</td></tr><tr><td align="left">-p, –processes</td><td align="left">显示使用套接字（socket）的进程</td></tr><tr><td align="left">-i, –info</td><td align="left">显示 TCP内部信息</td></tr><tr><td align="left">-s, –summary</td><td align="left">显示套接字（socket）使用概况</td></tr><tr><td align="left">-4, –ipv4</td><td align="left">仅显示IPv4的套接字（sockets）</td></tr><tr><td align="left">-6, –ipv6</td><td align="left">仅显示IPv6的套接字（sockets）</td></tr><tr><td align="left">-0, –packet</td><td align="left">显示 PACKET 套接字（socket）</td></tr><tr><td align="left">-t, –tcp</td><td align="left">仅显示 TCP套接字（sockets）</td></tr><tr><td align="left">-u, –udp</td><td align="left">仅显示 UCP套接字（sockets）</td></tr><tr><td align="left">-d, –dccp</td><td align="left">仅显示 DCCP套接字（sockets）</td></tr><tr><td align="left">-w, –raw</td><td align="left">仅显示 RAW套接字（sockets）</td></tr><tr><td align="left">-x, –unix</td><td align="left">仅显示 Unix套接字（sockets）</td></tr><tr><td align="left">-f, –family&#x3D;FAMILY</td><td align="left">显示 FAMILY类型的套接字（sockets），FAMILY可选，支持  unix, inet, inet6, link, netlink</td></tr><tr><td align="left">-A, –query&#x3D;QUERY, –socket&#x3D;QUERY<br/>QUERY :&#x3D; {all</td><td align="left">inet</td></tr><tr><td align="left">-D, –diag&#x3D;FILE</td><td align="left">将原始TCP套接字（sockets）信息转储到文件</td></tr><tr><td align="left">-F, –filter&#x3D;FILE</td><td align="left">从文件中都去过滤器信息</td></tr><tr><td align="left">FILTER :&#x3D; [ state TCP-STATE ] [ EXPRESSION ]</td><td align="left"></td></tr></tbody></table><h3 id="使用实例-23"><a href="#使用实例-23" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示TCP连接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-t</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：显示 Sockets 摘要</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-s</span>Total: <span class="token number">1385</span> <span class="token punctuation">(</span>kernel <span class="token number">0</span><span class="token punctuation">)</span>TCP:   <span class="token number">199</span> <span class="token punctuation">(</span>estab <span class="token number">64</span>, closed <span class="token number">76</span>, orphaned <span class="token number">0</span>, synrecv <span class="token number">0</span>, timewait <span class="token number">1</span>/0<span class="token punctuation">)</span>, ports <span class="token number">0</span>Transport Total     IP        IPv6*  <span class="token number">0</span>         -         -        RAW  <span class="token number">2</span>         <span class="token number">1</span>         <span class="token number">1</span>        UDP  <span class="token number">29</span>        <span class="token number">21</span>        <span class="token number">8</span>        TCP  <span class="token number">123</span>       <span class="token number">47</span>        <span class="token number">76</span>       INET  <span class="token number">154</span>       <span class="token number">69</span>        <span class="token number">85</span>       FRAG  <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　列出当前的established, closed, orphaned and waiting TCP sockets</p></blockquote><p><strong><code>例三</code>：列出所有打开的网络连接端口</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：查看进程使用的socket</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-pl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：找出打开套接字&#x2F;端口应用程序</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-lp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">3306</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：显示所有UDP Sockets</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-u</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：显示所有状态为established的SMTP连接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-o</span> state established <span class="token string">'( dport = :smtp or sport = :smtp )'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例八</code>：显示所有状态为Established的HTTP连接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-o</span> state established <span class="token string">'( dport = :http or sport = :http )'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例九</code>：列举出处于 FIN-WAIT-1状态的源端口为 80或者 443，目标网络为 193.233.7&#x2F;24所有 tcp套接字<br>命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-o</span> state fin-wait-1 <span class="token string">'( sport = :http or sport = :https )'</span> dst <span class="token number">193.233</span>.7/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十</code>：用TCP 状态过滤Sockets</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss <span class="token parameter variable">-4</span> state FILTER-NAME-HERE$ ss <span class="token parameter variable">-6</span> state FILTER-NAME-HERE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>FILTER-NAME-HERE 可以代表以下任何一个：<br>　　established<br>　　syn-sent<br>　　syn-recv<br>　　fin-wait-1<br>　　fin-wait-2<br>　　time-wait<br>　　closed<br>　　close-wait<br>　　last-ack<br>　　listen<br>　　closing<br>　　all : 所有以上状态<br>　　connected : 除了listen and closed的所有状态<br>　　synchronized :所有已连接的状态除了syn-sent<br>　　bucket : 显示状态为maintained as minisockets,如：time-wait和syn-recv.<br>　　big : 和bucket相反.</p></blockquote><p><strong><code>例十一</code>：匹配远程地址和端口号</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss dst ADDRESS_PATTERN$ ss dst <span class="token number">192.168</span>.1.5$ ss dst <span class="token number">192.168</span>.119.113:http$ ss dst <span class="token number">192.168</span>.119.113:smtp$ ss dst <span class="token number">192.168</span>.119.113:443<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例十二</code>：匹配本地地址和端口号</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss src ADDRESS_PATTERN$ ss src <span class="token number">192.168</span>.119.103$ ss src <span class="token number">192.168</span>.119.103:http$ ss src <span class="token number">192.168</span>.119.103:80$ ss src <span class="token number">192.168</span>.119.103:smtp$ ss src <span class="token number">192.168</span>.119.103:25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例十三</code>：将本地或者远程端口和一个数比较</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ss dport OP PORT$ ss sport OP PORT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　ss dport OP PORT 远程端口和一个数比较；ss sport OP PORT 本地端口和一个数比较。<br>　　OP 可以代表以下任意一个:<br>　　　　&lt;&#x3D; or le : 小于或等于端口号<br>　　　　&gt;&#x3D; or ge : 大于或等于端口号<br>　　　　&#x3D;&#x3D; or eq : 等于端口号<br>　　　　!&#x3D; or ne : 不等于端口号<br>　　　　&lt; or gt : 小于端口号<br>　　　　&gt; or lt : 大于端口号</p></blockquote><p><strong><code>例十四</code>：ss 和 netstat 效率对比</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">time</span> <span class="token function">netstat</span> <span class="token parameter variable">-at</span>$ <span class="token function">time</span> ss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　用time 命令分别获取通过netstat和ss命令获取程序和概要占用资源所使用的时间。在服务器连接数比较多的时候，netstat的效率完全没法和ss比。</p></blockquote><p>﻿</p><h3 id="‘每天一个linux命令（43）-telnet’-94-md-“-94-md”"><a href="#‘每天一个linux命令（43）-telnet’-94-md-“-94-md”" class="headerlink" title="‘每天一个linux命令（43）: telnet’(#94.md “#94.md”)"></a>‘每天一个linux命令（43）: telnet’(#94.md “#94.md”)</h3><p>　　telnet命令通常用来远程登录。telnet程序是基于TELNET协议的远程登录客户端程序。Telnet协议是TCP&#x2F;IP协议族中的一员，是Internet远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的 能力。在终端使用者的电脑上使用telnet程序，用它连接到服务器。终端使用者可以在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个 telnet会话，必须输入用户名和密码来登录服务器。Telnet是常用的远程控制Web服务器的方法。</p><!--more --><p>　　但是，telnet因为采用明文传送报文，安全性不好，很多Linux服务器都不开放telnet服务，而改用更安全的ssh方式了。但仍然有很多别的系统可能采用了telnet方式来提供远程登录，因此弄清楚telnet客户端的使用方式仍是很有必要的。</p><p>　　telnet命令还可做别的用途，比如确定远程服务的状态，比如确定远程服务器的某个端口是否能访问。</p><h3 id="命令格式-32"><a href="#命令格式-32" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ telnet <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">[</span>主机<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-32"><a href="#命令功能-32" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　执行telnet指令开启终端机阶段作业，并登入远端主机。</p><h3 id="命令参数-29"><a href="#命令参数-29" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-8</td><td align="left">允许使用8位字符资料，包括输入与输出</td></tr><tr><td align="left">-a</td><td align="left">尝试自动登入远端系统</td></tr><tr><td align="left">-b&lt;主机别名&gt;</td><td align="left">使用别名指定远端主机名称</td></tr><tr><td align="left">-c</td><td align="left">不读取用户专属目录里的.telnetrc文件</td></tr><tr><td align="left">-d</td><td align="left">启动排错模式</td></tr><tr><td align="left">-e&lt;脱离字符&gt;</td><td align="left">设置脱离字符</td></tr><tr><td align="left">-E</td><td align="left">滤除脱离字符</td></tr><tr><td align="left">-f</td><td align="left">此参数的效果和指定”-F”参数相同</td></tr><tr><td align="left">-F</td><td align="left">使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机</td></tr><tr><td align="left">-k&lt;域名&gt;</td><td align="left">使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名</td></tr><tr><td align="left">-K</td><td align="left">不自动登入远端主机</td></tr><tr><td align="left">-l&lt;用户名称&gt;</td><td align="left">指定要登入远端主机的用户名称</td></tr><tr><td align="left">-L</td><td align="left">允许输出8位字符资料</td></tr><tr><td align="left">-n&lt;记录文件&gt;</td><td align="left">指定文件记录相关信息</td></tr><tr><td align="left">-r</td><td align="left">使用类似rlogin指令的用户界面</td></tr><tr><td align="left">-S&lt;服务类型&gt;</td><td align="left">设置telnet连线所需的IP TOS信息</td></tr><tr><td align="left">-x</td><td align="left">假设主机有支持数据加密的功能，就使用它</td></tr><tr><td align="left">-X&lt;认证形态&gt;</td><td align="left">关闭指定的认证形态</td></tr></tbody></table><h3 id="使用实例-24"><a href="#使用实例-24" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：远程服务器无法访问</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ telnet <span class="token number">192.168</span>.120.206Trying <span class="token number">192.168</span>.120.209<span class="token punctuation">..</span>.telnet: connect to address <span class="token number">192.168</span>.120.209: No route to <span class="token function">host</span>telnet: Unable to connect to remote host: No route to <span class="token function">host</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>处理这种情况方法：<br>　　（1）确认ip地址是否正确？<br>　　（2）确认ip地址对应的主机是否已经开机？<br>　　（3）如果主机已经启动，确认路由设置是否设置正确？（使用route命令查看）<br>　　（4）如果主机已经启动，确认主机上是否开启了telnet服务？（使用netstat命令查看，TCP的23端口是否有LISTEN状态的行）<br>　　（5）如果主机已经启动telnet服务，确认防火墙是否放开了23端口的访问？（使用iptables-save查看）</p></blockquote><p><strong><code>例二</code>：域名无法解析</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ telnet  Temporary failure <span class="token keyword">in</span> name resolution<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>处理这种情况方法：<br>　　（1）确认域名是否正确<br>　　（2）确认本机的域名解析有关的设置是否正确（&#x2F;etc&#x2F;resolv.conf中nameserver的设置是否正确，如果没有，可以使用nameserver 8.8.8.8）<br>　　（3）确认防火墙是否放开了UDP53端口的访问（DNS使用UDP协议，端口53，使用iptables-save查看）</p></blockquote><p><strong><code>例三</code>：连接被拒绝</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ telnet <span class="token number">192.168</span>.120.206Trying <span class="token number">192.168</span>.120.206<span class="token punctuation">..</span>.telnet: connect to address <span class="token number">192.168</span>.120.206: Connection refusedtelnet: Unable to connect to remote host: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>处理这种情况：<br>　　（1）确认ip地址或者主机名是否正确？<br>　　（2）确认端口是否正确，是否默认的23端口</p></blockquote><p><strong><code>例四</code>：正常telnet</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ telnet <span class="token number">192.168</span>.120.204Trying <span class="token number">192.168</span>.120.204<span class="token punctuation">..</span>.Connected to <span class="token number">192.168</span>.120.204 <span class="token punctuation">(</span><span class="token number">192.168</span>.120.204<span class="token punctuation">)</span>.Escape character is <span class="token string">'^]'</span><span class="token builtin class-name">.</span>    localhost <span class="token punctuation">(</span>Linux release <span class="token number">2.6</span>.18-274.18.1.el5 <span class="token comment">#1 SMP Thu Feb 9 12:45:44 EST 2012) (1)</span>login: rootPassword:Login incorrect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　一般情况下不允许root从远程登录，可以先用普通账号登录，然后再用su -切到root用户。</p></blockquote><p><strong><code>例五</code>：测试服务器8888端口是否可用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ telnet <span class="token number">192.168</span>.0.88 <span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（44）-rcp’-95-md-“-95-md”"><a href="#‘每天一个linux命令（44）-rcp’-95-md-“-95-md”" class="headerlink" title="‘每天一个linux命令（44）: rcp’(#95.md “#95.md”)"></a>‘每天一个linux命令（44）: rcp’(#95.md “#95.md”)</h3><p>　　rcp代表“remote file copy”（远程文件拷贝）。该命令用于在计算机之间拷贝文件。rcp命令有两种格式。第一种格式用于文件到文件的拷贝；第二种格式用于把文件或目录拷贝到另一个目录中。</p><!--more --><h3 id="命令格式-33"><a href="#命令格式-33" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rcp</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>源文件<span class="token punctuation">]</span> <span class="token punctuation">[</span>目标文件<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-33"><a href="#命令功能-33" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　rcp命令用在远端复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到该目录中。</p><h3 id="命令参数-30"><a href="#命令参数-30" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-r</td><td align="left">递归地把源目录中的所有内容拷贝到目的目录中。要使用这个选项，目的必须是一个目录</td></tr><tr><td align="left">-p</td><td align="left">试图保留源文件的修改时间和模式，忽略umask</td></tr><tr><td align="left">-k</td><td align="left">请求rcp获得在指定区域内的远程主机的Kerberos 许可，而不是获得由krb_relmofhost⑶确定的远程主机区域内的远程主机的Kerberos许可。</td></tr><tr><td align="left">-x</td><td align="left">为传送的所有数据打开DES加密。这会影响响应时间和CPU利用率，但是可以提高安全性。如果在文件名中指定的路径不是完整的路径名，那么这个路径被解释为相对远程机上同名用户的主目录。如果没有给出远程用户名，就使用当前用户名。如果远程机上的路径包含特殊shell字符，需要用反斜线（\）、双引号（”）或单引号（’）括起来，使所有的shell元字符都能被远程地解释。需要说明的是，rcp不提示输入口令，它通过rsh命令来执行拷贝。</td></tr><tr><td align="left">directory</td><td align="left">每个文件或目录参数既可以是远程文件名也可以是本地文件名。远程文件名具有如下形式：rname@rhost：path，其中rname是远程用户名，rhost是远程计算机名，path是这个文件的路径。</td></tr></tbody></table><h3 id="使用实例-25"><a href="#使用实例-25" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong>使用rcp，需要具备的条件</strong><br>　　如果系统中有 &#x2F;etc&#x2F;hosts 文件，系统管理员应确保该文件包含要与之进行通信的远程主机的项。<br>　　&#x2F;etc&#x2F;hosts 文件中有一行文字，其中包含每个远程系统的以下信息：<br>　　　　<code>internet_address   official_name   alias</code><br>　　例如：<br>　　　　<code>9.186.10.***  webserver1.com.58.webserver</code><br>.rhosts 文件<br>　　.rhosts 文件位于远程系统的主目录下，其中包含本地系统的名称和本地登录名。<br>　　例如，远程系统的 .rhosts 文件中的项可能是：<br>　　　　<code>webserver1 root</code><br>　　其中，webserver1 是本地系统的名称，root 是本地登录名。这样，webserver1 上的 root 即可在包含.rhosts 文件的远程系统中来回复制文件。<br><strong>配置过程:</strong><br>只对root用户生效</p><ol><li><p>在双方root用户根目录下建立.rhosts文件,并将双方的hostname加进去.在此之前应在双方的 &#x2F;etc&#x2F;hosts文件中加入对方的IP和hostname</p></li><li><p>把rsh服务启动起来,redhat默认是不启动的。<br>方法：用执行ntsysv命令,在rsh选项前用空格键选中,确定退出。然后执行：<br>service xinetd restart即可。</p></li></ol><p>3.到&#x2F;etc&#x2F;pam.d&#x2F;目录下,把rsh文件中的auth required &#x2F;lib&#x2F;security&#x2F;pam_securetty.so<br>一行用“#”注释掉即可。（只有注释掉这一行，才能用root用户登录）</p><p><strong><code>例一</code>：将本地img文件夹内的所有内容 复制到服务器相应的img目录下</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -r 递归子目录</span>$ <span class="token function">rcp</span> <span class="token parameter variable">-r</span> img/* webserver1:/var/project/img/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：将服务器的img文件夹内的所有内容 复制到本地目录下</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -r 递归子目录</span>$ <span class="token function">rcp</span> <span class="token parameter variable">-r</span> webserver1:/var/project/img/* img/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：将目录复制到远程系统：要将本地目录及其文件和子目录复制到远程系统</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将本地的img目录复制到服务器的project目录下</span>$ <span class="token function">rcp</span> <span class="token parameter variable">-r</span> img/ webserver1:/var/project/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（45）-scp’-96-md-“-96-md”"><a href="#‘每天一个linux命令（45）-scp’-96-md-“-96-md”" class="headerlink" title="‘每天一个linux命令（45）: scp’(#96.md “#96.md”)"></a>‘每天一个linux命令（45）: scp’(#96.md “#96.md”)</h3><p>　　scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I&#x2F;O非常高，而scp基本不影响系统正常使用。</p><!--more --><h3 id="命令格式-34"><a href="#命令格式-34" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">scp</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>原路径<span class="token punctuation">]</span> <span class="token punctuation">[</span>目标路径<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-34"><a href="#命令功能-34" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p><h3 id="命令参数-31"><a href="#命令参数-31" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-1</td><td align="left">强制scp命令使用协议ssh1</td></tr><tr><td align="left">-2</td><td align="left">强制scp命令使用协议ssh2</td></tr><tr><td align="left">-4</td><td align="left">强制scp命令只使用IPv4寻址</td></tr><tr><td align="left">-6</td><td align="left">强制scp命令只使用IPv6寻址</td></tr><tr><td align="left">-B</td><td align="left">使用批处理模式（传输过程中不询问传输口令或短语）</td></tr><tr><td align="left">-C</td><td align="left">允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</td></tr><tr><td align="left">-p</td><td align="left">保留原文件的修改时间，访问时间和访问权限</td></tr><tr><td align="left">-q</td><td align="left">不显示传输进度条</td></tr><tr><td align="left">-r</td><td align="left">递归复制整个目录</td></tr><tr><td align="left">-v</td><td align="left">详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题</td></tr><tr><td align="left">-c cipher</td><td align="left">以cipher将数据传输进行加密，这个选项将直接传递给ssh</td></tr><tr><td align="left">-F ssh_config</td><td align="left">指定一个替代的ssh配置文件，此参数直接传递给ssh</td></tr><tr><td align="left">-i identity_file</td><td align="left">从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh</td></tr><tr><td align="left">-l limit</td><td align="left">限定用户所能使用的带宽，以Kbit&#x2F;s为单位</td></tr><tr><td align="left">-o ssh_option</td><td align="left">如果习惯于使用ssh_config(5)中的参数传递方式</td></tr><tr><td align="left">-P port</td><td align="left">注意是大写的P, port是指定数据传输用到的端口号</td></tr><tr><td align="left">-S program</td><td align="left">指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项</td></tr></tbody></table><h3 id="使用实例-26"><a href="#使用实例-26" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong>从本地服务器复制到远程服务器：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定了用户名，命令执行后需输入密码</span>$ <span class="token function">scp</span> <span class="token parameter variable">-r</span> img/* root@server:/var/project/img/<span class="token comment"># 没有指定用户名，命令执行后需要输入用户名密码</span>$ <span class="token function">scp</span> <span class="token parameter variable">-r</span> img/* server:/var/project/img/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>从远程服务器复制到本地当前目录：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">scp</span> <span class="token parameter variable">-r</span> server:/var/project/img/* <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（46）-ln’-97-md-“-97-md”"><a href="#‘每天一个linux命令（46）-ln’-97-md-“-97-md”" class="headerlink" title="‘每天一个linux命令（46）: ln’(#97.md “#97.md”)"></a>‘每天一个linux命令（46）: ln’(#97.md “#97.md”)</h3><p>　　ln是linux中又一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接.当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><!--more --><h3 id="命令格式-35"><a href="#命令格式-35" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ln</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">[</span>源文件或目录<span class="token punctuation">]</span><span class="token punctuation">[</span>目标文件或目录<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-35"><a href="#命令功能-35" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。<br><strong>软连接</strong><br>　　1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式<br>　　2.软链接可以 跨文件系统 ，硬链接不可以<br>　　3.软链接可以对一个不存在的文件名进行链接<br>　　4.软链接可以对目录进行链接<br><strong>硬链接</strong><br>　　1.硬链接，以文件副本的形式存在。但不占用实际空间。<br>　　2.不允许给目录创建硬链接<br>　　3.硬链接只有在同一个文件系统中才能创建<br><strong>两点注意</strong><br>　　第一，ln命令会保持每一处链接文件的同步性，也就是说，不论你改动了哪一处，其它的文件都会发生相同的变化；<br>　　第二，ln的链接又分软链接和硬链接两种，软链接就是ln –s 源文件 目标文件，它只会在你选定的位置上生成一个文件的镜像，不会占用磁盘空间，硬链接 ln 源文件 目标文件，没有参数-s， 它会在你选定的位置上生成一个和源文件大小相同的文件，无论是软链接还是硬链接，文件都保持同步变化。<br>　　ln指令用在链接文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则会把前面指定的所有文件或目录复制到该目录中。若同时指定多个文件或目录，且最后的目的地并非是一个已存在的目录，则会出现错误信息。</p><h3 id="命令参数-32"><a href="#命令参数-32" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>必要参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">删除，覆盖以前建立的链接</td></tr><tr><td align="left">-d</td><td align="left">允许超级用户制作目录的硬链接</td></tr><tr><td align="left">-f</td><td align="left">强制执行</td></tr><tr><td align="left">-i</td><td align="left">交互模式，文件存在则提示用户是否覆盖</td></tr><tr><td align="left">-n</td><td align="left">把符号链接视为一般目录</td></tr><tr><td align="left">-s</td><td align="left">软链接(符号链接)</td></tr><tr><td align="left">-v</td><td align="left">显示详细的处理过程</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-S</td><td align="left">“-S&lt;字尾备份字符串&gt; ”或 “–suffix&#x3D;&lt;字尾备份字符串&gt;”</td></tr><tr><td align="left">-V</td><td align="left">“-V&lt;备份方式&gt;”或“–version-control&#x3D;&lt;备份方式&gt;”</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例-27"><a href="#使用实例-27" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：给文件创建软链接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为2.txt文件创建软链接2，如果2.txt丢失，2将失效</span>$ <span class="token function">ln</span> <span class="token parameter variable">-s</span> <span class="token number">2</span>.txt <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：给文件创建硬链接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为1.txt创建硬链接1，1.txt与1的各项属性相同,删除1.txt，1仍能使用</span>$ <span class="token function">ln</span> <span class="token number">1</span>.txt <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：接上面两实例，链接完毕后，删除和重建链接原文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ll-rw-r--r-- <span class="token number">2</span> faker faker   <span class="token number">10</span> <span class="token number">1</span>月  <span class="token number">22</span> <span class="token number">11</span>:28 <span class="token number">1</span>-rw-r--r-- <span class="token number">2</span> faker faker   <span class="token number">10</span> <span class="token number">1</span>月  <span class="token number">22</span> <span class="token number">11</span>:28 <span class="token number">1</span>.txtlrwxrwxrwx <span class="token number">1</span> faker faker    <span class="token number">5</span> <span class="token number">1</span>月  <span class="token number">28</span> <span class="token number">11</span>:15 <span class="token number">2</span> -<span class="token operator">></span> <span class="token number">2</span>.txt<span class="token parameter variable">-rwxrwxrwx</span> <span class="token number">1</span> faker faker   <span class="token number">14</span> <span class="token number">1</span>月  <span class="token number">18</span> <span class="token number">10</span>:06 <span class="token number">2</span>.txt$ <span class="token function">rm</span> <span class="token number">1</span>.txt <span class="token number">2</span>.txt-rw-r--r-- <span class="token number">1</span> faker faker   <span class="token number">10</span> <span class="token number">1</span>月  <span class="token number">22</span> <span class="token number">11</span>:28 <span class="token number">1</span>lrwxrwxrwx <span class="token number">1</span> faker faker    <span class="token number">5</span> <span class="token number">1</span>月  <span class="token number">28</span> <span class="token number">11</span>:15 <span class="token number">2</span> -<span class="token operator">></span> <span class="token number">2</span>.txt$ <span class="token function">cat</span> <span class="token number">1</span>sdfiskdlf$ <span class="token function">cat</span> <span class="token number">2</span>cat: <span class="token number">2</span>: 没有那个文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　1.源文件被删除后，并没有影响硬链接文件；软链接文件在centos系统下不断的闪烁，提示源文件已经不存在<br>　　2.重建源文件后，软链接不在闪烁提示，说明已经链接成功，找到了链接文件系统；重建后，硬链接文件并没有受到源文件影响，硬链接文件的内容还是保留了删除前源文件的内容，说明硬链接已经失效</p></blockquote><p><strong><code>例三</code>：将文件链接为另一个目录中的相同名字</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在ig文件夹中创建一个1.txt的链接</span>$ <span class="token function">ln</span> <span class="token number">1</span>.txt ig/$ ll ig-rw-r--r-- <span class="token number">2</span> faker faker   <span class="token number">10</span> <span class="token number">1</span>月  <span class="token number">28</span> <span class="token number">13</span>:40 <span class="token number">1</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例五</code>：给目录创建软连接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ln</span> <span class="token parameter variable">-s</span> ig gi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　1.目录只能创建软链接<br>　　<del>2.目录创建链接必须用绝对路径，相对路径创建会不成功，会提示：符号连接的层数过多 这样的错误</del>（测试并不会出现这样的问题）<br>　　3.在链接目标目录中修改文件都会在源文件目录中同步变化</p></blockquote><p>﻿<br>　　diff 命令是 linux上非常重要的工具，用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方。diff在命令行中打印每一个行的改动。最新版本的diff还支持二进制文件。diff程序的输出被称为补丁 (patch)，因为Linux系统中还有一个patch程序，可以根据diff的输出将a.c的文件内容更新为b.c。diff是svn、cvs、git等版本控制工具不可或缺的一部分。</p><!--more --><h3 id="命令格式-36"><a href="#命令格式-36" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">diff</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件1或目录1<span class="token punctuation">]</span> <span class="token punctuation">[</span>文件2或目录2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-36"><a href="#命令功能-36" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　diff命令能比较单个文件或者目录内容。如果指定比较的是文件，则只有当输入为文本文件时才有效。以逐行的方式，比较文本文件的异同处。如果指定比较的是目录的的时候，diff 命令会比较两个目录下名字相同的文本文件。列出不同的二进制文件、公共子目录和只在一个目录出现的文件。</p><h3 id="命令参数-33"><a href="#命令参数-33" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">指定要显示多少行的文本。此参数必须与-c或-u参数一并使用</td></tr><tr><td align="left">-a或–text</td><td align="left">diff预设只会逐行比较文本文件</td></tr><tr><td align="left">-b或–ignore-space-change</td><td align="left">不检查空格字符的不同</td></tr><tr><td align="left">-B或–ignore-blank-lines</td><td align="left">不检查空白行</td></tr><tr><td align="left">-c</td><td align="left">显示全部内文，并标出不同之处</td></tr><tr><td align="left">-C或–context</td><td align="left">与执行”-c”指令相同</td></tr><tr><td align="left">-d或–minimal</td><td align="left">使用不同的演算法，以较小的单位来做比较</td></tr><tr><td align="left">-D或ifdef</td><td align="left">此参数的输出格式可用于前置处理器巨集</td></tr><tr><td align="left">-e或–ed</td><td align="left">此参数的输出格式可用于ed的script文件</td></tr><tr><td align="left">-f或-forward-ed</td><td align="left">输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处</td></tr><tr><td align="left">-H或–speed-large-files</td><td align="left">比较大文件时，可加快速度</td></tr><tr><td align="left">-l或–ignore-matching-lines</td><td align="left">若两个文件在某几行有所不同，而这几行同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异</td></tr><tr><td align="left">-i或–ignore-case</td><td align="left">不检查大小写的不同</td></tr><tr><td align="left">-l或–paginate</td><td align="left">将结果交由pr程序来分页</td></tr><tr><td align="left">-n或–rcs</td><td align="left">将比较结果以RCS的格式来显示</td></tr><tr><td align="left">-N或–new-file</td><td align="left">在比较目录时，若文件A仅出现在某个目录中，预设会显示：Only in目录：文件A若使用-N参数，则diff会将文件A与一个空白的文件比较</td></tr><tr><td align="left">-p</td><td align="left">若比较的文件为C语言的程序码文件时，显示差异所在的函数名称</td></tr><tr><td align="left">-P或–unidirectional-new-file</td><td align="left">与-N类似，但只有当第二个目录包含了一个第一个目录所没有的文件时，才会将这个文件与空白的文件做比较</td></tr><tr><td align="left">-q或–brief</td><td align="left">仅显示有无差异，不显示详细的信息</td></tr><tr><td align="left">-r或–recursive</td><td align="left">比较子目录中的文件</td></tr><tr><td align="left">-s或–report-identical-files</td><td align="left">若没有发现任何差异，仍然显示信息</td></tr><tr><td align="left">-S或–starting-file</td><td align="left">在比较目录时，从指定的文件开始比较</td></tr><tr><td align="left">-t或–expand-tabs</td><td align="left">在输出时，将tab字符展开</td></tr><tr><td align="left">-T或–initial-tab</td><td align="left">在每行前面加上tab字符以便对齐</td></tr><tr><td align="left">-u,-U或–unified&#x3D;</td><td align="left">以合并的方式来显示文件内容的不同</td></tr><tr><td align="left">-v或–version</td><td align="left">显示版本信息</td></tr><tr><td align="left">-w或–ignore-all-space</td><td align="left">忽略全部的空格字符</td></tr><tr><td align="left">-W或–width</td><td align="left">在使用-y参数时，指定栏宽</td></tr><tr><td align="left">-x或–exclude</td><td align="left">不比较选项中所指定的文件或目录</td></tr><tr><td align="left">-X或–exclude-from</td><td align="left">您可以将文件或目录类型存成文本文件，然后在&#x3D;中指定此文本文件</td></tr><tr><td align="left">-y或–side-by-side</td><td align="left">以并列的方式显示文件的异同之处</td></tr><tr><td align="left">–left-column</td><td align="left">在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容</td></tr><tr><td align="left">–suppress-common-lines</td><td align="left">在使用-y参数时，仅显示不同之处</td></tr><tr><td align="left">–help</td><td align="left">显示帮助</td></tr></tbody></table><h3 id="使用实例-28"><a href="#使用实例-28" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：比较两个文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">diff</span> <span class="token number">1</span>.txt <span class="token number">2</span>.txt1c1<span class="token operator">&lt;</span> ii <span class="token number">2</span>.txt<span class="token number">2017</span>-01-28 <span class="token number">14</span>:24:59.096124066 +0800****************** <span class="token number">1,4</span> ****<span class="token operator">!</span> ii  iii  iiii  iiiii-<span class="token operator">!</span> iii  iii  iiii  iiiii<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　这种方式在开头两行作了比较文件的说明，这里有三中特殊字符：<br>　　“＋” 比较的文件的后者比前着多一行<br>　　“－” 比较的文件的后者比前着少一行<br>　　“！” 比较的文件两者有差别的行</p></blockquote><p><strong><code>例四</code>：统一格式输出</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">diff</span> <span class="token number">1</span>.txt <span class="token number">2</span>.txt  <span class="token parameter variable">-u</span>--- <span class="token number">1</span>.txt<span class="token number">2017</span>-01-28 <span class="token number">14</span>:24:13.744538252 +0800+++ <span class="token number">2</span>.txt<span class="token number">2017</span>-01-28 <span class="token number">14</span>:24:59.096124066 +0800@@ -1,4 +1,4 @@<span class="token parameter variable">-ii</span>+iii iii iiii iiiii<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例五</code>：比较文件夹不同</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">diff</span> test3 test6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：比较两个文件不同，并生产补丁</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">diff</span> <span class="token parameter variable">-ruN</span> <span class="token number">1</span>.txt <span class="token number">2</span>.txt <span class="token operator">></span>patch.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：打补丁</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token number">1</span>.txt patch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（48）-date’-99-md-“-99-md”"><a href="#‘每天一个linux命令（48）-date’-99-md-“-99-md”" class="headerlink" title="‘每天一个linux命令（48）: date’(#99.md “#99.md”)"></a>‘每天一个linux命令（48）: date’(#99.md “#99.md”)</h3><p>　　在linux环境中，不管是编程还是其他维护，时间是必不可少的，也经常会用到时间的运算，熟练运用date命令来表示自己想要表示的时间，肯定可以给自己的工作带来诸多方便。</p><!--more --><h3 id="命令格式-37"><a href="#命令格式-37" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">date</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>+格式<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-37"><a href="#命令功能-37" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　date 可以用来显示或设定系统的日期与时间。</p><h3 id="命令参数-34"><a href="#命令参数-34" class="headerlink" title="命令参数"></a>命令参数</h3><p><strong>命令参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">%H</td><td align="left">小时(以00-23来表示)</td></tr><tr><td align="left">%I</td><td align="left">小时(以01-12来表示)</td></tr><tr><td align="left">%K</td><td align="left">小时(以0-23来表示)</td></tr><tr><td align="left">%l</td><td align="left">小时(以0-12来表示)</td></tr><tr><td align="left">%M</td><td align="left">分钟(以00-59来表示)</td></tr><tr><td align="left">%P</td><td align="left">AM或PM</td></tr><tr><td align="left">%r</td><td align="left">时间(含时分秒，小时以12小时AM&#x2F;PM来表示)</td></tr><tr><td align="left">%s</td><td align="left">总秒数。起算时间为1970-01-01 00:00:00 UTC</td></tr><tr><td align="left">%S</td><td align="left">秒(以本地的惯用法来表示)</td></tr><tr><td align="left">%T</td><td align="left">时间(含时分秒，小时以24小时制来表示)</td></tr><tr><td align="left">%X</td><td align="left">时间(以本地的惯用法来表示)</td></tr><tr><td align="left">%Z</td><td align="left">市区</td></tr><tr><td align="left">%a</td><td align="left">星期的缩写</td></tr><tr><td align="left">%A</td><td align="left">星期的完整名称</td></tr><tr><td align="left">%b</td><td align="left">月份英文名的缩写</td></tr><tr><td align="left">%B</td><td align="left">月份的完整英文名称</td></tr><tr><td align="left">%c</td><td align="left">日期与时间。只输入date指令也会显示同样的结果</td></tr><tr><td align="left">%d</td><td align="left">日期(以01-31来表示)</td></tr><tr><td align="left">%D</td><td align="left">日期(含年月日)</td></tr><tr><td align="left">%j</td><td align="left">该年中的第几天</td></tr><tr><td align="left">%m</td><td align="left">月份(以01-12来表示)</td></tr><tr><td align="left">%U</td><td align="left">该年中的周数</td></tr><tr><td align="left">%w</td><td align="left">该周的天数，0代表周日，1代表周一，异词类推</td></tr><tr><td align="left">%x</td><td align="left">日期(以本地的惯用法来表示)</td></tr><tr><td align="left">%y</td><td align="left">年份(以00-99来表示)</td></tr><tr><td align="left">%Y</td><td align="left">年份(以四位数来表示)</td></tr><tr><td align="left">%n</td><td align="left">在显示时，插入新的一行</td></tr><tr><td align="left">%t</td><td align="left">在显示时，插入tab</td></tr><tr><td align="left">MM</td><td align="left">月份(必要)</td></tr><tr><td align="left">DD</td><td align="left">日期(必要)</td></tr><tr><td align="left">hh</td><td align="left">小时(必要)</td></tr><tr><td align="left">mm</td><td align="left">分钟(必要)</td></tr><tr><td align="left">ss</td><td align="left">秒(选择性)</td></tr></tbody></table><p><strong>选择参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d&lt;字符串&gt;</td><td align="left">显示字符串所指的日期与时间。字符串前后必须加上双引号</td></tr><tr><td align="left">-s&lt;字符串&gt;</td><td align="left">根据字符串来设置日期与时间。字符串前后必须加上双引号</td></tr><tr><td align="left">-u</td><td align="left">显示GMT</td></tr><tr><td align="left">–help</td><td align="left">在线帮助</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p><strong>1.在显示方面，使用者可以设定欲显示的格式，格式设定为一个加号后接数个标记，其中可用的标记列表如下: % :  打印出 %</strong><br>%n : 下一行<br>%t : 跳格<br>%H : 小时(00..23)<br>%I : 小时(01..12)<br>%k : 小时(0..23)<br>%l : 小时(1..12)<br>%M : 分钟(00..59)<br>%p : 显示本地 AM 或 PM<br>%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)<br>%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数<br>%S : 秒(00..61)<br>%T : 直接显示时间 (24 小时制)<br>%X : 相当于 %H:%M:%S<br>%Z : 显示时区 %a : 星期几 (Sun..Sat)<br>%A : 星期几 (Sunday..Saturday)<br>%b : 月份 (Jan..Dec)<br>%B : 月份 (January..December)<br>%c : 直接显示日期与时间<br>%d : 日 (01..31)<br>%D : 直接显示日期 (mm&#x2F;dd&#x2F;yy)<br>%h : 同 %b<br>%j : 一年中的第几天 (001..366)<br>%m : 月份 (01..12)<br>%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)<br>%w : 一周中的第几天 (0..6)<br>%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)<br>%x : 直接显示日期 (mm&#x2F;dd&#x2F;yy)<br>%y : 年份的最后两位数字 (00.99)<br>%Y : 完整年份 (0000..9999)<br><strong>2.在设定时间方面</strong><br>date -s &#x2F;&#x2F;设置当前时间，只有root权限才能设置，其他只能查看。<br>date -s 20080523 &#x2F;&#x2F;设置成20080523，这样会把具体时间设置成空00:00:00<br>date -s 01:01:01 &#x2F;&#x2F;设置具体时间，不会对日期做更改<br>date -s “01:01:01 2008-05-23″ &#x2F;&#x2F;这样可以设置全部时间<br>date -s “01:01:01 20080523″ &#x2F;&#x2F;这样可以设置全部时间<br>date -s “2008-05-23 01:01:01″ &#x2F;&#x2F;这样可以设置全部时间<br>date -s “20080523 01:01:01″ &#x2F;&#x2F;这样可以设置全部时间<br><strong>3.加减</strong><br>date +%Y%m%d         &#x2F;&#x2F;显示前天年月日<br>date +%Y%m%d –date&#x3D;”+1 day”  &#x2F;&#x2F;显示前一天的日期<br>date +%Y%m%d –date&#x3D;”-1 day”  &#x2F;&#x2F;显示后一天的日期<br>date +%Y%m%d –date&#x3D;”-1 month”  &#x2F;&#x2F;显示上一月的日期<br>date +%Y%m%d –date&#x3D;”+1 month”  &#x2F;&#x2F;显示下一月的日期<br>date +%Y%m%d –date&#x3D;”-1 year”  &#x2F;&#x2F;显示前一年的日期<br>date +%Y%m%d –date&#x3D;”+1 year”  &#x2F;&#x2F;显示下一年的日期</p><h3 id="使用实例-29"><a href="#使用实例-29" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示当前时间</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">date</span><span class="token number">2017</span>年 01月 <span class="token number">28</span>日 星期六 <span class="token number">14</span>:51:10 CST$ <span class="token function">date</span> <span class="token string">'+%c'</span><span class="token number">2017</span>年01月28日 星期六 <span class="token number">14</span>时51分35秒$ <span class="token function">date</span> <span class="token string">'+%D'</span>01/28/17$ <span class="token function">date</span> <span class="token string">'+%x'</span><span class="token number">2017</span>年01月28日$ <span class="token function">date</span> <span class="token string">'+%T'</span><span class="token number">14</span>:52:02$ <span class="token function">date</span> <span class="token string">'+%X'</span><span class="token number">14</span>时52分06秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例二</code>：显示日期和设定时间</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">date</span> <span class="token parameter variable">--date</span> 08:42:00<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：date -d参数使用</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">"nov 22"</span><span class="token number">2012</span>年 <span class="token number">11</span>月 <span class="token number">22</span>日 星期四 00:00:00 CST$ <span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">'2 weeks'</span><span class="token number">2012</span>年 <span class="token number">12</span>月 <span class="token number">22</span>日 星期六 08:50:21 CST$ <span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">'next monday'</span><span class="token number">2012</span>年 <span class="token number">12</span>月 <span class="token number">10</span>日 星期一 00:00:00 CST$ <span class="token function">date</span> <span class="token parameter variable">-d</span> next-day +%Y%m%d<span class="token number">20121209</span>$ <span class="token function">date</span> <span class="token parameter variable">-d</span> tomorrow +%Y%m%d<span class="token number">20121209</span>$ <span class="token function">date</span> <span class="token parameter variable">-d</span> last-day +%Y%m%d<span class="token number">20121207</span>$ <span class="token function">date</span> <span class="token parameter variable">-d</span> yesterday +%Y%m%d<span class="token number">20121207</span>$ <span class="token function">date</span> <span class="token parameter variable">-d</span> last-month +%Y%m<span class="token number">201211</span>$ <span class="token function">date</span> <span class="token parameter variable">-d</span> next-month +%Y%m<span class="token number">201301</span>$ <span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">'30 days ago'</span><span class="token number">2012</span>年 <span class="token number">11</span>月 08日 星期四 08:51:37 CST$ <span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">'-100 days'</span><span class="token number">2012</span>年 08月 <span class="token number">30</span>日 星期四 08:52:03 CST$ <span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">'dec 14 -2 weeks'</span><span class="token number">2012</span>年 <span class="token number">11</span>月 <span class="token number">30</span>日 星期五 00:00:00 CST$ <span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">'50 days'</span><span class="token number">2013</span>年 01月 <span class="token number">27</span>日 星期日 08:52:27 CST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　date 命令的另一个扩展是 -d 选项，该选项非常有用。使用这个功能强大的选项，通过将日期作为引号括起来的参数提供，您可以快速地查明一个特定的日期。-d 选项还可以告诉您，相对于当前日期若干天的究竟是哪一天，从现在开始的若干天或若干星期以后，或者以前（过去）。通过将这个相对偏移使用引号括起来，作为 -d 选项的参数，就可以完成这项任务。<br>　　具体说明如下：<br>　　　　date -d “nov 22”  今年的 11 月 22 日是星期三<br>　　　　date -d ‘2 weeks’ 2周后的日期<br>　　　　date -d ‘next monday’ (下周一的日期)<br>　　　　date -d next-day +%Y%m%d（明天的日期）或者：date -d tomorrow +%Y%m%d<br>　　　　date -d last-day +%Y%m%d(昨天的日期) 或者：date -d yesterday +%Y%m%d<br>　　　　date -d last-month +%Y%m(上个月是几月)<br>　　　　date -d next-month +%Y%m(下个月是几月)<br>　　使用 ago 指令，您可以得到过去的日期：<br>　　　　date -d ‘30 days ago’ （30天前的日期）<br>　　使用负数以得到相反的日期：<br>　　　　date -d ‘dec 14 -2 weeks’ （相对:dec 14这个日期的两周前的日期）<br>　　　　date -d ‘-100 days’ (100天以前的日期)<br>　　　　date -d ‘50 days’(50天后的日期)</p></blockquote><p><strong><code>例四</code>：显示月份和日数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">date</span>  <span class="token string">'+%B %d'</span>一月 <span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例五</code>：显示时间后跳行，再显示目前日期</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">date</span> <span class="token string">'+%T%n%D'</span><span class="token number">14</span>:58:2301/28/17<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（49）-cal’-100-md-“-100-md”"><a href="#‘每天一个linux命令（49）-cal’-100-md-“-100-md”" class="headerlink" title="‘每天一个linux命令（49）: cal’(#100.md “#100.md”)"></a>‘每天一个linux命令（49）: cal’(#100.md “#100.md”)</h3><p>　　cal命令可以用来显示公历（阳历）日历。公历是现在国际通用的历法，又称格列历，通称阳历。“阳历”又名“太阳历”，系以地球绕行太阳一周为一年，为西方各国所通用，故又名“西历”。</p><!-- more --><h3 id="命令格式-38"><a href="#命令格式-38" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cal</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">[</span>月份<span class="token punctuation">]</span><span class="token punctuation">[</span>年份<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-38"><a href="#命令功能-38" class="headerlink" title="命令功能"></a>命令功能</h3><p>用于查看日历等时间信息，如只有一个参数，则表示年份(1-9999)，如有两个参数，则表示月份和年份</p><h3 id="命令参数-35"><a href="#命令参数-35" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-1</td><td align="left">显示一个月的月历</td></tr><tr><td align="left">-3</td><td align="left">显示系统前一个月，当前月，下一个月的月历</td></tr><tr><td align="left">-s</td><td align="left">显示星期天为一个星期的第一天，默认的格式</td></tr><tr><td align="left">-m</td><td align="left">显示星期一为一个星期的第一天</td></tr><tr><td align="left">-j</td><td align="left">显示在当年中的第几天（一年日期按天算，从1月1号算起，默认显示当前月在一年中的天数）</td></tr><tr><td align="left">-y</td><td align="left">显示当前年份的日历</td></tr></tbody></table><h3 id="使用实例-30"><a href="#使用实例-30" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示当前月份日历</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cal</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/" alt="日历"><br><strong><code>例二</code>：显示指定月份的日历</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cal</span> <span class="token number">6</span> <span class="token number">2016</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/" alt="2016年6月"><br><strong><code>例三</code>：显示2016年的日历</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cal</span> <span class="token parameter variable">-y</span> <span class="token number">2016</span>$ <span class="token function">cal</span> <span class="token number">2016</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/" alt="2016年日历"><br><strong><code>例四</code>：显示自1月1日的天数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cal</span> <span class="token parameter variable">-j</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/" alt="本年的第几天"></p><p><strong><code>例五</code>：星期一显示在第一列</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cal</span> <span class="token parameter variable">-m</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/" alt="本机deepin不支持这个参数，登陆到服务器截了一张图=="></p><p>﻿</p><h3 id="‘每天一个linux命令（5）-rm’-101-md-“-101-md”"><a href="#‘每天一个linux命令（5）-rm’-101-md-“-101-md”" class="headerlink" title="‘每天一个linux命令（5）: rm’(#101.md “#101.md”)"></a>‘每天一个linux命令（5）: rm’(#101.md “#101.md”)</h3><p>　　rm是常用的命令，该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。对于链接文件，只是删除了链接，原有文件均保持不变。<br>rm是一个危险的命令，使用的时候要特别当心，尤其对于新手，否则整个系统就会毁在这个命令（比如在&#x2F;（根目录）下执行rm * -rf）。所以，我们在执行rm之前最好先确认一下在哪个目录，到底要删除什么东西，操作时保持高度清醒的头脑。</p><!--more --><h3 id="命令格式-39"><a href="#命令格式-39" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 文件<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-39"><a href="#命令功能-39" class="headerlink" title="命令功能"></a>命令功能</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-f, –force</td><td align="left">忽略不存在的文件，从不给出提示</td></tr><tr><td align="left">-i, –interactive</td><td align="left">进行交互式删除</td></tr><tr><td align="left">-r, -R, –recursive</td><td align="left">指示rm将参数中列出的全部目录和子目录均递归地删除</td></tr><tr><td align="left">-v, –verbose</td><td align="left">详细显示进行的步骤</td></tr><tr><td align="left">–help</td><td align="left">显示此帮助信息并退出</td></tr><tr><td align="left">–version</td><td align="left">输出版本信息并退出</td></tr></tbody></table><h3 id="命令实例-7"><a href="#命令实例-7" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：删除文件file，系统会先询问是否删除</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：强行删除file，系统不再提示</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**<code>例三</code>：删除任何.log文件；删除前逐一询问确认 **</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> <span class="token parameter variable">-i</span> *.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：对test文件夹进行递归删除</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：递归删除，系统不用一一确认</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：删除以 -f 开头的文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rm</span> -- <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：自定义回收站功能</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下面的操作过程模拟了回收站的效果，即删除文件的时候只是把文件放到一个临时目录中，这样在需要的时候还可以恢复过来。</span>$ <span class="token function-name function">myrm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token assign-left variable">D</span><span class="token operator">=</span>/tmp/<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y%m%d%H%M%S<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$D</span><span class="token punctuation">;</span> <span class="token function">mv</span> <span class="token string">"<span class="token variable">$@</span>"</span> <span class="token variable">$D</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token string">"moved to <span class="token variable">$D</span> ok"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（50）-grep’-102-md-“-102-md”"><a href="#‘每天一个linux命令（50）-grep’-102-md-“-102-md”" class="headerlink" title="‘每天一个linux命令（50）: grep’(#102.md “#102.md”)"></a>‘每天一个linux命令（50）: grep’(#102.md “#102.md”)</h3><p>　　Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。</p><!-- more --><p>　　grep的工作方式是这样的，它在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>　　grep可用于shell脚本，因为grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p><h3 id="命令格式-40"><a href="#命令格式-40" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span> pattern <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-40"><a href="#命令功能-40" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　用于过滤&#x2F;搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。</p><h3 id="命令参数-36"><a href="#命令参数-36" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a <br>–text</td><td align="left">不要忽略二进制的数据</td></tr><tr><td align="left">-A&lt;显示行数&gt;  <br>–after-context&#x3D;&lt;显示行数&gt;</td><td align="left">除了显示符合范本样式的那一列之外，并显示该行之后的内容</td></tr><tr><td align="left">-b <br>–byte-offset</td><td align="left">在显示符合样式的那一行之前，标示出该行第一个字符的编号</td></tr><tr><td align="left">-B&lt;显示行数&gt;  <br>–before-context&#x3D;&lt;显示行数&gt;</td><td align="left">除了显示符合样式的那一行之外，并显示该行之前的内容</td></tr><tr><td align="left">-c    <br>–count</td><td align="left">计算符合样式的列数</td></tr><tr><td align="left">-C&lt;显示行数&gt;    <br>–context&#x3D;&lt;显示行数&gt;或-&lt;显示行数&gt;</td><td align="left">显示上下文n行</td></tr><tr><td align="left">-d &lt;动作&gt;      <br>–directories&#x3D;&lt;动作&gt;</td><td align="left">当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作</td></tr><tr><td align="left">-e&lt;范本样式&gt;  <br>–regexp&#x3D;&lt;范本样式&gt;</td><td align="left">指定字符串做为查找文件内容的样式</td></tr><tr><td align="left">-E      <br>–extended-regexp</td><td align="left">将样式为延伸的普通表示法来使用</td></tr><tr><td align="left">-f&lt;规则文件&gt;  <br>–file&#x3D;&lt;规则文件&gt;</td><td align="left">指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式</td></tr><tr><td align="left">-F   <br>–fixed-regexp</td><td align="left">将样式视为固定字符串的列表</td></tr><tr><td align="left">-G   <br>–basic-regexp</td><td align="left">样式视为普通的表示法来使用</td></tr><tr><td align="left">-h   <br>–no-filename</td><td align="left">在显示符合样式的那一行之前，不标示该行所属的文件名称</td></tr><tr><td align="left">-H   <br>–with-filename</td><td align="left">在显示符合样式的那一行之前，表示该行所属的文件名称</td></tr><tr><td align="left">-i    <br>–ignore-case</td><td align="left">忽略字符的大小写</td></tr><tr><td align="left">-l    <br>–file-with-matches</td><td align="left">只列出匹配的文件名</td></tr><tr><td align="left">-L   <br>–files-without-match</td><td align="left">列出不匹配的文件名</td></tr><tr><td align="left">-n   <br>–line-number</td><td align="left">显示行号</td></tr><tr><td align="left">-q   <br>–quiet或–silent</td><td align="left">不显示任何信息</td></tr><tr><td align="left">-r   <br>–recursive</td><td align="left">递归查询， 此参数的效果和指定“-d recurse”参数相同</td></tr><tr><td align="left">-s   <br>–no-messages</td><td align="left">不显示错误信息</td></tr><tr><td align="left">-v   <br>–revert-match</td><td align="left">显示不包含匹配文本的所有行</td></tr><tr><td align="left">-V   <br>–version</td><td align="left">显示版本信息</td></tr><tr><td align="left">-w   <br>–word-regexp</td><td align="left">只显示全字符合的列</td></tr><tr><td align="left">-x    <br>–line-regexp</td><td align="left">只显示全列符合的列</td></tr><tr><td align="left">-y</td><td align="left">此参数的效果和指定“-i”参数相同</td></tr></tbody></table><h3 id="规则表达式"><a href="#规则表达式" class="headerlink" title="规则表达式"></a>规则表达式</h3><p><strong>grep的规则表达式</strong><br>　　<code>^</code>  #锚定行的开始 如：<code>&#39;^grep&#39;</code>匹配所有以grep开头的行。<br>　　<code>$</code>  #锚定行的结束 如：<code>&#39;grep$&#39;</code>匹配所有以grep结尾的行。<br>　　<code>.</code>  #匹配一个非换行符的字符 如：<code>&#39;gr.p&#39;</code>匹配gr后接一个任意字符，然后是p。<br>　　<code>*</code>  #匹配零个或多个先前字符 如：<code>&#39;*grep&#39;</code>匹配所有一个或多个空格后紧跟grep的行。<br>　　<code>.*</code>   #一起用代表任意字符。<br>　　<code>[]</code>   #匹配一个指定范围内的字符，如<code>&#39;[Gg]rep&#39;</code>匹配Grep和grep。<br>　　<code>[^]</code>  #匹配一个不在指定范围内的字符，如：<code>&#39;[^A-FH-Z]rep&#39;</code>匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。<br>　　<code>\(..\)</code>  #标记匹配字符，如<code>&#39;\(love\)&#39;</code>，love被标记为1。<br>　　<code>\&lt;</code>      #锚定单词的开始，如:<code>&#39;\&lt;grep&#39;</code>匹配包含以grep开头的单词的行。<br>　　<code>\&gt;</code>      #锚定单词的结束，如<code>&#39;grep\&gt;&#39;</code>匹配包含以grep结尾的单词的行。<br>　　<code>x\&#123;m\&#125;</code>  #重复字符x，m次，如：<code>&#39;o\&#123;5\&#125;&#39;</code>匹配包含5个o的行。<br>　　<code>x\&#123;m,\&#125;</code>  #重复字符x,至少m次，如：<code>&#39;o\&#123;5,\&#125;&#39;</code>匹配至少有5个o的行。<br>　　<code>x\&#123;m,n\&#125;</code>  #重复字符x，至少m次，不多于n次，如：<code>&#39;o\&#123;5,10\&#125;&#39;</code>匹配5–10个o的行。<br>　　<code>\w</code>    #匹配文字和数字字符，也就是[A-Za-z0-9]，如：<code>&#39;G\w*p&#39;</code>匹配以G后跟零个或多个文字或数字字符，然后是p。<br>　　<code>\W</code>   #<code>\w</code>的反置形式，匹配一个或多个非单词字符，如点号句号等。<br>　　<code>\b</code>   #单词锁定符，如: <code>&#39;\bgrep\b&#39;</code>只匹配grep。<br><strong>POSIX字符</strong><br>　　为了在不同国家的字符编码中保持一至，POSIX(The Portable Operating System Interface)增加了特殊的字符类，如[:alnum:]是[A-Za-z0-9]的另一个写法。要把它们放到[]号内才能成为正则表达式，如[A- Za-z0-9]或[[:alnum:]]。在linux下的grep除fgrep外，都支持POSIX的字符类。<br>　　[:alnum:]    #文字数字字符<br>　　[:alpha:]    #文字字符<br>　　[:digit:]    #数字字符<br>　　[:graph:]    #非空字符（非空格、控制字符）<br>　　[:lower:]    #小写字符<br>　　[:cntrl:]    #控制字符<br>　　[:print:]    #非空字符（包括空格）<br>　　[:punct:]    #标点符号<br>　　[:space:]    #所有空白字符（新行，空格，制表符）<br>　　[:upper:]    #大写字符<br>　　[:xdigit:]   #十六进制数字（0-9，a-f，A-F）</p><h3 id="使用实例-31"><a href="#使用实例-31" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查找指定进程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> hexofaker    <span class="token number">13401</span> <span class="token number">19030</span>  <span class="token number">0</span> 09:51 pts/2    00:00:15 hexofaker    <span class="token number">15465</span> <span class="token number">15449</span>  <span class="token number">0</span> <span class="token number">10</span>:34 pts/3    00:00:00 <span class="token function">grep</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>第一条记录是查找出的进程；第二条结果是grep进程本身，并非真正要找的进程。</p></blockquote><p><strong><code>例二</code>：查找指定进程数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> hexo <span class="token parameter variable">-c</span>$ <span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-c</span> hexo<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例三</code>：从2.txt中读取关键词在1.txt中进行搜索</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -n显示行号</span>$ <span class="token function">cat</span> <span class="token number">1</span>.txt <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-nf</span> <span class="token number">2</span>.txt<span class="token number">1</span>:If you please draw me a sheep<span class="token operator">!</span><span class="token number">2</span>:What<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例四</code>：从文件中查找关键词</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token string">'jump'</span> <span class="token number">1</span>.txtI jumped to my feet,completely thunderstruck.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例五</code>：从多个文件中查找关键词</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token string">'jump'</span> <span class="token number">1</span>.txt <span class="token number">2</span>.txt<span class="token number">1</span>.txt:I jumped to my feet,completely thunderstruck.<span class="token number">2</span>.txt:I jump<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>多文件时，输出查询到的信息内容行时，会把文件的命名在行最前面输出并且加上”:”作为标示符</p></blockquote><p><strong><code>例六</code>：grep不显示本身进程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> <span class="token punctuation">\</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>sh$ <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">ssh</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"grep"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例七</code>：找出以u开头的行内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token number">1</span>.txt <span class="token operator">|</span><span class="token function">grep</span> ^uIf you please draw me a sheep<span class="token operator">!</span>I jumped to my feet,completely thunderstruck.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例八</code>：输出非u开头的行内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token number">1</span>.txt <span class="token operator">|</span> <span class="token function">grep</span> ^<span class="token punctuation">[</span>^I<span class="token punctuation">]</span>What<span class="token operator">!</span>Draw me a sheep<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例九</code>：输出以!结尾的行内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token number">1</span>.txt <span class="token operator">|</span><span class="token function">grep</span> <span class="token punctuation">\</span><span class="token operator">!</span>$If you please draw me a sheep<span class="token operator">!</span>What<span class="token operator">!</span>Draw me a sheep<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例十</code>：显示包含sh或者at字符的内容行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token number">1</span>.txt <span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">"sh|at"</span>If you please draw me a sheep<span class="token operator">!</span>What<span class="token operator">!</span>Draw me a sheep<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例十一</code>：显示当前目录下面以.txt 结尾的文件中的所有包含每个字符串至少有7个连续小写字符的字符串的行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">grep</span> <span class="token string">'[a-z]\&#123;7\&#125;'</span> *.txt<span class="token number">1</span>.txt:I jumped to my feet,completely thunderstruck.<span class="token number">3</span>.txt:kdfkksjdf112123<span class="token number">4</span>.txt:kisdfsf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（51）-wc’-103-md-“-103-md”"><a href="#‘每天一个linux命令（51）-wc’-103-md-“-103-md”" class="headerlink" title="‘每天一个linux命令（51）: wc’(#103.md “#103.md”)"></a>‘每天一个linux命令（51）: wc’(#103.md “#103.md”)</h3><p>　　Linux系统中的wc(Word Count)命令的功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。</p><!-- more --><h3 id="命令格式-41"><a href="#命令格式-41" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wc</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span>文件<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-41"><a href="#命令功能-41" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　统计指定文件中的字节数、字数、行数，并将统计结果显示输出。该命令统计指定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所指定文件的总统计数。</p><h3 id="命令参数-37"><a href="#命令参数-37" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-c</td><td align="left">统计字节数</td></tr><tr><td align="left">-l</td><td align="left">统计行数</td></tr><tr><td align="left">-m</td><td align="left">统计字符数。这个标志不能与 -c 标志一起使用</td></tr><tr><td align="left">-w</td><td align="left">统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串</td></tr><tr><td align="left">-L</td><td align="left">打印最长行的长度</td></tr><tr><td align="left">-help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本信息</td></tr></tbody></table><h3 id="使用实例-32"><a href="#使用实例-32" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：查看文件的字节数、字数、行数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wc</span> <span class="token number">1</span>.txt <span class="token number">5</span>    <span class="token number">19</span>   <span class="token number">105</span>   <span class="token number">1</span>.txt 行数 单词数 字节数 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例二</code>：用wc命令怎么做到只打印统计数字不打印文件名</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">wc</span> <span class="token parameter variable">-l</span> <span class="token number">1</span>.txt<span class="token number">5</span> <span class="token number">1</span>.txt <span class="token comment"># 5行</span>$ <span class="token function">cat</span> <span class="token number">1</span>.txt <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token number">5</span> <span class="token comment"># 值输出数字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例三</code>：用来统计当前目录下的文件和文件夹总数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 数量中包含当前目录</span>$ <span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token number">10</span> <span class="token comment"># 7个文件 + 2个文件夹 + 1个当前目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（52）-ps’-104-md-“-104-md”"><a href="#‘每天一个linux命令（52）-ps’-104-md-“-104-md”" class="headerlink" title="‘每天一个linux命令（52）: ps’(#104.md “#104.md”)"></a>‘每天一个linux命令（52）: ps’(#104.md “#104.md”)</h3><p>　　Linux中的ps命令是Process Status的缩写。ps命令用来列出系统中当前运行的那些进程。ps命令列出的是当前那些进程的快照，就是执行ps命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用top命令。</p><!--more --><p>　　要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，而 ps 命令就是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。</p><!--more --><p>　　ps 为我们提供了进程的一次性的查看，它所提供的查看结果并不动态连续的；如果想对进程时间监控，应该用 top 工具。</p><p>　　kill 命令用于杀死进程。<br><strong>linux上进程有5种状态:</strong></p><ol><li>运行(正在运行或在运行队列中等待)</li><li>中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号)</li><li>不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生)</li><li>僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放)</li><li>停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行)</li></ol><p><strong>ps工具标识进程的5种状态码:</strong><br>D 不可中断 uninterruptible sleep (usually IO)<br>R 运行 runnable (on run queue)<br>S 中断 sleeping<br>T 停止 traced or stopped<br>Z 僵死 a defunct (”zombie”) process</p><h3 id="命令格式-42"><a href="#命令格式-42" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> <span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-42"><a href="#命令功能-42" class="headerlink" title="命令功能"></a>命令功能</h3><p>用来现实当前进程的状态</p><h3 id="命令参数-38"><a href="#命令参数-38" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">a</td><td align="left">显示所有进程</td></tr><tr><td align="left">-a</td><td align="left">显示同一终端下的所有程序</td></tr><tr><td align="left">-A</td><td align="left">显示所有进程</td></tr><tr><td align="left">c</td><td align="left">显示进程的真实名称</td></tr><tr><td align="left">-N</td><td align="left">反向选择</td></tr><tr><td align="left">-e</td><td align="left">等于“-A”</td></tr><tr><td align="left">e</td><td align="left">显示环境变量</td></tr><tr><td align="left">f</td><td align="left">显示程序间的关系</td></tr><tr><td align="left">-H</td><td align="left">显示树状结构</td></tr><tr><td align="left">r</td><td align="left">显示当前终端的进程</td></tr><tr><td align="left">T</td><td align="left">显示当前终端的所有程序</td></tr><tr><td align="left">u</td><td align="left">指定用户的所有进程</td></tr><tr><td align="left">-au</td><td align="left">显示较详细的资讯</td></tr><tr><td align="left">-aux</td><td align="left">显示所有包含其他使用者的行程</td></tr><tr><td align="left">-C&lt;命令&gt;</td><td align="left">列出指定命令的状况</td></tr><tr><td align="left">–lines&lt;行数&gt;</td><td align="left">每页显示的行数</td></tr><tr><td align="left">–width&lt;字符数&gt;</td><td align="left">每页显示的字符数</td></tr><tr><td align="left">–help</td><td align="left">显示帮助信息</td></tr><tr><td align="left">–version</td><td align="left">显示版本显示</td></tr></tbody></table><h3 id="使用实例-33"><a href="#使用实例-33" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：显示所有进程信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> <span class="token parameter variable">-A</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：显示指定用户的进程信息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> <span class="token parameter variable">-u</span> faker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：显示所有进程信息，连同命令行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> <span class="token parameter variable">-ef</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：ps 与grep 常用组合用法，查找特定进程</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">ssh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：将目前属于您自己这次登入的 PID 与相关信息列示出来</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>各相关信息的意义：<br>　　F 代表这个程序的旗标 (flag)， 4 代表使用者为 super user<br>　　S 代表这个程序的状态 (STAT)，关于各 STAT 的意义将在内文介绍<br>　　UID 程序被该 UID 所拥有<br>　　PID 就是这个程序的 ID ！<br>　　PPID 则是其上级父程序的ID<br>　　C CPU 使用的资源百分比<br>　　PRI 这个是 Priority (优先执行序) 的缩写，详细后面介绍<br>　　NI 这个是 Nice 值，在下一小节我们会持续介绍<br>　　ADDR 这个是 kernel function，指出该程序在内存的那个部分。如果是个 running的程序，一般就是 “-“<br>　　SZ 使用掉的内存大小<br>　　WCHAN 目前这个程序是否正在运作当中，若为 - 表示正在运作<br>　　TTY 登入者的终端机位置<br>　　TIME 使用掉的 CPU 时间。<br>　　CMD 所下达的指令为何<br>　　在预设的情况下， ps 仅会列出与目前所在的 bash shell 有关的 PID 而已，所以， 当我使用 ps -l 的时候，只有三个 PID。</p></blockquote><p><strong><code>例六</code>：列出目前所有的正在内存当中的程序</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> aux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>　　USER：该 process 属于那个使用者账号的<br>　　PID ：该 process 的号码<br>　　%CPU：该 process 使用掉的 CPU 资源百分比<br>　　%MEM：该 process 所占用的物理内存百分比<br>　　VSZ ：该 process 使用掉的虚拟内存量 (Kbytes)<br>　　RSS ：该 process 占用的固定的内存量 (Kbytes)<br>　　TTY ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts&#x2F;0 等等的，则表示为由网络连接进主机的程序。<br>　　STAT：该程序目前的状态，主要的状态有<br>　　R ：该程序目前正在运作，或者是可被运作<br>　　S ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。<br>　　T ：该程序目前正在侦测或者是停止了<br>　　Z ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态<br>　　START：该 process 被触发启动的时间<br>　　TIME ：该 process 实际使用 CPU 运作的时间<br>　　COMMAND：该程序的实际指令</p></blockquote><p><strong><code>例七</code>：列出类似程序树的程序显示</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> <span class="token parameter variable">-axjf</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例八</code>：找出与 cron 与 syslog 这两个服务有关的 PID 号码</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token string">'(cron|syslog)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>其他</code></strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可以用 | 管道和 more 连接起来分页查看</span>$ <span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span><span class="token function">more</span><span class="token comment"># 把所有进程显示出来，并输出到ps001.txt文件</span>$ <span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">></span> ps001.txt<span class="token comment"># 输出指定的字段</span>$ <span class="token function">ps</span> <span class="token parameter variable">-o</span> pid,ppid,pgrp,session,tpgid,comm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（53）-watch’-105-md-“-105-md”"><a href="#‘每天一个linux命令（53）-watch’-105-md-“-105-md”" class="headerlink" title="‘每天一个linux命令（53）: watch’(#105.md “#105.md”)"></a>‘每天一个linux命令（53）: watch’(#105.md “#105.md”)</h3><p>　　watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果。你可以拿他来监测你想要的一切命令的结果变化，比如 tail 一个 log 文件，ls 监测某个文件的大小变化，看你的想象力了！</p><!--more --><h3 id="命令格式-43"><a href="#命令格式-43" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ watch<span class="token punctuation">[</span>参数<span class="token punctuation">]</span><span class="token punctuation">[</span>命令<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-43"><a href="#命令功能-43" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令&#x2F;定时执行命令</p><h3 id="命令参数-39"><a href="#命令参数-39" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-n或–interval</td><td align="left">watch缺省每2秒运行一下程序，可以用-n或-interval来指定间隔的时间</td></tr><tr><td align="left">-d或–differences</td><td align="left">watch 会高亮显示变化的区域</td></tr><tr><td align="left">-d&#x3D;cumulative</td><td align="left">会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来</td></tr><tr><td align="left">-t 或-no-title</td><td align="left">会关闭watch命令在顶部的时间间隔,命令，当前时间的输出</td></tr><tr><td align="left">-h, –help</td><td align="left">查看帮助文档</td></tr></tbody></table><h3 id="使用实例-34"><a href="#使用实例-34" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：每隔一秒高亮显示网络链接数的变化情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token parameter variable">-d</span> <span class="token function">netstat</span> <span class="token parameter variable">-ant</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>其它操作：<br>切换终端： Ctrl+x<br>退出watch：Ctrl+g (deepin系统没效果，只能使用Ctrl+c退出了)</p></blockquote><p><strong><code>例二</code>：每隔一秒高亮显示http链接数的变化情况</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加''将命令区域归整。</span>$ <span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token parameter variable">-d</span> <span class="token string">'pstree|grep http'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：实时查看模拟攻击客户机建立起来的连接数</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">watch</span> <span class="token string">'netstat -an | grep:21 | \ grep&lt;模拟攻击客户机的IP>| wc -l'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：监测当前目录中 scf’ 的文件的变化</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">watch</span> <span class="token parameter variable">-d</span> <span class="token string">'ls -l|grep scf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：10秒一次输出系统的平均负载</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">watch</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> <span class="token string">'cat /proc/loadavg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（54）-at’-106-md-“-106-md”"><a href="#‘每天一个linux命令（54）-at’-106-md-“-106-md”" class="headerlink" title="‘每天一个linux命令（54）: at’(#106.md “#106.md”)"></a>‘每天一个linux命令（54）: at’(#106.md “#106.md”)</h3><p>　　在windows系统中，windows提供了计划任务这一功能，在控制面板 -&gt; 性能与维护 -&gt; 任务计划， 它的功能就是安排自动运行的任务。 通过’添加任务计划’的一步步引导，则可建立一个定时执行的任务。</p><!--more --><p>　　在linux系统中你可能已经发现了为什么系统常常会自动的进行一些任务？这些任务到底是谁在支配他们工作的？在linux系统如果你想要让自己设计的备份程序可以自动在某个时间点开始在系统底下运行，而不需要手动来启动它，又该如何处置呢？ 这些例行的工作可能又分为一次性定时工作与循环定时工作，在系统内又是哪些服务在负责？ 还有，如果你想要每年在老婆的生日前一天就发出一封信件提醒自己不要忘记，linux系统下该怎么做呢？</p><p>　　今天我们主要学习一下一次性定时计划任务的at命令的用法！</p><h3 id="命令格式-44"><a href="#命令格式-44" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ at <span class="token punctuation">[</span>参数<span class="token punctuation">]</span> <span class="token punctuation">[</span>时间<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-44"><a href="#命令功能-44" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　在一个指定的时间执行一个指定任务，只能执行一次，且需要开启atd进程（ps -ef | grep atd查看， 开启用&#x2F;etc&#x2F;init.d&#x2F;atd start or restart； 开机即启动则需要运行 chkconfig –level 2345 atd on）。</p><h3 id="命令参数-40"><a href="#命令参数-40" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-m</td><td align="left">当指定的任务被完成之后，将给用户发送邮件，即使没有标准输出</td></tr><tr><td align="left">-I</td><td align="left">atq的别名</td></tr><tr><td align="left">-d</td><td align="left">atrm的别名</td></tr><tr><td align="left">-v</td><td align="left">显示任务将被执行的时间</td></tr><tr><td align="left">-c</td><td align="left">打印任务的内容到标准输出</td></tr><tr><td align="left">-V</td><td align="left">显示版本信息</td></tr><tr><td align="left">-q&lt;列队&gt;</td><td align="left">使用指定的列队</td></tr><tr><td align="left">-f&lt;文件&gt;</td><td align="left">从指定文件读入任务而不是从标准输入读入</td></tr><tr><td align="left">-t&lt;时间参数&gt;</td><td align="left">以时间参数的形式提交要运行的任务<br>at允许使用一套相当复杂的指定时间的方法。他能够接受在当天的hh:mm（小时:分钟）式的时间指定。假如该时间已过去，那么就放在第二天执行。当然也能够使用midnight（深夜），noon（中午），teatime（饮茶时间，一般是下午4点）等比较模糊的 词语来指定时间。用户还能够采用12小时计时制，即在时间后面加上AM（上午）或PM（下午）来说明是上午还是下午。 也能够指定命令执行的具体日期，指定格式为month day（月 日）或mm&#x2F;dd&#x2F;yy（月&#x2F;日&#x2F;年）或dd.mm.yy（日.月.年）。指定的日期必须跟在指定时间的后面。 上面介绍的都是绝对计时法，其实还能够使用相对计时法，这对于安排不久就要执行的命令是很有好处的。指定格式为：now + count time-units ，now就是当前时间，time-units是时间单位，这里能够是minutes（分钟）、hours（小时）、days（天）、weeks（星期）。count是时间的数量，究竟是几天，还是几小时，等等。 更有一种计时方法就是直接使用today（今天）、tomorrow（明天）来指定完成命令的时间。</td></tr><tr><td align="left">TIME</td><td align="left">时间格式，这里可以定义出什么时候要进行 at 这项任务的时间</td></tr><tr><td align="left">TIME的格式：</td><td align="left"></td></tr><tr><td align="left">HH:MM</td><td align="left"></td></tr><tr><td align="left">ex&gt; 04:00</td><td align="left"></td></tr><tr><td align="left">在今日的 HH:MM 时刻进行，若该时刻已超过，则明天的 HH:MM 进行此任务。</td><td align="left"></td></tr></tbody></table><p>HH:MM YYYY-MM-DD<br>ex&gt; 04:00 2009-03-17<br>强制规定在某年某月的某一天的特殊时刻进行该项任务</p><p>HH:MM[am|pm] [Month] [Date]<br>ex&gt; 04pm March 17<br>也是一样，强制在某年某月某日的某时刻进行该项任务</p><p>HH:MM[am|pm] + number [minutes|hours|days|weeks]<br>ex&gt; now + 5 minutes<br>ex&gt; 04pm + 3 days<br>就是说，在某个时间点再加几个时间后才进行该项任务。</p><h3 id="使用实例-35"><a href="#使用实例-35" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：三天后的下午 5 点锺执行 &#x2F;bin&#x2F;ls</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ at 5pm+3 daysat<span class="token operator">></span> /bin/lsat<span class="token operator">></span> <span class="token operator">&lt;</span>EOT<span class="token operator">></span> <span class="token comment"># 按一下Ctrl+d就会出现&lt;EOT>结束符</span>job <span class="token number">2</span> at Thu Feb  <span class="token number">2</span> <span class="token number">17</span>:00:00 <span class="token number">2017</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>例二</code>：明天17点钟，输出时间到指定文件内</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ at <span class="token number">17</span>:20 tomorrowat<span class="token operator">></span> <span class="token function">date</span> <span class="token operator">></span>/root/2013.log   at<span class="token operator">></span> <span class="token operator">&lt;</span>EOT<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong><code>例三</code>：计划任务设定后，在没有执行之前我们可以用atq命令来查看系统没有执行工作任务</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ atq<span class="token number">2</span>Thu Feb  <span class="token number">2</span> <span class="token number">17</span>:00:00 <span class="token number">2017</span> a faker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例四</code>：删除已经设置的任务</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 2 为atq查出来的最前面的任务id</span>$ atrm <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例五</code>：显示已经设置的任务内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ at <span class="token parameter variable">-c</span> <span class="token number">2</span><span class="token comment">#!/bin/sh</span><span class="token comment"># atrun uid=1000 gid=1000</span><span class="token comment"># mail faker 0</span><span class="token builtin class-name">umask</span> <span class="token number">22</span>此处省略n个字符/bin/ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="atd-的启动与-at-运行的方式"><a href="#atd-的启动与-at-运行的方式" class="headerlink" title="atd 的启动与 at 运行的方式"></a>atd 的启动与 at 运行的方式</h3><h4 id="atd-的启动"><a href="#atd-的启动" class="headerlink" title="atd 的启动"></a>atd 的启动</h4><p>　　要使用一次性计划任务时，我们的 Linux 系统上面必须要有负责这个计划任务的服务，那就是 atd 服务。 不过并非所有的 Linux distributions 都默认会把他打开的，所以，某些时刻我们需要手动将atd 服务激活才行。 激活的方法很简单，就是这样：<br><strong>命令：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ /etc/init.d/atd start$ /etc/init.d/atd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>配置一下启动时就启动这个服务，免得每次重新启动都得再来一次</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chkconfig</span> atd on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="at-的运行方式"><a href="#at-的运行方式" class="headerlink" title="at 的运行方式"></a>at 的运行方式</h4><p>　　既然是计划任务，那么应该会有任务执行的方式，并且将这些任务排进行程表中。那么产生计划任务的方式是怎么进行的? 事实上，我们使用 at 这个命令来产生所要运行的计划任务，并将这个计划任务以文字档的方式写入 &#x2F;var&#x2F;spool&#x2F;at&#x2F; 目录内，该工作便能等待 atd 这个服务的取用与运行了。就这么简单。</p><p>　　不过，并不是所有的人都可以进行 at 计划任务。为什么? 因为系统安全的原因。很多主机被所谓的攻击破解后，最常发现的就是他们的系统当中多了很多的黑客程序， 这些程序非常可能运用一些计划任务来运行或搜集你的系统运行信息,并定时的发送给黑客。 所以，除非是你认可的帐号，否则先不要让他们使用 at 命令。那怎么达到使用 at 的可控呢?</p><p>　　我们可以利用 &#x2F;etc&#x2F;at.allow 与 &#x2F;etc&#x2F;at.deny 这两个文件来进行 at 的使用限制。加上这两个文件后， at 的工作情况是这样的：</p><p>　　先找寻 &#x2F;etc&#x2F;at.allow 这个文件，写在这个文件中的使用者才能使用 at ，没有在这个文件中的使用者则不能使用 at (即使没有写在 at.deny 当中);</p><p>　　如果 &#x2F;etc&#x2F;at.allow 不存在，就寻找 &#x2F;etc&#x2F;at.deny 这个文件，若写在这个 at.deny 的使用者则不能使用 at ，而没有在这个 at.deny 文件中的使用者，就可以使用 at 命令了。</p><p>　　如果两个文件都不存在，那么只有 root 可以使用 at 这个命令。</p><p>　　透过这个说明，我们知道 &#x2F;etc&#x2F;at.allow 是管理较为严格的方式，而 &#x2F;etc&#x2F;at.deny 则较为松散 (因为帐号没有在该文件中，就能够运行 at 了)。在一般的 distributions 当中，由于假设系统上的所有用户都是可信任的， 因此系统通常会保留一个空的 &#x2F;etc&#x2F;at.deny 文件，意思是允许所有人使用 at 命令的意思 (您可以自行检查一下该文件)。 不过，万一你不希望有某些使用者使用 at 的话，将那个使用者的帐号写入 &#x2F;etc&#x2F;at.deny 即可！ 一个帐号写一行。</p><p>﻿</p><h3 id="‘每天一个linux命令（55）-crontab’-107-md-“-107-md”"><a href="#‘每天一个linux命令（55）-crontab’-107-md-“-107-md”" class="headerlink" title="‘每天一个linux命令（55）: crontab’(#107.md “#107.md”)"></a>‘每天一个linux命令（55）: crontab’(#107.md “#107.md”)</h3><p>　　前一天学习了 at 命令是针对仅运行一次的任务，循环运行的例行性计划任务，linux系统则是由 cron (crond) 这个系统服务来控制的。Linux 系统上面原本就有非常多的计划性工作，因此这个系统服务是默认启动的。另外, 由于使用者自己也可以设置计划任务，所以， Linux 系统也提供了使用者控制计划任务的命令 :crontab 命令。</p><!--more --><h3 id="crond简介"><a href="#crond简介" class="headerlink" title="crond简介"></a>crond简介</h3><p>　　crond是linux下用来周期性的执行某种任务或等待处理某些事件的一个守护进程，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。</p><p>　　Linux下的任务调度分为两类，系统任务调度和用户任务调度。</p><p>　　系统任务调度：系统周期性所要执行的工作，比如写缓存数据到硬盘、日志清理等。在&#x2F;etc目录下有一个crontab文件，这个就是系统任务调度的配置文件。</p><p>　　&#x2F;etc&#x2F;crontab文件包括下面几行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/crontab: system-wide crontab</span><span class="token comment"># Unlike any other crontab you don't have to run the `crontab'</span><span class="token comment"># command to install the new version when you edit this file</span><span class="token comment"># and files in /etc/cron.d. These files also have username fields,</span><span class="token comment"># that none of the other crontabs do.</span><span class="token assign-left variable"><span class="token environment constant">SHELL</span></span><span class="token operator">=</span>/bin/sh<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin<span class="token comment"># m h dom mon dow usercommand</span><span class="token number">17</span> ** * *root    <span class="token builtin class-name">cd</span> / <span class="token operator">&amp;&amp;</span> run-parts <span class="token parameter variable">--report</span> /etc/cron.hourly<span class="token number">25</span> <span class="token number">6</span>* * *root<span class="token builtin class-name">test</span> <span class="token parameter variable">-x</span> /usr/sbin/anacron <span class="token operator">||</span> <span class="token punctuation">(</span> <span class="token builtin class-name">cd</span> / <span class="token operator">&amp;&amp;</span> run-parts <span class="token parameter variable">--report</span> /etc/cron.daily <span class="token punctuation">)</span><span class="token number">47</span> <span class="token number">6</span>* * <span class="token number">7</span>root<span class="token builtin class-name">test</span> <span class="token parameter variable">-x</span> /usr/sbin/anacron <span class="token operator">||</span> <span class="token punctuation">(</span> <span class="token builtin class-name">cd</span> / <span class="token operator">&amp;&amp;</span> run-parts <span class="token parameter variable">--report</span> /etc/cron.weekly <span class="token punctuation">)</span><span class="token number">52</span> <span class="token number">6</span><span class="token number">1</span> * *root<span class="token builtin class-name">test</span> <span class="token parameter variable">-x</span> /usr/sbin/anacron <span class="token operator">||</span> <span class="token punctuation">(</span> <span class="token builtin class-name">cd</span> / <span class="token operator">&amp;&amp;</span> run-parts <span class="token parameter variable">--report</span> /etc/cron.monthly <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash，第二行PATH变量指定了系统执行命令的路径，第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户，第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。第六至九行表示的含义将在下个小节详细讲述。这里不在多说。</p><p>　　用户任务调度：用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 &#x2F;var&#x2F;spool&#x2F;cron目录中。其文件名与用户名一致。</p><h3 id="使用者权限文件"><a href="#使用者权限文件" class="headerlink" title="使用者权限文件"></a>使用者权限文件</h3><p>文件：&#x2F;etc&#x2F;cron.deny<br>说明：该文件中所列用户不允许使用crontab命令</p><p>文件：&#x2F;etc&#x2F;cron.allow<br>说明：该文件中所列用户允许使用crontab命令</p><p>文件：&#x2F;var&#x2F;spool&#x2F;cron&#x2F;<br>说明：所有用户crontab文件存放的目录,以用户名命名</p><h3 id="crontab文件的含义"><a href="#crontab文件的含义" class="headerlink" title="crontab文件的含义"></a>crontab文件的含义</h3><p>　　用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：<br>minute   hour   day   month   week   command<br>其中：<br>　　minute： 表示分钟，可以是从0到59之间的任何整数。<br>　　hour：表示小时，可以是从0到23之间的任何整数。<br>　　day：表示日期，可以是从1到31之间的任何整数。<br>　　month：表示月份，可以是从1到12之间的任何整数。<br>　　week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日。<br>　　command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</p><p><strong>在以上各个字段中，还可以使用以下特殊字符：</strong><br><code>星号（*）</code>：代表所有可能的值，例如month字段如果是星号，则表示在满足其它字段的制约条件后每月都执行该命令操作。<br><code>逗号（,）</code>：可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”<br><code>中杠（-）</code>：可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”<br><code>正斜线（/）</code>：可以用正斜线指定时间的间隔频率，例如“0-23&#x2F;2”表示每两小时执行一次。同时正斜线可以和星号一起使用，例如*&#x2F;10，如果用在minute字段，表示每十分钟执行一次。</p><h3 id="crond服务"><a href="#crond服务" class="headerlink" title="crond服务"></a>crond服务</h3><p>安装crontab：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ yum <span class="token function">install</span> crontabs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>服务操作说明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ /sbin/service crond start //启动服务$ /sbin/service crond stop //关闭服务$ /sbin/service crond restart //重启服务$ /sbin/service crond reload //重新载入配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看crontab服务状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> crond status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>手动启动crontab服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">service</span> crond start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看crontab服务是否已设置为开机启动，执行命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ntsysv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加入开机自动启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chkconfig</span> –level <span class="token number">35</span> crond on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="contab-命令详解"><a href="#contab-命令详解" class="headerlink" title="contab 命令详解"></a>contab 命令详解</h2><h3 id="命令格式-45"><a href="#命令格式-45" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">crontab</span> <span class="token punctuation">[</span>-u user<span class="token punctuation">]</span> <span class="token function">file</span>$ <span class="token function">crontab</span> <span class="token punctuation">[</span>-u user<span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token parameter variable">-e</span> <span class="token operator">|</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token parameter variable">-r</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="命令功能-45"><a href="#命令功能-45" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　通过crontab 命令，我们可以在固定的间隔时间执行指定的系统指令或 shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。这个命令非常设合周期性的日志分析或数据备份等工作。</p><h3 id="命令参数-41"><a href="#命令参数-41" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-u user</td><td align="left">用来设定某个用户的crontab服务，例如，“-u ixdba”表示设定ixdba用户的crontab服务，此参数一般有root用户来运行</td></tr><tr><td align="left">file</td><td align="left">file是命令文件的名字,表示将file做为crontab的任务列表文件并载入crontab。如果在命令行中没有指定这个文件，crontab命令将接受标准输入（键盘）上键入的命令，并将它们载入crontab。</td></tr><tr><td align="left">-e</td><td align="left">编辑某个用户的crontab文件内容。如果不指定用户，则表示编辑当前用户的crontab文件</td></tr><tr><td align="left">-l</td><td align="left">显示某个用户的crontab文件内容，如果不指定用户，则表示显示当前用户的crontab文件内容</td></tr><tr><td align="left">-r</td><td align="left">从&#x2F;var&#x2F;spool&#x2F;cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件</td></tr><tr><td align="left">-i</td><td align="left">在删除用户的crontab文件时给确认提示</td></tr></tbody></table><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p><strong><code>例一</code>：创建一个新的crontab文件</strong><br>在考虑向cron进程提交一个crontab文件之前，首先要做的一件事情就是设置环境变量EDITOR。cron进程根据它来确定使用哪个编辑器编辑crontab文件。9 9 %的UNIX和LINUX用户都使用vi，如果你也是这样，那么你就编辑$ HOME目录下的. profile文件，在其中加入这样一行：<br>EDITOR&#x3D;vi; export EDITOR<br>然后保存并退出。不妨创建一个名为<user> cron的文件，其中<user>是用户名，例如， davecron。在该文件中加入如下的内容。<br>         # (put your own initials here)echo the date to the console every<br>         # 15minutes between 6pm and 6am<br>         0,15,30,45 18-06 * * * &#x2F;bin&#x2F;echo ‘date’ &gt; &#x2F;dev&#x2F;console<br>    保存并退出。确信前面5个域用空格分隔。<br>在上面的例子中，系统将每隔1 5分钟向控制台输出一次当前时间。如果系统崩溃或挂起，从最后所显示的时间就可以一眼看出系统是什么时间停止工作的。在有些系统中，用tty1来表示控制台，可以根据实际情况对上面的例子进行相应的修改。为了提交你刚刚创建的crontab文件，可以把这个新创建的文件作为cron命令的参数：<br>        $ crontab davecron<br>现在该文件已经提交给cron进程，它将每隔1 5分钟运行一次。<br>同时，新创建文件的一个副本已经被放在&#x2F;var&#x2F;spool&#x2F;cron目录中，文件名就是用户名(即dave)。<br><strong><code>例二</code>：列出crontab文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">crontab</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>你将会看到和上面类似的内容。可以使用这种方法在$ H O M E目录中对crontab文件做一备份：<br>        $ crontab -l &gt; $HOME&#x2F;mycron<br>这样，一旦不小心误删了crontab文件，可以用上一节所讲述的方法迅速恢复。</p></blockquote><p><strong><code>例三</code>：编辑crontab文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">crontab</span> <span class="token parameter variable">-e</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>可以像使用v i编辑其他任何文件那样修改crontab文件并退出。如果修改了某些条目或添加了新的条目，那么在保存该文件时， c r o n会对其进行必要的完整性检查。如果其中的某个域出现了超出允许范围的值，它会提示你。<br>我们在编辑crontab文件时，没准会加入新的条目。例如，加入下面的一条：<br>       # DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month<br>        30 3 1,7,14,21,26 * * &#x2F;bin&#x2F;find -name “core’ -exec rm {} ;<br>现在保存并退出。最好在crontab文件的每一个条目之上加入一条注释，这样就可以知道它的功能、运行时间，更为重要的是，知道这是哪位用户的作业。<br>现在让我们使用前面讲过的crontab -l命令列出它的全部信息：<br>       $ crontab -l<br>       # (crondave installed on Tue May 4 13:07:43 1999)<br>       # DT:ech the date to the console every 30 minites<br>      0,15,30,45 18-06 * * * &#x2F;bin&#x2F;echo <code>date</code> &gt; &#x2F;dev&#x2F;tty1<br>       # DT:delete core files,at 3.30am on 1,7,14,21,26,26 days of each month<br>       30 3 1,7,14,21,26 * * &#x2F;bin&#x2F;find -name “core’ -exec rm {} ;</p></blockquote><p><strong><code>例四</code>：删除crontab文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">crontab</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：恢复丢失的crontab文件</strong><br>如果不小心误删了crontab文件，假设你在自己的$ H O M E目录下还有一个备份，那么可以将其拷贝到&#x2F;var&#x2F;spool&#x2F;cron&#x2F;<username>，其中<username>是用户名。如果由于权限问题无法完成拷贝，可以用：<br>        $ crontab <filename><br>    其中，<filename>是你在$ H O M E目录中副本的文件名。<br>我建议你在自己的$ H O M E目录中保存一个该文件的副本。我就有过类似的经历，有数次误删了crontab文件（因为r键紧挨在e键的右边）。这就是为什么有些系统文档建议不要直接编辑crontab文件，而是编辑该文件的一个副本，然后重新提交新的文件。<br>有些crontab的变体有些怪异，所以在使用crontab命令时要格外小心。如果遗漏了任何选项，crontab可能会打开一个空文件，或者看起来像是个空文件。这时敲delete键退出，不要按<Ctrl-D>，否则你将丢失crontab文件。</p><h3 id="使用实例-36"><a href="#使用实例-36" class="headerlink" title="使用实例"></a>使用实例</h3><p><strong><code>例一</code>：每1分钟执行一次command</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* * * * * <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：每小时的第3和第15分钟执行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3,15</span> * * * * <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：在上午8点到11点的第3和第15分钟执行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3,15</span> <span class="token number">8</span>-11 * * * <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：每隔两天的上午8点到11点的第3和第15分钟执行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3,15</span> <span class="token number">8</span>-11 */2 * * <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：每个星期一的上午8点到11点的第3和第15分钟执行</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3,15</span> <span class="token number">8</span>-11 * * <span class="token number">1</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：每晚的21:30重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">30</span> <span class="token number">21</span> * * * /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例七</code>：每月1、10、22日的4 : 45重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">45</span> <span class="token number">4</span> <span class="token number">1,10</span>,22 * * /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例八</code>：每周六、周日的1 : 10重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">10</span> <span class="token number">1</span> * * <span class="token number">6,0</span> /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例九</code>：每天18 : 00至23 : 00之间每隔30分钟重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0,30</span> <span class="token number">18</span>-23 * * * /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十</code>：每星期六的晚上11 : 00 pm重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">23</span> * * <span class="token number">6</span> /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十一</code>：每一小时重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* */1 * * * /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十二</code>：晚上11点到早上7点之间，每隔一小时重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* <span class="token number">23</span>-7/1 * * * /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十三</code>：每月的4号与每周一到周三的11点重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">11</span> <span class="token number">4</span> * mon-wed /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十四</code>：一月一号的4点重启smb</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">4</span> <span class="token number">1</span> jan * /etc/init.d/smb restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例十五</code>：每小时执行&#x2F;etc&#x2F;cron.hourly目录内的脚本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">01   *   *   *   *     root run-parts /etc/cron.hourly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong><br>run-parts这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是目录名了</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="注意环境变量问题"><a href="#注意环境变量问题" class="headerlink" title="注意环境变量问题"></a>注意环境变量问题</h4><p>　　有时我们创建了一个crontab，但是这个任务却无法自动执行，而手动执行这个任务却没有问题，这种情况一般是由于在crontab文件中没有配置环境变量引起的。</p><p>　　在crontab文件中定义多个调度任务时，需要特别注意的一个问题就是环境变量的设置，因为我们手动执行某个任务时，是在当前shell环境下进行的，程序当然能找到环境变量，而系统自动执行任务调度时，是不会加载任何环境变量的，因此，就需要在crontab文件中指定任务运行所需的所有环境变量，这样，系统执行任务调度时就没有问题了。</p><p>　　不要假定cron知道所需要的特殊环境，它其实并不知道。所以你要保证在shelll脚本中提供所有必要的路径和环境变量，除了一些自动设置的全局变量。所以注意如下3点：<br>　　1）脚本中涉及文件路径时写全局路径；<br>　　2）脚本执行要用到java或其他环境变量时，通过source命令引入环境变量，如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> start_cbp.sh<span class="token comment">#!/bin/sh</span><span class="token builtin class-name">source</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable">RUN_CONF</span><span class="token operator">=</span>/home/d139/conf/platform/cbp/cbp_jboss.conf/usr/local/jboss-4.0.5/bin/run.sh <span class="token parameter variable">-c</span> mev <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> * * * * <span class="token builtin class-name">.</span> /etc/profile<span class="token punctuation">;</span>/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注意清理系统用户的邮件日志"><a href="#注意清理系统用户的邮件日志" class="headerlink" title="注意清理系统用户的邮件日志"></a>注意清理系统用户的邮件日志</h4><p>　　每条任务调度执行完毕，系统都会将任务输出信息通过电子邮件的形式发送给当前系统用户，这样日积月累，日志信息会非常大，可能会影响系统的正常运行，因此，将每条任务进行重定向处理非常重要。<br>　　例如，可以在crontab文件中设置如下形式，忽略日志输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> */3 * * * /usr/local/apache2/apachectl restart <span class="token operator">></span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>“&#x2F;dev&#x2F;null 2&gt;&amp;1”表示先将标准输出重定向到&#x2F;dev&#x2F;null，然后将标准错误重定向到标准输出，由于标准输出已经重定向到了&#x2F;dev&#x2F;null，因此标准错误也会重定向到&#x2F;dev&#x2F;null，这样日志输出问题就解决了。</p><h4 id="系统级任务调度与用户级任务调度"><a href="#系统级任务调度与用户级任务调度" class="headerlink" title="系统级任务调度与用户级任务调度"></a>系统级任务调度与用户级任务调度</h4><p>　　系统级任务调度主要完成系统的一些维护操作，用户级任务调度主要完成用户自定义的一些任务，可以将用户级任务调度放到系统级任务调度来完成（不建议这么做），但是反过来却不行，root用户的任务调度操作可以通过“crontab –uroot –e”来设置，也可以将调度任务直接写入&#x2F;etc&#x2F;crontab文件，需要注意的是，如果要定义一个定时重启系统的任务，就必须将任务放到&#x2F;etc&#x2F;crontab文件，即使在root用户下创建一个定时重启系统的任务也是无效的。</p><h4 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h4><p>　　新创建的cron job，不会马上执行，至少要过2分钟才执行。如果重启cron则马上执行。</p><p>　　当crontab突然失效时，可以尝试&#x2F;etc&#x2F;init.d&#x2F;crond restart解决问题。或者查看日志看某个job有没有执行&#x2F;报错tail -f &#x2F;var&#x2F;log&#x2F;cron。</p><p>　　千万别乱运行crontab -r。它从Crontab目录（&#x2F;var&#x2F;spool&#x2F;cron）中删除用户的Crontab文件。删除了该用户的所有crontab都没了。</p><p>　　在crontab中%是有特殊含义的，表示换行的意思。如果要用的话必须进行转义%，如经常用的date ‘+%Y%m%d’在crontab里是不会执行的，应该换成date ‘+%Y%m%d’。</p><p>﻿</p><h3 id="‘每天一个linux命令（56）-tailf’-108-md-“-108-md”"><a href="#‘每天一个linux命令（56）-tailf’-108-md-“-108-md”" class="headerlink" title="‘每天一个linux命令（56）: tailf’(#108.md “#108.md”)"></a>‘每天一个linux命令（56）: tailf’(#108.md “#108.md”)</h3><p>　　tailf 一个实时监听文件或日志的强大的命令</p><!--more --><h3 id="命令格式-46"><a href="#命令格式-46" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tailf <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令描述"><a href="#命令描述" class="headerlink" title="命令描述"></a>命令描述</h3><p>　　tailf 将会打印出一个文件的最后10行,等待并持续输出此文件的增长，它和<code>tail -f</code>相似，不同之处是当文件没有增长时，是不访问此文件的；但这会有一个副作用：不会更新文件的访问时间。当没有发生日志活动时，文件系统的冲洗（flush）不会定期发生。<br>　　tailf 对于打印日志不频繁，而又在使用笔记本电脑时是非常有用的，这样用户就能降低磁盘转速从而增加笔记本续航。</p><h3 id="命令参数-42"><a href="#命令参数-42" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-n,–lines&#x3D;N,-N</td><td align="left">输出最后N行,而不是默认的最后10行</td></tr></tbody></table><h3 id="命令实例-8"><a href="#命令实例-8" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：展示一个文件的最后5行并监听文件的新行（新增加的内容）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ tailf <span class="token parameter variable">-n</span> <span class="token number">5</span> myfile.txt$ tailf <span class="token parameter variable">-5</span> myfile.txt$ tailf <span class="token parameter variable">--lines</span><span class="token operator">=</span><span class="token number">5</span> myfile.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><code>注：</code>这是一个实时监听文件或日志的强大的命令</p></blockquote><p><strong><code>例二</code>：实时新增日志内容，并通过管道过滤出自己想要的内容</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 实时监听ip地址为24.10.160.10的访问日志</span>$ tailf access.log <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">24.10</span>.160.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（57）-sftp’-109-md-“-109-md”"><a href="#‘每天一个linux命令（57）-sftp’-109-md-“-109-md”" class="headerlink" title="‘每天一个linux命令（57）: sftp’(#109.md “#109.md”)"></a>‘每天一个linux命令（57）: sftp’(#109.md “#109.md”)</h3><p>sFTP（安全文件传输程序）是一种安全的交互式文件传输程序，其工作方式与 FTP（文件传输协议）类似。 然而，sFTP 比 FTP 更安全；它通过加密 SSH 传输处理所有操作。</p><p>它可以配置使用几个有用的 SSH 功能，如公钥认证和压缩。 它连接并登录到指定的远程机器，然后切换到交互式命令模式，在该模式下用户可以执行各种命令。</p><p>在本文中，我们将向你展示如何使用 sFTP 上传&#x2F;下载整个目录（包括其子目录和子文件）。</p><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><p>默认情况下，SFTP 协议采用和 SSH 传输协议一样的方式建立到远程服务器的安全连接。虽然，用户验证使用类似于 SSH 默认设置的密码方式，但是，建议创建和使用 SSH 无密码登录，以简化和更安全地连接到远程主机。</p><p>要连接到远程 sftp 服务器，如下建立一个安全 SSH 连接并创建 SFTP 会话：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sftp</span> root@server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>登录到远程主机后，你可以如下运行交互式的 sFTP 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sftp<span class="token operator">></span> <span class="token function">ls</span>            <span class="token comment">#列出服务器文件列表</span>sftp<span class="token operator">></span> lls           <span class="token comment">#列出本地文件列表</span>sftp<span class="token operator">></span> <span class="token builtin class-name">pwd</span>           <span class="token comment">#当前服务器上路径</span>sftp<span class="token operator">></span> lpwd          <span class="token comment">#当前本地路径</span>sftp<span class="token operator">></span> <span class="token builtin class-name">cd</span> img        <span class="token comment">#切换服务器路径</span>sftp<span class="token operator">></span> lcd img       <span class="token comment">#切换本地路径</span>sftp<span class="token operator">></span> <span class="token function">mkdir</span> img     <span class="token comment">#在服务器上创建一个目录</span>sftp<span class="token operator">></span> lmkdir img    <span class="token comment">#在本地创建一个目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sftp<span class="token operator">></span> put readme.md <span class="token comment">#上传单个文件</span>sftp<span class="token operator">></span> mput *.xls    <span class="token comment">#上传多个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sftp<span class="token operator">></span> get readme.md <span class="token comment">#下载单个文件</span>sftp<span class="token operator">></span> mget *.xls    <span class="token comment">#下载多个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="上传文件夹"><a href="#上传文件夹" class="headerlink" title="上传文件夹"></a>上传文件夹</h2><p>使用<code>put -r</code> .但是远程服务器要提前创建一个相同名称的目录; <code>-r</code> 递归复制子目录和子文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sftp<span class="token operator">></span> <span class="token function">mkdir</span> imgsftp<span class="token operator">></span> put <span class="token parameter variable">-r</span> img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要保留修改时间、访问时间以及被传输的文件的模式，可使用 <code>-p</code> 。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sftp<span class="token operator">></span> put <span class="token parameter variable">-pr</span> img<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="下载文件夹"><a href="#下载文件夹" class="headerlink" title="下载文件夹"></a>下载文件夹</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sftp<span class="token operator">></span> get <span class="token parameter variable">-r</span> img<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sftp<span class="token operator">></span> bye或sftp<span class="token operator">></span> <span class="token builtin class-name">exit</span>或ctrl + d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（58）-sort’-110-md-“-110-md”"><a href="#‘每天一个linux命令（58）-sort’-110-md-“-110-md”" class="headerlink" title="‘每天一个linux命令（58）: sort’(#110.md “#110.md”)"></a>‘每天一个linux命令（58）: sort’(#110.md “#110.md”)</h3><p>sort是在Linux里非常常用的一个命令，管排序的。</p><h2 id="1-工作原理"><a href="#1-工作原理" class="headerlink" title="1.工作原理"></a>1.工作原理</h2><p>sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cat</span> seq.txtappleallowphotobowlpealcheckcheese$ <span class="token function">sort</span> seq.txtallowapplebowlcheckcheesepealphoto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-sort的-u选项"><a href="#2-sort的-u选项" class="headerlink" title="2.sort的-u选项"></a>2.sort的-u选项</h2><p>它的作用很简单，就是在输出行中去除重复行。</p><h2 id="3-sort的-r选项"><a href="#3-sort的-r选项" class="headerlink" title="3.sort的-r选项"></a>3.sort的-r选项</h2><p>sort默认的排序方式是升序，如果想改成降序，就加个-r就搞定了。</p><h2 id="4-sort的-o选项"><a href="#4-sort的-o选项" class="headerlink" title="4.sort的-o选项"></a>4.sort的-o选项</h2><p>由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort filename &gt; newfile。</p><p>但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>rocrocket@rocrocket programming<span class="token punctuation">]</span>$ <span class="token function">sort</span> <span class="token parameter variable">-r</span> number.txt <span class="token operator">></span> number.txt<span class="token punctuation">[</span>rocrocket@rocrocket programming<span class="token punctuation">]</span>$ <span class="token function">cat</span> number.txt<span class="token punctuation">[</span>rocrocket@rocrocket programming<span class="token punctuation">]</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看，竟然将number清空了。</p><p>就在这个时候，-o选项出现了，它成功的解决了这个问题，让你放心的将结果写入原文件。这或许也是-o比重定向的唯一优势所在。</p><h2 id="5-sort的-n选项"><a href="#5-sort的-n选项" class="headerlink" title="5.sort的-n选项"></a>5.sort的-n选项</h2><p>你有没有遇到过10比2小的情况。我反正遇到过。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面喽。这也是sort的一贯作风。</p><p>我们如果想改变这种现状，就要使用-n选项，来告诉sort，“要以数值来排序”！</p><h2 id="6-sort的-t选项和-k选项"><a href="#6-sort的-t选项和-k选项" class="headerlink" title="6.sort的-t选项和-k选项"></a>6.sort的-t选项和-k选项</h2><p>如果有一个文件的内容是这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>rocrocket@rocrocket programming<span class="token punctuation">]</span>$ <span class="token function">cat</span> facebook.txtbanana:30:5.5apple:10:2.5pear:90:2.3orange:20:3.4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。</p><p>那么我想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？</p><p>幸好，sort提供了-t选项，后面可以设定间隔符。（是不是想起了cut和paste的-d选项，共鸣～～）</p><p>指定了间隔符之后，就可以用-k来指定列数了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>rocrocket@rocrocket programming<span class="token punctuation">]</span>$ <span class="token function">sort</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-k</span> <span class="token number">2</span> <span class="token parameter variable">-t</span> <span class="token builtin class-name">:</span> facebook.txtapple:10:2.5orange:20:3.4banana:30:5.5pear:90:2.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用冒号作为间隔符，并针对第二列来进行数值升序排序，结果很令人满意。</p><h2 id="7-其他的sort常用选项"><a href="#7-其他的sort常用选项" class="headerlink" title="7.其他的sort常用选项"></a>7.其他的sort常用选项</h2><p>-f会将小写字母都转换为大写字母来进行比较，亦即忽略大小写</p><p>-c会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1</p><p>-C会检查文件是否已排好序，如果乱序，不输出内容，仅返回1</p><p>-M会以月份来排序，比如JAN小于FEB等等</p><p>-b会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。</p><p>﻿</p><h3 id="‘每天一个linux命令（6）-rmdir’-111-md-“-111-md”"><a href="#‘每天一个linux命令（6）-rmdir’-111-md-“-111-md”" class="headerlink" title="‘每天一个linux命令（6）: rmdir’(#111.md “#111.md”)"></a>‘每天一个linux命令（6）: rmdir’(#111.md “#111.md”)</h3><p>　　今天学习一下linux中命令： rmdir命令。rmdir是常用的命令，该命令的功能是删除空目录，一个目录被删除之前必须是空的。（注意，rm - r dir命令可代替rmdir，但是有很大危险性。）删除某目录时也必须具有对父目录的写权限。</p><!--more --><h3 id="命令格式-47"><a href="#命令格式-47" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rmdir</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. 目录<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-46"><a href="#命令功能-46" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　该命令从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对父目录的写权限。</p><h3 id="命令参数-43"><a href="#命令参数-43" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">- p</td><td align="left">递归删除目录dirname，当子目录删除后其父目录为空时，也一同被删除。如果整个路径被删除或者由于某种原因保留部分路径，则系统在标准输出上显示相应的信息</td></tr><tr><td align="left">-v, –verbose</td><td align="left">显示指令执行过程</td></tr></tbody></table><h3 id="命令实例-9"><a href="#命令实例-9" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：rmdir 不能删除非空目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rmdir</span> docrmdir: doc: 目录非空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：rmdir -p 当子目录被删除后使它也成为空目录的话，则顺便一并删除</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">rmdir</span> <span class="token parameter variable">-p</span> log/product<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="‘每天一个linux命令（7）-mv’-112-md-“-112-md”"><a href="#‘每天一个linux命令（7）-mv’-112-md-“-112-md”" class="headerlink" title="‘每天一个linux命令（7）: mv’(#112.md “#112.md”)"></a>‘每天一个linux命令（7）: mv’(#112.md “#112.md”)</h3><p>　　mv命令是move的缩写，可以用来移动文件或者将文件改名（move (rename) files），是Linux系统下常用的命令，经常用来备份文件或者目录</p><!--more --><h3 id="命令格式-48"><a href="#命令格式-48" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span> 源文件或目录 目标文件或目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="命令功能-47"><a href="#命令功能-47" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　视mv命令中第二个参数类型的不同（是目标文件还是目标目录），mv命令将文件重命名或将其移至一个新的目录中。当第二个参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录名），它将所给的源文件或目录重命名为给定的目标文件名。当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。在跨文件系统移动文件时，mv先拷贝，再将原有文件删除，而链至该文件的链接也将丢失。</p><h3 id="命令参数-44"><a href="#命令参数-44" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-b</td><td align="left">若需覆盖文件，则覆盖前先行备份。</td></tr><tr><td align="left">-f</td><td align="left">force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</td></tr><tr><td align="left">-i</td><td align="left">若目标文件 (destination) 已经存在时，就会询问是否覆盖！</td></tr><tr><td align="left">-u</td><td align="left">若目标文件已经存在，且 source 比较新，才会更新(update)</td></tr><tr><td align="left">-t</td><td align="left">–target-directory&#x3D;DIRECTORY move all SOURCE arguments into DIRECTORY，即指定mv的目标目录，该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后。</td></tr></tbody></table><h3 id="命令实例-10"><a href="#命令实例-10" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：文件改名</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> test.txt test1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：移动文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将文件test.txt 移动到/usr/doc目录下</span>$ <span class="token function">mv</span> test.txt /usr/doc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：将文件log1.txt,log2.txt,log3.txt移动到目录&#x2F;usr&#x2F;doc中</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> log1.txt log2.txt log3.txt /usr/doc$ <span class="token function">mv</span> <span class="token parameter variable">-t</span> /usr/doc log1.txt log2.txt log3.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例四</code>：将文件file1改名为file2，如果file2已经存在，则询问是否覆盖</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> <span class="token parameter variable">-i</span> log1.txt log2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例五</code>：将文件file1改名为file2，即使file2存在，也是直接覆盖掉</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> <span class="token parameter variable">-f</span> log3.txt log2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例六</code>：目录的移动</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将doc下的product目录移动到/usr/doc目录下</span>$ <span class="token function">mv</span> doc/product /usr/doc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例七</code>：移动当前文件夹下的所有文件到上一级目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> * <span class="token punctuation">..</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例八</code>：文件被覆盖前做简单备份，前面加参数-b</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mv</span> log1.txt <span class="token parameter variable">-b</span> log2.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>-b不接受参数，mv会去读取环境变量VERSION_CONTROL来作为备份策略。<br>–backup该选项指定如果目标文件存在时的动作，共有四种备份策略：</p></blockquote><ol><li>CONTROL&#x3D;none或off : 不备份。</li><li>CONTROL&#x3D;numbered或t：数字编号的备份</li><li>CONTROL&#x3D;existing或nil：如果存在以数字编号的备份，则继续编号备份m+1…n：执行mv操作前已存在以数字编号的文件log2.txt.<del>1</del>，那么再次执行将产生log2.txt<del>2</del>，以次类推。如果之前没有以数字编号的文件，则使用下面讲到的简单备份。</li><li>CONTROL&#x3D;simple或never：使用简单备份：在被覆盖前进行了简单备份，简单备份只能有一份，再次被覆盖时，简单备份也会被覆盖。</li></ol><p>﻿</p><h3 id="‘每天一个linux命令（8）-cp’-113-md-“-113-md”"><a href="#‘每天一个linux命令（8）-cp’-113-md-“-113-md”" class="headerlink" title="‘每天一个linux命令（8）: cp’(#113.md “#113.md”)"></a>‘每天一个linux命令（8）: cp’(#113.md “#113.md”)</h3><p>　　cp命令用来复制文件或者目录，是Linux系统中最常用的命令之一。一般情况下，shell会设置一个别名，在命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，不管你是否使用-i参数。但是如果是在shell脚本中执行cp时，没有-i参数时不会询问是否覆盖。这说明命令行和shell脚本的执行方式有些不同。</p><!--more --><h3 id="命令格式-49"><a href="#命令格式-49" class="headerlink" title="命令格式"></a>命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>-T<span class="token punctuation">]</span> 源 目的$ <span class="token function">cp</span> <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token parameter variable">-t</span> 目录 源<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="命令功能-48"><a href="#命令功能-48" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><h3 id="命令参数-45"><a href="#命令参数-45" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a,–archive</td><td align="left">为每个已存在的目标文件创建备份</td></tr><tr><td align="left">-f, –force</td><td align="left">如果目标文件无法打开则将其移除并重试(当 -n 选项存在时则不需再选此项)</td></tr><tr><td align="left">-i, –interactive</td><td align="left">覆盖前询问(使前面的 -n 选项失效)</td></tr><tr><td align="left">-H</td><td align="left">跟随源文件中的命令行符号链接</td></tr><tr><td align="left">-l, –link</td><td align="left">链接文件而不复制</td></tr><tr><td align="left">-L, –dereference</td><td align="left">总是跟随符号链接</td></tr><tr><td align="left">-n, –no-clobber</td><td align="left">不要覆盖已存在的文件(使前面的 -i 选项失效)</td></tr><tr><td align="left">-P, –no-dereference</td><td align="left">不跟随源文件中的符号链接</td></tr><tr><td align="left">-p</td><td align="left">等于–preserve&#x3D;模式,所有权,时间戳</td></tr><tr><td align="left">-R, -r, –recursive</td><td align="left">复制目录及目录内的所有项目</td></tr></tbody></table><h3 id="命令实例-11"><a href="#命令实例-11" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：复制单个文件到目标目录，文件在目标文件中存在，会询问覆盖</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在没有带-a参数时，两个文件的时间是不一样的。在带了-a参数时，两个文件的时间是一致的。</span>$ <span class="token function">cp</span> <span class="token number">1</span>.txt test5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例二</code>：复制整个目录</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意目标目录存在与否结果是不一样的。目标目录存在时，整个源目录被复制到目标目录里面。</span>$ <span class="token function">cp</span> <span class="token parameter variable">-a</span> test3 test5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong><code>例三</code>：复制的 log.log 建立一个连结档 log_link.log</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">cp</span> <span class="token parameter variable">-s</span> log.log log_link.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">﻿###  &#39;每天一个linux命令（9）: touch&#39;(#114.md &quot;#114.md&quot;)　　linux的touch命令不常用，一般在使用make的时候可能会用到，用来修改文件时间戳，或者新建一个不存在的文件。&lt;!--more --&gt;### 命令格式&#96;&#96;&#96;bash$ touch [选项]... 文件...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令功能-49"><a href="#命令功能-49" class="headerlink" title="命令功能"></a>命令功能</h3><p>　　touch命令参数可更改文档或目录的日期时间，包括存取时间和更改时间。</p><h3 id="命令参数-46"><a href="#命令参数-46" class="headerlink" title="命令参数"></a>命令参数</h3><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-a</td><td align="left">或–time&#x3D;atime或–time&#x3D;access或–time&#x3D;use 只更改存取时间</td></tr><tr><td align="left">-c</td><td align="left">或–no-create 不建立任何文档</td></tr><tr><td align="left">-d</td><td align="left">使用指定的日期时间，而非现在的时间</td></tr><tr><td align="left">-f</td><td align="left">此参数将忽略不予处理，仅负责解决BSD版本touch指令的兼容性问题</td></tr><tr><td align="left">-m</td><td align="left">或–time&#x3D;mtime或–time&#x3D;modify 　只更改变动时间</td></tr><tr><td align="left">-r</td><td align="left">把指定文档或目录的日期时间，统统设成和参考文档或目录的日期时间相同</td></tr><tr><td align="left">-t</td><td align="left">使用指定的日期时间，而非现在的时间</td></tr></tbody></table><h3 id="命令实例-12"><a href="#命令实例-12" class="headerlink" title="命令实例"></a>命令实例</h3><p><strong><code>例一</code>：创建不存在的文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> <span class="token number">1</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例二</code>：更新1.txt的时间和2.txt时间戳相同</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> <span class="token parameter variable">-r</span> <span class="token number">1</span>.txt <span class="token number">2</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例三</code>：设定文件的时间戳</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> <span class="token parameter variable">-t</span> <span class="token number">201211142234.50</span> <span class="token number">1</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><code>例四</code>：创建不存在的文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">touch</span> <span class="token number">1</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>说明：</strong> <code>-t  time</code> 使用指定的时间值 time 作为指定文件相应时间戳记的新值．此处的 time规定为如下形式的十进制数:    [[CC]YY]MMDDhhmm[.SS] 这里，CC为年数中的前两位，即”世纪数”；YY为年数的后两位，即某世纪中的年数．如果不给出CC的值，则touch   将把年数CCYY限定在1969–2068之内．MM为月数，DD为天将把年数CCYY限定在1969–2068之内．MM为月数，DD为天数，hh 为小时数(几点)，mm为分钟数，SS为秒数．此处秒的设定范围是0–61，这样可以处理闰秒．这些数字组成的时间是环境变量TZ指定的时区中的一个时 间．由于系统的限制，早于1970年1月1日的时间是错误的。</p></blockquote><p>﻿</p><h3 id="每天一个linux命令-115-md-“-115-md”"><a href="#每天一个linux命令-115-md-“-115-md”" class="headerlink" title="每天一个linux命令(#115.md “#115.md”)"></a>每天一个linux命令(#115.md “#115.md”)</h3><p>开始详细的系统的学习linux命令，坚持每天一个命令。</p><!--more --><p>此系列最初参考<a href="">peida</a>的“ 每天一个linux命令”，之后根据自己的见闻逐渐添加整理。﻿</p><h3 id="linux下修改按键ESCCAPSLOCK和Control-ALT-R-116-md-“-116-md”"><a href="#linux下修改按键ESCCAPSLOCK和Control-ALT-R-116-md-“-116-md”" class="headerlink" title="linux下修改按键ESC&lt;&#x3D;&gt;CAPSLOCK和Control&#x3D;&gt;ALT_R(#116.md “#116.md”)"></a>linux下修改按键ESC&lt;&#x3D;&gt;CAPSLOCK和Control&#x3D;&gt;ALT_R(#116.md “#116.md”)</h3><p>使用 <code>vim</code> 过程中发现 <code>esc</code> 和 <code>ctrl</code> 按键很难按，小拇指没有那么长啊～～，而 <code>caps_lock</code> 和 <code>alt_r</code>(右alt) 很少用。</p><p>本教程将 <code>esc</code> 和 <code>caps_lock</code> 两个按键交换， <code>alt_r</code>(右alt) 改为 <code>ctrl</code>。</p><h2 id="一、-esc-与-caps-lock-按键交换"><a href="#一、-esc-与-caps-lock-按键交换" class="headerlink" title="一、 esc 与 caps_lock 按键交换"></a>一、 esc 与 caps_lock 按键交换</h2><p>①. 创建 <code>.xmodmaprc</code> 文件。<br>②. 加入以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">remove Lock <span class="token operator">=</span> Caps_Lock<span class="token function">add</span> Lock <span class="token operator">=</span> Escapekeysym Caps_Lock <span class="token operator">=</span> Escapekeysym Escape <span class="token operator">=</span> Caps_Lock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>③. 执行 <code>xmodmap .xmodmaprc</code> 使之生效。</p><h2 id="二、-将-右alt-改为-ctrl"><a href="#二、-将-右alt-改为-ctrl" class="headerlink" title="二、 将 右alt 改为 ctrl"></a>二、 将 右alt 改为 ctrl</h2><p>①. 查看需要修改键位的 keysym<br>通过 <code>xev | grep keycode</code> 获取右 <code>alt</code> 的 keysym 为 <code>Alt_R</code>。如下图所示：<br><img src="/" alt="通过xev获取右alt的keysym"></p><p>②. 查看 <code>Alt_R</code> 是哪个 modifier 使用的<br>通过 <code>xmodmap -pm</code> 查看，发现 <code>Alt_R</code> 是作为 modifier <code>mod1</code> 使用的。如下图所示：<br><img src="/" alt="查看 Alt_R 是作为 mode1 使用的"></p><p>③. 修改 modifier</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xmodmap <span class="token parameter variable">-e</span> <span class="token string">'remove mod1 = Alt_R'</span> <span class="token comment"># 解除原来绑定</span>xmodmap <span class="token parameter variable">-e</span> <span class="token string">'add control = Alt_R'</span> <span class="token comment"># 作为 control 使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>﻿</p><h3 id="linux无损调整分区大小-117-md-“-117-md”"><a href="#linux无损调整分区大小-117-md-“-117-md”" class="headerlink" title="linux无损调整分区大小(#117.md “#117.md”)"></a>linux无损调整分区大小(#117.md “#117.md”)</h3><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><ul><li>系统环境: Red Hat 4.8.5-11</li><li>情况：<ol><li>home：500G</li><li>root：50G</li><li>root分区不够用</li></ol></li><li>思路：把home分区的空间划一部分到root分区</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置home分区大小为200G，释放300G空间</span>$ lvreduce <span class="token parameter variable">-L</span> 200G /dev/centos/home<span class="token comment"># 将空闲空间扩展到root分区</span>$ lvextend <span class="token parameter variable">-l</span> +100%FREE /dev/centos/root<span class="token comment"># 使用XFS文件系统自带的命令集增加分区空间</span>$ xfs_growfs /dev/mapper/centos-root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="situation"><a href="#situation" class="headerlink" title="situation"></a>situation</h3><p>挂载在根目录的分区 <code>/dev/mapper/centos-root</code> 爆满，占用100%</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">df</span> <span class="token parameter variable">-h</span>Filesystem               Size  Used Avail Use% Mounted on/dev/mapper/centos-root   50G   50G   19M <span class="token number">100</span>% /devtmpfs                  32G     <span class="token number">0</span>   32G   <span class="token number">0</span>% /devtmpfs                     32G     <span class="token number">0</span>   32G   <span class="token number">0</span>% /dev/shmtmpfs                     32G  <span class="token number">2</span>.5G   29G   <span class="token number">8</span>% /runtmpfs                     32G     <span class="token number">0</span>   32G   <span class="token number">0</span>% /sys/fs/cgroup/dev/mapper/centos-home  476G   33M  476G   <span class="token number">1</span>% /home/dev/sda1                497M  238M  259M  <span class="token number">48</span>% /boottmpfs                    <span class="token number">6</span>.3G     <span class="token number">0</span>  <span class="token number">6</span>.3G   <span class="token number">0</span>% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="analyze"><a href="#analyze" class="headerlink" title="analyze"></a>analyze</h3><p>挂载在根目录的分区空间太小，只有50G，而服务器 <code>home</code> 目录为非常用目录，挂在了近500G的空间。</p><p>思路：从 <code>centos-home</code> 分区划出300G空间到 <code>centos-root</code> 分区。</p><h3 id="operation"><a href="#operation" class="headerlink" title="operation"></a>operation</h3><h4 id="1-查看各分区信息"><a href="#1-查看各分区信息" class="headerlink" title="1.查看各分区信息"></a>1.查看各分区信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ lvdisplayLV Path                /dev/centos/homeLV Name                homeVG Name                centosLV UUID                1fAt1E-bQsa-1HXR-MCE2-5VZ1-xzBz-iI1SLvLV Write Access        read/writeLV Creation host, <span class="token function">time</span> localhost, <span class="token number">2016</span>-10-26 <span class="token number">17</span>:23:47 +0800LV Status              available<span class="token comment"># open                 0</span>LV Size                <span class="token number">475.70</span> GiBCurrent LE             <span class="token number">121778</span>Segments               <span class="token number">1</span>Allocation             inheritRead ahead sectors     auto- currently <span class="token builtin class-name">set</span> to     <span class="token number">256</span>Block device           <span class="token number">253</span>:2LV Path                /dev/centos/rootLV Name                rootVG Name                centosLV UUID                lD64zY-yc3Z-SZaB-dAjK-03YM-2gM8-pfj4ooLV Write Access        read/writeLV Creation host, <span class="token function">time</span> localhost, <span class="token number">2016</span>-10-26 <span class="token number">17</span>:23:48 +0800LV Status              available<span class="token comment"># open                 1</span>LV Size                <span class="token number">50.00</span> GiBCurrent LE             <span class="token number">12800</span>Segments               <span class="token number">1</span>Allocation             inheritRead ahead sectors     auto- currently <span class="token builtin class-name">set</span> to     <span class="token number">256</span>Block device           <span class="token number">253</span>:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-减少-home分区空间"><a href="#2-减少-home分区空间" class="headerlink" title="2.减少&#x2F;home分区空间"></a>2.减少&#x2F;home分区空间</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 释放 /dev/centos/home 分区 300G 的空间</span><span class="token comment"># 命令设置 /dev/centos/home 分区 200G空间</span>$ lvreduce <span class="token parameter variable">-L</span> 200G /dev/centos/homeWARNING: Reducing active logical volume to <span class="token number">200.00</span> GiB. THIS MAY DESTROY YOUR DATA <span class="token punctuation">(</span>filesystem etc.<span class="token punctuation">)</span>Do you really want to reduce centos/home? <span class="token punctuation">[</span>y/n<span class="token punctuation">]</span>: y Size of logical volume centos/home changed from <span class="token number">475.70</span> GiB <span class="token punctuation">(</span><span class="token number">121778</span> extents<span class="token punctuation">)</span> to <span class="token number">200.00</span> GiB <span class="token punctuation">(</span><span class="token number">51200</span> extents<span class="token punctuation">)</span>. Logical volume centos/home successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-增加-root分区空间"><a href="#3-增加-root分区空间" class="headerlink" title="3.增加&#x2F;root分区空间"></a>3.增加&#x2F;root分区空间</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ lvextend <span class="token parameter variable">-l</span> +100%FREE /dev/centos/rootSize of logical volume centos/root changed from <span class="token number">50.06</span> GiB <span class="token punctuation">(</span><span class="token number">12816</span> extents<span class="token punctuation">)</span> to <span class="token number">325.76</span> GiB <span class="token punctuation">(</span><span class="token number">83394</span> extents<span class="token punctuation">)</span>.Logical volume centos/root successfully resized.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-扩展XFS文件空间大小"><a href="#4-扩展XFS文件空间大小" class="headerlink" title="4.扩展XFS文件空间大小"></a>4.扩展XFS文件空间大小</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ xfs_growfs /dev/mapper/centos-rootmeta-data<span class="token operator">=</span>/dev/mapper/centos-root <span class="token assign-left variable">isize</span><span class="token operator">=</span><span class="token number">256</span>    <span class="token assign-left variable">agcount</span><span class="token operator">=</span><span class="token number">4</span>, <span class="token assign-left variable">agsize</span><span class="token operator">=</span><span class="token number">3276800</span> blks         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">attr</span><span class="token operator">=</span><span class="token number">2</span>, <span class="token assign-left variable">projid32bit</span><span class="token operator">=</span><span class="token number">1</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">crc</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token assign-left variable">finobt</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">spinodes</span><span class="token operator">=</span><span class="token number">0</span>data     <span class="token operator">=</span>                       <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">13107200</span>, <span class="token assign-left variable">imaxpct</span><span class="token operator">=</span><span class="token number">25</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span>      <span class="token assign-left variable">swidth</span><span class="token operator">=</span><span class="token number">0</span> blksnaming   <span class="token operator">=</span>version <span class="token number">2</span>              <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   ascii-ci<span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">ftype</span><span class="token operator">=</span><span class="token number">0</span>log      <span class="token operator">=</span>internal               <span class="token assign-left variable">bsize</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">6400</span>, <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token number">2</span>         <span class="token operator">=</span>                       <span class="token assign-left variable">sectsz</span><span class="token operator">=</span><span class="token number">512</span>   <span class="token assign-left variable">sunit</span><span class="token operator">=</span><span class="token number">0</span> blks, lazy-count<span class="token operator">=</span><span class="token number">1</span>realtime <span class="token operator">=</span>none                   <span class="token assign-left variable">extsz</span><span class="token operator">=</span><span class="token number">4096</span>   <span class="token assign-left variable">blocks</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">rtextents</span><span class="token operator">=</span><span class="token number">0</span>data blocks changed from <span class="token number">13107200</span> to <span class="token number">85395456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成</p><p>﻿</p><h3 id="Mac神器-BTT-BetterTouchTool-不完全教程-118-md-“-118-md”"><a href="#Mac神器-BTT-BetterTouchTool-不完全教程-118-md-“-118-md”" class="headerlink" title="Mac神器-BTT(BetterTouchTool)不完全教程(#118.md “#118.md”)"></a>Mac神器-BTT(BetterTouchTool)不完全教程(#118.md “#118.md”)</h3><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p><img src="/" alt="BetterTouchTool"><br>BetterTouchTool 是一款专为Mac用户开发的 窗口管理&#x2F;<code>Trackpad</code>(触控板)&#x2F;<code>Magic Mouse</code>(苹果鼠标)&#x2F;<code>Keyboard</code>(键盘)&#x2F;<code>TouchBar</code> 功能增强制作的软件。</p><p>这款软件不但可以设置全局的 手势&#x2F;快捷键&#x2F;TouchBar ，还可以给不同的应用定义不同的姿势，再配合上 Alfred 的 workflow，简直各种高难度姿势都能玩的出来。</p><p>本文主要介绍以下功能：</p><ol><li>窗口管理</li><li>帮 Trackpad 定义各种姿势</li><li>帮 Magic Mouse 定义各种姿势</li><li>帮 Keyboard 定义各种姿势</li><li>帮任何应用自定义 TouchBar</li></ol><p><em>本文以 macbook pro 2017 touchbar 版为例</em></p><h2 id="1-窗口管理"><a href="#1-窗口管理" class="headerlink" title="1. 窗口管理"></a>1. 窗口管理</h2><p>这个功能无需过多配置，默认配置即可很好使用（和windows的理念相似）</p><ul><li>将窗口移到左右边缘，最大化至半屏</li><li>将窗口移到上边缘，最大化至全屏</li></ul><p><img src="/" alt="窗口管理"><br>如果对默认配置不满意，也可以在如下图所示的位置来调整窗口展示：<br><img src="/" alt="窗口管理配置"></p><h2 id="2-帮-Trackpad-定义各种姿势"><a href="#2-帮-Trackpad-定义各种姿势" class="headerlink" title="2. 帮 Trackpad 定义各种姿势"></a>2. 帮 Trackpad 定义各种姿势</h2><h3 id="姿势选择"><a href="#姿势选择" class="headerlink" title="姿势选择"></a>姿势选择</h3><p>在界面选择 Trackpad（触摸板） -&gt; Add New Gesture（添加一个新姿势）</p><p>左边可以选择生效的范围：全局或者某个应用</p><p><img src="/" alt="选择触摸板姿势"><br>如上图所示，姿势包括但不限于如：</p><ol><li>单指：左下角单击、单指轻拍右上角、单指轻拍上边中点</li><li>双指：两个手指捏、张开两指以两指中心为圆轴逆时针、中指拍住中央食指轻拍面板、双指从上边缘下滑</li><li>三指：三指轻拍、三指拍顶端、三指点击并向上滑、两指轻拍住，拍左、右二指固定拍住，左一下滑</li><li>四指：四指双轻拍、中指无名小拍住，食单击、食中指无名拍住，小单击</li><li>五指：五手指轻拍、五手指上滑</li></ol><p>上面只是列一些典型，更多姿势可以在上图中浏览。</p><h3 id="绑定功能"><a href="#绑定功能" class="headerlink" title="绑定功能"></a>绑定功能</h3><p><img src="/" alt="定义姿势功能"></p><p>选择过姿势之后，也可以选择在按住某个功能键的时候才能使用（左下角）。</p><p>右边是绑定功能：快捷键或动作。</p><ul><li><p>绑定快捷键举例：<br>比如 给chrome 设置 姿势（两指从触控板下边缘滑入），弹出开发者模式（快捷键绑定：command+option+i），如下图：<br><img src="/" alt="给chrome设置姿势，弹出开发者模式"></p></li><li><p>绑定动作举例：<br>设置 在任何应用内，五指下滑 锁屏，如下图<br><img src="/" alt="五指下滑锁屏"></p></li></ul><h2 id="3-帮-Magic-Mouse-定义各种姿势"><a href="#3-帮-Magic-Mouse-定义各种姿势" class="headerlink" title="3. 帮 Magic Mouse 定义各种姿势"></a>3. 帮 Magic Mouse 定义各种姿势</h2><p>这个功能设置和 Trackpad 设置 大同小异，所以这边就不多讲，直接图示几个功能。<br><img src="/" alt="两指上滑呼出Mission Control"></p><p>我快捷键设置了 option+E 鼠标取词翻译（欧陆词典），然后绑定到双指轻拍鼠标，即可触发翻译。<br><img src="/" alt="双指轻拍-取词翻译"></p><h2 id="4-帮-Keyboard-定义各种姿势"><a href="#4-帮-Keyboard-定义各种姿势" class="headerlink" title="4. 帮 Keyboard 定义各种姿势"></a>4. 帮 Keyboard 定义各种姿势</h2><p>这个功能比较简单，设置一些 键盘快捷键或录制案件序列 来触发 一些动作或者其他快捷键功能。</p><h2 id="5-帮任何应用自定义-TouchBar"><a href="#5-帮任何应用自定义-TouchBar" class="headerlink" title="5. 帮任何应用自定义 TouchBar"></a>5. 帮任何应用自定义 TouchBar</h2><p>这个重磅功能，可以帮助不支持touchbar的软件定制 TouchBar，是不是有点厉害。</p><p>下面就以我给 IntelliJ IDEA 定制 TouchBar 为例 (没有F1 ~ F12 功能键，debug真的很痛苦，这个软件真的是雪中送炭)，展示一下使用效果</p><p><img src="/" alt="定制 TouchBar"></p><p>如上图所示，我给 IntelliJ IDEA 添加了 四个功能 step over&#x2F;step into&#x2F;resume&#x2F;evaluate</p><p>添加完之后，切到 IntelliJ IDEA 软件中时，TouchBar 就显示我们添加的四个功能键， 如下图所示<br><img src="/" alt="IntelliJ IDEA 定制 TouchBar"></p><h2 id="最后-2"><a href="#最后-2" class="headerlink" title="最后"></a>最后</h2><p>BTT还有其他很方便的功能，这盘就介绍到这里，等之后更新了 Alfred 的 workflow 开发指南之后，再一起更新一篇有意思的 BTT+Alfred 效率流。</p><p>﻿</p><h3 id="Raycast-最强效率软件推荐-119-md-“-119-md”"><a href="#Raycast-最强效率软件推荐-119-md-“-119-md”" class="headerlink" title="Raycast 最强效率软件推荐(#119.md “#119.md”)"></a>Raycast 最强效率软件推荐(#119.md “#119.md”)</h3><h2 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h2><p><img src="/" alt="Raycast"></p><p>最近在很多平台上看到 Raycast 的推荐文章, 今天就尝试了一下, 发现确实不错, 完全可以替代我目前对 Alfred 的使用, 甚至很多地方做得更好, 所以本文就是介绍我使用 Raycast 的一些效果(多图预警)， 方便那些还没有接触这个软件的人对它有个了解, 如果有插件推荐, 欢迎在评论区进行讨论。</p><p>Raycast 是 MacMac 平台独占的效率工具, 主要包含如下功能:</p><ol><li>应用启动</li><li>文件查找</li><li>窗口管理</li><li>剪贴板历史</li><li>Snippets</li><li>应用菜单查询</li></ol><p>插件扩展功能</p><ol><li>翻译</li><li>斗图</li><li>结束进程</li><li>查询端口占用</li><li>查询ip</li></ol><p>除此之外, Raycast提供的在线插件商店, 可以很方便的进行功能扩展</p><p><a href="">Raycast官网</a></p><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="应用启动"><a href="#应用启动" class="headerlink" title="应用启动"></a>应用启动</h3><p>并且支持卸载应用, 找到应用, <code>cmd+k</code> 打开操作菜单, 下拉到最后</p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><h3 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h3><h3 id="剪贴板历史"><a href="#剪贴板历史" class="headerlink" title="剪贴板历史"></a>剪贴板历史</h3><p>推荐使用 <code>Clipboard History</code> 这个扩展，和 Alfred 的一样, 并且有分类，效果如下</p><p>设置快捷键 <code>cmd+shift+v</code></p><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h3><p>通过 Snippets 可以保存自定义片段, 通过关键字快速查询并输出到光标处, 如常用语、 邮箱、手机号、税号、代码片段等等</p><p>创建 Snippets 可以通过搜索 <code>Create Snippet</code>, 搜索 Snippets 可以通过搜索<code>Search Snippet</code></p><h3 id="应用菜单查询"><a href="#应用菜单查询" class="headerlink" title="应用菜单查询"></a>应用菜单查询</h3><p>查询当前激活应用的所有菜单, 不限层级. 可以通过搜索 <code>Search Menu Items</code> 来查询。</p><h2 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h2><h3 id="Easydict-翻译软件"><a href="#Easydict-翻译软件" class="headerlink" title="Easydict(翻译软件)"></a>Easydict(翻译软件)</h3><p>超强的翻译软件， 完美替代我在 Alfred 的 workflow 中配置的有道翻译, 我配置了如下功能</p><ul><li>输入中文, 自动翻译成英文</li><li>输入英文, 自动翻译成中文</li><li>支持一键发音</li><li>Open AI 翻译长文本</li></ul><h3 id="Doutu"><a href="#Doutu" class="headerlink" title="Doutu"></a>Doutu</h3><p>表情包查询，选中回车就复制到剪贴板了， 就可以粘贴到 Discord&#x2F;QQ&#x2F;Wechat?斗图了, 非常方便。</p><h3 id="Kill-Process"><a href="#Kill-Process" class="headerlink" title="Kill Process"></a>Kill Process</h3><p>关键字查询, 并一键结束进程</p><h3 id="Kill-Port"><a href="#Kill-Port" class="headerlink" title="Kill Port"></a>Kill Port</h3><p>查询端口占用的进程, 并支持一键结束进程</p><h3 id="MyIp"><a href="#MyIp" class="headerlink" title="MyIp"></a>MyIp</h3><p>查询当前ip</p><p>﻿</p><h3 id="MathJax适配Pjax-120-md-“-120-md”"><a href="#MathJax适配Pjax-120-md-“-120-md”" class="headerlink" title="MathJax适配Pjax(#120.md “#120.md”)"></a>MathJax适配Pjax(#120.md “#120.md”)</h3><p>hexo 添加 MathJax 的过程网上很多，这里就不细讲，这里贴一张写的不错的文章 <a href="">Hexo博客(13)添加MathJax数学公式渲染</a></p><p>由于 <code>3-hexo</code> 这个主题使用了 <code>pjax</code> ，刷新和第一次加载没有问题，但是点到其他文章，再点回来，渲染就无效了。</p><p>这个问题和之前适配多说和高亮时，是同样的问题，只需要在下面配置即可。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*pjax请求回来页面后触发的事件*/</span>    <span class="token string-property property">'pjax:end'</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*渲染MathJax数学公式*/</span>        $<span class="token punctuation">.</span><span class="token function">getScript</span><span class="token punctuation">(</span><span class="token string">'//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML'</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            MathJax<span class="token punctuation">.</span>Hub<span class="token punctuation">.</span><span class="token function">Typeset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就解决了pjax的适配问题。</p><p>﻿</p><h3 id="‘-记-《知识分子的不幸》-王小波’-121-md-“-121-md”"><a href="#‘-记-《知识分子的不幸》-王小波’-121-md-“-121-md”" class="headerlink" title="‘[记]《知识分子的不幸》-王小波’(#121.md “#121.md”)"></a>‘[记]《知识分子的不幸》-王小波’(#121.md “#121.md”)</h3><h2 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h2><p>这篇文章发表于1996年第二期《东方》杂志，同样收录于《沉默的大多数》一书中。</p><h2 id="所想"><a href="#所想" class="headerlink" title="所想"></a>所想</h2><p>文章一开头就抛出了一个问题：什么是知识分子最害怕的事？想起了高晓松在晓说中提到过这个问题，晓松肯定是看过这篇文章的。</p><p>王小波说：“<strong>知识分子最怕活在不理智的年代。”所谓不理智的年代，就是伽利略低头认罪，承认地球不转的年代，也是拉瓦斯上断头台的年代；是茨威格服毒自杀的年代，也是老舍跳太平湖的年代。</strong>“</p><p>王小波和他的美国老师谈论了一个问题：”有信仰比无信仰要好。“，由于王小波是经历过文革的，所以王小波一开始是抵触这种思想的，尤其是 <strong>课间祷告 <strong>让王小波想起了文革中的 <strong>早请示</strong>。但老师最终说服了他，“</strong>不管是信神，还是自珍自重，人活在世界上总得有点信念才成。就我个人而言，虽是无神论者，我也有个人操守，从不逾越。</strong>”</p><p>国内的学者，只搞学术研究，不搞意识形态，这由不了自己。有朝一日它成了意识形态，你的话就是罪状。言论不自由，不理智，民族狂热，这不就是知识分子最怕的事情吗？</p><p>王小波崇拜墨子：其一，他思维缜密，其二，他敢赤裸裸地谈利害。（有了他，我也敢说自己是中华民族的赤诚分子，不怕国学家说我是全盘西化了。）</p><p>营造意识形态则是灭绝思想额丰饶。中国的人文知识分子，有种以天下为己任的使命感，总觉得自己该搞出些老百姓当信仰的东西。</p><p>国学，这种东西实在厉害。最可怕之处就在于那个“国”字。顶着这个字，谁敢有不同意见？抢到了这个制高点，就可以压制一切不同意见；所以很容易落入思想流氓的手中变成一种凶器。</p><p>目前正值 “<strong>中美贸易战</strong>”，各种自媒体为了点击量、关注度。煽动民族狂热情绪，导致民众根本容不得半点不同意见，不讲道理，“盲目爱国“。</p><p>认真思索，真诚的明辨是非，有这种态度大概就可算是善良了吧。</p><p>人活在世上，自会形成信念，一种学问、一本书，假如不对我的价值观发生变化，就不值得一学，不值得一看。</p><p>﻿</p><h3 id="Mybatis常用Mapper语句-122-md-“-122-md”"><a href="#Mybatis常用Mapper语句-122-md-“-122-md”" class="headerlink" title="Mybatis常用Mapper语句(#122.md “#122.md”)"></a>Mybatis常用Mapper语句(#122.md “#122.md”)</h3><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 简单插入 */</span><span class="token operator">&lt;</span><span class="token keyword">insert</span> id<span class="token operator">=</span><span class="token string">"insertOne"</span> parameterType<span class="token operator">=</span><span class="token string">"Person"</span><span class="token operator">></span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> person <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token comment">#&#123;id&#125;, #&#123;name&#125;, #&#123;age&#125;);</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">insert</span><span class="token operator">></span><span class="token comment">/* 插入并返回对象的主键（数据库序列） */</span><span class="token operator">&lt;</span><span class="token keyword">insert</span> id<span class="token operator">=</span><span class="token string">"insertOne"</span> parameterType<span class="token operator">=</span><span class="token string">"Person"</span> useGeneratedKeys<span class="token operator">=</span><span class="token string">"true"</span> keyProperty<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">></span>    <span class="token keyword">insert</span> <span class="token keyword">into</span> person <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token comment">#&#123;name&#125;, #&#123;age&#125;);</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">insert</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 简单更新 */</span><span class="token operator">&lt;</span><span class="token keyword">update</span> id<span class="token operator">=</span><span class="token string">"updateName"</span><span class="token operator">></span>     <span class="token keyword">update</span> person <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token comment">#&#123;name&#125; where id = #&#123;id&#125;;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">update</span><span class="token operator">></span><span class="token comment">/* 更新值并返回 */</span><span class="token operator">&lt;</span><span class="token keyword">select</span> id<span class="token operator">=</span><span class="token string">"updateAge"</span> parameterType<span class="token operator">=</span><span class="token string">"Person"</span><span class="token operator">></span>    <span class="token keyword">update</span> person <span class="token keyword">set</span> age <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token comment">#&#123;age&#125; where id = #&#123;id&#125; returning age;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">select</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h3><p>记录玩家在某种类型游戏下的统计记录：</p><blockquote><p>如果没有记录，则从插入，count字段为1；<br>如果有记录，则更新count字段+1；</p></blockquote><ol><li><p>方式一</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">insert</span> id<span class="token operator">=</span><span class="token string">"addCount"</span> parameterType<span class="token operator">=</span><span class="token string">"CountRecord"</span><span class="token operator">></span>    <span class="token comment">/*如果有记录，则更新；无记录，则noting*/</span>    <span class="token keyword">update</span>      count_record    <span class="token keyword">set</span>      <span class="token string">"count"</span> <span class="token operator">=</span> <span class="token string">"count"</span><span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">where</span>      type_id <span class="token operator">=</span> <span class="token comment">#&#123;typeId&#125;</span>    <span class="token operator">and</span>      user_id <span class="token operator">=</span> <span class="token comment">#&#123;userId&#125;;</span>    <span class="token comment">/*如果有记录，则noting；无记录，则插入*/</span>    <span class="token keyword">insert</span> <span class="token keyword">into</span>      count_record<span class="token punctuation">(</span>type_id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">)</span>      <span class="token keyword">select</span>        <span class="token comment">#&#123;typeId&#125;, #&#123;userId&#125;, 1</span>      <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span>          <span class="token punctuation">(</span><span class="token keyword">select</span>              <span class="token operator">*</span>           <span class="token keyword">from</span>              count           <span class="token keyword">where</span>              type_id <span class="token operator">=</span> <span class="token comment">#&#123;typeId&#125;</span>           <span class="token operator">and</span>              user_id <span class="token operator">=</span> <span class="token comment">#&#123;userId&#125;);</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">insert</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式二</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/* 利用 PostgreSQL 的 conflic 特性 */</span><span class="token operator">&lt;</span><span class="token keyword">insert</span> id<span class="token operator">=</span><span class="token string">"addCount"</span> parameterType<span class="token operator">=</span><span class="token string">"CountRecord"</span><span class="token operator">></span>    <span class="token keyword">insert</span> <span class="token keyword">into</span>      count_record<span class="token punctuation">(</span>type_id<span class="token punctuation">,</span> user_id<span class="token punctuation">,</span> <span class="token string">"count"</span><span class="token punctuation">)</span>    <span class="token keyword">VALUES</span>      <span class="token punctuation">(</span><span class="token comment">#&#123;typeId&#125;, #&#123;userId&#125;, #&#123;count&#125;)</span>    <span class="token keyword">on</span>      conflict<span class="token punctuation">(</span>type_id<span class="token punctuation">,</span>user_id<span class="token punctuation">)</span>    <span class="token keyword">do</span> <span class="token keyword">update</span> <span class="token keyword">set</span>      <span class="token string">"count"</span> <span class="token operator">=</span> count_record<span class="token punctuation">.</span><span class="token string">"count"</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">insert</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>﻿</p><h3 id="nginx配置记录-123-md-“-123-md”"><a href="#nginx配置记录-123-md-“-123-md”" class="headerlink" title="nginx配置记录(#123.md “#123.md”)"></a>nginx配置记录(#123.md “#123.md”)</h3><h2 id="启用https"><a href="#启用https" class="headerlink" title="启用https"></a>启用https</h2><h3 id="1-购买免费证书"><a href="#1-购买免费证书" class="headerlink" title="1.购买免费证书"></a>1.购买免费证书</h3><p>登录阿里云 -&gt; 控制台 -&gt; 安全（云盾） -&gt; CA证书服务 -&gt; 购买证书<br><img src="/" alt="购买免费证书"></p><h3 id="2-补全证书信息"><a href="#2-补全证书信息" class="headerlink" title="2.补全证书信息"></a>2.补全证书信息</h3><p>点击补全，绑定域名</p><h3 id="3-下载并配置"><a href="#3-下载并配置" class="headerlink" title="3.下载并配置"></a>3.下载并配置</h3><p>选择下载 证书for nginx<br><img src="/" alt="下载证书"></p><p>上面这个页面有相关的配置信息，下面简单介绍：</p><p>① 将下载文件中的 <code>*.pem</code>、<code>*.key</code>, 拷贝到 nginx 目录下 的 <code>cert</code> , 当然也可以是其他目录<br>② 修改 <code>nginx.conf</code></p><pre class="line-numbers language-conf" data-language="conf"><code class="language-conf">server &#123;      listen       443 ssl;      server_name  xiangzhangshugongyi.com;      ssl_certificate      cert&#x2F;214487958220243.pem;      ssl_certificate_key  cert&#x2F;214487958220243.key;      ssl_session_cache    shared:SSL:1m;      ssl_session_timeout  5m;      ssl_ciphers  HIGH:!aNULL:!MD5;      ssl_prefer_server_ciphers  on;      location &#x2F; &#123;          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;          proxy_set_header Host $http_host;          proxy_set_header X-Forwarded-Proto https;          proxy_redirect off;          proxy_connect_timeout      240;          proxy_send_timeout         240;          proxy_read_timeout         240;          # note, there is not SSL here! plain HTTP is used          proxy_pass       &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③ 重启 nginx，通过 证书绑定域名进行 https 访问到 服务器跑在 8080 的服务<br><img src="/" alt="通过https访问"></p><p>﻿</p><h3 id="npm使用介绍-124-md-“-124-md”"><a href="#npm使用介绍-124-md-“-124-md”" class="headerlink" title="npm使用介绍(#124.md “#124.md”)"></a>npm使用介绍(#124.md “#124.md”)</h3><h2 id="What-1"><a href="#What-1" class="headerlink" title="What"></a>What</h2><p>npm（全称Node Package Manager，即node包管理器）是Node.js默认的、以JavaScript编写的软件包管理系统。<br>作者：艾萨克·施吕特（Isaac Z. Schlueter）</p><h2 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h2><p>npm 是随同node.js一起安装的，所以安装node.js即可。</p><h2 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看版本</span>$ <span class="token function">npm</span> <span class="token parameter variable">-v</span><span class="token comment"># 升级</span>$ <span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> <span class="token function">npm</span> <span class="token parameter variable">-g</span><span class="token comment"># 安装模块</span>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>Module Name<span class="token operator">></span>    <span class="token comment">#本地安装</span><span class="token comment"># 本地安装：安装到./node_modules(命令运行目录)</span>$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>Module Name<span class="token operator">></span> <span class="token parameter variable">-g</span> <span class="token comment">#全局安装</span><span class="token comment"># 全局安装：放在 /usr/local 下或者你 node 的安装目录。</span><span class="token comment"># 卸载模块</span>$ <span class="token function">npm</span> uninstall <span class="token operator">&lt;</span>Module Name<span class="token operator">></span><span class="token comment"># 更新模块</span>$ <span class="token function">npm</span> update <span class="token operator">&lt;</span>Module Name<span class="token operator">></span><span class="token comment"># 查看所有安装的模块</span>$ <span class="token function">npm</span> <span class="token function">ls</span>     <span class="token comment">#所有本地模块</span>$ <span class="token function">npm</span> <span class="token function">ls</span> <span class="token parameter variable">-g</span>  <span class="token comment">#所有全局模块</span><span class="token comment"># 搜索模块</span>$ <span class="token function">npm</span> search <span class="token operator">&lt;</span>Module Name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="pjax用法-125-md-“-125-md”"><a href="#pjax用法-125-md-“-125-md”" class="headerlink" title="pjax用法(#125.md “#125.md”)"></a>pjax用法(#125.md “#125.md”)</h3><p>最近在开发一款hexo主题3-hexo，其中使用了pjax大大提高了用户体验和加载速度，在此简单介绍一下pjax的用法<a href="">github链接</a></p><!--more --><h2 id="pjax是什么"><a href="#pjax是什么" class="headerlink" title="pjax是什么"></a>pjax是什么</h2><blockquote><p>pjax是一款jQuery插件，使用了ajax和pushState的技术，在保留真正永久链接，网页标题和可用的返回功能的情况下，带来一种快速的浏览体验。 –官方介绍</p></blockquote><p><code>用人话说</code>，就是当跳转过去的网页和当前网页的一部分是一样的，这时可以通过pjax就会从响应页面中取出 <code>不同的那部分</code> （需指定），替换掉原来的内容。 如果在服务端判断处理，直接返回 <code>不同的那部分内容</code>，这样就可以减少带宽占用，提升加载速度。</p><p>这样做的优势：</p><ol><li>由于从服务器取回的数据量变少，加载速度将会提升。</li><li>并且采用异步刷新页面中的不一样的地方，用户体验也是满满的。</li><li>保留了浏览器回退的功能（解决了ajax的尴尬）</li></ol><p>好了，开始操作。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>第一步：引入jQuery和jQuery.pjax</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//cdnjs.cloudflare.com/ajax/libs/jquery.pjax/1.9.6/jquery.pjax.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二步：将指定的a的链接，转为pjax风格</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/*将#menu中的a的链接的页面，只取回class=pjax元素中的内容，替换掉当前页面class=pjax元素中的内容*/</span><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pjax</span><span class="token punctuation">(</span><span class="token string">'.#menu a'</span><span class="token punctuation">,</span> <span class="token string">'.pjax'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">fragment</span><span class="token operator">:</span><span class="token string">'.pjax'</span><span class="token punctuation">,</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token number">8000</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第三步：如果需要在请求的过程中做一些自定义的事件，可以使用下面的方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token string-property property">'pjax:click'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//点击链接时，需要触发的事件写到这里</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">'pjax:start'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//当开始获取请求时，需要触发的事件写在这里</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string-property property">'pjax:end'</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//当请求完成后，需要触发的事件写在这里</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结束。</p><h2 id="详细文档"><a href="#详细文档" class="headerlink" title="详细文档"></a>详细文档</h2><p>翻译于官方</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pjax</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token punctuation">[</span>container<span class="token punctuation">]</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>selector</code> 触发点击事件的选择器，String类型</li><li><code>container</code> 一个选择器，为唯一的pjax容器</li><li><code>options</code> 一个可以包含下面这些选项的对象</li></ol><h3 id="pjax-options"><a href="#pjax-options" class="headerlink" title="pjax options"></a>pjax options</h3><table><thead><tr><th align="left">key</th><th align="left">default</th><th align="left">description</th></tr></thead><tbody><tr><td align="left"><code>timeout</code></td><td align="left">650</td><td align="left">ajax超时时间，单位毫秒，超时后将请求整个页面进行刷新</td></tr><tr><td align="left"><code>push</code></td><td align="left">true</td><td align="left">使用 pushState 添加一个浏览器历史导航条目</td></tr><tr><td align="left"><code>replace</code></td><td align="left">false</td><td align="left">替换URL，而不添加浏览器历史条目</td></tr><tr><td align="left"><code>maxCacheLength</code></td><td align="left">20</td><td align="left">历史内容 cache 的最大size</td></tr><tr><td align="left"><code>version</code></td><td align="left"></td><td align="left">string ： 当前pjax版本</td></tr><tr><td align="left"><code>scrollTo</code></td><td align="left">0</td><td align="left">垂直位置滚动，为了避免改变滚动条位置</td></tr><tr><td align="left"><code>type</code></td><td align="left">“GET”</td><td align="left">可以查看<a href="">jQuery.ajax()</a></td></tr><tr><td align="left"><code>dataType</code></td><td align="left">“html”</td><td align="left">可以查看<a href="">jQuery.ajax()</a></td></tr><tr><td align="left"><code>container</code></td><td align="left"></td><td align="left">css选择器，此元素内容将被替换</td></tr><tr><td align="left"><code>url</code></td><td align="left">link.href</td><td align="left">string: ajax 请求的URL</td></tr><tr><td align="left"><code>target</code></td><td align="left">link</td><td align="left">eventually the relatedTarget value for <a href="#Events">pjax events</a></td></tr><tr><td align="left"><code>fragment</code></td><td align="left"></td><td align="left">从ajax响应的页面中抽取的‘片段’</td></tr></tbody></table><h3 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h3><p>除了<code>pjax:click</code>和<code>pjax:clicked</code>外的所有pjax事件从pjax容器中触发，是不需要点击链接的。<br><strong>所有事件的生命周期在通过pjax请求链接的过程中</strong></p><table><thead><tr><th align="left">event</th><th align="left">cancel</th><th align="left">arguments</th><th align="left">notes</th></tr></thead><tbody><tr><td align="left"><code>pjax:click</code></td><td align="left">??</td><td align="left"><code>options</code></td><td align="left">在一个链接被激活（点击）时触发此事件，可以在此取消阻止pjax</td></tr><tr><td align="left"><code>pjax:beforeSend</code></td><td align="left">??</td><td align="left"><code>xhr, options</code></td><td align="left">可以设置 XHR 头</td></tr><tr><td align="left"><code>pjax:start</code></td><td align="left"></td><td align="left"><code>xhr, options</code></td><td align="left"></td></tr><tr><td align="left"><code>pjax:send</code></td><td align="left"></td><td align="left"><code>xhr, options</code></td><td align="left"></td></tr><tr><td align="left"><code>pjax:clicked</code></td><td align="left"></td><td align="left"><code>options</code></td><td align="left">当链接被点击，并且已经开始pjax请求后触发</td></tr><tr><td align="left"><code>pjax:beforeReplace</code></td><td align="left"></td><td align="left"><code>contents, options</code></td><td align="left">从服务器已经加载到HTML内容，在替换HTML内容之前触发</td></tr><tr><td align="left"><code>pjax:success</code></td><td align="left"></td><td align="left"><code>data, status, xhr, options</code></td><td align="left">从服务器已经加载到HTML内容，在替换HTML内容之后触发</td></tr><tr><td align="left"><code>pjax:timeout</code></td><td align="left">??</td><td align="left"><code>xhr, options</code></td><td align="left">页面将会在<code>options.timeout</code>之后直接发起请求刷新页面，除非取消pjax</td></tr><tr><td align="left"><code>pjax:error</code></td><td align="left">??</td><td align="left">xhr, textStatus, error, options</td><td align="left">ajax 错误，将会请求刷新页面，除非取消pjax</td></tr><tr><td align="left"><code>pjax:complete</code></td><td align="left"></td><td align="left">xhr, textStatus, options</td><td align="left">不管结果是什么，在ajax后，都触发</td></tr><tr><td align="left"><code>pjax:end</code></td><td align="left"></td><td align="left"><code>xhr, options</code></td><td align="left"></td></tr></tbody></table><p><strong>生命周期在浏览器返回或前进时触发</strong></p><table><thead><tr><th align="left">event</th><th align="left">cancel</th><th align="left">arguments</th><th align="left">notes</th></tr></thead><tbody><tr><td align="left"><code>pjax:popstate</code></td><td align="left"></td><td align="left"></td><td align="left">事件方向(前进，后退)属性: “back”&#x2F;“forward”</td></tr><tr><td align="left"><code>pjax:start</code></td><td align="left"></td><td align="left"><code>null, options</code></td><td align="left">替换内容前</td></tr><tr><td align="left"><code>pjax:beforeReplace</code></td><td align="left"></td><td align="left"><code>contents, options</code></td><td align="left">从cache中读取内容后，替换html前</td></tr><tr><td align="left"><code>pjax:end</code></td><td align="left"></td><td align="left"><code>null, options</code></td><td align="left">替换内容后</td></tr></tbody></table><p>﻿</p><h3 id="PostgreSQL事务及隔离级别-126-md-“-126-md”"><a href="#PostgreSQL事务及隔离级别-126-md-“-126-md”" class="headerlink" title="PostgreSQL事务及隔离级别(#126.md “#126.md”)"></a>PostgreSQL事务及隔离级别(#126.md “#126.md”)</h3><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>PostgreSQL中提供了多种数据完整性的保证机制。如：约束、触发器、事务和锁管理等。</p><p>事务主要是为了保证一组相关数据库的操作能全部执行成功，从而保证数据的完整性。锁机制主要是控制多个用户对同一数据进行操作，使用锁机制可以解决并发问题。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是用户对一个数据库操作的一个序列，这些操作要么全做，要么全不做，是一个不可分割的单位。</p><p>事务管理的常用语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">BEGIN</span><span class="token punctuation">;</span><span class="token keyword">SQL</span>语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">SQL</span>语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事务块是指包围在BEGIN和COMMIT之间的语句。在PostgreSQL9中，常用的事务块管理语句含义如下：</p><blockquote><p><strong>START TRANSACTION</strong>：此命令表示开始一个新的事务块.<br><strong>BEGIN</strong>：初始化一个事务块。在BEGIN命令后的语句都将在一个事务里面执行，知道遇见COMMIT或ROLLBACK。它和START TRANSACTION是一样的。<br><strong>COMMIT</strong>：提交事务。<br><strong>ROLLBACK</strong>：事务失败时执行回滚操作。<br><strong>SET TRANSACTION</strong>：设置当前事务的特性。对后面的事务没有影响。</p></blockquote><h3 id="事务隔离及并发控制"><a href="#事务隔离及并发控制" class="headerlink" title="事务隔离及并发控制"></a>事务隔离及并发控制</h3><p>PostgreSQL是一个支持多用户的数据库，当多个用户操作同一数据库时，并发控制要保证所有用户可以高效的访问的同时不破坏数据的完整性。</p><p>数据库中数据的并发操作经常发生，而对数据的并发操作会带来下面的一些问题：</p><ol><li>脏读<br>一个事务读取了另一个未提交事务写入的数据。</li><li>不可重复读<br>一个事务重新读取前面读取过的数据，发现该数据已经被另一个已经提交的事务修改。</li><li>幻读<br>一个事务重新执行一个查询，返回符合查询条件的行的集合，发现满足查询条件的行的集合因为其它最近提交的事务而发生了改变。</li></ol><p>SQL标准定义了四个级别的事务隔离。</p><p>| 隔离级别 | 脏读 | 幻读 | 不可重复性读取 |<br>| :- | :- |<br>|读未提交|可能|可能|可能|<br>|读已提交|不可能|可能|可能|<br>|可重复读|不可能|可能|不可能|<br>|可串行读|不可能|不可能|不可能|</p><p>在PostgreSQL中，可以请求4种隔离级别中的任意一种。但是在内部，实际上只有两种独立的隔离级别，分别对应已提交和可串行化。如果选择了读未提交的级别，实际上使用的是读已提交，在选择可重复读级别的时候，实际上用的是可串行化，所以实际的隔离级别可能比选择的更严格。这是SQL标准允许的：4种隔离级别只定义了哪种现象不能发生，但是没有定义哪种现象一定发生。</p><p>PostgreSQL只提供两种隔离级别的原因是，这是把标准的隔离级别与多版本并发控制架构映射相关的唯一合理方法。</p><ol><li>读已提交<br>这是PostgreSQL中默认的隔离级别，当一个事务运行在这个隔离级别时，一个SELECT查询只能看到查询开始前已提交的数据，而无法看到未提交的数据或者在查询期间其他的事务已提交的数据。</li><li>可串行化<br>可串行化提供最严格的事务隔离。这个级别模拟串行的事务执行，就好像事务是一个接着一个串行的执行。不过，这个级别的应用必须准备在串行化失败的时候重新启动事务。</li></ol><p>﻿</p><h3 id="PostgreSQL初体验-127-md-“-127-md”"><a href="#PostgreSQL初体验-127-md-“-127-md”" class="headerlink" title="PostgreSQL初体验(#127.md “#127.md”)"></a>PostgreSQL初体验(#127.md “#127.md”)</h3><h2 id="创建操作系统用户"><a href="#创建操作系统用户" class="headerlink" title="创建操作系统用户"></a>创建操作系统用户</h2><p>创建一个新的Linux用户：dbuser</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> adduser dbuser <span class="token comment">#创建一个新的Linux用户：dbuser</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><!--more --><h2 id="登录PostgreSQL控制台"><a href="#登录PostgreSQL控制台" class="headerlink" title="登录PostgreSQL控制台"></a>登录PostgreSQL控制台</h2><p>切换到postgres用户</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$sudo</span> <span class="token function">su</span> - postgres <span class="token comment">#切换到postgres用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统用户postgres以同名数据库用户的身份，登录数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$psql</span> <span class="token comment">#系统用户postgres以同名数据库用户的身份，登录数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功登录到控制台后，显示 <code>postgres=#</code></p><blockquote><p>注意：后面分号不能省略</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>password postgres <span class="token comment">#给postgres用户设置密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建数据库用户dbuser</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CREATE <span class="token environment constant">USER</span> dbuser WITH PASSWORD <span class="token string">'dbuser'</span><span class="token punctuation">;</span> <span class="token comment">#创建数据库用户dbuser</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建用户数据库，这里为exampledb，并指定所有者为dbuser。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CREATE DATABASE exampledb OWNER dbuser<span class="token punctuation">;</span> <span class="token comment">#创建用户数据库，这里为exampledb，并指定所有者为dbuser。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将exampledb数据库的所有权限都赋予dbuser</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser<span class="token punctuation">;</span> <span class="token comment">#将exampledb数据库的所有权限都赋予dbuser</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>推出控制台（也可以直接按ctrl+D）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>q <span class="token comment">#退出控制台</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="PostgreSQL常用SQL操作-128-md-“-128-md”"><a href="#PostgreSQL常用SQL操作-128-md-“-128-md”" class="headerlink" title="PostgreSQL常用SQL操作(#128.md “#128.md”)"></a>PostgreSQL常用SQL操作(#128.md “#128.md”)</h3><blockquote><p>说明：文章中实例均在 <code>PostgreSQL</code> 环境操作。</p></blockquote><h2 id="DDL数据定义语言"><a href="#DDL数据定义语言" class="headerlink" title="DDL数据定义语言"></a>DDL数据定义语言</h2><h3 id="数据库-角色-schema"><a href="#数据库-角色-schema" class="headerlink" title="数据库&#x2F;角色&#x2F;schema"></a>数据库&#x2F;角色&#x2F;schema</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建一个数据库用户</span><span class="token keyword">create</span> role <span class="token string">"sp-boss"</span> createdb createrole login password <span class="token string">'sp-boss'</span><span class="token punctuation">;</span><span class="token comment">-- 使用上面角色登录 postgres 数据库</span>psql <span class="token operator">-</span>U sp<span class="token operator">-</span>boss <span class="token operator">-</span>d postgres<span class="token comment">-- 创建自己的数据库</span><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token string">"sp-boss"</span><span class="token comment">-- 登录自己的数据库</span>psql <span class="token operator">-</span>U sp<span class="token operator">-</span>boss<span class="token comment">-- 创建一个其他用户</span><span class="token keyword">create</span> role <span class="token string">"sp-manager"</span> login password <span class="token string">'sp-manager'</span><span class="token punctuation">;</span><span class="token comment">-- 赋予 create 权限</span><span class="token keyword">grant</span> <span class="token keyword">create</span> <span class="token keyword">on</span> <span class="token keyword">database</span> <span class="token string">"sp-boss"</span> <span class="token keyword">to</span> <span class="token string">"sp-manager"</span><span class="token punctuation">;</span><span class="token comment">-- 使用 新用户 登录数据库</span>psql <span class="token operator">-</span>U sp<span class="token operator">-</span>manager <span class="token operator">-</span>d sp<span class="token operator">-</span>boss<span class="token comment">-- 创建自己的 schema</span><span class="token keyword">create</span> <span class="token keyword">schema</span> <span class="token string">"sp-manager"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> user_info <span class="token punctuation">(</span>  id <span class="token keyword">serial</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>  name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  age <span class="token keyword">integer</span><span class="token punctuation">,</span>  create_time <span class="token keyword">timestamp</span><span class="token punctuation">,</span>  <span class="token keyword">type</span> <span class="token keyword">integer</span><span class="token punctuation">,</span>  display <span class="token keyword">boolean</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token keyword">unique</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--删除表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">exists</span> user_info<span class="token punctuation">;</span><span class="token comment">--重命名表</span><span class="token keyword">alter</span> <span class="token keyword">table</span> user_info <span class="token keyword">rename</span> <span class="token keyword">to</span> user_infos<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字段（列）"><a href="#字段（列）" class="headerlink" title="字段（列）"></a>字段（列）</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--添加一列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> user_info <span class="token keyword">add</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--删除一列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> user_info <span class="token keyword">drop</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> username<span class="token punctuation">;</span><span class="token comment">--重命名列</span><span class="token keyword">alter</span> <span class="token keyword">table</span> user_info <span class="token keyword">rename</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> username <span class="token keyword">to</span> name<span class="token punctuation">;</span><span class="token comment">--修改结构</span><span class="token keyword">alter</span> <span class="token keyword">table</span> user_info <span class="token keyword">alter</span> <span class="token punctuation">[</span><span class="token keyword">column</span><span class="token punctuation">]</span> username <span class="token keyword">set</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span><span class="token comment">--</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">-- 添加名为 uk_name 的联合唯一约束，组合列为column1和column2alter table sys_theme add constraint uk_name unique(column1,column2);-- 删除名为 uk_name 的约束alter table sys_theme drop constraint uk_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DML数据库操作语言"><a href="#DML数据库操作语言" class="headerlink" title="DML数据库操作语言"></a>DML数据库操作语言</h2><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><h4 id="查询包含json格式的text类型的数据"><a href="#查询包含json格式的text类型的数据" class="headerlink" title="查询包含json格式的text类型的数据"></a>查询包含json格式的text类型的数据</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">postgres<span class="token operator">=</span><span class="token comment"># select * from person;</span> id <span class="token operator">|</span>  name  <span class="token operator">|</span>                          other                           <span class="token operator">-</span>  <span class="token number">1</span> <span class="token operator">|</span> faker  <span class="token operator">|</span> &#123;<span class="token string">"gender"</span>:<span class="token string">"male"</span><span class="token punctuation">,</span><span class="token string">"address"</span>:<span class="token string">"xiamen"</span><span class="token punctuation">,</span><span class="token string">"college"</span>:<span class="token string">"xmut"</span>&#125;  <span class="token number">2</span> <span class="token operator">|</span> watson <span class="token operator">|</span> &#123;<span class="token string">"gender"</span>:<span class="token string">"male"</span><span class="token punctuation">,</span><span class="token string">"address"</span>:<span class="token string">"shenzhen"</span><span class="token punctuation">,</span><span class="token string">"college"</span>:<span class="token string">"szu"</span>&#125;  <span class="token number">3</span> <span class="token operator">|</span> lance  <span class="token operator">|</span> &#123;<span class="token string">"gender"</span>:<span class="token string">"male"</span><span class="token punctuation">,</span><span class="token string">"address"</span>:<span class="token string">"shenzhen"</span><span class="token punctuation">,</span><span class="token string">"college"</span>:<span class="token string">"xmut"</span>&#125;  <span class="token number">4</span> <span class="token operator">|</span> jine   <span class="token operator">|</span> &#123;<span class="token string">"gender"</span>:<span class="token string">"female"</span><span class="token punctuation">,</span><span class="token string">"address"</span>:<span class="token string">"xiamen"</span><span class="token punctuation">,</span><span class="token string">"college"</span>:<span class="token string">"xmut"</span>&#125;  <span class="token number">5</span> <span class="token operator">|</span> jobs   <span class="token operator">|</span> &#123;<span class="token string">"gender"</span>:<span class="token string">"male"</span><span class="token punctuation">,</span><span class="token string">"address"</span>:<span class="token string">"beijing"</span><span class="token punctuation">,</span><span class="token string">"college"</span>:<span class="token string">"xmu"</span>&#125;  <span class="token number">6</span> <span class="token operator">|</span> yak    <span class="token operator">|</span> &#123;<span class="token string">"gender"</span>:<span class="token string">"female"</span><span class="token punctuation">,</span><span class="token string">"address"</span>:<span class="token string">"xiamen"</span><span class="token punctuation">,</span><span class="token string">"college"</span>:<span class="token string">"xmut"</span>&#125;  <span class="token number">7</span> <span class="token operator">|</span> alice  <span class="token operator">|</span> &#123;<span class="token string">"gender"</span>:<span class="token string">"female"</span><span class="token punctuation">,</span><span class="token string">"address"</span>:<span class="token string">"shanghai"</span><span class="token punctuation">,</span><span class="token string">"college"</span>:<span class="token string">"thu"</span>&#125;  <span class="token number">8</span> <span class="token operator">|</span> anita  <span class="token operator">|</span> &#123;<span class="token string">"gender"</span>:<span class="token string">"female"</span><span class="token punctuation">,</span><span class="token string">"address"</span>:<span class="token string">"xiongan"</span><span class="token punctuation">,</span><span class="token string">"college"</span>:<span class="token string">"hku"</span>&#125;<span class="token punctuation">(</span><span class="token number">8</span> 行记录<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询深圳学生的高校分部情况</span><span class="token keyword">select</span>  other::json<span class="token operator">-</span><span class="token operator">>></span><span class="token string">'college'</span> college<span class="token punctuation">,</span>  <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">from</span>  person<span class="token keyword">where</span>  other::json<span class="token operator">-</span><span class="token operator">>></span><span class="token string">'address'</span><span class="token operator">=</span><span class="token string">'shenzhen'</span><span class="token keyword">group</span> <span class="token keyword">by</span>  other::json<span class="token operator">-</span><span class="token operator">>></span><span class="token string">'college'</span><span class="token punctuation">;</span>___________________________  college <span class="token operator">|</span> count  结果可得深圳一共有两个学生，<span class="token comment">--- 在深圳大学和厦门理工学院各一个。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="PostgreSQL常用操作-129-md-“-129-md”"><a href="#PostgreSQL常用操作-129-md-“-129-md”" class="headerlink" title="PostgreSQL常用操作(#129.md “#129.md”)"></a>PostgreSQL常用操作(#129.md “#129.md”)</h3><h2 id="控制台命令"><a href="#控制台命令" class="headerlink" title="控制台命令"></a>控制台命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span>h: <span class="token comment">#查看SQL命令的解释，比如\h select。</span><span class="token punctuation">\</span>?: <span class="token comment">#查看psql命令列表。</span><span class="token punctuation">\</span>l: <span class="token comment">#列出所有数据库。</span><span class="token punctuation">\</span>c <span class="token punctuation">[</span>database_name<span class="token punctuation">]</span>: <span class="token comment">#连接其他数据库。</span><span class="token punctuation">\</span>d: <span class="token comment">#列出当前数据库的所有表格。</span><span class="token punctuation">\</span>d <span class="token punctuation">[</span>table_name<span class="token punctuation">]</span>: <span class="token comment">#列出某一张表格的结构。</span><span class="token punctuation">\</span>du: <span class="token comment">#列出所有用户。</span><span class="token punctuation">\</span>e: <span class="token comment">#打开文本编辑器。</span><span class="token punctuation">\</span>conninfo: <span class="token comment">#列出当前数据库和连接的信息。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><!--more --><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>基本的数据库操作，就是使用一般的SQL语言</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL"># 创建新表CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE);# 插入数据INSERT INTO user_tbl(name, signup_date) VALUES(&#39;张三&#39;, &#39;2013-12-22&#39;);# 选择记录SELECT * FROM user_tbl;# 更新数据UPDATE user_tbl set name &#x3D; &#39;李四&#39; WHERE name &#x3D; &#39;张三&#39;;# 删除记录DELETE FROM user_tbl WHERE name &#x3D; &#39;李四&#39; ;# 添加栏位ALTER TABLE user_tbl ADD email VARCHAR(40);# 更新结构ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL;# 更名栏位ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup;# 删除栏位ALTER TABLE user_tbl DROP COLUMN email;# 表格更名ALTER TABLE user_tbl RENAME TO backup_tbl;# 删除表格DROP TABLE IF EXISTS backup_tbl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="PostgreSQL的介绍与安装-130-md-“-130-md”"><a href="#PostgreSQL的介绍与安装-130-md-“-130-md”" class="headerlink" title="PostgreSQL的介绍与安装(#130.md “#130.md”)"></a>PostgreSQL的介绍与安装(#130.md “#130.md”)</h3><p>由于工作认识了PostgreSQL，在此系统学习一下这个数据库，本文除博主实践所得以外，大量译于 <a href="">官方文档</a></p><h2 id="PostgreSQL是什么"><a href="#PostgreSQL是什么" class="headerlink" title="PostgreSQL是什么"></a>PostgreSQL是什么</h2><blockquote><p>PostgreSQL 是一个基于 <code>POSTGRES, Version 4.2</code> 的对象关系数据库系统（ORDBMS），由加州大学伯克利分校计算机科学系开发。<br>PostgreSQL 是一个开源的数据库，因为自由许可，任何人都可以免费的使用、修改、分发 PostgreSQL 数据库用于任何目的。</p></blockquote><!--more --><p><strong>它支持大部分的SQL标准并提供了许多流行的功能：</strong></p><ol><li>复杂查询（complex queries）</li><li>外键（foreign keys）</li><li>触发器（triggers）</li><li>可更新的视图（updatable views）</li><li>事务完整性（transactional integrity）</li><li>多版本并发控制（multiversion concurrency control）</li></ol><p><strong>用户也可以给PostgreSQL扩展很多东西，比如：</strong></p><ol><li>数据类型（data types）</li><li>函数（functions）</li><li>运算符（operators）</li><li>聚合函数（aggregate functions）</li><li>索引方法（index methods）</li></ol><h2 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h2><h3 id="博主开发环境："><a href="#博主开发环境：" class="headerlink" title="博主开发环境："></a>博主开发环境：</h3><ul><li>系统 ：深度Linux 15.3 桌面版</li><li>PostgreSQL ：9.4</li></ul><h3 id="通过apt-get安装"><a href="#通过apt-get安装" class="headerlink" title="通过apt-get安装"></a>通过apt-get安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">apt-get</span> <span class="token function">install</span> postgresql-9.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>仓库有许多不同的包（包括第三方插件），最常见、最重要的包（根据需要替换版本号）：</p><ol><li>postgresql-client-9.4 - 客户端库和二进制文件</li><li>postgresql-9.4 - 核心数据库服务器</li><li>postgresql-contrib-9.4 - 提供额外的模块</li><li>libpq-dev - C语言前端开发库和头文件</li><li>postgresql-server-dev-9.4 - C语言后端开发库和头文件</li><li>pgadmin3 - pgAdmin III 图形化管理工具</li></ol><p>﻿</p><h3 id="reading-list-131-md-“-131-md”"><a href="#reading-list-131-md-“-131-md”" class="headerlink" title="reading-list(#131.md “#131.md”)"></a>reading-list(#131.md “#131.md”)</h3><p>下面是一些我读过的书</p><!--more --><p>★ ★ ★ ★ ☆ ☆ ☆ ：推荐指数，7星制。此乃余之私见，或显偏薄。</p><h2 id="文学小说"><a href="#文学小说" class="headerlink" title="文学小说"></a>文学小说</h2><ol><li><strong>《棋王 树王 孩子王》</strong> by 阿城  2015年9月  ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《达芬奇密码》</strong> by 丹.布朗   2015年9月 ★ ★ ★ ★ ★ ★ ☆</li><li><strong>《追风筝的人》</strong> by 卡勒德·胡赛尼  2016年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《霍乱时期的爱情》</strong> by 加西亚·马尔克斯  2016年8月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《查令十字街84号》</strong> by 海莲·汉芙  2016年9月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《围城》</strong> by 钱钟书  2017年1月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《一个陌生女人的来信》</strong> by 茨威格  2017年1月 ★ ★ ★ ★ ★ ★ ☆</li><li><strong>《一颗心的沦亡》</strong> by 茨威格  2017年1月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《情感的迷茫》</strong> by 茨威格  2017年1月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《一个女人一生中的二十四个小时》</strong> by 茨威格  2017年1月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《摆渡人》</strong> by 克莱尔·麦克福尔 2019年3月28 ★ ☆ ☆ ☆ ☆ ☆ ☆</li><li><strong>《悟空传》</strong> by 今何在  2016年8月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《岛上书店》</strong> by 加·泽文 2019年4月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《月亮与六便士》</strong> by 毛姆 2019年4月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《活着》</strong> by 余华 2019年5月★ ★ ★ ★ ★ ★ ☆</li><li><strong>《白夜行》</strong> by 东野圭吾 2019年12月 ★ ★ ★ ★ ★ ☆ ☆</li></ol><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><ol><li><strong>《不去会死》</strong> by 石田裕辅 2017年2月 ★ ★ ★ ☆ ☆ ☆ ☆</li></ol><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ol><li><strong>《秦迷·秦始皇的秘密》</strong> by 李开元  2016年3月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《鱼羊野史·第1卷》</strong> by 高晓松  2016年9月 ★ ★ ★ ★ ★ ☆ ☆</li></ol><h2 id="心理学"><a href="#心理学" class="headerlink" title="心理学"></a>心理学</h2><ol><li><strong>《天才在左，疯子在右》</strong> by 高铭  2016年3月 ★ ★ ★ ★ ★ ★ ☆</li></ol><h2 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h2><ol><li><strong>《历代经济变革得失》</strong> by 吴晓波 2017年2月 ★ ★ ★ ★ ★ ★ ☆</li></ol><h2 id="科幻"><a href="#科幻" class="headerlink" title="科幻"></a>科幻</h2><ol><li><strong>《球状闪电》</strong> by 刘慈欣  2016年3月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《三体·“地球往事”三部曲之一》</strong> by 刘慈欣  2016年4月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《流浪地球》</strong> by 刘慈欣 2019年3月 ★ ★ ★ ★ ☆ ☆ ☆</li></ol><h2 id="创业"><a href="#创业" class="headerlink" title="创业"></a>创业</h2><ol><li><strong>《从零到一》</strong> by 彼得·蒂尔 2015年6月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《创业维艰》</strong> by 本·霍洛维茨  2015年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《餐巾纸上的创业课》</strong> by 神田昌典  2016年6月 ★ ★ ★ ★ ☆ ☆ ☆</li></ol><h2 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h2><ol><li><strong>《如何高效学习》</strong> by 斯科特·扬  2017年1月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《DISCover自我探索》</strong> by 李海峰 2017年1月 ★ ★ ★ ★ ★ ★ ☆</li></ol><h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><ol><li><strong>《淘宝技术这十年》</strong> by 子柳  2015年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《写给大家看的设计书》</strong> by Robin Williams 2023年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《黑客与画家》</strong> by 保罗·格雷姆  2023年10月 ★ ★ ★ ★ ★ ☆ ☆</li></ol><h2 id="待读-在读"><a href="#待读-在读" class="headerlink" title="待读&#x2F;在读"></a>待读&#x2F;在读</h2><ol><li><strong>《基督山伯爵》</strong> by 大仲马</li><li><strong>《程序员修炼之道》</strong> by Andrew Hunt &amp; David Thomas</li></ol><p>﻿</p><h3 id="‘基于-nacos-灰度发布-实现减少本地启动微服务数量的实践’-132-md-“-132-md”"><a href="#‘基于-nacos-灰度发布-实现减少本地启动微服务数量的实践’-132-md-“-132-md”" class="headerlink" title="‘基于 nacos&#x2F;灰度发布 实现减少本地启动微服务数量的实践’(#132.md “#132.md”)"></a>‘基于 nacos&#x2F;灰度发布 实现减少本地启动微服务数量的实践’(#132.md “#132.md”)</h3><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>后台框架是基于 spring cloud 的微服务体系, 当开发同学在自己电脑上进行开发工作时, 比如开发订单模块, 除了需要启动订单模块外, 还需要启动网关模块、权限校验模块、公共服务模块等依赖模块, 非常消耗开发同学的本地电脑的资源, 也及其浪费时间.</p><p><img src="/" alt="Spring Cloud"></p><h2 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a>二、解决方案</h2><h3 id="2-1-目标和关键问题"><a href="#2-1-目标和关键问题" class="headerlink" title="2.1 目标和关键问题"></a>2.1 目标和关键问题</h3><p>能不能开发同学本地只需要启动需要开发的模块:订单模块, 其他模块均适用测试环境中正在运行的服务.</p><p>既然要实现的目标有了, 我们就开始研究可行性和关键问题</p><ol><li>开发环境和测试环境要在同一个 nacos 的 namespace 中, 这样才有可能让开发环境调用到测试环境的服务.</li><li>测试环境只能调用测试环境的微服务, 实现和开发环境的服务隔离</li><li>开发同学之间的微服务也要实现服务隔离</li></ol><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title="2.2 思路"></a>2.2 思路</h3><p>既要在同一个 namespace 下, 又要能够实现不同人访问不同的副本, 很容易想到可以利用<code>灰度发布</code>来实现:</p><ol><li>测试环境设置 metadata <code>lemes-env=product</code> 来标识测试环境副本, 用于区分开发环境的微服务测测试环境的微服务</li><li>开发同学本地启动注册开发环境副本, 都会携带唯一IP, 则我们可以通过IP来区分不同开发同学的副本</li></ol><p>假设我们需要开发的 API 的后台服务调用链条如下:</p><p><img src="/" alt="请求调用"></p><p>我们需要开发的 API 为 <code>/addMo</code>, 打算写在 <code>Order</code> 这个微服务里面, 并且他会调用 <code>common</code> 这个微服务的 <code>/getDict</code> 获取一个字典数据, <code>/getDict</code> 是现成的, 不需要开发, 如果是之前的情况, 开发本地至少需要启动5个微服务才能进行调试.</p><p><img src="/" alt="实现效果"></p><h2 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h2><h3 id="3-1-测试环境设置-metadata"><a href="#3-1-测试环境设置-metadata" class="headerlink" title="3.1 测试环境设置 metadata"></a>3.1 测试环境设置 metadata</h3><p>由于测试环境都是通过容器部署的, 那么启动方式就是下面容器中的 <code>CMD</code>, 我们在其中加入 <code>-Dspring.cloud.nacos.discovery.metadata.lemes-env=product</code>, 用于区分开发环境的微服务测测试环境的微服务</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile"># 说明：Dockerfile 过程分为两部分。第一次用来解压 jar 包，并不会在目标镜像内产生 history&#x2F;layer。第二部分将解压内容分 layer 拷贝到目标镜像内# 目的：更新镜像时，只需要传输代码部分，依赖没有变动则不更新，节省发包时的网络传输量# 原理：在第二部分中，每次 copy 就会在目标镜像内产生一层 layer，将依赖和代码分开，#      绝大部分更新都不会动到依赖，所以只需更新代码几十k左右的代码层即可FROM 10.176.66.20:5000&#x2F;library&#x2F;amazoncorretto:11.0.11  as builderWORKDIR &#x2F;buildARG ARTIFACT_IDCOPY target&#x2F;$&#123;ARTIFACT_ID&#125;.jar app.jarRUN java -Djarmode&#x3D;layertools -jar app.jar extract &amp;&amp; rm app.jarFROM 10.176.66.20:5000&#x2F;library&#x2F;amazoncorretto:11.0.11LABEL maintainer&#x3D;&quot;yangyj13@lenovo.com&quot;WORKDIR &#x2F;dataARG ARTIFACT_IDENV ARTIFACT_ID $&#123;ARTIFACT_ID&#125;# 依赖COPY --from&#x3D;builder &#x2F;build&#x2F;dependencies&#x2F; .&#x2F;COPY --from&#x3D;builder &#x2F;build&#x2F;snapshot-dependencies&#x2F; .&#x2F;COPY --from&#x3D;builder &#x2F;build&#x2F;spring-boot-loader&#x2F; .&#x2F;# 应用代码COPY --from&#x3D;builder &#x2F;build&#x2F;application&#x2F; .&#x2F;# 容器运行时启动命令CMD echo &quot;NACOS_ADDR: $&#123;NACOS_ADDR&#125;&quot;; \    echo &quot;JAVA_OPTS: $&#123;JAVA_OPTS&#125;&quot;; \    echo &quot;TZ: $&#123;TZ&#125;&quot;; \    echo &quot;ARTIFACT_ID: $&#123;ARTIFACT_ID&#125;&quot;; \    # 去除了 server 的应用名    REAL_APP_NAME&#x3D;$&#123;ARTIFACT_ID&#x2F;&#x2F;-server&#x2F;&#125;; \    echo &quot;REAL_APP_NAME: $&#123;REAL_APP_NAME&#125;&quot;; \    # 获取当前时间    now&#x3D;&#96;date +%F+%T+%Z&#96;; \    # java 启动命令    java $JAVA_OPTS \    -Dtingyun.app_name&#x3D;$&#123;REAL_APP_NAME&#125;-$&#123;TINGYUN_SUFFIX&#125; \    -Dspring.cloud.nacos.discovery.metadata.lemes-env&#x3D;product \    -Dspring.cloud.nacos.discovery.metadata.startup-time&#x3D;$&#123;now&#125; \    -Dspring.cloud.nacos.discovery.server-addr&#x3D;$&#123;NACOS_ADDR&#125; \    -Dspring.cloud.nacos.discovery.group&#x3D;$&#123;NACOS_GROUP&#125; \    -Dspring.cloud.nacos.config.namespace&#x3D;$&#123;NACOS_NAMESPACE&#125; \    -Dspring.cloud.nacos.discovery.namespace&#x3D;$&#123;NACOS_NAMESPACE&#125; \    -Dspring.cloud.nacos.discovery.ip&#x3D;$&#123;HOST_IP&#125; \    org.springframework.boot.loader.JarLauncher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/" alt="set nacos metadata"></p><h3 id="3-2-开发前端传递开启智能连接"><a href="#3-2-开发前端传递开启智能连接" class="headerlink" title="3.2 开发前端传递开启智能连接"></a>3.2 开发前端传递开启智能连接</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> devIp <span class="token operator">=</span> <span class="token function">getLocalIP</span><span class="token punctuation">(</span><span class="token string">'10.'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'/lemes-api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">'^/lemes-api'</span><span class="token operator">:</span> <span class="token string">'/'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">'dev-ip'</span><span class="token operator">:</span> devIp<span class="token punctuation">,</span>          <span class="token string-property property">'dev-sc'</span><span class="token operator">:</span> <span class="token string">'true'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// 获取本机 IP</span><span class="token keyword">function</span> <span class="token function">getLocalIP</span><span class="token punctuation">(</span><span class="token parameter">prefix</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> excludeNets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'docker'</span><span class="token punctuation">,</span> <span class="token string">'cni'</span><span class="token punctuation">,</span> <span class="token string">'flannel'</span><span class="token punctuation">,</span> <span class="token string">'vi'</span><span class="token punctuation">,</span> <span class="token string">'ve'</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> osType <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 系统类型</span>  <span class="token keyword">const</span> netInfo <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">networkInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 网络信息</span>  <span class="token keyword">const</span> ipList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> netInfoKey <span class="token keyword">in</span> netInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>excludeNets<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> netInfoKey<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> netInfo<span class="token punctuation">[</span>netInfoKey<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> net <span class="token operator">=</span> netInfo<span class="token punctuation">[</span>netInfoKey<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>net<span class="token punctuation">.</span>family <span class="token operator">===</span> <span class="token string">'IPv4'</span> <span class="token operator">&amp;&amp;</span> net<span class="token punctuation">.</span>address<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ipList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>address<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ipList<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>osType <span class="token operator">===</span> <span class="token string">'Windows_NT'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> dev <span class="token keyword">in</span> netInfo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// win7的网络信息中显示为本地连接，win10显示为以太网</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">===</span> <span class="token string">'本地连接'</span> <span class="token operator">||</span> dev <span class="token operator">===</span> <span class="token string">'以太网'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> netInfo<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>netInfo<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>family <span class="token operator">===</span> <span class="token string">'IPv4'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              ipList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>netInfo<span class="token punctuation">[</span>dev<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>osType <span class="token operator">===</span> <span class="token string">'Linux'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ipList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>netInfo<span class="token punctuation">.</span>eth0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>osType <span class="token operator">===</span> <span class="token string">'Darwin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      ipList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>netInfo<span class="token punctuation">.</span>en0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>address<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'识别到的网卡信息'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ipList<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> ipList<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> ipList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-后端灰度处理"><a href="#3-3-后端灰度处理" class="headerlink" title="3.3 后端灰度处理"></a>3.3 后端灰度处理</h3><p>不论是 <code>gateway</code> 还是 <code>openfeign</code> 都是通过 spring 的 <code>loadbalancer</code> 进行应用选择的, 那我们通过实现或者继承 <code>ReactorServiceInstanceLoadBalancer</code> 来重写选择的过程.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Log4j2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LemesLoadBalancer</span> <span class="token keyword">implements</span> <span class="token class-name">ReactorServiceInstanceLoadBalancer</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">NacosDiscoveryProperties</span> nacosDiscoveryProperties<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> position<span class="token punctuation">;</span>    <span class="token comment">// loadbalancer 提供的访问当前服务的名称</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> serviceId<span class="token punctuation">;</span>    <span class="token comment">// loadbalancer 提供的访问的服务列表</span>    <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">></span></span> serviceInstanceListSupplierProvider<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LemesLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">></span></span> serviceInstanceListSupplierProvider<span class="token punctuation">,</span> <span class="token class-name">String</span> serviceId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>serviceInstanceListSupplierProvider<span class="token punctuation">,</span> serviceId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">LemesLoadBalancer</span><span class="token punctuation">(</span><span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstanceListSupplier</span><span class="token punctuation">></span></span> serviceInstanceListSupplierProvider<span class="token punctuation">,</span>                             <span class="token class-name">String</span> serviceId<span class="token punctuation">,</span> <span class="token keyword">int</span> seedPosition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serviceId <span class="token operator">=</span> serviceId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serviceInstanceListSupplierProvider <span class="token operator">=</span> serviceInstanceListSupplierProvider<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span>seedPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Response</span><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServiceInstanceListSupplier</span> supplier <span class="token operator">=</span> serviceInstanceListSupplierProvider                <span class="token punctuation">.</span><span class="token function">getIfAvailable</span><span class="token punctuation">(</span><span class="token class-name">NoopServiceInstanceListSupplier</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RequestDataContext</span> context <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RequestDataContext</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">RequestData</span> clientRequest <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClientRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>serviceInstances <span class="token operator">-></span> <span class="token function">processInstanceResponse</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span>supplier<span class="token punctuation">,</span> serviceInstances<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> <span class="token function">processInstanceResponse</span><span class="token punctuation">(</span><span class="token class-name">RequestData</span> clientRequest<span class="token punctuation">,</span><span class="token class-name">ServiceInstanceListSupplier</span> supplier<span class="token punctuation">,</span>                                                              <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> serviceInstances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> serviceInstanceResponse <span class="token operator">=</span> <span class="token function">getInstanceResponse</span><span class="token punctuation">(</span>clientRequest<span class="token punctuation">,</span>serviceInstances<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>supplier <span class="token keyword">instanceof</span> <span class="token class-name">SelectedInstanceCallback</span> <span class="token operator">&amp;&amp;</span> serviceInstanceResponse<span class="token punctuation">.</span><span class="token function">hasServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SelectedInstanceCallback</span><span class="token punctuation">)</span> supplier<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectedServiceInstance</span><span class="token punctuation">(</span>serviceInstanceResponse<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> serviceInstanceResponse<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Response</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> <span class="token function">getInstanceResponse</span><span class="token punctuation">(</span><span class="token class-name">RequestData</span> clientRequest<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> instances<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instances<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"No servers available for service: "</span> <span class="token operator">+</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmptyResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 筛选后的服务列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServiceInstance</span><span class="token punctuation">></span></span> filteredInstances<span class="token punctuation">;</span>        <span class="token class-name">String</span> devSmartConnect <span class="token operator">=</span> clientRequest<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">DEV_SMART_CONNECT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>devSmartConnect<span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> devIp <span class="token operator">=</span> clientRequest<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">DEV_IP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// devIp 为空，为异常情况不处理，返回空实例集合</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>devIp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"devIp is NULL,No servers available for service: "</span> <span class="token operator">+</span> serviceId<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EmptyResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 智能连接: 如果本地启动了服务，则优先访问本地服务，如果本地没有启动，则访问测试环境服务</span>            <span class="token comment">// 优先调用本地自有服务</span>            filteredInstances <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>devIp<span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果本地服务没有开启，则调用生产/测试服务</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>filteredInstances<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                filteredInstances <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">LEMES_ENV_PRODUCT</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lemes-env"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 解决开发环境无法访问 k8s 集群内 ip 的问题</span>                <span class="token class-name">String</span> oneNacosIp <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getServerAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">":[\\s\\S]*"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                filteredInstances<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">NacosServiceInstance</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NacosServiceInstance</span><span class="token punctuation">)</span> item<span class="token punctuation">;</span>                    <span class="token comment">// cloud 以 80 端口启动，认为是 k8s 内的应用</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        instance<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span>oneNacosIp<span class="token punctuation">)</span><span class="token punctuation">;</span>                        instance<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 不是智能访问，则只访问一个环境</span>            <span class="token comment">// 当前服务 ip</span>            <span class="token class-name">String</span> currentIp <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> lemesEnv <span class="token operator">=</span> nacosDiscoveryProperties<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lemes-env"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            filteredInstances <span class="token operator">=</span> instances<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-></span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lemesEnv<span class="token punctuation">,</span> <span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">LEMES_ENV_PRODUCT</span><span class="token punctuation">)</span>                            <span class="token comment">// 访问测试环境</span>                            <span class="token operator">?</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span><span class="token constant">LEMES_ENV_PRODUCT</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lemes-env"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token comment">// 访问开发环境</span>                            <span class="token operator">:</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentIp<span class="token punctuation">,</span> item<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredInstances<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"No oneself servers and beta servers available for service: "</span> <span class="token operator">+</span> serviceId <span class="token operator">+</span> <span class="token string">", use other instances"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 找不到自己注册IP对应的服务和测试服务，则用nacos中其它的服务</span>            filteredInstances <span class="token operator">=</span> instances<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最终的返回的 serviceInstance</span>        <span class="token class-name">ServiceInstance</span> instance <span class="token operator">=</span> filteredInstances<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos <span class="token operator">%</span> filteredInstances<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultResponse</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="正则表达式详解-133-md-“-133-md”"><a href="#正则表达式详解-133-md-“-133-md”" class="headerlink" title="正则表达式详解(#133.md “#133.md”)"></a>正则表达式详解(#133.md “#133.md”)</h3><h2 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h2><blockquote><p>本文旨在更加简洁清晰的展现正则表达式， <code>第一部分</code> 是对正则表达式语法的简洁介绍， <code>第二部分</code> 则是常用正则表达式的示例。</p></blockquote><!--more --><h2 id="简介及语法"><a href="#简介及语法" class="headerlink" title="简介及语法"></a>简介及语法</h2><h3 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么"></a>正则表达式是什么</h3><blockquote><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p></blockquote><blockquote><p>正则表达式语言由两种基本字符类型组成：原义（正常）<code>文本字符</code>和<code>元字符</code>。元字符使正则表达式具有处理能力。</p></blockquote><h3 id="常用元字符"><a href="#常用元字符" class="headerlink" title="常用元字符"></a>常用元字符</h3><table><thead><tr><th align="left">元字符</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>.</code></td><td align="left">匹配除换行符以外的任意字符</td></tr><tr><td align="left"><code>\w</code></td><td align="left">匹配字母或数字或下划线或汉字</td></tr><tr><td align="left"><code>\s</code></td><td align="left">匹配任意的空白符，包括空格，制表符（Tab），换行符，中文全角空格等）</td></tr><tr><td align="left"><code>\d</code></td><td align="left">匹配数字</td></tr><tr><td align="left"><code>\b</code></td><td align="left">匹配单词的开始或结束</td></tr><tr><td align="left"><code>^</code></td><td align="left">匹配字符串的开始</td></tr><tr><td align="left"><code>$</code></td><td align="left">匹配字符串的结束</td></tr></tbody></table><h3 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h3><blockquote><p>如果你想查找元字符本身的话，比如你查找 <code>.</code> ,或者 <code>*</code> ,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用 <code>\</code> 来取消这些字符的特殊意义。因此，你应该使用 <code>\.</code> 和 <code>\*</code> 。当然，要查找 <code>\</code> 本身，你也得用 <code>\\</code> .<br>例如： <code>deerchao\.net</code> 匹配 <strong>deerchao.net</strong>，<code>C:\\Windows</code> 匹配 <strong>C:\Windows</strong> 。</p></blockquote><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><blockquote><p>你已经看过了前面的 <code>*</code> , <code>+</code> , <code>&#123;2&#125;</code> , <code>&#123;5,12&#125;</code> 这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)</p></blockquote><table><thead><tr><th align="left">元字符</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>*</code></td><td align="left">重复零次或更多次</td></tr><tr><td align="left"><code>+</code></td><td align="left">重复一次或更多次</td></tr><tr><td align="left"><code>?</code></td><td align="left">重复零次或一次</td></tr><tr><td align="left"><code>&#123;n&#125;</code></td><td align="left">重复n次</td></tr><tr><td align="left"><code>&#123;n,&#125;</code></td><td align="left">重复n次或更多次</td></tr><tr><td align="left"><code>&#123;n,m&#125;</code></td><td align="left">重复n到m次</td></tr></tbody></table><blockquote><p>下面是一些重复的示例：<br><code>Windows\d+</code> 匹配Windows后面跟1个或更多数字<br><code>^\w+</code> 匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</p></blockquote><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><blockquote><p>要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？<br>很简单，你只需要在方括号里列出它们就行了，像 <code>[aeiou]</code> 就匹配任何一个英文元音字母， <code>[.?!]</code> 匹配标点符号(.或?或!)。<br>我们也可以轻松地指定一个字符范围，像 <code>[0-9]</code> 代表的含意与 <code>\d</code> 就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于 <code>\w</code> （如果只考虑英文的话）。<br>下面是一个更复杂的表达式： <code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code> 。<br>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。</p></blockquote><h3 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h3><blockquote><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。<br>示例： <code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code><br>这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。<br>示例： <code>\d&#123;5&#125;-\d&#123;4&#125;|\d&#123;5&#125;</code><br>这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个示例是因为它能说明一个问题：<strong>使用分枝条件时，要注意各个条件的顺序</strong>。如果你把它改成 <code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code> 的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p></blockquote><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><blockquote><p>重复单个字符，直接在字符后面加上限定符就行了。但如果想要重复多个字符，我们可以用小括号来指定 <strong>子表达式</strong>(也叫作<strong>分组</strong>)。<br><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code> 是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它： <code>\d&#123;1,3&#125;</code> 匹配1到3位的数字， <code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code> 匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字 <code>(\d&#123;1,3&#125;)</code> 。<br>不幸的是，它也将匹配 <em>256.300.888.999</em> 这种不可能存在的IP地址。我们只能使用冗长的分组，选择，字符串来描述一个 <strong>正确的IP地址：</strong> <code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</code></p></blockquote><h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><blockquote><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p></blockquote><table><thead><tr><th align="left">元字符</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>\W</code></td><td align="left">匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td align="left"><code>\S</code></td><td align="left">匹配任意不是空白符的字符</td></tr><tr><td align="left"><code>\D</code></td><td align="left">匹配任意非数字的字符</td></tr><tr><td align="left"><code>\B</code></td><td align="left">匹配不是单词开头或结束的位置</td></tr><tr><td align="left"><code>[^x]</code></td><td align="left">匹配除了x以外的任意字符</td></tr><tr><td align="left"><code>[^aeiou]</code></td><td align="left">匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><blockquote><p>示例： <code>\S+</code> 匹配不包含空白符的字符串。 <code>&lt;a[^&gt;]+&gt;</code> 匹配用尖括号括起来的以a开头的字符串。</p></blockquote><h3 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h3><blockquote><p>使用小括号指定一个子表达式后，<strong>匹配这个子表达式</strong> 的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个 <strong>组号</strong>，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。<br> <strong>后向引用</strong> 用于重复搜索前面某个分组匹配的文本。<br>示例： <code>\b(\w+)\b\s+\1\b</code> 可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字 <code>\b(\w+)\b</code> ，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符<code>\s+</code>，最后是分组1中捕获的内容（也就是前面匹配的那个单词） <code>\1</code> 。<br>你也可以自己指定子表达式的 <strong>组名</strong>.要指定一个子表达式的组名，请使用这样的语法： <code>(?&lt;Word&gt;\w+)</code> (或者把尖括号换成 <code>&#39;</code> 也行： <code>(?&#39;Word&#39;\w+))</code>,这样就把<code>\w+</code>的组名指定为 <strong>Word</strong> 了。要反向引用这个分组捕获的内容，你可以使用 <code>\k&lt;Word&gt;</code> ,所以上一个示例也可以写成这样： <code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code> 。</p></blockquote><h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><blockquote><p>接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为 <strong>零宽断言</strong>。<br><code>(?=exp)</code> 也叫 <strong>零宽度正预测先行断言</strong>，它断言自身出现的位置的后面能匹配表达式exp。比如<code>\b\w+(?=ing\b)</code>，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找 <em>I’m singing while you’re dancing.</em> 时，它会匹配 sing 和 danc 。<br><code>(?&lt;=exp)</code> 也叫 <strong>零宽度正回顾后发断言</strong> ，它断言自身出现的位置的前面能匹配表达式exp。比如 <code>(?&lt;=\bre)\w+\b</code> 会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找 <em>reading a book</em> 时，它匹配ading。<br>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分： <code>((?&lt;=\d)\d&#123;3&#125;)+\b</code> ，用它对1234567890进行查找时结果是234567890。<br>下面这个示例同时使用了这两种断言： <code>(?&lt;=\s)\d+(?=\s)</code> 匹配以空白符间隔的数字( <strong>再次强调，不包括这些空白符</strong> )。</p></blockquote><h3 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h3><blockquote><p>前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：<br><code>\b\w*q[^u]\w*\b</code> 匹配 <em>包含后面不是字母u的字母q的单词</em> 。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的 <code>\w*\b</code> 将会匹配下一个单词，于是 <code>\b\w*q[^u]\w*\b</code> 就能匹配整个Iraq fighting。<strong>负向零宽断言</strong> 能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题： <code>\b\w*q(?!u)\w*\b</code> 。<br><strong>零宽度负预测先行断言</strong>(?!exp)，断言此位置的后面不能匹配表达式exp。例如： <code>\d&#123;3&#125;(?!\d)</code> 匹配三位数字，而且这三位数字的后面不能是数字； <code>\b((?!abc)\w)+\b</code> 匹配不包含连续字符串abc的单词。<br>同理，我们可以用(?&lt;!exp),*<em>零宽度负回顾后发断言来断言** 此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。<br>一个更复杂的示例：&#96;(?&lt;&#x3D;&lt;(\w+)&gt;).</em>(?&#x3D;&lt;/\1&gt;)<code> 匹配不包含属性的简单HTML标签内里的内容。</code>(?&lt;&#x3D;&lt;(\w+)&gt;)<code>指定了这样的 **前缀**：被尖括号括起来的单词(比如可能是&lt;b&gt;)，然后是.</code>*<code>(任意的字符串),最后是一个 **后缀**</code>(?&#x3D;&lt;/\1&gt;)<code>。注意后缀里的 \/ ，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的 </code>(\w+)&#96; 匹配的内容，这样如果前缀实际上是<b>的话，后缀就是</b>了。整个表达式匹配的是<b>和</b>之间的内容(再次提醒，不包括前缀和后缀本身)。</p></blockquote><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><blockquote><p>小括号的另一种用途是通过语法(?#comment)来包含注释。例如：<code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code>。<br>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：<br>      <code>(?&lt;=</code>    # 断言要匹配的文本的前缀<br>      <code>&lt;(\w+)&gt;</code> # 查找尖括号括起来的字母或数字(即HTML&#x2F;XML标签)<br>      <code>)</code>       # 前缀结束<br>      <code>.*</code>      # 匹配任意文本<br>      <code>(?=</code>     # 断言要匹配的文本的后缀<br>      <code>&lt;\/\1&gt;</code>  # 查找尖括号括起来的内容：前面是一个”&#x2F;“，后面是先前捕获的标签<br>      <code>)</code>       # 后缀结束</p></blockquote><h3 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h3><blockquote><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配 <strong>尽可能多</strong> 的字符。以这个表达式为例： <code>a.*b</code> ，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为 <strong>贪婪匹配</strong>。<br>有时，我们更需要 <strong>懒惰匹配</strong>，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号 ? 。这样 <code>.*?</code> 就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。<br>示例： <code>a.*?b</code> 匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。</p></blockquote><table><thead><tr><th align="left">语法</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>*?</code></td><td align="left">重复任意次，但尽可能少重复</td></tr><tr><td align="left"><code>+?</code></td><td align="left">重复1次或更多次，但尽可能少重复</td></tr><tr><td align="left"><code>??</code></td><td align="left">重复0次或1次，但尽可能少重复</td></tr><tr><td align="left"><code>&#123;n,m&#125;?</code></td><td align="left">重复n到m次，但尽可能少重复</td></tr><tr><td align="left"><code>&#123;n,&#125;?</code></td><td align="left">重复n次以上，但尽可能少重复</td></tr></tbody></table><h3 id="其他元字符"><a href="#其他元字符" class="headerlink" title="其他元字符"></a>其他元字符</h3><table><thead><tr><th align="left">元字符</th><th align="left">做什么用</th></tr></thead><tbody><tr><td align="left"><code>\a</code></td><td align="left">报警字符(打印它的效果是电脑嘀一声)</td></tr><tr><td align="left"><code>\b</code></td><td align="left">通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td align="left"><code>\t</code></td><td align="left">制表符，Tab</td></tr><tr><td align="left"><code>\r</code></td><td align="left">回车</td></tr><tr><td align="left"><code>\v</code></td><td align="left">竖向制表符</td></tr><tr><td align="left"><code>\f</code></td><td align="left">换页符</td></tr><tr><td align="left"><code>\n</code></td><td align="left">换行符</td></tr><tr><td align="left"><code>\e</code></td><td align="left">Escape</td></tr><tr><td align="left"><code>\0nn</code></td><td align="left">ASCII代码中八进制代码为nn的字符</td></tr><tr><td align="left"><code>\xnn</code></td><td align="left">ASCII代码中十六进制代码为nn的字符</td></tr><tr><td align="left"><code>\unnnn</code></td><td align="left">Unicode代码中十六进制代码为nnnn的字符</td></tr><tr><td align="left"><code>\cN</code></td><td align="left">ASCII控制字符。比如\cC代表Ctrl+C</td></tr><tr><td align="left"><code>\A</code></td><td align="left">字符串开头(类似^，但不受处理多行选项的影响)</td></tr><tr><td align="left"><code>\Z</code></td><td align="left">字符串结尾或行尾(不受处理多行选项的影响)</td></tr><tr><td align="left"><code>\z</code></td><td align="left">字符串结尾(类似$，但不受处理多行选项的影响)</td></tr><tr><td align="left"><code>\G</code></td><td align="left">当前搜索的开头</td></tr><tr><td align="left"><code>\p&#123;name&#125;</code></td><td align="left">Unicode中命名为name的字符类，例如\p{IsGreek}</td></tr><tr><td align="left"><code>(?&gt;exp)</code></td><td align="left">贪婪子表达式</td></tr><tr><td align="left"><code>(?&lt;x&gt;-&lt;y&gt;exp)</code></td><td align="left">平衡组</td></tr><tr><td align="left"><code>(?im-nsx:exp)</code></td><td align="left">在子表达式exp中改变处理选项</td></tr><tr><td align="left"><code>(?im-nsx)</code></td><td align="left">为表达式后面的部分改变处理选项</td></tr><tr><td align="left"><a href="%60(?(exp)yes%7Cno)%60">1</a></td><td align="left">把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</td></tr><tr><td align="left"><code>(?(exp)yes)</code></td><td align="left">同上，只是使用空表达式作为no</td></tr><tr><td align="left"><a href="%60(?(name)yes%7Cno)%60">2</a></td><td align="left">如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</td></tr><tr><td align="left"><code>(?(name)yes)</code></td><td align="left">同上，只是使用空表达式作为no</td></tr></tbody></table><blockquote></blockquote><h2 id="正则表达式常用实例"><a href="#正则表达式常用实例" class="headerlink" title="正则表达式常用实例"></a>正则表达式常用实例</h2><h3 id="账号-密码"><a href="#账号-密码" class="headerlink" title="账号&#x2F;密码"></a>账号&#x2F;密码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">帐号是否合法<span class="token punctuation">(</span>字母开头，允许<span class="token number">5</span><span class="token operator">-</span><span class="token number">16</span>字节，允许字母数字下划线<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$"</span>密码<span class="token punctuation">(</span>以字母开头，长度在<span class="token number">6</span><span class="token operator">~</span><span class="token number">18</span>之间，只能包含字母、数字和下划线<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"^[a-zA-Z]\w&#123;5,17&#125;$"</span>强密码<span class="token punctuation">(</span>必须包含大小写字母和数字的组合，不能使用特殊字符，长度在<span class="token number">8</span><span class="token operator">-</span><span class="token number">10</span>之间<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="字符串校验"><a href="#字符串校验" class="headerlink" title="字符串校验"></a>字符串校验</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">汉字 <span class="token operator">=</span> <span class="token string">"^[\u4e00-\u9fa5]&#123;0,&#125;$"</span><span class="token punctuation">;</span>英文和数字 <span class="token operator">=</span> <span class="token string">"^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$"</span><span class="token punctuation">;</span>长度为<span class="token number">3</span><span class="token operator">-</span><span class="token number">20</span>的所有字符 <span class="token operator">=</span> <span class="token string">"^.&#123;3,20&#125;$"</span>；由<span class="token number">26</span>个英文字母组成的字符串 <span class="token operator">=</span> <span class="token string">"^[A-Za-z]+$"</span>；由<span class="token number">26</span>个大写英文字母组成的字符串 <span class="token operator">=</span> <span class="token string">"^[A-Z]+$"</span>；由<span class="token number">26</span>个小写英文字母组成的字符串 <span class="token operator">=</span> <span class="token string">"^[a-z]+$"</span>；由数字和<span class="token number">26</span>个英文字母组成的字符串 <span class="token operator">=</span> <span class="token string">"^[A-Za-z0-9]+$"</span>；由数字、<span class="token number">26</span>个英文字母或者下划线组成的字符串 <span class="token operator">=</span> <span class="token string">"^\w+$ 或 ^\w&#123;3,20&#125;$"</span>；中文、英文、数字包括下划线 <span class="token operator">=</span> <span class="token string">"^[\u4E00-\u9FA5A-Za-z0-9_]+$"</span>；中文、英文、数字但不包括下划线等符号 <span class="token operator">=</span> <span class="token string">"^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$"</span>；禁止输入含有<span class="token operator">~</span>的字符 <span class="token operator">=</span> <span class="token string">"[^~\x22]+"</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 手机号码 * 移动：134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188 * 联通：130,131,132,145,152,155,156,1709,171,176,185,186 * 电信：133,134,153,1700,177,180,181,189 */</span><span class="token class-name">String</span> <span class="token constant">MOBILE</span> <span class="token operator">=</span> <span class="token string">"^1(3[0-9]|4[57]|5[0-35-9]|7[01678]|8[0-9])\\d&#123;8&#125;$"</span><span class="token punctuation">;</span><span class="token comment">/** * 中国移动：China Mobile * 134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188 */</span><span class="token class-name">String</span> <span class="token constant">CM</span> <span class="token operator">=</span> <span class="token string">"^1(3[4-9]|4[7]|5[0-27-9]|7[0]|7[8]|8[2-478])\\d&#123;8&#125;$"</span><span class="token punctuation">;</span><span class="token comment">/** * 中国联通：China Unicom * 130,131,132,145,152,155,156,1709,171,176,185,186 */</span><span class="token class-name">String</span> <span class="token constant">CU</span> <span class="token operator">=</span> <span class="token string">"^1(3[0-2]|4[5]|5[56]|709|7[1]|7[6]|8[56])\\d&#123;8&#125;$"</span><span class="token punctuation">;</span><span class="token comment">/** * 中国电信：China Telecom * 133,134,153,1700,177,180,181,189 */</span><span class="token class-name">String</span> <span class="token constant">CT</span> <span class="token operator">=</span> <span class="token string">"^1(3[34]|53|77|700|8[019])\\d&#123;8&#125;$"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token constant">IPREGEXP</span> <span class="token operator">=</span> <span class="token string">"((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="EMAIL地址"><a href="#EMAIL地址" class="headerlink" title="EMAIL地址"></a>EMAIL地址</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Email</span>地址 <span class="token operator">=</span> <span class="token string">"^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">域名 <span class="token operator">=</span> <span class="token string">"[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?"</span><span class="token punctuation">;</span><span class="token class-name">InternetURL</span> <span class="token operator">=</span> <span class="token string">"[a-zA-z]+://[^\s]* 或 ([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="身份证"><a href="#身份证" class="headerlink" title="身份证"></a>身份证</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">身份证号<span class="token punctuation">(</span><span class="token number">15</span>位、<span class="token number">18</span>位数字<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"^\d&#123;15&#125;|\d&#123;18&#125;$"</span>短身份证号码<span class="token punctuation">(</span>数字、字母x结尾<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">"^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="数字类校验"><a href="#数字类校验" class="headerlink" title="数字类校验"></a>数字类校验</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">数字 <span class="token operator">=</span> <span class="token string">"^[0-9]*$"</span><span class="token punctuation">;</span>n位的数字 <span class="token operator">=</span> <span class="token string">"^\d&#123;n&#125;$"</span><span class="token punctuation">;</span>至少n位的数字 <span class="token operator">=</span> <span class="token string">"^\d&#123;n,&#125;$"</span><span class="token punctuation">;</span>m<span class="token operator">-</span>n位的数字 <span class="token operator">=</span> <span class="token string">"^\d&#123;m,n&#125;$"</span><span class="token punctuation">;</span>零和非零开头的数字 <span class="token operator">=</span> <span class="token string">"^(0|[1-9][0-9]*)$"</span><span class="token punctuation">;</span>非零开头的最多带两位小数的数字 <span class="token operator">=</span> <span class="token string">"^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$"</span><span class="token punctuation">;</span>带<span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span>位小数的正数或负数 <span class="token operator">=</span> <span class="token string">"^(\-)?\d+(\.\d&#123;1,2&#125;)?$"</span><span class="token punctuation">;</span>正数、负数、和小数 <span class="token operator">=</span> <span class="token string">"^(\-|\+)?\d+(\.\d+)?$"</span><span class="token punctuation">;</span>有两位小数的正实数 <span class="token operator">=</span> <span class="token string">"^[0-9]+(.[0-9]&#123;2&#125;)?$"</span><span class="token punctuation">;</span>有<span class="token number">1</span><span class="token operator">~</span><span class="token number">3</span>位小数的正实数 <span class="token operator">=</span> <span class="token string">"^[0-9]+(.[0-9]&#123;1,3&#125;)?$"</span><span class="token punctuation">;</span>非零的正整数 <span class="token operator">=</span> <span class="token string">"^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$"</span><span class="token punctuation">;</span>非零的负整数 <span class="token operator">=</span> <span class="token string">"^\-[1-9][]0-9"</span><span class="token operator">*</span>$<span class="token string">" 或 "</span><span class="token operator">^</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span>\d<span class="token operator">*</span>$"<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="搭建Git服务器-134-md-“-134-md”"><a href="#搭建Git服务器-134-md-“-134-md”" class="headerlink" title="搭建Git服务器(#134.md “#134.md”)"></a>搭建Git服务器(#134.md “#134.md”)</h3><p>最近由于准备在公司的服务器上面搭建静态博客（Hexo），然后需要先搭建一个git服务器作为转接，整个过程看似顺利，十几分钟就搭建完成，不过最后在验证这块卡了两个小时，在此记录下来，供准备搭建git服务器的新手小伙伴们借鉴。</p><!--more --><h2 id="搭建git服务器"><a href="#搭建git服务器" class="headerlink" title="搭建git服务器"></a>搭建git服务器</h2><p>通过ssh链接到服务器，开始进行操作</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在服务器上安装 git</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>创建 git 用户，用来运行git服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> adduser <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>创建证书，免密码登录：<br>收集所有需要登录的用户的公钥（<code>id_rsa.pub</code>）文件，把所有公钥导入到 <code>/home/git/.ssh/authorized_keys</code> 文件内，一行一个。<br>如果个人的git中的公钥已经连接了其他服务器如：github，可以参考 </p><blockquote><p><strong>注意：一定要通过下面的命令将该文件其他用户的所有权限移除，否则会出现文章尾部问题</strong></p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token number">600</span> authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>初始化git仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init <span class="token parameter variable">--bare</span> test.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git创建一个裸仓库，裸仓库没有工作区，因为服务器上的git仓库纯粹为了共享，所有不能让用户直接登录到服务器上去改工作区，并且服务器的git仓库通常以 <code>.git</code> 结尾。然后，修改owner改为git：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> git:git test.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>禁用shell登录：<br>处于安全的考虑，第二步创建的git用户不允许登录shell，这可以通过编辑 <code>/etc/passwd</code> 文件完成。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git:x:1003:1003::/home/git:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git:x:1003:1003::/home/git:/usr/bin/git-shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p><h3 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h3><p>克隆远程仓库：<br>现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone git@server:/home/git/test.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果服务器的ssh端口不是默认的22的话，比如说6789，可以这样写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h2><p>本来根据文档，根据广大猿友的经验，我的搭建之路已经完成了，然后最后一步出现了问题。每次跟服务器进行交互(clone,pull,push)，都让我输入git的密码，也就是说，我配置的ssh没有生效。然后就开始到处找原因，重新生成rsa，提升authorized_keys权限，重新创建服务器git账户，重新。。。。。</p><p>翻遍了 Stack Overflow 和 segmentfault ,两个小时过去了，问题仍然没有进展，这么简单的东西，问题到底出在哪里。</p><p>就在心灰意冷，准备放弃的时候，不知道是哪里来的灵感，准备把 authorized_keys 文件的其他用户的权限删掉，然后就能用了，后就能用了，就能用了，能用了，用了，了～～～～，命令如下，不想多说话，我想静静。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">chmod</span> <span class="token number">600</span> authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="shell速查表-135-md-“-135-md”"><a href="#shell速查表-135-md-“-135-md”" class="headerlink" title="shell速查表(#135.md “#135.md”)"></a>shell速查表(#135.md “#135.md”)</h3><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">msg</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token builtin class-name">echo</span> <span class="token variable">$msg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>变量名的命名须遵循如下规则：</strong></p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul></blockquote><h2 id="2-传参"><a href="#2-传参" class="headerlink" title="2. 传参"></a>2. 传参</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"执行的文件名：<span class="token variable">$0</span>"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"第一个参数为：<span class="token variable">$1</span>"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"第二个参数为：<span class="token variable">$2</span>"</span><span class="token punctuation">;</span><span class="token builtin class-name">echo</span> <span class="token string">"第三个参数为：<span class="token variable">$3</span>"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>脚本内获取参数的格式为：</strong><br>$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……<br><strong>另外，还有几个特殊字符用来处理参数：</strong></p><p>| 参数 | 说明 |<br>|  |<br>| <code>$#</code> | 传递到脚本的参数个数 |<br>| <code>$*</code> | 以一个单字符串显示所有向脚本传递的参数。<br>如<code>&quot;$*&quot;</code>用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。 |<br>| <code>$$</code> | 脚本运行的当前进程ID号 |<br>| <code>$!</code> | 后台运行的最后一个进程的ID号 |<br>| <code>$@</code> | 与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数。<br>如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。 |<br>| <code>$-</code> | 显示Shell使用的当前选项，与set命令功能相同。 |<br>| <code>$?</code> | 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 |</p></blockquote><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3. 数组"></a>3. 数组</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">my_array</span><span class="token operator">=</span><span class="token punctuation">(</span>A B <span class="token string">"C"</span> D<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"第一个元素为: <span class="token variable">$&#123;my_array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>&#125;</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"第二个元素为: <span class="token variable">$&#123;my_array<span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"第三个元素为: <span class="token variable">$&#123;my_array<span class="token punctuation">[</span>2<span class="token punctuation">]</span>&#125;</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"第四个元素为: <span class="token variable">$&#123;my_array<span class="token punctuation">[</span>3<span class="token punctuation">]</span>&#125;</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"数组的元素为: <span class="token variable">$&#123;my_array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"数组的元素为: <span class="token variable">$&#123;my_array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"数组元素个数为: <span class="token variable">$&#123;<span class="token operator">#</span>my_array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"数组元素个数为: <span class="token variable">$&#123;<span class="token operator">#</span>my_array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">第一个元素为</span><span class="token punctuation">:</span> A<span class="token key atrule">第二个元素为</span><span class="token punctuation">:</span> B<span class="token key atrule">第三个元素为</span><span class="token punctuation">:</span> C<span class="token key atrule">第四个元素为</span><span class="token punctuation">:</span> D<span class="token key atrule">数组的元素为</span><span class="token punctuation">:</span> A B C D<span class="token key atrule">数组的元素为</span><span class="token punctuation">:</span> A B C D<span class="token key atrule">数组元素个数为</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token key atrule">数组元素个数为</span><span class="token punctuation">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-基本运算符"><a href="#4-基本运算符" class="headerlink" title="4. 基本运算符"></a>4. 基本运算符</h2><blockquote><p>原生 bash 不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p></blockquote><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><h3 id="①-算数运算符"><a href="#①-算数运算符" class="headerlink" title="① 算数运算符"></a>① 算数运算符</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"2加2等于"</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> + <span class="token number">2</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"2减2等于"</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> - <span class="token number">2</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"2乘2等于"</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> <span class="token punctuation">\</span>* <span class="token number">2</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"2除2等于"</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> / <span class="token number">2</span><span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"2除2取余"</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> <span class="token number">2</span> % <span class="token number">2</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②-关系运算符"><a href="#②-关系运算符" class="headerlink" title="② 关系运算符"></a>② 关系运算符</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 检测两个数是否相等，相等返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-ne</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 检测两个数是否不相等，不相等返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 检测左边的数是否大于右边的，如果是，则返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 检测左边的数是否小于右边的，如果是，则返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-ge</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 检测左边的数是否大于等于右边的，如果是，则返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-le</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 检测左边的数是否小于等于右边的，如果是，则返回 true。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="③-布尔运算符"><a href="#③-布尔运算符" class="headerlink" title="③ 布尔运算符"></a>③ 布尔运算符</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token boolean">false</span> <span class="token punctuation">]</span>       <span class="token comment"># 非运算，返回 true</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token boolean">true</span> <span class="token parameter variable">-o</span> <span class="token boolean">false</span> <span class="token punctuation">]</span> <span class="token comment"># 或运算，返回 true</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token boolean">true</span> <span class="token parameter variable">-a</span> <span class="token boolean">false</span> <span class="token punctuation">]</span> <span class="token comment"># 与运算，返回 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="④-逻辑运算符"><a href="#④-逻辑运算符" class="headerlink" title="④ 逻辑运算符"></a>④ 逻辑运算符</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>   <span class="token comment"># 逻辑的 AND, 返回 false</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 逻辑的 AND, 返回 false</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token operator">||</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>   <span class="token comment"># 逻辑的 OR, 返回 true</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span> <span class="token comment"># 逻辑的 OR, 返回 true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑤-字符串运算符"><a href="#⑤-字符串运算符" class="headerlink" title="⑤ 字符串运算符"></a>⑤ 字符串运算符</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">"abc"</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token string">"efg"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>   <span class="token comment"># 检测两个字符串是否相等，相等返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token variable">$b</span> <span class="token punctuation">]</span>  <span class="token comment"># 检测两个字符串是否相等，不相等返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$a</span> <span class="token punctuation">]</span>     <span class="token comment"># 检测字符串长度是否为0，为0返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$a</span>"</span> <span class="token punctuation">]</span>   <span class="token comment"># 检测字符串长度是否为0，不为0返回 true。</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token punctuation">]</span>        <span class="token comment"># 检测字符串是否为空，不为空返回 true。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑥-文件测试运算符"><a href="#⑥-文件测试运算符" class="headerlink" title="⑥ 文件测试运算符"></a>⑥ 文件测试运算符</h3><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>| 操作符 | 说明 |<br>|  |<br>| -b file | 检测文件是否是块设备文件，如果是，则返回 true。 |<br>| -c file | 检测文件是否是字符设备文件，如果是，则返回 true。 |<br>| -d file | 检测文件是否是目录，如果是，则返回 true。 |<br>| -f file | 检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 |<br>| -g file | 检测文件是否设置了 SGID 位，如果是，则返回 true。 |<br>| -k file | 检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。 |<br>| -p file | 检测文件是否是有名管道，如果是，则返回 true。 |<br>| -u file | 检测文件是否设置了 SUID 位，如果是，则返回 true。 |<br>| -r file | 检测文件是否可读，如果是，则返回 true。 |<br>| -w file | 检测文件是否可写，如果是，则返回 true。 |<br>| -x file | 检测文件是否可执行，如果是，则返回 true。 |<br>| -s file | 检测文件是否为空（文件大小是否大于0），不为空返回 true。 |<br>| -e file | 检测文件（包括目录）是否存在，如果是，则返回 true。 |</p><h2 id="5-echo"><a href="#5-echo" class="headerlink" title="5. echo"></a>5. echo</h2><h3 id="①-命令格式"><a href="#①-命令格式" class="headerlink" title="① 命令格式"></a>① 命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"It is a test"</span><span class="token builtin class-name">echo</span> It is a <span class="token builtin class-name">test</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token entity" title="\&quot;">\"</span>It is a test<span class="token entity" title="\&quot;">\"</span>"</span>      <span class="token comment"># 转义</span><span class="token assign-left variable">name</span><span class="token operator">=</span>Chris<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$name</span> is handsome"</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"OK! <span class="token entity" title="\n">\n</span>"</span>             <span class="token comment"># 显示换行 -e 开启转义</span><span class="token builtin class-name">echo</span> <span class="token string">"It is a test"</span> <span class="token operator">></span> myfile <span class="token comment"># 显示结果定向至文件</span><span class="token builtin class-name">echo</span> <span class="token string">'$name\"'</span>               <span class="token comment"># 原样输入字符串，不进行转义或取变量（使用单引号）</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">date</span><span class="token variable">`</span></span>                  <span class="token comment"># 显示命令执行结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②-颜色显示"><a href="#②-颜色显示" class="headerlink" title="② 颜色显示"></a>② 颜色显示</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[字背景颜色；文字颜色m字符串<span class="token entity" title="\033">\033</span>[0m"</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span>30m 黑色字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span>31m 红色字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span>32m 绿色字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span>33m 黄色字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span>34m 蓝色字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span>35m 紫色字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span>36m 天蓝字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span>37m 白色字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">;</span>37m 黑底白字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span><span class="token number">41</span><span class="token punctuation">;</span>37m 红底白字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span><span class="token number">42</span><span class="token punctuation">;</span>37m 绿底白字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span><span class="token number">43</span><span class="token punctuation">;</span>37m 黄底白字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span><span class="token number">44</span><span class="token punctuation">;</span>37m 蓝底白字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span><span class="token number">45</span><span class="token punctuation">;</span>37m 紫底白字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span><span class="token number">46</span><span class="token punctuation">;</span>37m 天蓝底白字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> “<span class="token punctuation">\</span>033<span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">;</span>30m 白底黑字 <span class="token punctuation">\</span>033<span class="token punctuation">[</span>0m”<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>0m 关闭所有属性<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>1m 设置高亮度<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>4m 下划线<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>5m 闪烁<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>7m 反显<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>8m 消隐<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>30m — <span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>37m 设置前景色<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>40m — <span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>47m 设置背景色<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>nA 光标上移n行<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>nB 光标下移n行<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>nC 光标右移n行<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>nD 光标左移n行<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>y<span class="token punctuation">;</span>xH设置光标位置<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>2J 清屏<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>K 清除从光标到行尾的内容<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>s 保存光标位置<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>u 恢复光标位置<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>?25l 隐藏光标<span class="token punctuation">\</span><span class="token number">33</span><span class="token punctuation">[</span>?25h 显示光标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-sprintf"><a href="#6-sprintf" class="headerlink" title="6. sprintf"></a>6. sprintf</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">printf</span> <span class="token string">"%-10s %-8s %-4s<span class="token entity" title="\n">\n</span>"</span> 姓名 性别 体重kg  <span class="token builtin class-name">printf</span> <span class="token string">"%-10s %-8s %-4.2f<span class="token entity" title="\n">\n</span>"</span> 郭靖 男 <span class="token number">66.1234</span><span class="token builtin class-name">printf</span> <span class="token string">"%-10s %-8s %-4.2f<span class="token entity" title="\n">\n</span>"</span> 杨过 男 <span class="token number">48.6543</span><span class="token builtin class-name">printf</span> <span class="token string">"%-10s %-8s %-4.2f<span class="token entity" title="\n">\n</span>"</span> 郭芙 女 <span class="token number">47.9876</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">姓名     性别   体重kg郭靖     男      66.12杨过     男      48.65郭芙     女      47.99<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>%s %c %d %f</code> 都是格式替代符<br><code>d</code>: Decimal 十进制整数 – 对应位置参数必须是十进制整数，否则报错！<br><code>s</code>: String 字符串 – 对应位置参数必须是字符串或者字符型，否则报错！<br><code>c</code>: Char 字符 – 对应位置参数必须是字符串或者字符型，否则报错！<br><code>f</code>: Float 浮点 – 对应位置参数必须是数字型，否则报错！<br><code>%-10s</code> 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐）,任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。<br><code>%-4.2f</code> 指格式化为小数，其中.2指保留2位小数。</p></blockquote><h2 id="7-test"><a href="#7-test" class="headerlink" title="7. test"></a>7. test</h2><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">num1</span><span class="token operator">=</span><span class="token number">100</span><span class="token assign-left variable">num2</span><span class="token operator">=</span><span class="token number">100</span><span class="token keyword">if</span> <span class="token builtin class-name">test</span> $<span class="token punctuation">[</span>num1<span class="token punctuation">]</span> <span class="token parameter variable">-eq</span> $<span class="token punctuation">[</span>num2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-流程控制"><a href="#8-流程控制" class="headerlink" title="8. 流程控制"></a>8. 流程控制</h2><h3 id="①-if-else"><a href="#①-if-else" class="headerlink" title="① if-else"></a>① if-else</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">20</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"a 等于 b"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-gt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"a 大于 b"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"a 小于 b"</span><span class="token keyword">else</span>   <span class="token builtin class-name">echo</span> <span class="token string">"没有符合的条件"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②-for"><a href="#②-for" class="headerlink" title="② for"></a>② for</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">loop</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"The value is: <span class="token variable">$loop</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="③-while"><a href="#③-while" class="headerlink" title="③ while"></a>③ while</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">int</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span><span class="token variable"><span class="token punctuation">((</span> $int<span class="token operator">&lt;=</span><span class="token number">5</span> <span class="token punctuation">))</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token variable">$int</span>    <span class="token builtin class-name">let</span> <span class="token string">"int++"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="④-case"><a href="#④-case" class="headerlink" title="④ case"></a>④ case</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">'输入 1 到 4 之间的数字:'</span><span class="token builtin class-name">echo</span> <span class="token string">'你输入的数字为:'</span><span class="token builtin class-name">read</span> aNum<span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">'你选择了 1'</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">'你选择了 2'</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">'你选择了 3'</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token number">4</span><span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">'你选择了 4'</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">'你没有输入 1 到 4 之间的数字'</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑤-break"><a href="#⑤-break" class="headerlink" title="⑤ break"></a>⑤ break</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token builtin class-name">:</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"输入 1 到 5 之间的数字:"</span>    <span class="token builtin class-name">read</span> aNum    <span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>        <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"你输入的数字为 <span class="token variable">$aNum</span>!"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"你输入的数字不是 1 到 5 之间的! 游戏结束"</span>            <span class="token builtin class-name">break</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">esac</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑥-continue"><a href="#⑥-continue" class="headerlink" title="⑥ continue"></a>⑥ continue</h3><p>跳出当前循环。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token builtin class-name">:</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"输入 1 到 5 之间的数字: "</span>    <span class="token builtin class-name">read</span> aNum    <span class="token keyword">case</span> <span class="token variable">$aNum</span> <span class="token keyword">in</span>        <span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">4</span><span class="token operator">|</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"你输入的数字为 <span class="token variable">$aNum</span>!"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>        *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"你输入的数字不是 1 到 5 之间的!"</span>            <span class="token builtin class-name">continue</span>            <span class="token builtin class-name">echo</span> <span class="token string">"游戏结束"</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">esac</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑦-until"><a href="#⑦-until" class="headerlink" title="⑦ until"></a>⑦ until</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">until</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$a</span> <span class="token parameter variable">-lt</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token keyword">do</span>   <span class="token builtin class-name">echo</span> <span class="token variable">$a</span>   <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $a + <span class="token number">1</span><span class="token variable">`</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-函数"><a href="#9-函数" class="headerlink" title="9. 函数"></a>9. 函数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function-name function">funWithParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第一个参数为 <span class="token variable">$1</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第二个参数为 <span class="token variable">$2</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第十个参数为 <span class="token variable">$10</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第十个参数为 <span class="token variable">$&#123;10&#125;</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"第十一个参数为 <span class="token variable">$&#123;11&#125;</span> !"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"参数总数有 <span class="token variable">$#</span> 个!"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"作为一个字符串输出所有参数 <span class="token variable">$*</span> !"</span><span class="token punctuation">&#125;</span>funWithParam <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">34</span> <span class="token number">73</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">第一个参数为 1 !第二个参数为 2 !第十个参数为 10 !第十个参数为 34 !第十一个参数为 73 !参数总数有 11 个!作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-输入输出"><a href="#10-输入输出" class="headerlink" title="10. 输入输出"></a>10. 输入输出</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">who</span> <span class="token operator">></span> today.log <span class="token comment"># 执行结果覆盖到文件 today.log</span><span class="token builtin class-name">echo</span> <span class="token string">"菜鸟教程："</span> <span class="token operator">>></span> today.log <span class="token comment"># 执行结果追加到文件 today.log</span><span class="token function">wc</span> <span class="token parameter variable">-l</span> <span class="token operator">&lt;</span> today.log <span class="token comment"># 统计 today.log 行数</span><span class="token function">wc</span> <span class="token parameter variable">-l</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF    李白    苏轼    王勃EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-文件包含"><a href="#11-文件包含" class="headerlink" title="11. 文件包含"></a>11. 文件包含</h2><p>test1.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Chris"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>test2.sh</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#使用 . 号来引用test1.sh 文件</span><span class="token builtin class-name">.</span> ./test1.sh<span class="token comment"># 或者使用以下包含文件代码</span><span class="token comment"># source ./test1.sh</span><span class="token builtin class-name">echo</span> <span class="token variable">$name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：被包含的文件 test1.sh 不需要可执行权限。</p></blockquote><h2 id="reference"><a href="#reference" class="headerlink" title="reference:"></a>reference:</h2><p><a href="%60(?(exp)yes%7Cno)%60">1</a> </p><p>﻿</p><h3 id="SpringCloud系列之接入SkyWalking进行链路追踪和日志收集-136-md-“-136-md”"><a href="#SpringCloud系列之接入SkyWalking进行链路追踪和日志收集-136-md-“-136-md”" class="headerlink" title="SpringCloud系列之接入SkyWalking进行链路追踪和日志收集(#136.md “#136.md”)"></a>SpringCloud系列之接入SkyWalking进行链路追踪和日志收集(#136.md “#136.md”)</h3><h2 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h2><p>前一段时间一直在研究升级公司项目的架构，在不断学习和试错后，最终确定了一套基于 k8s 的高可用架构体系，未来几期会将这套架构体系的架设过程和注意事项以系列文章的形式分享出来，敬请期待！</p><p>由于集群和分布式规模的扩大，对微服务链路的监控和日志收集，越来越有必要性，所以在筛选了了一些方案后，发现 SkyWalking 完美符合我们的预期，对链路追踪和日志收集都有不错的实现。</p><h2 id="SkyWalking-简介"><a href="#SkyWalking-简介" class="headerlink" title="SkyWalking 简介"></a>SkyWalking 简介</h2><p>SkyWalking 是一款 APM（应用程序监控）系统，转为微服务、云原生、基于容器的架构而设计。主要包含了一下核心功能</p><ol><li>对服务、运行实例、API进行指标分析</li><li>链路检测，检查缓慢的服务和API</li><li>对基础设施（VM、网络、磁盘、数据库）进行监控</li><li>对超出阈值的情况进行警报</li><li>等等</li></ol><p>开源地址：<a href="">apache&#x2F;skywalking</a></p><p>官网：<a href="">Apache SkyWalking</a></p><h2 id="SpringCloud-整合-SkyWalking"><a href="#SpringCloud-整合-SkyWalking" class="headerlink" title="SpringCloud 整合 SkyWalking"></a>SpringCloud 整合 SkyWalking</h2><h3 id="1-搭建-SkyWalking-服务"><a href="#1-搭建-SkyWalking-服务" class="headerlink" title="1. 搭建 SkyWalking 服务"></a>1. 搭建 SkyWalking 服务</h3><p>在使用 SkyWalking 进行链路追踪和日志收集之前，需要先搭建起一套 SkyWalking 的服务，然后才能通过 agent 将 SpringCloud 的运行状态和日志发送给 SkyWalking 进行解析和展示。</p><p>SkyWalking 的搭建方式有很多中，我这里介绍两种 docker-compose（非高可用，快速启动，方便测试、学习） 和 k8s（高可用、生产级别）</p><h4 id="docker-compose-的方式"><a href="#docker-compose-的方式" class="headerlink" title="docker-compose 的方式"></a>docker-compose 的方式</h4><p>docker 和 docker-compose 的安装不是本文的重点，所以有需要可以自行查询。</p><p>以下操作会启动三个容器</p><ol><li><code>elasticsearch</code> 作为 skywalking 的存储，保存链路和日志数据等</li><li><code>oap</code> 数据接收和分析 Observability Analysis Platform</li><li><code>ui</code> web端的数据展示</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建配置文件保存的目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /data/docker/admin/skywalking<span class="token comment"># 切换到刚创建的目录</span><span class="token builtin class-name">cd</span> /data/docker/admin/skywalking<span class="token comment"># 将下面的 docker-compose.yml 文件保存到这个目录</span><span class="token function">vi</span> docker-compose.yml<span class="token comment"># 拉去镜像并启动</span><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span><span class="token comment"># 查看日志</span><span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker-compose.yml</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> docker.elastic.co/elasticsearch/elasticsearch<span class="token punctuation">:</span>7.14.1    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> elasticsearch    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 9200<span class="token punctuation">:</span><span class="token number">9200</span>    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD-SHELL"</span><span class="token punctuation">,</span> <span class="token string">"curl --silent --fail localhost:9200/_cluster/health || exit 1"</span><span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 30s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 40s    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> discovery.type=single<span class="token punctuation">-</span>node      <span class="token punctuation">-</span> bootstrap.memory_lock=true      <span class="token punctuation">-</span> <span class="token string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span>      <span class="token punctuation">-</span> TZ=Asia/Shanghai    <span class="token key atrule">ulimits</span><span class="token punctuation">:</span>      <span class="token key atrule">memlock</span><span class="token punctuation">:</span>        <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">-1</span>        <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">-1</span>  <span class="token key atrule">oap</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/skywalking<span class="token punctuation">-</span>oap<span class="token punctuation">-</span>server<span class="token punctuation">:</span>8.7.0<span class="token punctuation">-</span>es7    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> oap    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elasticsearch    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> elasticsearch    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 11800<span class="token punctuation">:</span><span class="token number">11800</span>      <span class="token punctuation">-</span> 12800<span class="token punctuation">:</span><span class="token number">12800</span>    <span class="token key atrule">healthcheck</span><span class="token punctuation">:</span>      <span class="token key atrule">test</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"CMD-SHELL"</span><span class="token punctuation">,</span> <span class="token string">"/skywalking/bin/swctl"</span><span class="token punctuation">]</span>      <span class="token key atrule">interval</span><span class="token punctuation">:</span> 30s      <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 10s      <span class="token key atrule">retries</span><span class="token punctuation">:</span> <span class="token number">3</span>      <span class="token key atrule">start_period</span><span class="token punctuation">:</span> 40s    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">SW_STORAGE</span><span class="token punctuation">:</span> elasticsearch7      <span class="token key atrule">SW_STORAGE_ES_CLUSTER_NODES</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span><span class="token number">9200</span>  <span class="token key atrule">ui</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> apache/skywalking<span class="token punctuation">-</span>ui<span class="token punctuation">:</span>8.7.0    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ui    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> oap    <span class="token key atrule">links</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> oap    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 8088<span class="token punctuation">:</span><span class="token number">8080</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai      <span class="token key atrule">SW_OAP_ADDRESS</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动之后浏览器访问 <code>服务ip:8080</code> 即可</p><h4 id="k8s"><a href="#k8s" class="headerlink" title="k8s"></a>k8s</h4><p>等待更新。。</p><h3 id="2-下载-agent-代理包"><a href="#2-下载-agent-代理包" class="headerlink" title="2. 下载 agent 代理包"></a>2. 下载 agent 代理包</h3><p>点击链接进行下载，<a href="">skywalking-apm-8.7</a></p><blockquote><p>其他版本可以看 <a href="">apache 归档站</a>，找到对应版本的 <code>.tar.gz</code> 后缀的包，进行下载</p></blockquote><p>通过命令或者软件进行解压 <code>tar -zxvf apache-skywalking-apm-8.7.0.tar.gz</code></p><h3 id="3-java-命令使用代码启动-jar-包"><a href="#3-java-命令使用代码启动-jar-包" class="headerlink" title="3. java 命令使用代码启动 jar 包"></a>3. java 命令使用代码启动 jar 包</h3><p>springcloud&#x2F;springboot 一般是通过 <code>java -jar xxx.jar</code> 进行启动。我们只需要在其中加上 <code>-javaagent</code> 参数即可，如下</p><p>其中 <strong>自定义服务名</strong> 可以改为应用名 如 <code>lemes-auth</code>，<strong>服务ip</strong> 为第一步搭建的 SkyWalking 服务的ip，<strong>端口11800</strong> 为启动的 oap 这个容器的端口</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> -javaagent:上一步解压目录/agent/skywalking-agent.jar<span class="token operator">=</span>agent.service_name<span class="token operator">=</span>自定义服务名,collector.backend_service<span class="token operator">=</span>服务ip:11800 <span class="token parameter variable">-jar</span> xx.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令启动后，访问以下接口，就可以在第一步 <code>服务ip:8080</code> 中看到访问的链接和调用链路。</p><p><img src="/" alt="链路追踪"><br><img src="/" alt="拓扑图"></p><h3 id="4-开启日志收集"><a href="#4-开启日志收集" class="headerlink" title="4. 开启日志收集"></a>4. 开启日志收集</h3><p>本文主要以 log4j2 来介绍，其他的大同小异，可以网上找教程。SpringCloud 集成 log4j2 不是本文重点，所以请自行 Google。</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>要开启日志收集，必须要添加依赖，如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.skywalking<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>apm-toolkit-log4j-2.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改-log4j2-xml"><a href="#修改-log4j2-xml" class="headerlink" title="修改 log4j2.xml"></a>修改 log4j2.xml</h4><p>需要修改 log4j2.xml 主要添加下面两个关键点</p><ul><li>添加 <code>%traceId</code> 来打印 traceid</li><li>声明 GRPCLogClientAppender</li></ul><p>完整内容如下</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment">&lt;!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL --></span><span class="token comment">&lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，     你会看到log4j2内部各种详细输出。可以设置成OFF(关闭) 或 Error(只输出错误信息)。--></span><span class="token comment">&lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>log.path<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>logs/lemes-auth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logging.lemes.pattern<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] [%traceId] [%logger&#123;50&#125;.%M:%L] - %msg%n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 输出控制台日志的配置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment">&lt;!-- 输出日志的格式 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;logging.lemes.pattern&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingRandomAccessFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debugRollingFile<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;log.path&#125;/debug.log<span class="token punctuation">"</span></span>                                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;log.path&#125;/debug/$$&#123;date:yyyy-MM&#125;/debug.%d&#123;yyyy-MM-dd&#125;-%i.log.gz<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;logging.lemes.pattern&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100 MB<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingRandomAccessFile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GRPCLogClientAppender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grpc-log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;logging.lemes.pattern&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GRPCLogClientAppender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.lenovo.lemes<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debug<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.kafka<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warn<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>debugRollingFile<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grpc-log<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动命令中声明上报日志"><a href="#启动命令中声明上报日志" class="headerlink" title="启动命令中声明上报日志"></a>启动命令中声明上报日志</h4><p>在上一步的 agent 中添加上报日志的参数 <code>plugin.toolkit.log.grpc.reporter.server_host=服务ip,plugin.toolkit.log.grpc.reporter.server_port=11800</code></p><p>完整如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> -javaagent:上一步解压目录/agent/skywalking-agent.jar<span class="token operator">=</span>agent.service_name<span class="token operator">=</span>自定义服务名,collector.backend_service<span class="token operator">=</span>服务ip:11800,plugin.toolkit.log.grpc.reporter.server_host<span class="token operator">=</span>服务ip,plugin.toolkit.log.grpc.reporter.server_port<span class="token operator">=</span><span class="token number">11800</span> <span class="token parameter variable">-jar</span> xx.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="日志收集效果"><a href="#日志收集效果" class="headerlink" title="日志收集效果"></a>日志收集效果</h4><p>这样启动日志中就会打印 traceid , <code>N/A</code> 代表的是非请求的日志，有 traceid 的为 api 请求日志</p><p><img src="/" alt="traceid"></p><p>在 skywalking 中就能看到我们上报的日志</p><p><img src="/" alt="skywalking 日志上报"></p><p>重点：SkyWalking 可以在链路追踪中查看当前请求的所有日志（不同实例&#x2F;模块）</p><p><img src="/" alt="SkyWalking 链路日志"></p><p><img src="/" alt="SkyWalking 链路日志"></p><h3 id="5-兼容-spring-cloud-gateway"><a href="#5-兼容-spring-cloud-gateway" class="headerlink" title="5. 兼容 spring-cloud-gateway"></a>5. 兼容 spring-cloud-gateway</h3><p>经过上面的步骤之后，链路已经搭建完成，查看发现了一个问题，gateway 模块的 <code>traceId</code> 和 业务模块的 <code>traceId</code> 不统一。</p><p><img src="/" alt="拓扑图"></p><p>这是由于 SkyWalking 对于 <code>spring-cloud-gateway</code> 的支持不是默认的，所以需要将 <code>agent/optional-plugins/apm-spring-cloud-gateway-2.1.x-plugin-8.7.0.jar</code> 复制到 <code>agent/plugins</code> 下，然后重启即可。</p><p><img src="/" alt="优化过 gateway 的拓扑图"></p><h2 id="最后-3"><a href="#最后-3" class="headerlink" title="最后"></a>最后</h2><p>SkyWalking 上面这两个功能就已经非常强大，能够有效帮助我们优化我们的程序，监控系统的问题，并及时报警。日志收集也解决的在大规模分布式集群下日志查询难的问题。</p><p>SkyWalking 还支持 VM、浏览器、k8s等监控，后续如果有实践，将会逐步更新。</p><p>﻿</p><h3 id="sudo命令免密码设置-137-md-“-137-md”"><a href="#sudo命令免密码设置-137-md-“-137-md”" class="headerlink" title="sudo命令免密码设置(#137.md “#137.md”)"></a>sudo命令免密码设置(#137.md “#137.md”)</h3><blockquote><p>如果某台linux只有自己在使用，比如个人系统，每次调用 <code>sudo</code> 时都需要输入密码，长期下来着实厌烦，因此本文介绍如何配置 <code>sudo</code> 命令，使其在运行时不需要输入密码。</p></blockquote><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>执行命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> visudo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加以下两行， 下面的 sys 表示 sys 组成员不用密码使用sudo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aaronkilik <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: ALL%sys <span class="token assign-left variable">ALL</span><span class="token operator">=</span><span class="token punctuation">(</span>ALL<span class="token punctuation">)</span> NOPASSWD: ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>现在在使用 <code>sudo</code> 命令， 将不再需要输入密码。</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>如果只允许用户使用 <code>kill</code> 和 <code>rm</code> 命令时，不需要输入密码，见如下配置</p><pre class="line-numbers language-none"><code class="language-none">%sys ALL&#x3D;(ALL) NOPASSWD: &#x2F;bin&#x2F;kill, &#x2F;bin&#x2F;rm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="tale博客搭建及体验-138-md-“-138-md”"><a href="#tale博客搭建及体验-138-md-“-138-md”" class="headerlink" title="tale博客搭建及体验(#138.md “#138.md”)"></a>tale博客搭建及体验(#138.md “#138.md”)</h3><p>不久之前在逛blog时，发现了这款tale，今天抽空搭建了一下，将搭建过程写于此。<br>demo website：</p><h2 id="搭建思路-1"><a href="#搭建思路-1" class="headerlink" title="搭建思路"></a>搭建思路</h2><p>看了tale作者的(github) 发现有建好docker，所以果断使用docker搭建tale的环境</p><h3 id="构建docker镜像"><a href="#构建docker镜像" class="headerlink" title="构建docker镜像"></a>构建docker镜像</h3><p>下载<a href="">tale-docker</a>到本地。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载官方Dockerfile</span>$ <span class="token function">git</span> clone <span class="token comment"># 构建 tale 镜像</span>$ <span class="token function">docker</span> build <span class="token parameter variable">-t</span> tale:1.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下载tale博客文件"><a href="#下载tale博客文件" class="headerlink" title="下载tale博客文件"></a>下载tale博客文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载压缩包</span>$ <span class="token function">sudo</span> <span class="token function">wget</span> <span class="token comment"># 讲解压出来的文件夹移入home目录</span>$ <span class="token function">unzip</span> tale.zip$ <span class="token function">mv</span> tale /home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建tale镜像"><a href="#构建tale镜像" class="headerlink" title="构建tale镜像"></a>构建tale镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--hostname</span> tale <span class="token parameter variable">--name</span> tale <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /etc/localtime:/etc/localtime:ro <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /home/tale:/var/tale_home <span class="token parameter variable">-p</span> <span class="token number">80</span>:9000 <span class="token punctuation">\</span><span class="token parameter variable">-m</span> 1024m --memory-swap <span class="token parameter variable">-1</span> tale:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h3><p>浏览器进入 <code>127.0.0.1</code> 即可访问<br><img src="/" alt="管理后台"><br><img src="/" alt="首页"><br><img src="/" alt="文章"></p><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><h3 id="管理后台"><a href="#管理后台" class="headerlink" title="管理后台"></a>管理后台</h3><ol><li>文章支持Markdown和富文本。</li><li>文章&#x2F;评论&#x2F;友链&#x2F;标签管理&#x2F;主题，设置简单，一目了然</li><li>支持插件扩展</li></ol><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ol><li>主题简洁（当然支持切换主题）</li><li>使用 <code>instantclick</code> ，页面切换流畅</li><li>评论系统，简洁易用</li><li>搜索只支持文章标题</li></ol><h3 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h3><ol><li>管理简单方便</li><li>使用docker后，迁移数据也方便</li><li>主题还不是很多</li><li>对于常年使用静态blog，手动渲染&#x2F;发布，使用这个之后还有点小清新。</li></ol><h2 id="最后-4"><a href="#最后-4" class="headerlink" title="最后"></a>最后</h2><p>tale整体不错，值得入手。</p><p>不过目前没有笔者喜欢的主题（当然默认主题也不错），暂时不打算更换blog，笔者也打算过一段时间开发一个tale的主题，然后正式迁入tale。</p><p>﻿</p><h3 id="关于第三方评论系统-139-md-“-139-md”"><a href="#关于第三方评论系统-139-md-“-139-md”" class="headerlink" title="关于第三方评论系统(#139.md “#139.md”)"></a>关于第三方评论系统(#139.md “#139.md”)</h3><h2 id="前言-4"><a href="#前言-4" class="headerlink" title="前言"></a>前言</h2><p>昨天登陆blog看到了多说的通知：将于2017年6月1日正式关停服务，其实并没有太大的意外。</p><p>自从去年9月份disqus被GFW认证后，被迫转移到多说，一看就是很久没有维护了，感觉关闭就是迟早的事，没想到刚用5个月。。</p><p><img src="/" alt="好想使用disqus啊！！！"></p><p>不能用disqus不开心，然后就又开始调查第三方评论系统。</p><h2 id="友言"><a href="#友言" class="headerlink" title="友言"></a>友言</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>界面挺像disqus的</li><li>查询最近的评论，需要打开新的页面</li><li>支持表情，不支持图片</li><li>支持自定义界面</li><li>注册即用</li></ol><p><img src="/" alt="友言"></p><h2 id="网易云跟帖"><a href="#网易云跟帖" class="headerlink" title="网易云跟帖"></a>网易云跟帖</h2><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol><li>界面简洁</li><li>网易作为后台，不容易倒</li><li>不支持表情，不支持图片</li><li>支持自定义界面</li><li>我在国外加载巨慢，不过查了国内的延迟，平均20ms左右。</li><li>注册即用</li></ol><p><img src="/" alt="网易云跟帖"></p><h2 id="畅言"><a href="#畅言" class="headerlink" title="畅言"></a>畅言</h2><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ol><li>界面简介</li><li>打印记的功能</li><li>支持表情和图片</li><li>支持获取评论数</li><li>需要ICP备案</li></ol><p><img src="/" alt="畅言"></p><h2 id="最后-5"><a href="#最后-5" class="headerlink" title="最后"></a>最后</h2><p>想要尝试一下畅言，功能符合我的预期，不过要ICP备案，最近由于想要开启国内CDN加速，也需要备案。</p><p><code>蛋四！！</code> 我在国外，等回国的时候再备案吧，暂时现使用 <code>disqus</code>,如果想评论，国内只能翻墙了。╮（╯＿╰）╭</p><p>最后，多说一路走好。</p><p>﻿</p><h3 id="人们在一本叫《活着》的书中纷纷死去-140-md-“-140-md”"><a href="#人们在一本叫《活着》的书中纷纷死去-140-md-“-140-md”" class="headerlink" title="人们在一本叫《活着》的书中纷纷死去(#140.md “#140.md”)"></a>人们在一本叫《活着》的书中纷纷死去(#140.md “#140.md”)</h3><p>有那么一个年代，离我们很近，它腥风血雨，连活着都是一件奢侈的事。</p><p>在富贵的一生中，每次出现看似被上天眷顾的福气后（如有庆长跑第一、凤霞嫁了人并怀了孩子），读者还在替富贵开心的时候，他们却以各种方式迅速死去，最终富贵亲手埋葬了他所有的亲人。</p><p>一本 12w 左右的小说，但是在没有华丽词藻的情况下，在顺畅流利的写作手法、跌宕起伏的剧情、第一人称的代入感下一口气读完了。期间多次痛哭流涕（一点儿没夸张），不得不放下书本，洗过脸后才能继续阅读。所以已经多年没写书评的我，还是忍不住为她写下书评。</p><blockquote><p>人是为了活着本身而活着，而不是为了活着之外的任何事物所活着。</p></blockquote><p>这是作者在中文序言中的一句话，在当今生活着的我，初读序言中的这句话，并无任何共鸣，甚至还行吐槽两句。随着富贵将他的”一生”娓娓道来，你就会明白在那样的时代背景下，活着已经是一件不容易的事。 所以作者在日文版序言中说到：</p><blockquote><p>在旁人眼中富贵的一生是苦熬的一生；可是对于富贵自己，我相信他更多地感受到了幸福。</p></blockquote><p>因为他相信自己的妻子是世上最好的妻子，他相信自己的子女也是世上最好的子女，还有他的女婿他的外孙，还有他的那头也叫富贵的牛，还有一起上火锅的朋友们，还有生活的点点滴滴……</p><p>富贵的真是一路跌下去的一生，从”富家少爷”赌光了家产、气死了爹爹。由于母亲生病，为母亲求医路上被国民党抓壮丁，被俘虏后，放回家中。却发现母亲已死，女儿也由于生病变成了聋哑人。本想着大难之后必有后福，却只是悲惨一生的开端。儿子有庆由于和县长夫人血型匹配，遭抽血而亡、女儿凤霞产子大出血而亡、妻子家珍失去儿女后，失去了最后与病魔争斗的信念，也走了、女婿二喜在工地被水泥板拍死、外孙苦根难得吃到豆子，却被豆子撑死。最后只剩下自己和一个也叫作富贵的老牛。</p><p>春生想自杀前，找到富贵告别，在被家珍原谅，并答应不会自杀，在这种情况下坚持了一个月，最终还是自杀了。那种时代背景下的无奈，那种窒息感。。。</p><p>富贵的一生跨越了地主、解放战争、人民公社运动、大炼钢铁、自然灾害和文化大革命，从一个人的视角看到每个时代下的一个小小的缩影，但却比任何其他的描述更让人深刻了解到这些时代背景下人们的生活状态。</p><p>在那时，活着不仅是幸运，也更需要勇气。</p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1556806574463&di=868e65579acfc800020db78de3c07ac4&imgtype=0&src=http://s1.sinaimg.cn/large/001Pe7mxzy76VARpXvdc3"></p><p>﻿</p><h3 id="2022年我在使用这些vim插件-141-md-“-141-md”"><a href="#2022年我在使用这些vim插件-141-md-“-141-md”" class="headerlink" title="2022年我在使用这些vim插件(#141.md “#141.md”)"></a>2022年我在使用这些vim插件(#141.md “#141.md”)</h3><h2 id="前言-5"><a href="#前言-5" class="headerlink" title="前言"></a>前言</h2><p>从第一次接触 <code>vim</code> 已逾期 10 年, 期间大部分都是一些简单操作,<br>最近一两年开始深度使用 <code>vim</code>, 目前使用 <code>neovim</code> 版本.<br>本文将记录一些笔者觉得好用的一些 <code>Plugin</code>, 本文也将持续更新.</p><blockquote><p>注意: 笔者使用的插件管理器是 <a href="">vim-plug</a>,<br>所以以下示例都是基于 <code>vim-plug</code> 来写的.</p></blockquote><h2 id="Goto-Open"><a href="#Goto-Open" class="headerlink" title="Goto&#x2F;Open"></a>Goto&#x2F;Open</h2><h3 id="vim-open-url"><a href="#vim-open-url" class="headerlink" title="vim-open-url"></a>vim-open-url</h3><p><a href="">vim-open-url</a><br>可以用浏览器打开光标下的 url. </p><ul><li><code>gB</code> 用默认浏览器打开光标下的 url</li><li><code>g&lt;CR&gt;</code> 使用默认搜索引擎搜索光标下的单词</li><li><code>gG</code> 使用 Google 搜索光标下的单词</li><li><code>gW</code> 使用 Wikipedia 搜索光标下的单词</li></ul><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim">Plug <span class="token string">'dhruvasagar/vim-open-url'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Auto-Complete"><a href="#Auto-Complete" class="headerlink" title="Auto Complete"></a>Auto Complete</h2><h3 id="neoclide-coc-nvim"><a href="#neoclide-coc-nvim" class="headerlink" title="neoclide&#x2F;coc.nvim"></a>neoclide&#x2F;coc.nvim</h3><p>﻿</p><h3 id="Vim命令速查表-142-md-“-142-md”"><a href="#Vim命令速查表-142-md-“-142-md”" class="headerlink" title="Vim命令速查表(#142.md “#142.md”)"></a>Vim命令速查表(#142.md “#142.md”)</h3><p>去年上半年开始全面使用linux进行开发和娱乐了，现在已经回不去windows了。</p><p>话归正传，在linux上一直使用vim，慢慢熟悉了它的命令，才终于领悟了什么是编辑器之神。</p><p>最近抽空整理了这份速查表，收获颇丰，并分享给大家。</p><h2 id="进入vim"><a href="#进入vim" class="headerlink" title="进入vim"></a>进入vim</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">vim filename</td><td align="left">打开或新建文件,并将光标置于第一行首</td></tr><tr><td align="left">vim +n filename</td><td align="left">打开文件，并将光标置于第n行首</td></tr><tr><td align="left">vim + filename</td><td align="left">打开文件，并将光标置于最后一行首</td></tr><tr><td align="left">vim +&#x2F;pattern filename</td><td align="left">打开文件，并将光标置于第一个与pattern匹配的串处</td></tr><tr><td align="left">vim -r filename</td><td align="left">在上次正用vim编辑时发生系统崩溃，恢复filename</td></tr><tr><td align="left">vim filename….filename</td><td align="left">打开多个文件，依次编辑</td></tr></tbody></table><h2 id="vim配置"><a href="#vim配置" class="headerlink" title="vim配置"></a>vim配置</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">all</td><td align="left">列出所有选项设置情况</td></tr><tr><td align="left">term</td><td align="left">设置终端类型</td></tr><tr><td align="left">ignorance</td><td align="left">在搜索中忽略大小写</td></tr><tr><td align="left">list</td><td align="left">显示制表位(Ctrl+I)和行尾标志（$)</td></tr><tr><td align="left">number</td><td align="left">显示行号</td></tr><tr><td align="left">report</td><td align="left">显示由面向行的命令修改过的数目</td></tr><tr><td align="left">terse</td><td align="left">显示简短的警告信息</td></tr><tr><td align="left">warn</td><td align="left">在转到别的文件时若没保存当前文件则显示NO write信息</td></tr><tr><td align="left">nomagic</td><td align="left">允许在搜索模式中，使用前面不带“\”的特殊字符</td></tr><tr><td align="left">nowrapscan</td><td align="left">禁止vi在搜索到达文件两端时，又从另一端开始</td></tr><tr><td align="left">mesg</td><td align="left">允许vi显示其他用户用write写到自己终端上的信息</td></tr><tr><td align="left">:set number &#x2F; set nonumber</td><td align="left">显示&#x2F;不显示行号</td></tr><tr><td align="left">:set ruler &#x2F;set noruler</td><td align="left">显示&#x2F;不显示标尺</td></tr><tr><td align="left">:set hlsearch</td><td align="left">高亮显示查找到的单词</td></tr><tr><td align="left">:set nohlsearch</td><td align="left">关闭高亮显示</td></tr><tr><td align="left">:syntax on</td><td align="left">语法高亮</td></tr><tr><td align="left">:set nu</td><td align="left">显示行号</td></tr><tr><td align="left">:set ignorecase</td><td align="left">搜索时忽略大小写</td></tr><tr><td align="left">:set smartcase</td><td align="left">搜索时匹配大小写</td></tr><tr><td align="left">:set ruler</td><td align="left">显示光标位置坐标</td></tr><tr><td align="left">:set hlsearch</td><td align="left">搜索匹配全高亮</td></tr><tr><td align="left">:set tabstop&#x3D;8</td><td align="left">设置tab大小,8为最常用最普遍的设置</td></tr><tr><td align="left">:set softtabstop&#x3D;8</td><td align="left">4:4个空格,8:正常的制表符,12:一个制表符4个空格,16:两个制表符</td></tr><tr><td align="left">:set autoindent</td><td align="left">自动缩进</td></tr><tr><td align="left">:set cindent</td><td align="left">C语言格式里面的自动缩进</td></tr></tbody></table><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">k nk</td><td align="left">上 向上移动n行</td></tr><tr><td align="left">j nj</td><td align="left">下 向下移动n行</td></tr><tr><td align="left">h nh</td><td align="left">左 向左移动n行</td></tr><tr><td align="left">l nl</td><td align="left">右 向右移动n行</td></tr><tr><td align="left">Space</td><td align="left">光标右移一个字符</td></tr><tr><td align="left">Backspace</td><td align="left">光标左移一个字符</td></tr><tr><td align="left">Enter</td><td align="left">光标下移一行</td></tr><tr><td align="left">w&#x2F;W</td><td align="left">光标右移一个字至字首</td></tr><tr><td align="left">b&#x2F;B</td><td align="left">光标左移一个字至字首</td></tr><tr><td align="left">e或E</td><td align="left">光标右移一个字至字尾</td></tr><tr><td align="left">)</td><td align="left">光标移至句尾</td></tr><tr><td align="left">(</td><td align="left">光标移至句首</td></tr><tr><td align="left">}</td><td align="left">光标移至段落开头</td></tr><tr><td align="left">{</td><td align="left">光标移至段落结尾</td></tr><tr><td align="left">n$</td><td align="left">光标移至第n行尾</td></tr><tr><td align="left">H</td><td align="left">光标移至屏幕顶行</td></tr><tr><td align="left">M</td><td align="left">光标移至屏幕中间行</td></tr><tr><td align="left">L</td><td align="left">光标移至屏幕最后行</td></tr><tr><td align="left">0</td><td align="left">（注意是数字零）光标移至当前行首</td></tr><tr><td align="left">^</td><td align="left">移动光标到行首第一个非空字符上去</td></tr><tr><td align="left">$</td><td align="left">光标移至当前行尾</td></tr><tr><td align="left">gg</td><td align="left">移到第一行</td></tr><tr><td align="left">G</td><td align="left">移到最后一行</td></tr><tr><td align="left">f<a></td><td align="left">移动光标到当前行的字符a上</td></tr><tr><td align="left">F</td><td align="left">相反</td></tr><tr><td align="left">%</td><td align="left">移动到与制匹配的括号上去（），{}，[]，&lt;&gt;等</td></tr><tr><td align="left">nG</td><td align="left">移动到第n行上</td></tr><tr><td align="left">G</td><td align="left">到最后一行</td></tr></tbody></table><h2 id="屏幕滚动"><a href="#屏幕滚动" class="headerlink" title="屏幕滚动"></a>屏幕滚动</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Ctrl+e</td><td align="left">向文件首翻一行</td></tr><tr><td align="left">Ctrl+y</td><td align="left">向文件尾翻一行</td></tr><tr><td align="left">Ctrl+u</td><td align="left">向文件首翻半屏</td></tr><tr><td align="left">Ctrl+d</td><td align="left">向文件尾翻半屏</td></tr><tr><td align="left">Ctrl+f</td><td align="left">向文件尾翻一屏</td></tr><tr><td align="left">Ctrl+b</td><td align="left">向文件首翻一屏</td></tr><tr><td align="left">nz</td><td align="left">将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部</td></tr></tbody></table><h2 id="插入文本类"><a href="#插入文本类" class="headerlink" title="插入文本类"></a>插入文本类</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">在光标前</td></tr><tr><td align="left">I</td><td align="left">在当前行首</td></tr><tr><td align="left">a</td><td align="left">光标后</td></tr><tr><td align="left">A</td><td align="left">在当前行尾</td></tr><tr><td align="left">o</td><td align="left">在当前行之下新开一行</td></tr><tr><td align="left">O</td><td align="left">在当前行之上新开一行</td></tr><tr><td align="left">r</td><td align="left">替换当前字符</td></tr><tr><td align="left">R</td><td align="left">替换当前字符及其后的字符，直至按ESC键</td></tr><tr><td align="left">s</td><td align="left">从当前光标位置处开始，以输入的文本替代指定数目的字符</td></tr><tr><td align="left">S</td><td align="left">删除指定数目的行，并以所输入文本代替之</td></tr><tr><td align="left">ncw&#x2F;nCW</td><td align="left">修改指定数目的字</td></tr><tr><td align="left">nCC</td><td align="left">修改指定数目的行</td></tr></tbody></table><h2 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">x&#x2F;X</td><td align="left">删除一个字符，x删除光标后的，而X删除光标前的</td></tr><tr><td align="left">dw</td><td align="left">删除一个单词(删除光标位置到下一个单词开始的位置)</td></tr><tr><td align="left">dnw</td><td align="left">删除n个单词</td></tr><tr><td align="left">dne</td><td align="left">也可，只是删除到单词尾</td></tr><tr><td align="left">do</td><td align="left">删至行首</td></tr><tr><td align="left">d$</td><td align="left">删至行尾</td></tr><tr><td align="left">dd</td><td align="left">删除一行</td></tr><tr><td align="left">ndd</td><td align="left">删除当前行及其后n-1行</td></tr><tr><td align="left">dnl</td><td align="left">向右删除n个字母</td></tr><tr><td align="left">dnh</td><td align="left">向左删除n个字母</td></tr><tr><td align="left">dnj</td><td align="left">向下删除n行,当前行+其上n行</td></tr><tr><td align="left">dnk</td><td align="left">向上删除n行,当期行+其下n行</td></tr><tr><td align="left">cnw[word]</td><td align="left">将n个word改变为word</td></tr><tr><td align="left">C$</td><td align="left">改变到行尾</td></tr><tr><td align="left">cc</td><td align="left">改变整行</td></tr><tr><td align="left">shift+j</td><td align="left">删除行尾的换行符，下一行接上来了</td></tr></tbody></table><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">p</td><td align="left">粘贴用x或d删除的文本</td></tr><tr><td align="left">ynw</td><td align="left">复制n个单词</td></tr><tr><td align="left">yy</td><td align="left">复制一行</td></tr><tr><td align="left">ynl</td><td align="left">复制n个字符</td></tr><tr><td align="left">y$</td><td align="left">复制当前光标至行尾处</td></tr><tr><td align="left">nyy</td><td align="left">拷贝n行</td></tr></tbody></table><h2 id="撤销-1"><a href="#撤销-1" class="headerlink" title="撤销"></a>撤销</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">u</td><td align="left">撤销前一次的操作</td></tr><tr><td align="left">shif+u(U)</td><td align="left">撤销对该行的所有操作</td></tr></tbody></table><h2 id="搜索及替换"><a href="#搜索及替换" class="headerlink" title="搜索及替换"></a>搜索及替换</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&#x2F;pattern</td><td align="left">从光标开始处向文件尾搜索pattern</td></tr><tr><td align="left">?pattern</td><td align="left">从光标开始处向文件首搜索pattern</td></tr><tr><td align="left">n</td><td align="left">在同一方向重复上一次搜索命令</td></tr><tr><td align="left">N</td><td align="left">在反方向上重复上一次搜索命令</td></tr><tr><td align="left">cw newword</td><td align="left">替换为newword</td></tr><tr><td align="left">n</td><td align="left">继续查找</td></tr><tr><td align="left">.</td><td align="left">执行替换</td></tr><tr><td align="left">:s&#x2F;p1&#x2F;p2&#x2F;g</td><td align="left">将当前行中所有p1均用p2替代,g表示执行 用c表示需要确认</td></tr><tr><td align="left">:n1,n2 s&#x2F;p1&#x2F;p2&#x2F;g</td><td align="left">将第n1至n2行中所有p1均用p2替代</td></tr><tr><td align="left">:g&#x2F;p1&#x2F;s&#x2F;&#x2F;p2&#x2F;g</td><td align="left">将文件中所有p1均用p2替换</td></tr><tr><td align="left">:1,$ s&#x2F;string1&#x2F;string2&#x2F;g</td><td align="left">在全文中将string1替换为string2</td></tr></tbody></table><h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">m[a-z]</td><td align="left">在文中做标记，标记号可为a-z的26个字母</td></tr><tr><td align="left">&#96;a</td><td align="left">移动到标记a处</td></tr></tbody></table><h2 id="visual模式"><a href="#visual模式" class="headerlink" title="visual模式"></a>visual模式</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">v</td><td align="left">进入visual 模式</td></tr><tr><td align="left">V</td><td align="left">进入行的visual 模式</td></tr><tr><td align="left">ctrl+v</td><td align="left">进如块操作模式用o和O改变选择的边的大小</td></tr><tr><td align="left">在所有行插入相同的内容如include&lt;</td><td align="left">将光标移到开始插入的位置，按CTRL+V进入VISUAL模式，选择好模块后按I（shift+i)，后插入要插入的文本，按[ESC]完成</td></tr></tbody></table><h2 id="行方式命令"><a href="#行方式命令" class="headerlink" title="行方式命令"></a>行方式命令</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:n1,n2 co n3</td><td align="left">将n1行到n2行之间的内容拷贝到第n3行下</td></tr><tr><td align="left">:n1,n2 m n3</td><td align="left">将n1行到n2行之间的内容移至到第n3行下</td></tr><tr><td align="left">:n1,n2 d</td><td align="left">将n1行到n2行之间的内容删除</td></tr><tr><td align="left">:n1,n2 w!command</td><td align="left">将文件中n1行至n2行的内容作为command的输入并执行之<br>若不指定n1，n2，则表示将整个文件内容作为command的输入</td></tr></tbody></table><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">q[a-z]</td><td align="left">开始记录但前开始的操作为宏，名称可为【a-z】，然后用q终止录制宏</td></tr><tr><td align="left">reg</td><td align="left">显示当前定义的所有的宏，用@[a-z]来在当前光标处执行宏[a-z]</td></tr></tbody></table><h2 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:split</td><td align="left">分割一个窗口</td></tr><tr><td align="left">:split file.c</td><td align="left">为另一个文件file.c分隔窗口</td></tr><tr><td align="left">:nsplit file.c</td><td align="left">为另一个文件file.c分隔窗口，并指定其行数</td></tr><tr><td align="left">ctrl＋w</td><td align="left">在窗口中切换</td></tr><tr><td align="left">:close</td><td align="left">关闭当前窗口</td></tr></tbody></table><h2 id="文件及其他"><a href="#文件及其他" class="headerlink" title="文件及其他"></a>文件及其他</h2><table><thead><tr><th align="left">命令</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">:q</td><td align="left">退出vi</td></tr><tr><td align="left">:q!</td><td align="left">不保存文件并退出vi</td></tr><tr><td align="left">:e filename</td><td align="left">打开文件filename进行编辑</td></tr><tr><td align="left">:e!</td><td align="left">放弃修改文件内容，重新载入该文件编辑</td></tr><tr><td align="left">:w</td><td align="left">保存当前文件</td></tr><tr><td align="left">:wq</td><td align="left">存盘退出</td></tr><tr><td align="left">:ZZ</td><td align="left">保存当前文档并退出VIM</td></tr><tr><td align="left">:!command</td><td align="left">执行shell命令command</td></tr><tr><td align="left">:r!command</td><td align="left">将命令command的输出结果放到当前行</td></tr><tr><td align="left">:n1,n2 write temp.c</td><td align="left"></td></tr><tr><td align="left">:read file.c</td><td align="left">将文件file.c的内容插入到当前光标所在的下面</td></tr></tbody></table><p>﻿</p><h3 id="web-xml详解-143-md-“-143-md”"><a href="#web-xml详解-143-md-“-143-md”" class="headerlink" title="web.xml详解(#143.md “#143.md”)"></a>web.xml详解(#143.md “#143.md”)</h3><p>web.xml文件是用来配置:欢迎页、servlet、filter、listener等的. 当你的web项目工程没用到这些时,你可以不用web.xml文件来配置你的web工程。<br>如果项目中有多项标签,其加载顺序依次是:context-param &gt;&gt; listener &gt;&gt; filter &gt;&gt; servlet(同类多个节点出现顺序依次加载)</p><!--more --><ol><li>web.xml先读取context-param和listener这两种节点；</li><li>然后容器创建一个ServletContext(上下文)，应用于整个项目；</li><li>容器会将读取到的context-param转化为键值对并存入servletContext；</li><li>根据listener创建监听；</li><li>容器会读取，根据指定的类路径来实例化过滤器；</li><li>此时项目初始化完成；</li><li>在发起第一次请求是，servlet节点才会被加载实例化。</li></ol><h2 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h2><h3 id="context-param"><a href="#context-param" class="headerlink" title="context-param"></a>context-param</h3><p>context-param节点是web.xml中用于配置应用于整个web项目的?上下文。包括两个子节点，其中param-name 设定上下文的参数名称。必须是唯一名称；param-value 设定的参数名称的值。</p><p>读取节点的方法如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">$&#123;initParam.参数名&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Servlet中String paramValue&#x3D;getServletContext().getInitParameter(“参数名”)?</p><p>web.xml中配置spring必须使用listener节点，但context-param节点可有可无，如果缺省则默认contextConfigLocation路径为“&#x2F;WEB-INF&#x2F;applicationContext.xml”；如果有多个xml文件，使用”,“分隔</p><h3 id="listener"><a href="#listener" class="headerlink" title="listener"></a>listener</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.request.RequestContextListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为web应用程序定义监听器，监听器用来监听各种事件，比如：application和session事件，所有的监听器按照相同的方式定义，功能取决去它们各自实现的接口，常用的Web事件接口有如下几个：<br><code>ServletContextListener</code>：用于监听Web应用的启动和关闭；<br><code>ServletContextAttributeListener</code>：用于监听ServletContext范围（application）内属性的改变；<br><code>ServletRequestListener</code>：用于监听用户的请求；<br><code>ServletRequestAttributeListener</code>：用于监听ServletRequest范围（request）内属性的改变；<br><code>HttpSessionListener</code>：用于监听用户session的开始和结束；<br><code>HttpSessionAttributeListener</code>：用于监听HttpSession范围（session）内属性的改变。</p><p>配置Listener只要向Web应用注册Listener实现类即可，无序配置参数之类的东西，因为Listener获取的是Web应用ServletContext（application）的配置参数。为Web应用配置Listener的两种方式：</p><ol><li>使用@WebListener修饰Listener实现类即可。</li><li>在web.xml文档中使用进行配置。</li></ol><h3 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h3><p>servlet即配置所需用的servlet，用于处理及响应客户的请求。容器的Context对象对请求路径(URL)做出处理，去掉请求URL的上下文路径后，按路径映射规则和Servlet映射路径（）做匹配，如果匹配成功，则调用这个Servlet处理请求。</p><h4 id="为Servlet命名："><a href="#为Servlet命名：" class="headerlink" title="为Servlet命名："></a>为Servlet命名：</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.whatisjava.TestServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="为Servlet定制URL"><a href="#为Servlet定制URL" class="headerlink" title="为Servlet定制URL"></a>为Servlet定制URL</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Load-on-startup"><a href="#Load-on-startup" class="headerlink" title="Load-on-startup"></a>Load-on-startup</h4><p>Load-on-startup 元素在web应用启动的时候指定了servlet被加载的顺序，它的值必须是一个整数。如果它的值是一个负整数或是这个元素不存在，那么容器会在该servlet被调用的时候，加载这个servlet 。如果值是正整数或零，容器在配置的时候就加载并初始化这个servlet，容器必须保证值小的先被加载。如果值相等，容器可以自动选择先加载谁。<br>当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；<br>当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。<br>正数的值越小，启动该servlet的优先级越高。</p><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>设置过滤器:如编码过滤器,过滤所有资源</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>forceEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>设置会话(Session)过期时间,其中时间以分钟为单位,加入设置60分超时:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="welcom-file-list"><a href="#welcom-file-list" class="headerlink" title="welcom-file-list"></a>welcom-file-list</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file-list</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>welcome-file</span><span class="token punctuation">></span></span>index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>welcome-file-list</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>PS:指定了两个欢迎页面,显示时按顺序从第一个找起，如果第一个存在，就显示第一个，后面的不起作用。如果第一个不存在，就找第二个，以此类推。如果都没有就404.</p></blockquote><h4 id="关于欢迎页面："><a href="#关于欢迎页面：" class="headerlink" title="关于欢迎页面："></a>关于欢迎页面：</h4><p>访问一个网站时，默认看到的第一个页面就叫欢迎页，一般情况下是由首页来充当欢迎页的。一般情况下，我们会在web.xml中指定欢迎页。但 web.xml并不是一个Web的必要文件，没有web.xml，网站仍然是可以正常工作的。只不过网站的功能复杂起来后，web.xml的确有非常大用处，所以，默认创建的动态web工程在WEB-INF文件夹下面都有一个web.xml文件。</p><h3 id="error-page"><a href="#error-page" class="headerlink" title="error-page"></a>error-page</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 错误码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/error404.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 错误类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">></span></span>java.lang.Exception<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exception-type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/exception.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="windows环境下使用hexo搭建blog平台-144-md-“-144-md”"><a href="#windows环境下使用hexo搭建blog平台-144-md-“-144-md”" class="headerlink" title="windows环境下使用hexo搭建blog平台(#144.md “#144.md”)"></a>windows环境下使用hexo搭建blog平台(#144.md “#144.md”)</h3><p>之前已经出过几期搭建 <code>hexo</code> 的文章，但是有不少朋友私信说系统是windows的，希望出一期windows环境下的hexo搭建文章。</p><p>为此，确保可用性，笔者在linux（笔者的系统环境）环境下安装了windows虚拟机重新演练了一边，确保没有什么漏洞，才写下了此文。</p><p>本文会非常详细，以确保没有计算机背景的小白也可以轻松上手</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>1).下载：从官网下载windows版本的git,地址在下方。<br>()<br>2).安装：双击安装，一直点击下一步即可</p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>1).下载：从官网下载windows版本的node.js安装包（.msi后缀），地址下方<br>()<br>2).安装：双击安装，一直点击下一步即可</p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在任意目录如桌面，点击鼠标右键，选择Git Bash Here这一项，打开git bash命令框（前提是git安装成功），如下图<br><img src="/" alt="鼠标右键"><br>在打开的命令窗内输入下面的命令进行安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装过后，输入 <code>hexo -v</code>，出现下面信息，则表示安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo <span class="token parameter variable">-v</span>hexo-cli: <span class="token number">1.0</span>.2os: Windows_NT <span class="token number">6.1</span>.7601 win32 x64http_parser: <span class="token number">2.7</span>.0node: <span class="token number">6.10</span>.0v8: <span class="token number">5.1</span>.281.93uv: <span class="token number">1.9</span>.1zlib: <span class="token number">1.2</span>.8ares: <span class="token number">1.10</span>.1-DEVicu: <span class="token number">58.2</span>modules: <span class="token number">48</span>openssl: <span class="token number">1.0</span>.2k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化blog-1"><a href="#初始化blog-1" class="headerlink" title="初始化blog"></a>初始化blog</h2><p>进入准备创建blog的目录，同样点击鼠标右键，打开git bash命令框，<br>执行一下命令进行初始化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就会自动创建一个名字为myblog目录，这时本地blog就已经创建好了。<br>进入blog目录，启动 blog</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">cd</span> myblog$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在浏览器输入 <code>127.0.0.1:4000</code>就可以访问到刚刚创建好的blog了。</p><h2 id="换皮肤"><a href="#换皮肤" class="headerlink" title="换皮肤"></a>换皮肤</h2><p>如果觉的自带的皮肤太难看。可以根据以下步奏更换皮肤<br>在<a href="">官网</a> 可以查看各种各样的皮肤，挑选自己喜欢的皮肤</p><p>这里以 <code>3-hexo</code> 这款皮肤为例（这款皮肤是笔者写的，效果可查看 <a href="">yelog.org</a>）<br>1）进入皮肤的 <code>github</code> 官网，如<a href="">3-hexo</a>的网址<br>找到 <code>clone or download</code> ,复制它的url：</p><p>2）进入 <code>myblog</code> 目录，打开 <code>git bash</code> 命令框，执行以下命令将皮肤下载到themes目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone  themes/3-hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>修改 <code>myblog/_config.yml</code> 中的 <code>theme: landscape</code> 为 <code>theme: 3-hexo</code></li></ol><blockquote><p>如果使用 <code>3-hexo</code> 主题的话，还需要注意两点<br>①因为主题使用了自己的高亮效果，还需要修改 <code>highlight enable: true</code> 的 <code>true</code> 改为 <code>false</code>。<br>②由于主题启用了文章字数统计功能，需要安装一个插件，在 <code>myblog</code> 目录下，打开 <code>git bash</code> 命令框，执行 <code>npm i --save hexo-wordcount</code> 即可</p></blockquote><ol start="4"><li><p>重新渲染，启动服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开浏览器查看效果，换肤成功</p></li></ol><h2 id="如何写文章"><a href="#如何写文章" class="headerlink" title="如何写文章"></a>如何写文章</h2><p>文章在 <code>myblog/source/_posts/</code> 下，以markdown格式写成，笔者推荐使用<code>atom</code>作为写作工具。<br>可以通过 <code>hexo new 文章名</code> 来创建一篇文章，当然也可以直接在 <code>_posts</code> 目录下直接新建.md文件。<br>执行命令 仍是在 <code>myblog</code> 目录下，打开 <code>git bash</code> 命令框。以下是常用命令，其他可以查阅官网。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个标题为“git教程”的文章</span>$ hexo new <span class="token string">"git教程"</span><span class="token comment"># 清除所有渲染的页面</span>$ hexo clean<span class="token comment"># 将markdown渲染成页面</span>$ hexo g<span class="token comment"># 启动hexo</span>$ hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发布到网上"><a href="#发布到网上" class="headerlink" title="发布到网上"></a>发布到网上</h2><p>如果想要在github上搭建blog，或者在自己的购买的服务器上搭建blog<br>可以查看笔者的往期文章</p><p>今天的教程就到这里，有什么问题可以在评论区交流。</p><p>﻿</p><h3 id="一文看懂JavaScript中的Promise-145-md-“-145-md”"><a href="#一文看懂JavaScript中的Promise-145-md-“-145-md”" class="headerlink" title="一文看懂JavaScript中的Promise(#145.md “#145.md”)"></a>一文看懂JavaScript中的Promise(#145.md “#145.md”)</h3><h2 id="一、Promise-是什么"><a href="#一、Promise-是什么" class="headerlink" title="一、Promise 是什么"></a>一、Promise 是什么</h2><p><code>Promise</code> 是 <code>ES6</code> 提供的原生对象，用来处理异步操作</p><p>它有三种状态</p><ul><li><code>pending</code>: 初始状态，不是成功或失败状态。</li><li><code>fulfilled</code>: 意味着操作成功完成。</li><li><code>rejected</code>: 意味着操作失败。</li></ul><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="2-1-创建-Promise"><a href="#2-1-创建-Promise" class="headerlink" title="2.1 创建 Promise"></a>2.1 创建 Promise</h3><p>通过 <code>new Promise</code> 来实例化，支持链式调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">// 逻辑</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">//当上面"逻辑"中调用 resolve() 时触发此方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">//当上面"逻辑"中调用 reject() 时触发此方法</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-执行顺序"><a href="#2-2-执行顺序" class="headerlink" title="2.2 执行顺序"></a>2.2 执行顺序</h3><p><code>Promise</code>一旦创建就立即执行，并且无法中途取消，执行逻辑和顺序可以从下面的示例中获得</p><p>如下，可修改 <code>if</code> 条件来改变异步结果，下面打印开始的数字是执行顺序</p><p><a href="">在线调试此示例 - jsbin</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1.开始创建并执行 Promise'</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2.由于创建会立即执行，所以会立即执行到本行'</span><span class="token punctuation">)</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">// 模拟异步请求</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'4. 1s之期已到，开始执行异步操作'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 一般我们符合预期的结果时调用 resolve()，会在 .then 中继续执行</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 不符合预期时调用 reject()，会在 .catch 中继续执行</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'不符合预期'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5.调用了then，接收数据：'</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'5.调用了catch，错误信息：'</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3.本行为同步操作，所以先于 Promise 内的异步操作（setTimeout）'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果如下</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"1.开始创建并执行 Promise"</span><span class="token string">"2.由于创建会立即执行，所以会立即执行到本行"</span><span class="token string">"3.本行为同步操作，所以先于 Promise 内的异步操作（setTimeout）"</span><span class="token string">"4. 1s之期已到，开始执行异步操作"</span><span class="token string">"5.调用了then，接收数据：成功"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-用函数封装-Promise"><a href="#2-3-用函数封装-Promise" class="headerlink" title="2.3 用函数封装 Promise"></a>2.3 用函数封装 Promise</h3><p>这是比较常用的方法，如下用 <code>setTimeout</code> 模拟异步请求，封装通用请求函数</p><p><a href="">在线调试此示例 - jsbin</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这是一个异步方法</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步方法开始执行'</span><span class="token punctuation">)</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'异步方法执行完成'</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'的结果集'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// 调用请求函数，并接受处理返回结果</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/user/list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"异步方法开始执行"</span><span class="token string">"异步方法执行完成"</span><span class="token string">"/user/list的结果集"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="三、高级用法"><a href="#三、高级用法" class="headerlink" title="三、高级用法"></a>三、高级用法</h2><h3 id="3-1-同时支持Callback与Promise"><a href="#3-1-同时支持Callback与Promise" class="headerlink" title="3.1 同时支持Callback与Promise"></a>3.1 同时支持Callback与Promise</h3><p><a href="">在线调试此示例 - jsbin</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> success<span class="token punctuation">,</span> fail</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> success <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'羊'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fail <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fail<span class="token punctuation">)</span>        <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">'用户不存在'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// callback 调用方式</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/user/get'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Callback请求成功！返回结果:'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Callback请求失败！错误信息:'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Promise 调用方式</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/user/get'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Pormise请求成功！返回结果：'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Promise请求失败！返回结果：'</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">Callback请求成功！返回结果</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">"羊"</span><span class="token punctuation">&#125;</span>Pormise请求成功！返回结果： <span class="token punctuation">&#123;</span><span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">"羊"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-链式调用"><a href="#3-2-链式调用" class="headerlink" title="3.2 链式调用"></a>3.2 链式调用</h3><p><code>.then</code> 支持返回 <code>Promise</code> 对象进行链式调用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/user/info'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">// 用户信息查询成功后，可以根据返回结果查询后续信息</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户信息:'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/user/score'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户成绩:'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">'/user/friends'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户朋友:'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-Promise-all"><a href="#3-3-Promise-all" class="headerlink" title="3.3 Promise.all"></a>3.3 Promise.all</h3><p><code>Promise.all</code> 方法用于将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。<br><a href="">在线调试此示例 - jsbin</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 生成一个Promise对象的数组</span><span class="token keyword">var</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'全部通过'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'未全部通过，有问题id：'</span><span class="token operator">+</span>reason<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">未全部通过，有问题id：<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h3><p><a href="">mozilla web docs</a></p><p>﻿</p><h3 id="不蒜子适配pjax-146-md-“-146-md”"><a href="#不蒜子适配pjax-146-md-“-146-md”" class="headerlink" title="不蒜子适配pjax(#146.md “#146.md”)"></a>不蒜子适配pjax(#146.md “#146.md”)</h3><h2 id="不蒜子一般配置"><a href="#不蒜子一般配置" class="headerlink" title="不蒜子一般配置"></a>不蒜子一般配置</h2><p>加入脚本</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--pv方式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    本站总访问量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--uv方式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  本站访客数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_site_uv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>人次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--pv方式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_container_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  本文总阅读量<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>busuanzi_value_page_pv<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>次<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只安装脚本，不安装标签代码，即可实现只记数，不显示。</p><h2 id="适配pjax"><a href="#适配pjax" class="headerlink" title="适配pjax"></a>适配pjax</h2><p>最近开发3-hexo主题，由于主题使用的pjax，异步加载页面时不蒜子会出现加载不到多说js的问题。<br>在pjax：end加载下面js代替标签即可</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">$.getScript(&quot;&#x2F;&#x2F;dn-lbstatics.qbox.me&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>﻿</p><h3 id="加密算法简介-147-md-“-147-md”"><a href="#加密算法简介-147-md-“-147-md”" class="headerlink" title="加密算法简介(#147.md “#147.md”)"></a>加密算法简介(#147.md “#147.md”)</h3><h2 id="一、对称密钥算法"><a href="#一、对称密钥算法" class="headerlink" title="一、对称密钥算法"></a>一、对称密钥算法</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>对称加密（Symmetric-key algorithm）是指加解密用同一个密钥的算法，根据具体实现分为流加密和分组加密两种类型：</p><ul><li>流加密（Stream cipher）是对称加密常用的一种实现方法，加密和解密双方使用相同伪随机加密数据流，一般都是逐位异或随机密码本的内容。</li><li>分组加密加密（Block cipher），也叫块加密，将明文分成多个等长的模块（block），使用确定的算法和对称密钥对每组分别加密解密。现代分组加密建立在迭代的思想上产生密文。迭代产生的密文在每一轮加密中使用不同的子密钥，而子密钥生成自原始密钥。</li></ul><p>对称加密普遍比非对称加密速度要快，实现更简单，适合大量内容的加密</p><h3 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h3><p>DES (Data Encryption Standard) 是一种分组加密算法</p><p>DES算法的入口参数有三个:Key,Data,Mode，Key是密钥密钥占7个字节56位（64位里另外8位是用来校验的），Data是加密内容，占8个字节64位，Mode是加密还是解密。</p><p>DES算法于1976被确定，现在已经被认为不够安全，主要原因是56位的密钥过短。据说这个算法因为包含一些机密设计元素，被怀疑内含美国国家安全局（NSA）的后门。</p><p>DES算法有个拓展算法叫3DES，就是对数据块进行三次DES加密，增加爆破成本，但本质上也不够安全。</p><h3 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h3><p>RC4 (Rivest Cipher 4) 是一种流加密算法</p><p>RC4起源于1987年，现在已经被认为不够安全。<br>RC4由伪随机数生成器和异或运算组成。RC4的密钥长度可变，范围是[1,255]。RC4一个字节一个字节地加解密。给定一个密钥，伪随机数生成器接受密钥并产生一个S盒。S盒用来加密数据，而且在加密过程中S盒会变化。</p><p>由于异或运算的对合性，RC4加密解密使用同一套算法。这个算法实现起来很简单，只用了最基本的加、异或、循环，话说我大学时某个课程设计的做的加密算法就是简化版的RC4。</p><p>之后还出现了RC5、RC6加密算法，但RC5和RC6都是分组加密，和RC4原理并不一样。</p><h3 id="RC5"><a href="#RC5" class="headerlink" title="RC5"></a>RC5</h3><p>RC5 （Rivest Cipher 5） 是一种分组加密算法，它和RC2，RC4，RC6都是同一个叫Ronald Rivest的人设计的。</p><p>相比RC4，RC5的密钥成了128位，但RC5仍然只需要基础的加、异或、循环运算，可以在很多硬件上实现。RC5有三个参数：字的大小，循环轮数（round），密钥中的8位字节个数，所以可以说RC5是一种可变加密算法。实际上循环轮数12轮以下的RC5都被认为是不安全的，会被差分分析法（Differential cryptanalysis）攻击，18-20轮才足够安全。</p><p>目前来说，RC5还是挺安全的，因为实现简单，消耗资源少，在一些传感器、嵌入式设备上使用很合适。</p><h3 id="RC6"><a href="#RC6" class="headerlink" title="RC6"></a>RC6</h3><p>RC6 （Rivest Cipher 6） 是RC5的加强版，也属于分组加密算法。</p><p>RC6算法在RC5算法基础之上针对RC5算法中的漏洞，主要是循环移位的位移量并不取决于要移动次数的所有比特，通过采用引入乘法运算来决定循环移位次数的方法，对RC5算法进行了改进，从而大大提高了RC6算法的安全性。</p><p>RC6曾作为AES（高级加密标准）备选算法之一，但最终AES选择了Rijndael算法。</p><h3 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h3><p>最后压轴出场的是最著名的单密钥对称加密算法AES (Rijndael)，AES是Advanced Encryption Standard的缩写，是美国国家标准与技术研究院2001年发布的新加密标准。</p><p>AES现在就是指的限定了区块长度和密钥长度的Rijndael算法，同样属于分组加密算法，该算法是两位比利时学者1998年发布的。起初还有很多算法参与了AES甄选，最终Rijndael凭借高安全性和清晰的数学结构而被选用。</p><p>AES将Rijndael算法的区块长度固定为128位，密钥长度可选128，192或256比特（Rijndael原版支持128-256，n*32的区块长度和密钥长度）。</p><p>AES算法包括4个步骤：</p><ol><li>AddRoundKey—矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。</li><li>SubBytes—通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。</li><li>ShiftRows—将矩阵中的每个横列进行循环式移位。</li><li>MixColumns—为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey替换。</li></ol><p>截止现在（2016），AES在算法层面上是安全的。2005年有人公布过一种缓存时序攻击法，但使用场景非常极端。</p><h2 id="二、非对称秘钥算法"><a href="#二、非对称秘钥算法" class="headerlink" title="二、非对称秘钥算法"></a>二、非对称秘钥算法</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>公钥加密的思想于1974年被提出，相比对称加密无需共享密钥，更加安全。但是没法加密大量数据，一般用来加密对称加密的密钥，而用对称加密加密大量数据。<br>非对称加密的原理如下：</p><ul><li>消息发送方A在本地构建密钥对，公钥和私钥；</li><li>消息发送方A将产生的公钥发送给消息接收方B；</li><li>B向A发送数据时，通过公钥进行加密，A接收到数据后通过私钥进行解密，完成一次通信；</li><li>反之，A向B发送数据时，通过私钥对数据进行加密，B接收到数据后通过公钥进行解密。</li></ul><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>RSA算法是最著名的非对称加密算法。RSA是1977年提出的，名字来源于Rivest、Shmir和Adleman三位作者。<br>我们平时用到的SSL协议，TLS协议都采用了该算法加密，SSH（Secure Shell）也是基于RSA实现的。</p><p>RSA的数学基础是极大整数的因数分解，具体实现过程如下：</p><ul><li>随意选择两个大的质数p和q，p不等于q，计算N&#x3D;pq。</li><li>根据欧拉函数，求得r&#x3D;varphi (N) &#x3D; varphi(p) * varphi(q)&#x3D;(p-1)(q-1)</li><li>选择一个小于r的整数e，使e与r互质。并求得e关于r的模反元素，命名为d。</li><li>(N,e)是公钥，(N,d)是私钥。</li><li>加密时，加密的块 n^e ≡ c(MOD N)，得到的c就是密文。解密时，c^d ≡ n(MOD N)。</li></ul><p>要破解RSA要解决怎么把一个极大数分解为两个质数p和q，然后通过欧拉函数再得到公钥和私钥。但极大数因数分解目前还没什么好办法，所以只要N足够大，RSA在算法层面上就是安全的。</p><p>当N的长度为256时，用普通电脑花几小时即可以分解，当N长度为512时需要花数月时间分解，1024时需要大型分布式系统才能分解，长度到2046则可以确保是完全安全的。目前已有记录里，被分解的极大数最大位数是768位，于2009年被分解。</p><p>RSA也常被用来做数字签名，在消息内附加一个私钥加密过的散列值（Message digest），以此来确保消息发送人是可靠的。<br><strong>公钥私钥对生成</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.该命令会生成1024位的私钥,此时我们就可以在当前路径下看到rsa_private_key.pem文件了.</span>genrsa <span class="token parameter variable">-out</span> rsa_private_key.pem <span class="token number">1024</span><span class="token comment"># 2.生成的密钥不是pcs8格式，我们需要转成pkcs8格式</span>pkcs8 <span class="token parameter variable">-topk8</span> <span class="token parameter variable">-inform</span> PEM <span class="token parameter variable">-in</span> rsa_private_key.pem <span class="token parameter variable">-outform</span> PEM <span class="token parameter variable">-nocrypt</span><span class="token comment"># 3.生成 rsa 公钥</span>rsa <span class="token parameter variable">-in</span> rsa_private_key.pem <span class="token parameter variable">-pubout</span> <span class="token parameter variable">-out</span> rsa_public_key.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="椭圆曲线算法"><a href="#椭圆曲线算法" class="headerlink" title="椭圆曲线算法"></a>椭圆曲线算法</h3><p>椭圆曲线算法（Elliptic curve cryptography）也是一种非对称加密算法，于1985年被提出，以下简称ECC。<br>相比RSA，同等破解难度时ECC的秘钥更短。另外，ECC可定义椭圆曲线群的双线性映射，该特性可能将来被用来实现身份基加密体制（Identity-Based Encryption，IBE）。</p><p>ECC的数学基础是求椭圆曲线离散对数问题。实现比较复杂我就不写了，因为我也看不懂(⊙﹏⊙)b。 也正因为实现复杂，ECC的加解密速度慢，消耗资源也更多。</p><p>ECC也同样可以实现数字签名，叫做ECDSA。</p><p>ECC的秘钥长度最小要求是160位，建议是163位。目前已有的破解记录是109位，一万台机器破解了一年半。所以ECC在算法层面是可以保证安全的。</p><h3 id="ElGamal"><a href="#ElGamal" class="headerlink" title="ElGamal"></a>ElGamal</h3><p>ElGamal加密算法是一种用于对采用Diff-Hellman方式进行交换的公钥进行加密，常被用于数字签名和密钥加密的算法，ElGamal的数学基础是有限域上的离散对数问题。</p><p>选择一个素数p和两个随机数g 、x （g、 x &lt; p ），计算 y ≡ g^x（ mod p ） ，则其公钥为 y, g 和p ，私钥是x ，g和p可由一组用户共享。</p><p>ElGamal方法中一个明文对应两个加密结果(g^a和g^b)，因此密文空间的大小是明文空间大小的两倍，也就是说纵观整个通信过程，收发密文的大小是实际明文大小的两倍。</p><h2 id="三、哈希算法"><a href="#三、哈希算法" class="headerlink" title="三、哈希算法"></a>三、哈希算法</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>我们经常说MD5加密，但追根究底的话，MD5应该是哈希函数（Hash Function），而哈希函数并不等同于加密（Encrypt），不过我们平常也把哈希叫做加密。哈希函数也叫散列函数，散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用来代表一个短的随机字母和数字组成的字符串。</p><p>说人话就是哈希（Hash）是将目标文本转换成具有相同长度的、不可逆的杂凑字符串，而加密（Encrypt）是将目标文本转换成具有不同长度的、可逆的密文。</p><p>哈希主要用来校验身份，错误检查，完整性检查。</p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>MD5（Message-Digest5 Algorithm）即消息摘要算法，是最著名、应用最为广泛的一种哈希算法，于1992年被公开。MD5之前还有MD4、MD3、MD2等哥哥算法，MD5是最终的改进版。</p><p>MD5输入不定长度信息，输出固定长度为128-bits的散列</p><h2 id="未完-待补充"><a href="#未完-待补充" class="headerlink" title="未完 待补充"></a>未完 待补充</h2><h2 id="REFERENCE"><a href="#REFERENCE" class="headerlink" title="REFERENCE"></a>REFERENCE</h2><p><a href="">常见加密算法简介</a></p><p>﻿</p><h3 id="多说适配pjax-148-md-“-148-md”"><a href="#多说适配pjax-148-md-“-148-md”" class="headerlink" title="多说适配pjax(#148.md “#148.md”)"></a>多说适配pjax(#148.md “#148.md”)</h3><p>最近开发3-hexo主题，由于主题使用的pjax，异步加载页面时多说会出现加载不到多说js的问题。</p><p>多说加载代码如下：</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;&#x2F;加载多说function loadComment() &#123;  duoshuoQuery &#x3D; &#123;short_name: $(&quot;.theme_duoshuo_domain&quot;).val()&#125;;  var d &#x3D; document, s &#x3D; d.createElement(&#39;script&#39;);  s.src &#x3D; &#39;&#39;+new Date().getTime();  s.async &#x3D; true; s.charset &#x3D; &#39;UTF-8&#39;;  (d.head || d.body).appendChild(s);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当局部加载页面时，就会无法加载多说。<br>需要编写一个js方法，参考文档：()</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&#x2F;** * pjax后需要回调函数.加载多说 *&#x2F;function pajx_loadDuodsuo()&#123;  if(typeof duoshuoQuery &#x3D;&#x3D;&quot;undefined&quot;)&#123;    loadComment();  &#125; else &#123;    var dus&#x3D;$(&quot;.ds-thread&quot;);    if($(dus).length&#x3D;&#x3D;1)&#123;      var el &#x3D; document.createElement(&#39;div&#39;);      el.setAttribute(&#39;data-thread-key&#39;,$(dus).attr(&quot;data-thread-key&quot;));&#x2F;&#x2F;必选参数      el.setAttribute(&#39;data-url&#39;,$(dus).attr(&quot;data-url&quot;));      DUOSHUO.EmbedThread(el);      $(dus).html(el);    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在pjax:end中调用此方法即可。</p><p>﻿</p><h3 id="如何在linux中搭建ftp服务-149-md-“-149-md”"><a href="#如何在linux中搭建ftp服务-149-md-“-149-md”" class="headerlink" title="如何在linux中搭建ftp服务(#149.md “#149.md”)"></a>如何在linux中搭建ftp服务(#149.md “#149.md”)</h3><h2 id="什么是-FTP"><a href="#什么是-FTP" class="headerlink" title="什么是 FTP"></a>什么是 FTP</h2><p><code>FTP</code> 是文件传输协议File Transfer Protocol的缩写。顾名思义，FTP用于计算机之间通过网络进行文件传输。你可以通过FTP在计算机账户间进行文件传输，也可以在账户和桌面计算机之间传输文件，或者访问在线软件归档。但是，需要注意的是多数的FTP站点的使用率非常高，可能需要多次重连才能连接上。</p><p>FTP地址和HTTP地址（即网页地址）非常相似，只是FTP地址使用 前缀而不是</p><h2 id="FTP-服务器是什么"><a href="#FTP-服务器是什么" class="headerlink" title="FTP 服务器是什么"></a>FTP 服务器是什么</h2><p>通常，拥有FTP地址的计算机是专用于接收FTP连接请求的。一台专用于接收FTP连接请求的计算机即为FTP服务器或者FTP站点。</p><p>现在，我们来开始一个特别的冒险，我们将会搭建一个FTP服务用于和家人、朋友进行文件共享。在本教程，我们将以vsftpd作为ftp服务。</p><p>VSFTPD是一个自称为最安全的FTP服务端软件。事实上VSFTPD的前两个字母表示“非常安全的very secure”。该软件的构建绕开了FTP协议的漏洞。</p><p>尽管如此，你应该知道还有更安全的方法进行文件管理和传输，如：SFTP（使用OpenSSH）。FTP协议对于共享非敏感数据是非常有用和可靠的。</p><h2 id="安装-VSFTP"><a href="#安装-VSFTP" class="headerlink" title="安装 VSFTP"></a>安装 VSFTP</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#使用 rpm 安装</span>$ dnf <span class="token parameter variable">-y</span> <span class="token function">install</span> vsftpd<span class="token comment">#使用 deb 安装</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> vsftpd<span class="token comment">#在 Arch 中安装</span>$ <span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置-FTP-服务"><a href="#配置-FTP-服务" class="headerlink" title="配置 FTP 服务"></a>配置 FTP 服务</h2><p>多数的VSFTPD配置项都在&#x2F;etc&#x2F;vsftpd.conf配置文件中。这个文件本身已经有非常良好的文档说明了，因此，在本节中，我只强调一些你可能进行修改的重要选项。使用man页面查看所有可用的选项和基本的 文档说明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">man</span> vsftpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根据文件系统层级标准，FTP共享文件默认位于&#x2F;srv&#x2F;ftp目录中。<br><strong>允许上传：</strong><br>为了允许ftp用户可以修改文件系统的内容，如上传文件等，“write_enable”标志必须设置为 YES</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">write_enable=YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>允许本地（系统）用户登录：</strong><br>为了允许文件&#x2F;etc&#x2F;passwd中记录的用户可以登录ftp服务，“local_enable”标记必须设置为YES。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">local_enable=YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>匿名用户登录</strong><br>下面配置内容控制匿名用户是否允许登录：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"># 允许匿名用户登录anonymous_enable=YES# 匿名登录不需要密码（可选）no_anon_password=YES# 匿名登录的最大传输速率，Bytes/second（可选）anon_max_rate=30000# 匿名登录的目录（可选）anon_root=/example/directory/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>根目录限制（Chroot Jail）</strong><br>（ LCTT 译注：chroot jail是类unix系统中的一种安全机制，用于修改进程运行的根目录环境，限制该线程不能感知到其根目录树以外的其他目录结构和文件的存在。详情参看<a href="">chroot jail</a>）</p><p>有时我们需要设置根目录（chroot）环境来禁止用户离开他们的家（home）目录。在配置文件中增加&#x2F;修改下面配置开启根目录限制（Chroot Jail）:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">chroot_list_enable=YESchroot_list_file=/etc/vsftpd.chroot_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>“chroot_list_file”变量指定根目录限制所包含的文件&#x2F;目录（ LCTT 译注：即用户只能访问这些文件&#x2F;目录）</p><p>最后你必须重启ftp服务，在命令行中输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> systemctl restart vsftpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>到此为止，你的ftp服务已经搭建完成并且启动了。</p><p>﻿</p><h3 id="搭建dubbo-zookeeper平台-150-md-“-150-md”"><a href="#搭建dubbo-zookeeper平台-150-md-“-150-md”" class="headerlink" title="搭建dubbo+zookeeper平台(#150.md “#150.md”)"></a>搭建dubbo+zookeeper平台(#150.md “#150.md”)</h3><h2 id="前言-6"><a href="#前言-6" class="headerlink" title="前言"></a>前言</h2><p>本文将介绍在SpringMVC+Spring+Mybatis项目中添加 <code>dubbo</code> 作为 <code>rpc</code> 服务。</p><p>文末有项目代码地址。</p><h2 id="一-搭建zookeeper"><a href="#一-搭建zookeeper" class="headerlink" title="一.搭建zookeeper"></a>一.搭建zookeeper</h2><p>使用 docker 一句话创建：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-dit</span> <span class="token parameter variable">--name</span> zookeeper <span class="token parameter variable">--hostname</span> zookeeper-host <span class="token parameter variable">-v</span> /data:/data <span class="token parameter variable">-p</span> <span class="token number">2181</span>:2181 jplock/zookeeper:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二-安装zkui（非必须）"><a href="#二-安装zkui（非必须）" class="headerlink" title="二.安装zkui（非必须）"></a>二.安装zkui（非必须）</h2><p>这个项目为 zookeeper 提供一个 web 的管理界面。当然我们也可以直接在zookeeper中使用命令查看，所以此步骤可以忽略</p><p>在开始前需要安装 Java 环境、Maven 环境。</p><ol><li>到 <a href="">zkui</a> 的项目中下载代码。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>执行 <code>mvn clean install</code> 生成jar文件。</li><li>将config.cfg复制到上一步生成的jar文件所在目录，然后修改配置文件中的zookeeper地址。</li><li>执行 <code>nohup java -jar zkui-2.0-SNAPSHOT-jar-with-dependencies.jar &amp;</code></li><li>测试 如果能看到如下页面，表示安装成功。</li></ol><p><img src="/" alt="登录页面"><br><img src="/" alt="首页"></p><h2 id="三-使用dubbo"><a href="#三-使用dubbo" class="headerlink" title="三.使用dubbo"></a>三.使用dubbo</h2><ol><li>在原来 SpringMVC+Spring+Mybatis 项目中，除了原来 spring 相关依赖外，还需要加入以下依赖<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.101tec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>定义服务接口<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPersonService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Person</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> <span class="token function">delById</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> <span class="token function">updatePerson</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>定义服务实现类<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonService</span> <span class="token keyword">implements</span> <span class="token class-name">IPersonService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">PersonMapper</span> personMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> personMapper<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> personMapper<span class="token punctuation">.</span><span class="token function">findOneById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">delById</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> personMapper<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">updatePerson</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> personMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>配置生产者，注册服务信息<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://code.alibabatech.com/schema/dubbo<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsdhttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--定义了提供方应用信息，用于计算依赖关系；--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demotest-provider<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 使用 zookeeper 注册中心暴露服务地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zookeeper://192.168.0.86:2181<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 用dubbo协议在20880端口暴露服务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dubbo<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20880<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 和本地bean一样实现服务 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>personService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.service.PersonService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 声明需要暴露的服务接口 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>service</span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.iservice.IPersonService<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>personService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>配置消费者，订阅服务<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>dubbo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://code.alibabatech.com/schema/dubbo<span class="token punctuation">"</span></span>       <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsdhttp://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>application</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo-consumer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 使用 zookeeper 注册中心暴露发现服务地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>registry</span> <span class="token attr-name">address</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zookeeper://192.168.0.86:2181<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>reference</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>personService<span class="token punctuation">"</span></span> <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">interface</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.ssm.iservice.IPersonService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>调用远程服务<br>配置完成后，我们就可以像使用本地 bean 一样，使用 rpc 的 service；<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">IPersonService</span> personService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RpcContext</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//测试ThreadLocal</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> personService<span class="token punctuation">.</span><span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"command"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="最后-6"><a href="#最后-6" class="headerlink" title="最后"></a>最后</h2><p>至此，单机运行的 rpc 服务已搭建完成。</p><p>代码传送文 <a href="">ssm</a></p><p>﻿</p><h3 id="搭建Maven私服-Nexus-151-md-“-151-md”"><a href="#搭建Maven私服-Nexus-151-md-“-151-md”" class="headerlink" title="搭建Maven私服-Nexus(#151.md “#151.md”)"></a>搭建Maven私服-Nexus(#151.md “#151.md”)</h3><blockquote><p>Maven 私服，可以代理远程仓库和部署自己或第三方构件。本文介绍使用最广泛搭建 Maven 私服的工具： Sonatype Nexus。</p></blockquote><h2 id="作者环境"><a href="#作者环境" class="headerlink" title="作者环境"></a>作者环境</h2><p>  本次搭建私服是在局域网的一台服务器上，操作系统为 CentOS 。<br>  需要部署到私服的项目 <code>soul</code><br>  <code>ssm</code> 项目需要引用 <code>soul</code></p><h2 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h2><p>  确保服务器已经安装了 java 环境，这个过程不是本文重点，安装过程自行百度。</p><h2 id="安装Nexus"><a href="#安装Nexus" class="headerlink" title="安装Nexus"></a>安装Nexus</h2><blockquote><p>官网 pro 版本的是需要付费的。所以我们使用免费的 OSS 版本，下载地址 ()</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 上传到服务器并解压</span>$ <span class="token function">tar</span> xvf nexus-3.5.1-02-unix.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="启动Nexus"><a href="#启动Nexus" class="headerlink" title="启动Nexus"></a>启动Nexus</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动服务</span>$ <span class="token builtin class-name">cd</span> /nexus-3.5.1-02/bin/$ ./nexus start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>打开网址：() , ip 为搭建私服的服务器 ip 。<br>用户名&#x2F;密码： admin&#x2F;admin123<br>出现一下画面，就说明安装成功了。<br><img src="/" alt="nexus"></p><h2 id="发布soul项目到私服"><a href="#发布soul项目到私服" class="headerlink" title="发布soul项目到私服"></a>发布soul项目到私服</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><ol><li>创建yelog-release仓库（<em>名字自定义</em>）, type选择 ： release<br><img src="/" alt="①.创建宿主仓库"><br><img src="/" alt="②.选择hosted类型"><br><img src="/" alt="③.创建release类型仓库"></li><li>创建yelog-snapshot仓库（<em>名字自定义</em>）， type选择 ： snapshot<br>重复上面 ① 和 ② 步，根据下图选择类型:<br><img src="/" alt="创建snapshot类型仓库"></li></ol><p>两个都创建完成后，效果如下：<br><img src="/" alt="创建自定义release和snapshot仓库"></p><h3 id="pom中添加部署配置"><a href="#pom中添加部署配置" class="headerlink" title="pom中添加部署配置"></a>pom中添加部署配置</h3><p>url 复制上图中新建的仓库的 copy 按钮，复制url。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>yelog-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Release Repository of yelog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>yelog-snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Snapshot Repository of yelog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在maven的-settings-xml-中配置"><a href="#在maven的-settings-xml-中配置" class="headerlink" title="在maven的 settings.xml 中配置"></a>在maven的 settings.xml 中配置</h3><p>这里配置 maven 的账号密码，id 要与 distributionManagement 中的id一致。默认账号&#x2F;密码：admin&#x2F;admin123</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>yelog-realease<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>yelog-snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>admin123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行maven命令部署项目到私服上"><a href="#执行maven命令部署项目到私服上" class="headerlink" title="执行maven命令部署项目到私服上"></a>执行maven命令部署项目到私服上</h3><p>我这里直接使用IDE的插件执行<br><img src="/" alt="部署项目到私服"><br>部署完成后，可以在 yelog-snapshot 仓库中，查看部署的情况，如下图所示<br><img src="/" alt="查看部署情况"></p><h2 id="从私服拉去依赖库"><a href="#从私服拉去依赖库" class="headerlink" title="从私服拉去依赖库"></a>从私服拉去依赖库</h2><blockquote><p>上一步我们已经将项目 <code>soul</code> 部署到私服上了，这一步介绍项目 <code>ssm</code> 如何依赖引用 <code>soul</code>。<br>私服中的 maven-central 可以链接远程仓库。这样，当有依赖在私服中找不到后，就可以通过远程仓库自动下载依赖。</p></blockquote><h3 id="pom-文件中添加如下配置"><a href="#pom-文件中添加如下配置" class="headerlink" title="pom 文件中添加如下配置"></a>pom 文件中添加如下配置</h3><ol><li>public库成员仓库中添加我们自定义的仓库<br><img src="/" alt="public库设置成员仓库"></li><li>配置远程仓库为私服地址。<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>public Repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Public Repositories<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>引入依赖<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.soul<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>ssm项目就可以引用到soul代码<br><img src="/" alt="在代码中就可以直接引用到部署到私服的soul项目代码"></li></ol><p>本文结束。</p><p>﻿</p><h3 id="‘-译-理解浏览器关键渲染路径’-152-md-“-152-md”"><a href="#‘-译-理解浏览器关键渲染路径’-152-md-“-152-md”" class="headerlink" title="‘[译]理解浏览器关键渲染路径’(#152.md “#152.md”)"></a>‘[译]理解浏览器关键渲染路径’(#152.md “#152.md”)</h3><p>当一个浏览器接收到从服务器发来的html页面，在渲染并呈现到屏幕上之前，有很多步骤要做。浏览器渲染页面需要做的一系列行为被称作“关键渲染路径（Critical Rendering Path 简称CRP）”。</p><p><code>CRP</code> 的知识对于如何提升网站性能是相当有用的。<code>CRP</code>有6个步骤：</p><ol><li>构建DOM树</li><li>构建CSSOM树</li><li>运行JavaScript</li><li>创建渲染树</li><li>生成布局</li><li>绘制页面<br><img src="/" alt="CRP的6个步骤"></li></ol><h2 id="构建DOM树"><a href="#构建DOM树" class="headerlink" title="构建DOM树"></a>构建DOM树</h2><p>DOM（Document Object Model）树是一个表示整个解析过的HTML页面的对象，从根节点<code>&lt;html&gt;</code>开始，会创建页面中的每个 元素&#x2F;文本 节点。嵌套在其他元素中的元素作为字节点，每个节点都包含了其所有的元素属性，例如： 一个<code>&lt;a&gt;</code>节点将有 <code>href</code> 属性与其关联。</p><p>举个例子</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Understanding the Critical Rendering Path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Understanding the Critical Rendering Path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Introduction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem ipsum dolor sit amet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>Copyright 2017<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的 HTML 将会被解析成下面的DOM树<br><img src="/" alt="DOM树"><br>HTML的优点在于它不必等待整个页面加载完成才呈现页面，可以解析一部分，显示一部分。但是像CSS、JavaScript等其他资源会阻止页面渲染。</p><h2 id="构建CSSOM树"><a href="#构建CSSOM树" class="headerlink" title="构建CSSOM树"></a>构建CSSOM树</h2><p>CSSOM（CSS Object Model） 是一个跟DOM相关的样式对象。它跟DOM的表示方法是相似的，但是不论显式声明还是隐式继承，每个节点都存在关联样式。</p><p>In the style.css file from the document mentioned above, we have the folowing styles<br>在上面提到的html页面的<code>style.css</code>中的样式如下</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 18px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">header</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> plum<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">h1</span> <span class="token punctuation">&#123;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 28px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">main</span> <span class="token punctuation">&#123;</span> <span class="token property">color</span><span class="token punctuation">:</span> firebrick<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span class="token selector">h2</span> <span class="token punctuation">&#123;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">footer</span> <span class="token punctuation">&#123;</span> <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它会被构建成下面的CSSOM树<br><img src="/" alt="CSSOM树"><br>CSS 被认为是 “渲染阻塞资源”，它意味着如果不首先完全解析资源，渲染树是无法构建的。CSS由于它的层叠继承的性质，不能像HTML一样解析一部分，显示一部分。定义在文档后面的样式会覆盖或改写之前定义的样式，因为在整个样式表都被解析之前，如果我们使用了在样式表中较早定义的样式，那错误的样式将被应用。这意味着CSS必须被全部解析之后，才能开始下一步。</p><p>如果CSS文件适用于当前设备的话，仅仅只是会阻塞渲染。<code>&lt;link rel=&quot;stylesheet&quot;&gt;</code>标签可以使用<code>media</code>属性，用来指定特定样式宽度的特定媒体查询。</p><p>举个例子，如果我们有一个包含媒体属性<code>orientation:landscape</code>的样式，我们使用纵向模式（portrait mode）查看页面，这个资源将不会阻塞渲染。</p><p>CSS 也会导致脚本阻塞。这是因为JavaScript文件必须等待CSSOM被构建后才能运行。</p><h2 id="运行JavaScript"><a href="#运行JavaScript" class="headerlink" title="运行JavaScript"></a>运行JavaScript</h2><p>JavaScript被认为是<code>解析阻塞资源</code>，这意味着HTML的解析会被JavaScript阻塞。</p><p>当解析器解析到 <code>&lt;script&gt;</code> 标签时，无论该资源是内部还是外链的都会停止解析，先去下载资源。这也是为什么，当页面内有引用JavaScript文件时，引用标签要放到可视元素之后了。</p><p>为避免JavaScript解析阻塞，它可以通过设定 async 属性来要求其异步加载。</p><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">&lt;script async src&#x3D;&quot;script.js&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建渲染树"><a href="#创建渲染树" class="headerlink" title="创建渲染树"></a>创建渲染树</h2><p>渲染树是DOM和CSSOM的结合体，它代表最终会渲染在页面上的元素的结构对象。这意味着它只关注可见内容，对于被隐藏或者CSS属性 display:none 的属性，不会被包含在结构内。</p><p>使用上面例子的DOM和CSSOM，渲染树被创建如下：<br><img src="/" alt="渲染树"></p><h2 id="生成布局"><a href="#生成布局" class="headerlink" title="生成布局"></a>生成布局</h2><p>布局决定了浏览器视窗的大小,它提供了上下文依赖的CSS样式，如百分比或窗口的单位。视窗尺寸通常通过 <code>&lt;head&gt;</code> 标签中的 <code>&lt;meta&gt;</code> 中的 viewport 设定来决定。如果不存在该标签，则通常默认为 980px</p><p>例如，最常用的 <code>meta veiwport</code> 的值将会被设置为和设备宽度相符：</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1&quot;&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果用户访问网页的设备宽度为1000px。然后整体视窗尺寸就会基于这个宽度值了，比如 50% 就是500px, 10vw 就是100px 等等。</p><h2 id="绘制页面"><a href="#绘制页面" class="headerlink" title="绘制页面"></a>绘制页面</h2><p>最后，在绘制页面步骤。页面上的所有可见内容都会被转换为像素并呈现在屏幕上。</p><p>具体的绘制时间跟DOM数以及应用的样式有关。有些样式会花费更多的执行时间，比如复杂的渐变背景图片所需要的计算时间远超过简单固定背景色。</p><h2 id="整合所有"><a href="#整合所有" class="headerlink" title="整合所有"></a>整合所有</h2><p>想要看到关键渲染路径的执行流程，可以使用DevTools，在Chrome中，它是根据时间轴展示的。</p><p>举个例子, 上面的页面加入<code>&lt;script&gt;</code>标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Understanding the Critical Rendering Path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Understanding the Critical Rendering Path<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Introduction<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Lorem ipsum dolor sit amet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>Copyright 2017<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看关于页面加载时的事件日志，以下是我们获得的：<br><img src="/" alt="时间轴"></p><ol><li><strong>Send Request</strong> - 发送到index.html的GET请求</li><li><strong>Parse HTML</strong> and <strong>Send Request</strong> - 开始解析HTML并构建DOM，然后发送 GET 请求style.css和main.js</li><li><strong>Parse Stylesheet</strong> - 根据 style.css 创建的CSSOM</li><li><strong>Evaluate Script</strong> - 执行 main.js</li><li><strong>Layout</strong> - 基于HTML的元视窗标签，生成布局</li><li><strong>Paint</strong> - 绘制网页<br>基于这些信息，我们可以知道如何优化关键渲染路径。</li></ol><p>原文： <a href="">Understanding the Critical Rendering Path</a></p><p>﻿</p><h3 id="解决iphone下后退不执行js的问题-153-md-“-153-md”"><a href="#解决iphone下后退不执行js的问题-153-md-“-153-md”" class="headerlink" title="解决iphone下后退不执行js的问题(#153.md “#153.md”)"></a>解决iphone下后退不执行js的问题(#153.md “#153.md”)</h3><h2 id="直接上解决方法"><a href="#直接上解决方法" class="headerlink" title="直接上解决方法"></a>直接上解决方法</h2><p>不论页面是否被缓存，都会触发 <code>pageshow</code>，所以后退后需要执行的方法可以都放在下面事件内：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'pageshow'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'on pageshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>浏览器缓存行为</code> 的详细介绍可以参考： </p><p>﻿</p><h3 id="解决linux下zip文件解压乱码-154-md-“-154-md”"><a href="#解决linux下zip文件解压乱码-154-md-“-154-md”" class="headerlink" title="解决linux下zip文件解压乱码(#154.md “#154.md”)"></a>解决linux下zip文件解压乱码(#154.md “#154.md”)</h3><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>由于zip格式并没有指定编码格式，Windows下生成的zip文件中的编码是GBK&#x2F;GB2312等，因此，导致这些zip文件在Linux下解压时出现乱码问题，因为Linux下的默认编码是UTF8。</p><h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用7z解压。</p><ol><li><p>安装p7zip和convmv</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># fedora</span>$ <span class="token function">su</span> <span class="token parameter variable">-c</span> <span class="token string">'yum install p7zip convmv'</span><span class="token comment"># ubuntu</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> p7zip convmv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行一下命令解压缩</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用7z解压缩</span>$ <span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span>C 7za x your-zip-file.zip<span class="token comment"># 递归转码</span>$ convmv <span class="token parameter variable">-f</span> GBK <span class="token parameter variable">-t</span> utf8 <span class="token parameter variable">--notest</span> <span class="token parameter variable">-r</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>﻿</p><h3 id="解决粘贴到vim缩进错乱问题-155-md-“-155-md”"><a href="#解决粘贴到vim缩进错乱问题-155-md-“-155-md”" class="headerlink" title="解决粘贴到vim缩进错乱问题(#155.md “#155.md”)"></a>解决粘贴到vim缩进错乱问题(#155.md “#155.md”)</h3><h2 id="遇见"><a href="#遇见" class="headerlink" title="遇见"></a>遇见</h2><p>当我使用vim，想要粘贴下面这段脚本到 xx.sh 文件中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">==</span> <span class="token string">"help"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[37m pay 参数1 [参数2] <span class="token entity" title="\033">\033</span>[0m"</span>    <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            filename <span class="token operator">=</span> <span class="token variable">$2</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[37m 缺少关键词，通过'pay help'查看帮助信息 <span class="token entity" title="\033">\033</span>[0m"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>却出现了错乱,如下图所示<br><img src="/" alt="缩进乱掉"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>vim 没有相应的程序来处理这个从其他应用复制粘贴的过程，所以Vim通过插入键盘输入的buffer来模拟这个粘贴的过程，这个时候Vim会以为这是用户输入的。</p><p>所以问题是：当上一行结束，光标进入下一行时Vim会自动以上一行的的缩进为初始位置。这样就会破坏原始文件的缩进。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>经过一番google，发现vim提供了 <code>paste</code> 选项，进入 paste 模式后，就可以正常缩进了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入 paste 模式</span>:set <span class="token function">paste</span><span class="token comment"># 退出 paste 模式</span>:set nopaste<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/" alt="缩进正常"></p><p>如果不想每次都执行这个命令，可以在 <code>～/.vimrc</code> 中添加一行配置 <code>set pastetoggle=&lt;F12&gt;</code> ，这样就可以通过F12快速在paste模式中切换。</p><p>﻿</p><h3 id="‘SpringMVC执行流程及源码解析’-156-md-“-156-md”"><a href="#‘SpringMVC执行流程及源码解析’-156-md-“-156-md”" class="headerlink" title="‘SpringMVC执行流程及源码解析’(#156.md “#156.md”)"></a>‘SpringMVC执行流程及源码解析’(#156.md “#156.md”)</h3><p>在SpringMVC中主要是围绕着DispatcherServlet来设计，可以把它当做指挥中心。这里先说明一下SpringMVC文档给出的执行流程，然后是我们稍微具体的执行流程，最后是流程大致的源码跟踪。关于很很很详细的源码解析，这里暂先不做。</p><h2 id="官方文档中的流程"><a href="#官方文档中的流程" class="headerlink" title="官方文档中的流程"></a>官方文档中的流程</h2><p>首先看下SpringMVC文档上给的流程图：<br><img src="/" alt="官方流程图"><br>这张图片给了我们大概的执行流程：</p><ol><li>用户请求首先发送到前端控制器DispatcherServlet，DispatcherServlet根据请求的信息来决定使用哪个页面控制器Controller（也就是我们通常编写的Controller）来处理该请求。找到控制器之后，DispatcherServlet将请求委托给控制器去处理。</li><li>接下来页面控制器开始处理用户请求，页面控制器会根据请求信息进行处理，调用业务层等等，处理完成之后，会把结果封装成一个ModelAndView返回给DispatcherServlet。</li><li>前端控制器DispatcherServlet接到页面控制器的返回结果后，根据返回的视图名选择相应的试图模板，并根据返回的数据进行渲染。</li><li>最后前端控制器DispatcherServlet将结果返回给用户。</li></ol><h2 id="更具体的流程"><a href="#更具体的流程" class="headerlink" title="更具体的流程"></a>更具体的流程</h2><p>上面只是总体流程，接下来我们稍微深入一点，看下更具体的流程，这里没有图，只有步骤解析：</p><ol><li>用户请求发送到前端控制器DispatcherServlet。</li><li>前端控制器DispatcherServlet接收到请求后，DispatcherServlet会使用HandlerMapping来处理，HandlerMapping会查找到具体进行处理请求的Handler对象。</li><li>HandlerMapping找到对应的Handler之后，并不是返回一个Handler原始对象，而是一个Handler执行链，在这个执行链中包括了拦截器和处理请求的Handler。HandlerMapping返回一个执行链给DispatcherServlet。</li><li>DispatcherServlet接收到执行链之后，会调用Handler适配器去执行Handler。</li><li>Handler适配器执行完成Handler（也就是我们写的Controller）之后会得到一个ModelAndView，并返回给DispatcherServlet。</li><li>DispatcherServlet接收到Handler适配器返回的ModelAndView之后，会根据其中的视图名调用视图解析器。</li><li>视图解析器根据逻辑视图名解析成一个真正的View视图，并返回给DispatcherServlet。</li><li>DispatcherServlet接收到视图之后，会根据上面的ModelAndView中的model来进行视图中数据的填充，也就是所谓的视图渲染。</li><li>渲染完成之后，DispatcherServlet就可以将结果返回给用户了。</li></ol><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>DispatcherServlet是一个Servlet，我们知道在Servlet在处理一个请求的时候会交给service方法进行处理，这里也不例外，DispatcherServlet继承了FrameworkServlet，首先进入FrameworkServlet的service方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">//请求方法</span>    <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//PATCH方法单独处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">PATCH</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//其他的请求类型的方法经由父类，也就是HttpServlet处理</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HttpServlet中会根据请求类型的不同分别调用doGet或者doPost等方法，FrameworkServlet中已经重写了这些方法，在这些方法中会调用processRequest进行处理，在processRequest中会调用doService方法，这个doService方法就是在DispatcherServlet中实现的。下面就看下DispatcherServlet中的doService方法的实现。</p><h3 id="请求到达DispatcherServlet"><a href="#请求到达DispatcherServlet" class="headerlink" title="请求到达DispatcherServlet"></a>请求到达DispatcherServlet</h3><p>doService方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//给request中的属性做一份快照</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributesSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">isIncludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Taking snapshot of request attributes before include"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        attributesSnapshot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> attrNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>attrNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> attrNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cleanupAfterInclude <span class="token operator">||</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                attributesSnapshot<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果我们没有配置类似本地化或者主题的处理器之类的</span>    <span class="token comment">//SpringMVC会使用默认的值</span>    <span class="token comment">//默认配置文件是DispatcherServlet.properties</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">LOCALE_RESOLVER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">THEME_RESOLVER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">THEME_SOURCE_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token function">getThemeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FlashMap</span> inputFlashMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">.</span><span class="token function">retrieveAndUpdate</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFlashMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">INPUT_FLASH_MAP_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>inputFlashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_FLASH_MAP_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FlashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">FLASH_MAP_MANAGER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//开始处理</span>        <span class="token function">doDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Restore the original attribute snapshot, in case of an include.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attributesSnapshot <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">restoreAttributesAfterInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> attributesSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DispatcherServlet开始真正的处理，doDispatch方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>    <span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//SpringMVC中异步请求的相关知识，暂先不解释</span>    <span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Exception</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//先检查是不是Multipart类型的，比如上传等</span>            <span class="token comment">//如果是Multipart类型的，则转换为MultipartHttpServletRequest类型</span>            processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            multipartRequestParsed <span class="token operator">=</span> processedRequest <span class="token operator">!=</span> request<span class="token punctuation">;</span>            <span class="token comment">//获取当前请求的Handler</span>            mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//获取当前请求的Handler适配器</span>            <span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 对于header中last-modified的处理</span>            <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//拦截器的preHandle方法进行处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//真正调用Handler的地方</span>                mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//处理成默认视图名，就是添加前缀和后缀等</span>            <span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//拦截器postHandle方法进行处理</span>            mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//处理最后的结果，渲染之类的都在这里</span>        <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">triggerAfterCompletionWithError</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Instead of postHandle and afterCompletion</span>            mappedHandler<span class="token punctuation">.</span><span class="token function">applyAfterConcurrentHandlingStarted</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// Clean up any resources used by a multipart request.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>multipartRequestParsed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">cleanupMultipart</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到大概的步骤还是按照我们上面分析的走的。</p><h3 id="查找请求对应的Handler对象"><a href="#查找请求对应的Handler对象" class="headerlink" title="查找请求对应的Handler对象"></a>查找请求对应的Handler对象</h3><p>对应着这句代码 <code>mappedHandler = getHandler(processedRequest, false);</code>，看下具体的getHandler方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">boolean</span> cache<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>继续往下看getHandler：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//遍历所有的handlerMappings进行处理</span>    <span class="token comment">//handlerMappings是在启动的时候预先注册好的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMapping</span> hm <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HandlerExecutionChain</span> handler <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> handler<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继续往下看getHandler，在AbstractHandlerMapping类中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//根据request获取handler</span>    <span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果没有找到就使用默认的handler</span>        handler <span class="token operator">=</span> <span class="token function">getDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//如果Handler是String，表明是一个bean名称</span>    <span class="token comment">//需要超照对应bean</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> handlerName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        handler <span class="token operator">=</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//封装Handler执行链</span>    <span class="token keyword">return</span> <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="根据requrst获取handler"><a href="#根据requrst获取handler" class="headerlink" title="根据requrst获取handler"></a>根据requrst获取handler</h3><p>首先看下根据requrst获取handler步骤getHandlerInternal方法，在AbstractHandlerMethodMapping中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerMethod</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取request中的url，用来匹配handler</span>    <span class="token class-name">String</span> lookupPath <span class="token operator">=</span> <span class="token function">getUrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据路径寻找Handler</span>    <span class="token class-name">HandlerMethod</span> handlerMethod <span class="token operator">=</span> <span class="token function">lookupHandlerMethod</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据handlerMethod中的bean来实例化Handler并添加进HandlerMethod</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>handlerMethod <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> handlerMethod<span class="token punctuation">.</span><span class="token function">createWithResolvedBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看下根据路径寻找handler的方法lookupHandlerMethod：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerMethod</span> <span class="token function">lookupHandlerMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> lookupPath<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Match</span><span class="token punctuation">></span></span> matches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Match</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接匹配</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> directPathMatches <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>urlMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//如果有匹配的，就添加进匹配列表中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>directPathMatches <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">addMatchingMappings</span><span class="token punctuation">(</span>directPathMatches<span class="token punctuation">,</span> matches<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//还没有匹配的，就遍历所有的处理方法查找</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// No choice but to go through all mappings</span>        <span class="token function">addMatchingMappings</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMethods<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> matches<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//找到了匹配的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matches<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Match</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatchComparator</span><span class="token punctuation">(</span><span class="token function">getMappingComparator</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>matches<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//排序之后，获取第一个</span>        <span class="token class-name">Match</span> bestMatch <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//如果有多个匹配的，会找到第二个最合适的进行比较一下</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Match</span> secondBestMatch <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>bestMatch<span class="token punctuation">,</span> secondBestMatch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Method</span> m1 <span class="token operator">=</span> bestMatch<span class="token punctuation">.</span>handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Method</span> m2 <span class="token operator">=</span> secondBestMatch<span class="token punctuation">.</span>handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>                        <span class="token string">"Ambiguous handler methods mapped for HTTP path '"</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"': &#123;"</span> <span class="token operator">+</span>                        m1 <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> m2 <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token comment">//设置request参数</span>        <span class="token function">handleMatch</span><span class="token punctuation">(</span>bestMatch<span class="token punctuation">.</span>mapping<span class="token punctuation">,</span> lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回匹配的url的处理的方法</span>        <span class="token keyword">return</span> bestMatch<span class="token punctuation">.</span>handlerMethod<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//最后还没有找到，返回null</span>        <span class="token keyword">return</span> <span class="token function">handleNoMatch</span><span class="token punctuation">(</span>handlerMethods<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取默认Handler"><a href="#获取默认Handler" class="headerlink" title="获取默认Handler"></a>获取默认Handler</h3><p>如果上面没有获取到Handler，就会获取默认的Handler。如果还获取不到就返回null。</p><h3 id="处理String类型的Handler"><a href="#处理String类型的Handler" class="headerlink" title="处理String类型的Handler"></a>处理String类型的Handler</h3><p>如果上面处理完的Handler是String类型的，就会根据这个handlerName获取bean。</p><h3 id="封装Handler执行链"><a href="#封装Handler执行链" class="headerlink" title="封装Handler执行链"></a>封装Handler执行链</h3><p>上面获取完Handler，就开始封装执行链了，就是将我们配置的拦截器加入到执行链中去，getHandlerExecutionChain：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果当前Handler不是执行链类型，就使用一个新的执行链实例封装起来</span>    <span class="token class-name">HandlerExecutionChain</span> chain <span class="token operator">=</span>        <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">)</span> <span class="token operator">?</span>            <span class="token punctuation">(</span><span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">)</span> handler <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先获取适配类型的拦截器添加进去拦截器链</span>    chain<span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token function">getAdaptedInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前的url</span>    <span class="token class-name">String</span> lookupPath <span class="token operator">=</span> urlPathHelper<span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//遍历拦截器，找到跟当前url对应的，添加进执行链中去</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MappedInterceptor</span> mappedInterceptor <span class="token operator">:</span> mappedInterceptors<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedInterceptor<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> pathMatcher<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            chain<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>mappedInterceptor<span class="token punctuation">.</span><span class="token function">getInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> chain<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取对应请求的Handler适配器"><a href="#获取对应请求的Handler适配器" class="headerlink" title="获取对应请求的Handler适配器"></a>获取对应请求的Handler适配器</h3><p>getHandlerAdapter：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerAdapter</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span><span class="token comment">//遍历所有的HandlerAdapter，找到和当前Handler匹配的就返回</span>    <span class="token comment">//我们这里会匹配到RequestMappingHandlerAdapter</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> ha<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓存的处理"><a href="#缓存的处理" class="headerlink" title="缓存的处理"></a>缓存的处理</h3><p>也就是对last-modified的处理</p><h3 id="执行拦截器的preHandle方法"><a href="#执行拦截器的preHandle方法" class="headerlink" title="执行拦截器的preHandle方法"></a>执行拦截器的preHandle方法</h3><p>就是遍历所有的我们定义的interceptor，执行preHandle方法</p><h3 id="使用Handler适配器执行当前的Handler"><a href="#使用Handler适配器执行当前的Handler" class="headerlink" title="使用Handler适配器执行当前的Handler"></a>使用Handler适配器执行当前的Handler</h3><p>ha.handle执行当前Handler，我们这里使用的是RequestMappingHandlerAdapter，首先会进入AbstractHandlerMethodAdapter的handle方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">ModelAndView</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">handleInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">HandlerMethod</span><span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>handleInternal方法，在RequestMappingHandlerAdapter中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>        <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSessionAttributesHandler</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSessionAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Always prevent caching in case of session attribute management.</span>        <span class="token function">checkAndPrepare</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheSecondsForSessionAttributeHandlers<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Uses configured default cacheSeconds setting.</span>        <span class="token function">checkAndPrepare</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Execute invokeHandlerMethod in synchronized block if required.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>synchronizeOnSession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> mutex <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getSessionMutex</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">invokeHandleMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//执行方法，封装ModelAndView</span>    <span class="token keyword">return</span> <span class="token function">invokeHandleMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组装默认视图名称"><a href="#组装默认视图名称" class="headerlink" title="组装默认视图名称"></a>组装默认视图名称</h3><p>前缀和后缀名都加上</p><h3 id="执行拦截器的postHandle方法"><a href="#执行拦截器的postHandle方法" class="headerlink" title="执行拦截器的postHandle方法"></a>执行拦截器的postHandle方法</h3><p>遍历intercepter的postHandle方法。</p><h3 id="处理最后的结果，渲染之类的"><a href="#处理最后的结果，渲染之类的" class="headerlink" title="处理最后的结果，渲染之类的"></a>处理最后的结果，渲染之类的</h3><p>processDispatchResult方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDispatchResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>        <span class="token class-name">HandlerExecutionChain</span> mappedHandler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> mv<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> errorView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            mv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Did the handler return a view to render?</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//渲染</span>        <span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Concurrent handling started during a forward</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mappedHandler<span class="token punctuation">.</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点看下render方法，进行渲染：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">ModelAndView</span> mv<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//设置本地化</span>    <span class="token class-name">Locale</span> locale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">.</span><span class="token function">resolveLocale</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setLocale</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">View</span> view<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mv<span class="token punctuation">.</span><span class="token function">isReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//解析视图名，得到视图</span>        view <span class="token operator">=</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span>mv<span class="token punctuation">.</span><span class="token function">getViewName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mv<span class="token punctuation">.</span><span class="token function">getModelInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> locale<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// No need to lookup: the ModelAndView object contains the actual View object.</span>        view <span class="token operator">=</span> mv<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"ModelAndView ["</span> <span class="token operator">+</span> mv <span class="token operator">+</span> <span class="token string">"] neither contains a view name nor a "</span> <span class="token operator">+</span>                    <span class="token string">"View object in servlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//委托给视图进行渲染</span>    view<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">.</span><span class="token function">getModelInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>view.render就是进行视图的渲染，然后跳转页面等处理。</p><p>到这里大概的流程就走完了。其中涉及到的东西还有很多，暂先不做详细处理。</p><p>原文：<a href="">SpringMVC执行流程及源码解析</a></p><p>﻿</p><h3 id="‘字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）’-157-md-“-157-md”"><a href="#‘字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）’-157-md-“-157-md”" class="headerlink" title="‘字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）’(#157.md “#157.md”)"></a>‘字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）’(#157.md “#157.md”)</h3><p>很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们认为8个开关状态作为原子单位很好，于是他们把这称为”字节”。</p><p>再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出更多的状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”计算机”。</p><p>开始计算机只在美国用。八位的字节一共可以组合出256（2的8次方）种不同的状态。</p><p>他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端设备或者打印机遇上这些约定好的字节时，就要做一些约定的动作。遇上 00x10, 终端就换行，遇上0x07, 终端就向人们嘟嘟叫，例好遇上0x1b, 打印机就打印反白的字，对于终端就用彩色显示字母。他们看到这样很好，于是就把这些0x20（十进制32）以下的字节状态称为”控制码”。</p><p>他们又把所有的空格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的 文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做 ANSI 的”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。</p><p>后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们用到的许多字母在ASCII中根本没有，为了也可以在计算机中保存他们的文字，他们决定采用127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128到255这一页的字符集被称”扩展字符集”。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！</p><p>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉，并且规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。</p><p>中国人民看到这样很不错，于是就把这种汉字方案叫做”GB2312”。GB2312 是对 ASCII 的中文扩展。</p><p>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人（如朱镕基的“镕”字）。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。</p><p>后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 GBK 标准，GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。</p><p>后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK 扩成了 GB18030。从此之后，中华民族的文化就可以在计算机时代中传承了。</p><p>中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 “DBCS”（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍：</p><p>“一个汉字算两个英文字符！一个汉字算两个英文字符……”</p><p>因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案——当时的中国人想让电脑显示汉字，就必须装上一个”汉字系统”，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序就必须加装另一套支持 BIG5 编码的什么”倚天汉字系统”才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎么办？</p><p>真是计算机的巴比伦塔命题啊！</p><p>正在这时，大天使加百列及时出现了——一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “UNICODE”。</p><p>UNICODE 开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO 就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ascii里的那些”半角”字符，UNICODE 包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于”半角”英文符号只需要用到低8位，所以其高 8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。</p><p>这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的strlen函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是 的，从 UNICODE 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的”一个字符”！同时，也都是统一的”两个字节”，请注意”字符”和”字节”两个术语的不同， “字节”是一个8位的物理存贮单元，而”字符”则是一个文化相关的符号。在UNICODE 中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。</p><p>从前多种字符集存在时，那些做多语言软件的公司遇上过很大麻烦，他们为了在不同的国家销售同一套软件，就不得不在区域化软件时也加持那个双字节字符集咒语，不仅要处处小心不要搞错，还要把软件中的文字在不同的字符集中转来转去。UNICODE 对于他们来说是一个很好的一揽子解决方案，于是从 Windows NT 开始，MS 趁机把它们的操作系统改了一遍，把所有的核心代码都改成了用 UNICODE 方式工作的版本，从这时开始，WINDOWS 系统终于无需要加装各种本土语言系统，就可以显示全世界上所有文化的字符了。</p><p>但是，UNICODE 在制订时没有考虑与任何一种现有的编码方案保持兼容，这使得 GBK 与UNICODE 在汉字的内码编排上完全是不一样的，没有一种简单的算术方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行。</p><p>如前所述，UNICODE 是用两个字节来表示为一个字符，他总共可以组合出65535不同的字符，这大概已经可以覆盖世界上所有文化的符号。如果还不够也没有关系，ISO已经准备了UCS-4方案，说简单了就是四个字节来表示一个字符，这样我们就可以组合出21亿个不同的字符出来（最高位有其他用途），这大概可以用到银河联邦成立那一天吧！</p><p>UNICODE 来到时，一起到来的还有计算机网络的兴起，UNICODE 如何在网络上传输也是一个必须考虑的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF8就是每次8个位传输数据，而UTF16就是每次16个位，只不过为了传输时的可靠性，从UNICODE到 UTF时并不是直接的对应，而是要过一些算法和规则来转换。</p><p>受到过网络编程加持的计算机僧侣们都知道，在网络里传递信息时有一个很重要的问题，就是对于数据高低位的解读方式，一些计算机是采用低位先发送的方法，例如我们PC机采用的 INTEL 架构；而另一些是采用高位先发送的方式。在网络中交换数据时，为了核对双方对于高低位的认识是否是一致的，采用了一种很简便的方法，就是在文本流的开始时向对方发送一个标志符——如果之后的文本是高位在位，那就发送”FEFF”，反之，则发送”FFFE”。不信你可以用二进制方式打开一个UTF-X格式的文件，看看开头两个字节是不是这两个字节？</p><p>下面是Unicode和UTF-8转换的规则</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">UnicodeUTF-80000 - 007F0xxxxxxx0080 - 07FF110xxxxx 10xxxxxx0800 - FFFF1110xxxx 10xxxxxx 10xxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如”汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 1100 0100 1001，将这个比特流按三字节模板的分段方法分为0110 110001 001001，依次代替模板中的x，得到：1110-0110 10-110001 10-001001，即E6 B1 89，这就是其UTF8的编码。</p><p>讲到这里，我们再顺便说说一个很著名的奇怪现象：当你在 windows 的记事本里新建一个文件，输入”联通”两个字之后，保存，关闭，然后再次打开，你会发现这两个字已经消失了，代之的是几个乱码！呵呵，有人说这就是联通之所以拼不过移动的原因。</p><p>其实这是因为GB2312编码与UTF8编码产生了编码冲撞的原因。</p><p>当一个软件打开一个文本时，它要做的第一件事是决定这个文本究竟是使用哪种字符集的哪种编码保存的。软件一般采用三种方式来决定文本的字符集和编码：</p><p>检测文件头标识，提示用户选择，根据一定的规则猜测</p><p>最标准的途径是检测文本最开头的几个字节，开头字节 Charset&#x2F;encoding,如下表：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">EF BB BF UTF-8FF FE UTF-16/UCS-2, little endianFE FF UTF-16/UCS-2, big endianFF FE 00 00 UTF-32/UCS-4, little endian.00 00 FE FF UTF-32/UCS-4, big-endian.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你新建一个文本文件时，记事本的编码默认是ANSI（代表系统默认编码，在中文系统中一般是GB系列编码）, 如果你在ANSI的编码输入汉字，那么他实际就是GB系列的编码方式，在这种编码下，”联通”的内码是：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">c1 1100 0001aa 1010 1010cd 1100 1101a8 1010 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意到了吗？第一二个字节、第三四个字节的起始部分的都是”110”和”10”，正好与UTF8规则里的两字节模板是一致的，</p><p>于是当我们再次打开记事本时，记事本就误认为这是一个UTF8编码的文件，让我们把第一个字节的110和第二个字节的10去掉，我们就得到了”00001 101010”，再把各位对齐，补上前导的0，就得到了”0000 0000 0110 1010”，不好意思，这是UNICODE的006A，也就是小写的字母”j”，而之后的两字节用UTF8解码之后是0368，这个字符什么也不是。这就是只有”联通”两个字的文件没有办法在记事本里正常显示的原因。</p><p>而如果你在”联通”之后多输入几个字，其他的字的编码不见得又恰好是110和10开始的字节，这样再次打开时，记事本就不会坚持这是一个utf8编码的文件，而会用ANSI的方式解读之，这时乱码又不出现了。</p><p>﻿</p><h3 id="‘谈谈Java中的语法糖’-158-md-“-158-md”"><a href="#‘谈谈Java中的语法糖’-158-md-“-158-md”" class="headerlink" title="‘谈谈Java中的语法糖’(#158.md “#158.md”)"></a>‘谈谈Java中的语法糖’(#158.md “#158.md”)</h3><blockquote><p>语法糖（Syntactic Sugar），也称糖衣语法，指在计算机语言中添加的某种语法，这种语法对语言本身功能来说没有什么影响，只是为了方便程序员的开发，提高开发效率。说白了，语法糖就是对现有语法的一个封装。</p></blockquote><p>Java作为一种与平台无关的高级语言，当然也含有语法糖，这些语法糖并不被虚拟机所支持，在编译成字节码阶段就自动转换成简单常用语法。一般来说Java中的语法糖主要有以下几种：</p><ol><li>泛型与类型擦除</li><li>自动装箱与拆箱，变长参数、</li><li>增强for循环</li><li>内部类与枚举类</li></ol><h2 id="泛型与类型擦除"><a href="#泛型与类型擦除" class="headerlink" title="泛型与类型擦除"></a>泛型与类型擦除</h2><p>Java语言并不是一开始就支持泛型的。在早期的JDK中，只能通过Object类是所有类型的父类和强制类型转换来实现泛型的功能。强制类型转换的缺点就是把编译期间的问题延迟到运行时，JVM并不能为我们提供编译期间的检查。</p><p>在JDK1.5中，Java语言引入了泛型机制。但是这种泛型机制是通过类型擦除来实现的，即Java中的泛型只在程序源代码中有效（源代码阶段提供类型检查），在编译后的字节码中自动用强制类型转换进行替代。也就是说，Java语言中的泛型机制其实就是一颗语法糖，相较与C++、C#相比，其泛型实现实在是不那么优雅。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 在源代码中存在泛型*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> hello <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当上述源代码被编译为class文件后，泛型被擦除且引入强制类型转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//类型擦除</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//强制转换</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h2><blockquote><p>Java中的自动装箱与拆箱指的是基本数据类型与他们的包装类型之间的相互转换。</p></blockquote><p>我们知道Java是一门面向对象的语言，在Java世界中有一句话是这么说的：“万物皆对象”。但是Java中的基本数据类型却不是对象，他们不需要进行new操作，也不能调用任何方法，这在使用的时候有诸多不便。因此Java为这些基本类型提供了包装类，并且为了使用方便，提供了自动装箱与拆箱功能。自动装箱与拆箱在使用的过程中，其实是一个语法糖，内部还是调用了相应的函数进行转换。</p><p>下面代码演示了自动装箱和拆箱功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过编译后，代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>    <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token comment">//自动拆箱</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h2><blockquote><p>所谓变长参数，就是方法可以接受长度不定确定的参数</p></blockquote><p>变长参数特性是在JDK1.5中引入的，使用变长参数有两个条件，一是变长的那一部分参数具有相同的类型，二是变长参数必须位于方法参数列表的最后面。变长参数同样是Java中的语法糖，其内部实现是Java数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Varargs</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译为class文件后如下，从中可以很明显的看出变长参数内部是通过数组实现的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Varargs</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Varargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1 <span class="token operator">=</span> args<span class="token punctuation">;</span>        <span class="token keyword">int</span> var2 <span class="token operator">=</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">//增强for循环的数组实现方式</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var3 <span class="token operator">&lt;</span> var2<span class="token punctuation">;</span> <span class="token operator">++</span>var3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> var1<span class="token punctuation">[</span>var3<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//变长参数转换为数组</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h2><blockquote><p>增强for循环与普通for循环相比，功能更强并且代码更简洁</p></blockquote><p>增强for循环的对象要么是一个数组，要么实现了Iterable接口。这个语法糖主要用来对数组或者集合进行遍历，其在循环过程中不能改变集合的大小。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//增强for循环对象为数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> params<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lists <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//增强for循环对象实现Iterable接口</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> lists<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后的class文件为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lists <span class="token operator">=</span> params<span class="token punctuation">;</span>   <span class="token keyword">int</span> var3 <span class="token operator">=</span> params<span class="token punctuation">.</span>length<span class="token punctuation">;</span>   <span class="token comment">//数组形式的增强for退化为普通for</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> str <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str <span class="token operator">&lt;</span> var3<span class="token punctuation">;</span> <span class="token operator">++</span>str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">String</span> str1 <span class="token operator">=</span> lists<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token class-name">List</span> var6 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Iterator</span> var7 <span class="token operator">=</span> var6<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//实现Iterable接口的增强for使用iterator接口进行遍历</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>var7<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">String</span> var8 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>var7<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var8<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><blockquote><p>内部类就是定义在一个类内部的类</p></blockquote><p>Java语言中之所以引入内部类，是因为有些时候一个类只在另一个类中有用，我们不想让其在另外一个地方被使用。内部类之所以是语法糖，是因为其只是一个编译时的概念，一旦编译完成，编译器就会为内部类生成一个单独的class文件，名为outer$innter.class。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用javac编译后，生成两个class文件Outer.class和Outer$Inner.class，其中Outer$Inner.class的内容如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Outer</span>$<span class="token class-name">Inner</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Outer</span>$<span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token class-name">Outer</span> var1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">this</span>$<span class="token number">0</span> <span class="token operator">=</span> var1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部类分为四种：成员内部类、局部内部类、匿名内部类、静态内部类，每一种都有其用法，这里就不介绍了</p><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><blockquote><p>枚举类型就是一些具有相同特性的类常量</p></blockquote><p>java中类的定义使用class，枚举类的定义使用enum。在Java的字节码结构中，其实并没有枚举类型，枚举类型只是一个语法糖，在编译完成后被编译成一个普通的类。这个类继承java.lang.Enum，并被final关键字修饰。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Fruit</span> <span class="token punctuation">&#123;</span>    <span class="token constant">APPLE</span><span class="token punctuation">,</span><span class="token constant">ORINGE</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用jad对编译后的class文件进行反编译后得到</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//继承java.lang.Enum并声明为final</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Fruit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Fruit</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>$<span class="token constant">VALUES</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Fruit</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Fruit</span><span class="token punctuation">)</span><span class="token class-name">Enum</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Fruit</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//枚举类型常量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Fruit</span> <span class="token constant">APPLE</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Fruit</span> <span class="token constant">ORANGE</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Fruit</span> $<span class="token constant">VALUES</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//使用数组进行维护</span>    <span class="token keyword">static</span>    <span class="token punctuation">&#123;</span>        <span class="token constant">APPLE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">"APPLE"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">ORANGE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">(</span><span class="token string">"ORANGE"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        $<span class="token constant">VALUES</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Fruit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>            <span class="token constant">APPLE</span><span class="token punctuation">,</span> <span class="token constant">ORANGE</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>﻿</p><h3 id="进入docker容器命令制作-159-md-“-159-md”"><a href="#进入docker容器命令制作-159-md-“-159-md”" class="headerlink" title="进入docker容器命令制作(#159.md “#159.md”)"></a>进入docker容器命令制作(#159.md “#159.md”)</h3><h2 id="通过attach进入容器"><a href="#通过attach进入容器" class="headerlink" title="通过attach进入容器"></a>通过attach进入容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器（Docker自带的命令）</span>$ <span class="token function">sudo</span> <span class="token function">docker</span> attach <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过这命令进入容器后，执行ctrl+d退出容器后发现容器也停止了。<br>所以可以通过</p><ul><li>先按，ctrl+p</li><li>再按，ctrl+q</li></ul><p>退出</p><h2 id="制作进入容器的命令"><a href="#制作进入容器的命令" class="headerlink" title="制作进入容器的命令"></a>制作进入容器的命令</h2><p>既然attach退出很麻烦，一不小心容器就down掉了</p><p>通过 <code>docker exec</code> 进入容器是安全的，但是命令过长</p><p>所以我们可以通过下面操作，简化命令</p><p>1.创建文件 <code>/usr/bin/ctn</code>,内容如下</p><pre class="line-numbers language-none"><code class="language-none">docker exec -it $1 &#x2F;bin&#x2F;bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.检查环境变量有没有配置目录 <code>/usr/bin</code></p><pre class="line-numbers language-none"><code class="language-none">$PATHbash: &#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;bin:&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;usr&#x2F;games: No such file or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置环境变量的方式自行百度</p><p>3.完成上面两步即可通过命令 <code>ctn</code> 进入容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ ctn <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意：如果是使用非root账号创建的命令，而docker命令是root权限，可能会存在权限问题<br>可以设置 <code>chmod 777 /usr/bin/ctn</code> 设置权限<br>使用 <code>sudo ctn [name]</code> 即可进入容器</p></blockquote><p>4.自动补全docker名<br>使用上面命令时，docker的名字都是手动输入，很麻烦，而且容易出错。</p><p>我们可以借助complete命令，来补全docker信息。</p><p>在~&#x2F;.bashrc(作用于当前用户，如果所有用户，修改&#x2F;etc&#x2F;bashrc)文件中添加一行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ctn auto complete</span>complete <span class="token parameter variable">-W</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">--format</span> <span class="token string">"&#123;&#123;.Names&#125;&#125;"</span><span class="token variable">)</span></span>"</span> ctn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再执行 <code>source .bashrc</code> 使之生效。</p><p>这样我们输入 <code>ctn</code> 后，按 <code>Tab</code> 就会提示或自动补全了。</p><blockquote><p><code>注意：</code> 由于提示的docker名是 <code>.bashrc</code> 生效时的列表，所以如果之后docker列表有变动，需重新执行 <code>source .bashrc</code> 使之更新提示列表</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习资料收藏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> linux </tag>
            
            <tag> hexo-theme </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种页面常见布局+知名网站实例分析+相关阅读推CSS</title>
      <link href="/2023/12/10/ge-chong-ye-mian-chang-jian-bu-ju-zhi-ming-wang-zhan-shi-li-fen-xi-xiang-guan-yue-du-tui-css/"/>
      <url>/2023/12/10/ge-chong-ye-mian-chang-jian-bu-ju-zhi-ming-wang-zhan-shi-li-fen-xi-xiang-guan-yue-du-tui-css/</url>
      
        <content type="html"><![CDATA[<h1 id="干货-各种常见布局实现-知名网站实例分析"><a href="#干货-各种常见布局实现-知名网站实例分析" class="headerlink" title="干货!各种常见布局实现+知名网站实例分析"></a>干货!各种常见布局实现+知名网站实例分析</h1><h2 id="各种页面常见布局-知名网站实例分析-相关阅读推荐"><a href="#各种页面常见布局-知名网站实例分析-相关阅读推荐" class="headerlink" title="各种页面常见布局+知名网站实例分析+相关阅读推荐"></a>各种页面常见布局+知名网站实例分析+相关阅读推荐</h2><p>**阅前必看：本文总结了常见的布局实现,每个方法的优缺点分析</p><blockquote><p>from github <a href="https://github.com/Sweet-KK/css-layout">github.com&#x2F;Sweet-KK&#x2F;cs…</a></p></blockquote><hr><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>注：PC端推荐用法后面加▲，至于移动端在兼容性允许的情况下优先考虑flex</p><p><a href="#1" title="#1">一、水平居中</a><br><a href="#1.1" title="#1.1">(1)文本&#x2F;行内元素&#x2F;行内块级元素▲</a><br><a href="#1.2" title="#1.2">(2)单个块级元素▲</a><br><a href="#1.3" title="#1.3">(3)多个块级元素</a><br><a href="#1.4" title="#1.4">(4)使用绝对定位实现▲</a><br><a href="#1.5" title="#1.5">(5)任意个元素(flex)</a><br><a href="#1.6" title="#1.6">★本章小结：</a></p><p><a href="#2" title="#2">二、垂直居中</a><br><a href="#2.1" title="#2.1">(1)单行文本&#x2F;行内元素&#x2F;行内块级元素▲</a><br><a href="#2.2" title="#2.2">(2)多行文本&#x2F;行内元素&#x2F;行内块级元素</a><br><a href="#2.3" title="#2.3">(3)图片▲</a><br><a href="#2.4" title="#2.4">(4)单个块级元素</a><br><a href="#2.4.1" title="#2.4.1">–(1) 使用tabel-cell实现:</a><br><a href="#2.4.2" title="#2.4.2">–(2) 使用绝对定位实现:▲</a><br><a href="#2.4.3" title="#2.4.3">–(3) 使用flex实现:</a><br><a href="#2.5" title="#2.5">(5)任意个元素(flex)</a><br><a href="#2.6" title="#2.6">★本章小结：</a></p><p><a href="#3" title="#3">三、水平垂直居中</a><br><a href="#3.1" title="#3.1">(1)行内&#x2F;行内块级&#x2F;图片▲</a><br><a href="#3.2" title="#3.2">(2)table-cell</a><br><a href="#3.3" title="#3.3">(3)button作为父元素</a><br><a href="#3.4" title="#3.4">(4)绝对定位▲</a><br><a href="#3.5" title="#3.5">(5)绝对居中▲</a><br><a href="#3.6" title="#3.6">(6)flex</a><br><a href="#3.7" title="#3.7">(7)视窗居中</a><br><a href="#3.8" title="#3.8">★本章小结：</a></p><p><a href="#4" title="#4">四、两列布局</a><br><a href="#4.1" title="#4.1">4.1 左列定宽,右列自适应</a><br><a href="#4.1.1" title="#4.1.1">–(1)利用float+margin实现</a><br><a href="#4.1.2" title="#4.1.2">–(2)利用float+margin(fix)实现</a><br><a href="#4.1.3" title="#4.1.3">–(3)使用float+overflow实现▲</a><br><a href="#4.1.4" title="#4.1.4">–(4)使用table实现▲</a><br><a href="#4.1.5" title="#4.1.5">–(5)使用绝对定位实现</a><br><a href="#4.1.6" title="#4.1.6">–(6)使用flex实现</a><br><a href="#4.1.7" title="#4.1.7">–(7)使用Grid实现</a><br><a href="#4.2" title="#4.2">4.2 左列自适应,右列定宽</a><br><a href="#4.2.1" title="#4.2.1">–(1)使用float+margin实现</a><br><a href="#4.2.2" title="#4.2.2">–(2)使用float+overflow实现▲</a><br><a href="#4.2.3" title="#4.2.3">–(3)使用table实现▲</a><br><a href="#4.2.4" title="#4.2.4">–(4)使用绝对定位实现</a><br><a href="#4.2.5" title="#4.2.5">–(5)使用flex实现</a><br><a href="#4.2.6" title="#4.2.6">–(6)使用Grid实现</a><br><a href="#4.3" title="#4.3">4.3 一列不定,一列自适应</a><br><a href="#4.3.1" title="#4.3.1">–(1)使用float+overflow实现▲</a><br><a href="#4.3.2" title="#4.3.2">–(2)使用flex实现</a><br><a href="#4.3.3" title="#4.3.3">–(3)使用Grid实现</a></p><p><a href="#5" title="#5">五、三列布局</a><br><a href="#5.1" title="#5.1">5.1 两列定宽,一列自适应</a><br><a href="#5.1.1" title="#5.1.1">–(1)使用float+margin实现</a><br><a href="#5.1.2" title="#5.1.2">–(2)使用float+overflow实现▲</a><br><a href="#5.1.3" title="#5.1.3">–(3)使用table实现▲</a><br><a href="#5.1.4" title="#5.1.4">–(4)使用flex实现</a><br><a href="#5.1.5" title="#5.1.5">–(5)使用Grid实现</a><br><a href="#5.2" title="#5.2">5.2 两侧定宽,中间自适应</a><br><a href="#5.2.1" title="#5.2.1">5.2.1 双飞翼布局方法</a><br><a href="#5.2.2" title="#5.2.2">5.2.2 圣杯布局方法</a><br><a href="#5.2.3" title="#5.2.3">5.2.3 使用Grid实现</a><br><a href="#5.2.4" title="#5.2.4">5.2.4 其他方法</a><br><a href="#5.2.4.1" title="#5.2.4.1">–(1)使用table实现▲</a><br><a href="#5.2.4.2" title="#5.2.4.2">–(2)使用flex实现</a><br><a href="#5.2.4.3" title="#5.2.4.3">–(3)使用position实现▲</a></p><p><a href="#6" title="#6">六、多列布局</a><br><a href="#6.1" title="#6.1">6.1 等宽布局</a><br><a href="#6.1.1" title="#6.1.1">6.1.1四列等宽</a><br><a href="#6.1.1.1" title="#6.1.1.1">–(1)使用float实现▲</a><br><a href="#6.1.1.2" title="#6.1.1.2">–(2)使用table实现▲</a><br><a href="#6.1.1.3" title="#6.1.1.3">–(3)使用flex实现</a><br><a href="#6.1.2" title="#6.1.2">6.1.2多列等宽</a><br><a href="#6.1.2.1" title="#6.1.2.1">–(1)使用float实现▲</a><br><a href="#6.1.2.2" title="#6.1.2.2">–(2)使用table实现▲</a><br><a href="#6.1.2.3" title="#6.1.2.3">–(3)使用flex实现</a><br><a href="#6.1.2.4" title="#6.1.2.4">–(4)使用Grid实现</a><br><a href="#6.2" title="#6.2">6.2 九宫格布局</a><br><a href="#6.2.1" title="#6.2.1">–(1)使用table实现▲</a><br><a href="#6.2.2" title="#6.2.2">–(2)使用flex实现</a><br><a href="#6.2.3" title="#6.2.3">–(3)使用Grid实现</a><br><a href="#6.3" title="#6.3">6.3 栅格系统▲</a><br><a href="#6.3.1" title="#6.3.1">–(1)用Less生成</a></p><p><a href="#7" title="#7">七、全屏布局</a><br><a href="#7.1" title="#7.1">(1)使用绝对定位实现▲</a><br><a href="#7.2" title="#7.2">(2)使用flex实现</a><br><a href="#7.3" title="#7.3">(3)使用Grid实现</a></p><p><a href="#8" title="#8">八、网站实例布局分析：</a><br><a href="#8.1" title="#8.1">8.1 小米官网</a><br><a href="#8.1.1" title="#8.1.1">8.1.1 兼容IE9+的方法</a><br><a href="#8.1.1.1" title="#8.1.1.1">–(1)页面整体</a><br><a href="#8.1.1.2" title="#8.1.1.2">–(2)局部——header</a><br><a href="#8.1.1.3" title="#8.1.1.3">–(3)局部——top</a><br><a href="#8.1.1.4" title="#8.1.1.4">–(4)局部——center</a><br><a href="#8.1.1.5" title="#8.1.1.5">–(5)局部——bottom</a><br><a href="#8.1.1.6" title="#8.1.1.6">–(6)局部——footer</a><br><a href="#8.1.1.7" title="#8.1.1.7">–(7)全部代码(优化后)</a><br><a href="#8.1.2" title="#8.1.2">8.1.2 Flexbox+Grid搭配用法(未来…)</a></p><p><a href="#9" title="#9">九、其他补充：</a><br><a href="#9.1" title="#9.1">9.1 移动端viewport</a><br><a href="#9.1.1" title="#9.1.1">–设置viewport：</a><br><a href="#9.1.2" title="#9.1.2">–阅读推荐：</a><br><a href="#9.2" title="#9.2">9.2 媒体查询</a><br><a href="#9.2.1" title="#9.2.1">–代码示例：</a><br><a href="#9.2.2" title="#9.2.2">–阅读推荐：</a><br><a href="#9.3" title="#9.3">9.3 REM</a><br><a href="#9.3.1" title="#9.3.1">–阅读推荐：</a><br><a href="#9.4" title="#9.4">9.4 Flexbox</a><br><a href="#9.4.1" title="#9.4.1">–阅读推荐：</a><br><a href="#9.5" title="#9.5">9.5 CSS Grid</a><br><a href="#9.5.1" title="#9.5.1">–阅读推荐：</a></p><p><a href="#99" title="#99">End：感谢</a><br>​<br>​<br>​</p><h3 id="一、水平居中"><a href="#一、水平居中" class="headerlink" title="一、水平居中"></a>一、水平居中</h3><p><em>一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有</em></p><h5 id="1-文本-行内元素-行内块级元素▲"><a href="#1-文本-行内元素-行内块级元素▲" class="headerlink" title="(1)文本&#x2F;行内元素&#x2F;行内块级元素▲"></a>(1)文本&#x2F;行内元素&#x2F;行内块级元素▲</h5><p>原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    text-align: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单快捷，容易理解，兼容性非常好</li><li>缺点：只对行内内容有效；属性会继承影响到后代行内内容；如果子元素宽度大于父元素宽度则无效，只有后代行内内容中宽度小于设置text-align属性的元素宽度的时候，才会水平居中</li></ul><h5 id="2-单个块级元素▲"><a href="#2-单个块级元素▲" class="headerlink" title="(2)单个块级元素▲"></a>(2)单个块级元素▲</h5><p>原理：根据<a href="https://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins">规范</a> 介绍得很清楚了，有这么一种情况：在margin有节余的同时如果左右margin设置了auto，将会均分剩余空间。另外，如果上下的margin设置了auto，其计算值为0</p><pre class="line-numbers language-none"><code class="language-none">#son&#123;    width: 100px; &#x2F;*必须定宽*&#x2F;    margin: 0 auto;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；兼容性好</li><li>缺点：必须定宽，并且值不能为auto；宽度要小于父元素，否则无效</li></ul><h5 id="3-多个块级元素"><a href="#3-多个块级元素" class="headerlink" title="(3)多个块级元素"></a>(3)多个块级元素</h5><p>原理：text-align只控制行内内容(文字、行内元素、行内块级元素)如何相对他的块父元素对齐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    text-align: center;&#125;.son&#123;    display: inline-block; &#x2F;*改为行内或者行内块级形式，以达到text-align对其生效*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单，容易理解，兼容性非常好</li><li>缺点：只对行内内容有效；属性会继承影响到后代行内内容；块级改为inline-block换行、空格会产生元素间隔</li></ul><h5 id="4-使用绝对定位实现▲"><a href="#4-使用绝对定位实现▲" class="headerlink" title="(4)使用绝对定位实现▲"></a>(4)使用绝对定位实现▲</h5><p>原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 200px;    width: 200px;  &#x2F;*定宽*&#x2F;    position: relative;  &#x2F;*父相*&#x2F;    background-color: #f00;&#125;#son&#123;    position: absolute;  &#x2F;*子绝*&#x2F;    left: 50%;  &#x2F;*父元素宽度一半,这里等同于left:100px*&#x2F;    transform: translateX(-50%);  &#x2F;*自身宽度一半,等同于margin-left: -50px;*&#x2F;    width: 100px;  &#x2F;*定宽*&#x2F;    height: 100px;    background-color: #00ff00;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：使用margin-left兼容性好；不管是块级还是行内元素都可以实现</li><li>缺点：代码较多；脱离文档流；使用margin-left需要知道宽度值；使用transform兼容性不好（ie9+）</li></ul><h5 id="5-任意个元素-flex"><a href="#5-任意个元素-flex" class="headerlink" title="(5)任意个元素(flex)"></a>(5)任意个元素(flex)</h5><p>原理：就是设置当前主轴对齐方式为居中。说不上为什么，flex无非就是主轴侧轴是重点，然后就是排列方式的设置，可以去看看文末的flex阅读推荐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;    justify-content: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：功能强大；简单方便；容易理解</li><li>缺点：PC端<a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=flex" title="https://caniuse.com/#search=flex">兼容性不好</a>，移动端（Android4.0+）</li></ul><h5 id="本章小结："><a href="#本章小结：" class="headerlink" title="本章小结："></a>本章小结：</h5><ul><li>对于水平居中，我们应该先考虑，哪些元素有自带的居中效果，最先想到的应该就是 <code>text-align:center</code> 了，但是这个只对行内内容有效，所以我们要使用 <code>text-align:center</code> 就必须将子元素设置为 <code>display: inline;</code> 或者 <code>display: inline-block;</code> ；</li><li>其次就是考虑能不能用<code>margin: 0 auto;</code> ，因为这都是一两句代码能搞定的事，实在不行就是用绝对定位去实现了。</li><li>移动端能用flex就用flex，简单方便，灵活并且功能强大，无愧为网页布局的一大利器！</li></ul><h3 id="二、垂直居中"><a href="#二、垂直居中" class="headerlink" title="二、垂直居中"></a>二、垂直居中</h3><p><em>一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有</em></p><h5 id="1-单行文本-行内元素-行内块级元素▲"><a href="#1-单行文本-行内元素-行内块级元素▲" class="headerlink" title="(1)单行文本&#x2F;行内元素&#x2F;行内块级元素▲"></a>(1)单行文本&#x2F;行内元素&#x2F;行内块级元素▲</h5><p>原理：line-height的最终表现是通过inline box实现的，而无论inline box所占据的高度是多少（无论比文字大还是比文字小），其占据的空间都是与文字内容公用水平中垂线的。</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 150px;    line-height: 150px;  &#x2F;*与height等值*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；兼容性好</li><li>缺点：只能用于单行行内内容；要知道高度的值</li></ul><h5 id="2-多行文本-行内元素-行内块级元素"><a href="#2-多行文本-行内元素-行内块级元素" class="headerlink" title="(2)多行文本&#x2F;行内元素&#x2F;行内块级元素"></a>(2)多行文本&#x2F;行内元素&#x2F;行内块级元素</h5><p>原理同上</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;  &#x2F;*或者用span把所有文字包裹起来，设置display：inline-block转换成图片的方式解决*&#x2F;    height: 150px;    line-height: 30px;  &#x2F;*元素在页面呈现为5行,则line-height的值为height&#x2F;5*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；兼容性好</li><li>缺点：只能用于行内内容；需要知道高度和最终呈现多少行来计算出line-height的值，建议用span包裹多行文本</li></ul><h5 id="3-图片▲"><a href="#3-图片▲" class="headerlink" title="(3)图片▲"></a>(3)图片▲</h5><p>原理：<a href="https://link.juejin.cn/?target=http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/" title="http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/">vertical-align和line-height的基友关系</a></p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 150px;    line-height: 150px;    font-size: 0;&#125;img#son&#123;vertical-align: middle;&#125; &#x2F;*默认是基线对齐，改为middle*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；兼容性好</li><li>缺点：需要添加font-size: 0; 才可以完全的垂直居中；不过需要主要，html#parent包裹img之间需要有换行或空格</li></ul><h5 id="4-单个块级元素"><a href="#4-单个块级元素" class="headerlink" title="(4)单个块级元素"></a>(4)单个块级元素</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h6 id="4-1-使用tabel-cell实现"><a href="#4-1-使用tabel-cell实现" class="headerlink" title="(4-1) 使用tabel-cell实现:"></a>(4-1) 使用tabel-cell实现:</h6><p>原理：CSS Table，使表格内容对齐方式为middle</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: table-cell;    vertical-align: middle;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；宽高不定；兼容性好（ie8+）</li><li>缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置display: table; 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素</li></ul><h6 id="4-2-使用绝对定位实现-▲"><a href="#4-2-使用绝对定位实现-▲" class="headerlink" title="(4-2) 使用绝对定位实现:▲"></a>(4-2) 使用绝对定位实现:▲</h6><pre class="line-numbers language-none"><code class="language-none">&#x2F;*原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到水平居中的目的*&#x2F;#parent&#123;    height: 150px;    position: relative;  &#x2F;*父相*&#x2F;&#125;#son&#123;    position: absolute;  &#x2F;*子绝*&#x2F;    top: 50%;  &#x2F;*父元素高度一半,这里等同于top:75px;*&#x2F;    transform: translateY(-50%);  &#x2F;*自身高度一半,这里等同于margin-top:-25px;*&#x2F;    height: 50px;&#125;&#x2F;*优缺点- 优点：使用margin-top兼容性好；不管是块级还是行内元素都可以实现- 缺点：代码较多；脱离文档流；使用margin-top需要知道高度值；使用transform兼容性不好（ie9+）*&#x2F;或&#x2F;*原理：当top、bottom为0时,margin-top&amp;bottom会无限延伸占满空间并且平分*&#x2F;#parent&#123;position: relative;&#125;#son&#123;    position: absolute;    margin: auto 0;    top: 0;    bottom: 0;    height: 50px;&#125;&#x2F;*优缺点- 优点：简单;兼容性较好(ie8+)- 缺点：脱离文档流*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-3-使用flex实现"><a href="#4-3-使用flex实现" class="headerlink" title="(4-3) 使用flex实现:"></a>(4-3) 使用flex实现:</h6><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;    align-items: center;&#125;或#parent&#123;display: flex;&#125;#son&#123;align-self: center;&#125;或&#x2F;*原理：这个尚未搞清楚，应该是flex使margin上下边界无限延伸至剩余空间并平分了*&#x2F;#parent&#123;display: flex;&#125;#son&#123;margin: auto 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单灵活；功能强大</li><li>缺点：PC端<a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=flex" title="https://caniuse.com/#search=flex">兼容性不好</a>，移动端（Android4.0+）</li></ul><h5 id="5-任意个元素-flex-1"><a href="#5-任意个元素-flex-1" class="headerlink" title="(5)任意个元素(flex)"></a>(5)任意个元素(flex)</h5><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;    align-items: center;&#125;或#parent&#123;    display: flex;&#125;.son&#123;    align-self: center;&#125;或 #parent&#123;    display: flex;    flex-direction: column;    justify-content: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单灵活；功能强大</li><li>缺点：PC端<a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=flex" title="https://caniuse.com/#search=flex">兼容性不好</a>，移动端（Android4.0+）</li></ul><h5 id="★本章小结："><a href="#★本章小结：" class="headerlink" title="★本章小结："></a>★本章小结：</h5><ul><li>对于垂直居中，最先想到的应该就是 <code>line-height</code> 了，但是这个只能用于行内内容；</li><li>其次就是考虑能不能用<code>vertical-align: middle;</code> ，不过这个一定要熟知原理才能用得顺手，建议看下<a href="https://link.juejin.cn/?target=http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/" title="http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/">vertical-align和line-height的基友关系</a> ；</li><li>然后便是绝对定位，虽然代码多了点，但是胜在适用于不同情况；</li><li>移动端兼容性允许的情况下能用flex就用flex</li></ul><h3 id="三、水平垂直居中"><a href="#三、水平垂直居中" class="headerlink" title="三、水平垂直居中"></a>三、水平垂直居中</h3><p><em>一,二,三章都是parent+son的简单结构,html代码和效果图就不贴出来了,第四章以后才有</em></p><h5 id="1-行内-行内块级-图片▲"><a href="#1-行内-行内块级-图片▲" class="headerlink" title="(1)行内&#x2F;行内块级&#x2F;图片▲"></a>(1)行内&#x2F;行内块级&#x2F;图片▲</h5><p>原理：<code>text-align: center;</code> 控制行内内容相对于块父元素水平居中,然后就是<code>line-height</code>和<code>vertical-align</code>的基友关系使其垂直居中，<code>font-size: 0;</code> 是为了消除近似居中的bug</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 150px;    line-height: 150px;  &#x2F;*行高的值与height相等*&#x2F;    text-align: center;    font-size: 0;   &#x2F;*消除幽灵空白节点的bug*&#x2F;&#125;#son&#123;    &#x2F;*display: inline-block;*&#x2F;  &#x2F;*如果是块级元素需改为行内或行内块级才生效*&#x2F;    vertical-align: middle;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：代码简单；兼容性好（ie8+）</li><li>缺点：只对行内内容有效；需要添加<code>font-size: 0;</code> 才可以完全的垂直居中；不过需要注意html中#parent包裹#son之间需要有换行或空格；熟悉<code>line-height</code>和<code>vertical-align</code>的基友关系较难</li></ul><h5 id="2-table-cell"><a href="#2-table-cell" class="headerlink" title="(2)table-cell"></a>(2)table-cell</h5><p>原理：CSS Table，使表格内容垂直对齐方式为middle,然后根据是行内内容还是块级内容采取不同的方式达到水平居中</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 150px;    width: 200px;    display: table-cell;    vertical-align: middle;    &#x2F;*text-align: center;*&#x2F;   &#x2F;*如果是行内元素就添加这个*&#x2F;&#125;#son&#123;    &#x2F;*margin: 0 auto;*&#x2F;    &#x2F;*如果是块级元素就添加这个*&#x2F;    width: 100px;    height: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；适用于宽度高度未知情况；兼容性好（ie8+）</li><li>缺点：设置tabl-cell的元素，宽度和高度的值设置百分比无效，需要给它的父元素设置<code>display: table;</code> 才生效；table-cell不感知margin，在父元素上设置table-row等属性，也会使其不感知height；设置float或position会对默认布局造成破坏，可以考虑为之增加一个父div定义float等属性；内容溢出时会自动撑开父元素</li></ul><h5 id="3-button作为父元素"><a href="#3-button作为父元素" class="headerlink" title="(3)button作为父元素"></a>(3)button作为父元素</h5><p>原理：button的默认样式，再把需要居中的元素表现形式改为行内或行内块级就好</p><pre class="line-numbers language-none"><code class="language-none">button#parent&#123;  &#x2F;*改掉button默认样式就好了,不需要居中处理*&#x2F;    height: 150px;    width: 200px;    outline: none;      border: none;&#125;#son&#123;    display: inline-block; &#x2F;*button自带text-align: center,改为行内水平居中生效*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单方便，充分利用默认样式</li><li>缺点：只适用于行内内容；需要清除部分默认样式；水平垂直居中兼容性很好，但是ie下点击会有凹陷效果！</li></ul><h5 id="4-绝对定位"><a href="#4-绝对定位" class="headerlink" title="(4)绝对定位"></a>(4)绝对定位</h5><p>原理：子绝父相，top、right、bottom、left的值是相对于父元素尺寸的，然后margin或者transform是相对于自身尺寸的，组合使用达到几何上的水平垂直居中</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    position: relative;&#125;#son&#123;    position: absolute;    top: 50%;    left: 50%;    &#x2F;*定宽高时等同于margin-left:负自身宽度一半;margin-top:负自身高度一半;*&#x2F;    transform: translate(-50%,-50%); &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：使用margin兼容性好；不管是块级还是行内元素都可以实现</li><li>缺点：代码较多；脱离文档流；使用margin需要知道宽高；使用transform兼容性不好（ie9+）</li></ul><h5 id="5-绝对居中"><a href="#5-绝对居中" class="headerlink" title="(5)绝对居中"></a>(5)绝对居中</h5><p>原理：当top、bottom为0时,margin-top&amp;bottom设置auto的话会无限延伸占满空间并且平分；当left、right为0时,margin-left&amp;right设置auto的话会无限延伸占满空间并且平分</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    position: relative;&#125;#son&#123;    position: absolute;    margin: auto;    width: 100px;    height: 50px;    top: 0;    bottom: 0;    left: 0;    right: 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：无需关注宽高；兼容性较好(ie8+)</li><li>缺点：代码较多；脱离文档流</li></ul><h5 id="6-flex"><a href="#6-flex" class="headerlink" title="(6)flex"></a>(6)flex</h5><p>原理：flex设置对齐方式罢了，请查阅文末flex阅读推荐</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;&#125;#son&#123;    margin: auto;&#125;或#parent&#123;    display: flex;    justify-content: center;    align-items: center;&#125;或#parent&#123;    display: flex;    justify-content: center;&#125;#son&#123;    align-self: center;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单灵活；功能强大</li><li>缺点：PC端<a href="https://link.juejin.cn/?target=https://caniuse.com/%23search=flex" title="https://caniuse.com/#search=flex">兼容性不好</a>，移动端（Android4.0+）</li></ul><h5 id="7-视窗居中"><a href="#7-视窗居中" class="headerlink" title="(7)视窗居中"></a>(7)视窗居中</h5><p>原理：vh为视口单位，视口即文档可视的部分，50vh就是视口高度的50&#x2F;100，设置50vh上边距再</p><pre class="line-numbers language-none"><code class="language-none">#son&#123;&#x2F;*0如果去掉，则会多出滚动条并且上下都是50vh的margin。如果去掉就给body加上overflow:hidden;*&#x2F;    margin: 50vh auto 0;      transform: translateY(-50%);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点</p><ul><li>优点：简单；容易理解；两句代码达到屏幕水平垂直居中</li><li>缺点：兼容性不好（ie9+，Android4.4+）</li></ul><h5 id="★本章小结：-1"><a href="#★本章小结：-1" class="headerlink" title="★本章小结："></a>★本章小结：</h5><ul><li>一般情况下，水平垂直居中，我们最常用的就是绝对定位加负边距了，缺点就是需要知道宽高，使用transform倒是可以不需要，但是兼容性不好（ie9+）；</li><li>其次就是绝对居中，绝对定位设置top、left、right、bottom为0，然后<code>margin:auto;</code> 让浏览器自动平分边距以达到水平垂直居中的目的；</li><li>如果是行内&#x2F;行内块级&#x2F;图片这些内容，可以优先考虑<code>line-height</code>和<code>vertical-align</code> 结合使用，不要忘了还有<code>text-align</code> ，这个方法代码其实不多，就是理解原理有点困难，想要熟练应对各种情况还需好好研究；</li><li>移动端兼容性允许的情况下能用flex就用flex。</li></ul><h3 id="四、两列布局"><a href="#四、两列布局" class="headerlink" title="四、两列布局"></a>四、两列布局</h3><h4 id="4-1-左列定宽-右列自适应"><a href="#4-1-左列定宽-右列自适应" class="headerlink" title="4.1 左列定宽,右列自适应"></a>4.1 左列定宽,右列自适应</h4><p>效果:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d179e360~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp"></p><h5 id="1-利用float-margin实现"><a href="#1-利用float-margin实现" class="headerlink" title="(1)利用float+margin实现"></a>(1)利用float+margin实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    background-color: #f00;    float: left;    width: 100px;    height: 500px;&#125;#right &#123;    background-color: #0f0;    height: 500px;    margin-left: 100px; &#x2F;*大于等于#left的宽度*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-利用float-margin-fix-实现"><a href="#2-利用float-margin-fix-实现" class="headerlink" title="(2)利用float+margin(fix)实现"></a>(2)利用float+margin(fix)实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;right-fix&quot;&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    background-color: #f00;    float: left;    width: 100px;    height: 500px;&#125;#right-fix &#123;    float: right;    width: 100%;    margin-left: -100px; &#x2F;*正值大于或等于#left的宽度,才能显示在同一行*&#x2F;&#125;#right&#123;    margin-left: 100px; &#x2F;*大于或等于#left的宽度*&#x2F;    background-color: #0f0;    height: 500px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用float-overflow实现"><a href="#3-使用float-overflow实现" class="headerlink" title="(3)使用float+overflow实现"></a>(3)使用float+overflow实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    background-color: #f00;    float: left;    width: 100px;    height: 500px;&#125;#right &#123;    background-color: #0f0;    height: 500px;    overflow: hidden; &#x2F;*触发bfc达到自适应*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li><li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li></ul><h5 id="4-使用table实现"><a href="#4-使用table实现" class="headerlink" title="(4)使用table实现"></a>(4)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    width: 100%;    display: table;    height: 500px;&#125;#left &#123;    width: 100px;    background-color: #f00;&#125;#right &#123;    background-color: #0f0;&#125;#left,#right&#123;    display: table-cell;  &#x2F;*利用单元格自动分配宽度*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li><li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li></ul><h5 id="5-使用绝对定位实现"><a href="#5-使用绝对定位实现" class="headerlink" title="(5)使用绝对定位实现"></a>(5)使用绝对定位实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    position: relative;  &#x2F;*子绝父相*&#x2F;&#125;#left &#123;    position: absolute;    top: 0;    left: 0;    background-color: #f00;    width: 100px;    height: 500px;&#125;#right &#123;    position: absolute;    top: 0;    left: 100px;  &#x2F;*值大于等于#left的宽度*&#x2F;    right: 0;    background-color: #0f0;    height: 500px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-使用flex实现"><a href="#6-使用flex实现" class="headerlink" title="(6)使用flex实现"></a>(6)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    width: 100%;    height: 500px;    display: flex;&#125;#left &#123;    width: 100px;    background-color: #f00;&#125;#right &#123;    flex: 1; &#x2F;*均分了父元素剩余空间*&#x2F;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-使用Grid实现"><a href="#7-使用Grid实现" class="headerlink" title="(7)使用Grid实现"></a>(7)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 100%;    height: 500px;    display: grid;    grid-template-columns: 100px auto;  &#x2F;*设定2列就ok了,auto换成1fr也行*&#x2F;&#125;#left &#123;    background-color: #f00;&#125;#right &#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-左列自适应-右列定宽"><a href="#4-2-左列自适应-右列定宽" class="headerlink" title="4.2 左列自适应,右列定宽"></a>4.2 左列自适应,右列定宽</h4><p>效果:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136cf625c79~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用float-margin实现"><a href="#1-使用float-margin实现" class="headerlink" title="(1)使用float+margin实现"></a>(1)使用float+margin实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 500px;    padding-left: 100px;  &#x2F;*抵消#left的margin-left以达到#parent水平居中*&#x2F;&#125;#left &#123;    width: 100%;    height: 500px;    float: left;    margin-left: -100px; &#x2F;*正值等于#right的宽度*&#x2F;    background-color: #f00;&#125;#right &#123;    height: 500px;    width: 100px;    float: right;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-使用float-overflow实现"><a href="#2-使用float-overflow实现" class="headerlink" title="(2)使用float+overflow实现"></a>(2)使用float+overflow实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;   &lt;!--顺序要换一下--&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    overflow: hidden;  &#x2F;*触发bfc*&#x2F;    height: 500px;    background-color: #f00;&#125;#right &#123;    margin-left: 10px;  &#x2F;*margin需要定义在#right中*&#x2F;    float: right;    width: 100px;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li><li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li></ul><h5 id="3-使用table实现"><a href="#3-使用table实现" class="headerlink" title="(3)使用table实现"></a>(3)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    width: 100%;    height: 500px;    display: table;&#125;#left &#123;    background-color: #f00;    display: table-cell;&#125;#right &#123;    width: 100px;    background-color: #0f0;    display: table-cell;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li><li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li></ul><h5 id="4-使用绝对定位实现"><a href="#4-使用绝对定位实现" class="headerlink" title="(4)使用绝对定位实现"></a>(4)使用绝对定位实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    position: relative;  &#x2F;*子绝父相*&#x2F;&#125;#left &#123;    position: absolute;    top: 0;    left: 0;    right: 100px;  &#x2F;*大于等于#rigth的宽度*&#x2F;    background-color: #f00;    height: 500px;&#125;#right &#123;    position: absolute;    top: 0;    right: 0;    background-color: #0f0;    width: 100px;    height: 500px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-使用flex实现"><a href="#5-使用flex实现" class="headerlink" title="(5)使用flex实现"></a>(5)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    height: 500px;    display: flex;&#125;#left &#123;    flex: 1;    background-color: #f00;&#125;#right &#123;    width: 100px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-使用Grid实现"><a href="#6-使用Grid实现" class="headerlink" title="(6)使用Grid实现"></a>(6)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: grid;    grid-template-columns: auto 100px;  &#x2F;*设定2列,auto换成1fr也行*&#x2F;&#125;#left &#123;    background-color: #f00;&#125;#right &#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-一列不定-一列自适应"><a href="#4-3-一列不定-一列自适应" class="headerlink" title="4.3 一列不定,一列自适应"></a>4.3 一列不定,一列自适应</h4><p>(盒子宽度随着内容增加或减少发生变化,另一个盒子自适应)</p><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d1676e57~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>变化后:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d19c5afc~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用float-overflow实现"><a href="#1-使用float-overflow实现" class="headerlink" title="(1)使用float+overflow实现"></a>(1)使用float+overflow实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#left &#123;    margin-right: 10px;    float: left;  &#x2F;*只设置浮动,不设宽度*&#x2F;    height: 500px;    background-color: #f00;&#125;#right &#123;    overflow: hidden;  &#x2F;*触发bfc*&#x2F;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注宽度，利用bfc达到自适应效果</li><li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li></ul><h5 id="2-使用flex实现"><a href="#2-使用flex实现" class="headerlink" title="(2)使用flex实现"></a>(2)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: flex;&#125;#left &#123; &#x2F;*不设宽度*&#x2F;    margin-right: 10px;    height: 500px;    background-color: #f00;&#125;#right &#123;    height: 500px;    background-color: #0f0;    flex: 1;  &#x2F;*均分#parent剩余的部分*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用Grid实现"><a href="#3-使用Grid实现" class="headerlink" title="(3)使用Grid实现"></a>(3)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列不定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    display: grid;    grid-template-columns: auto 1fr;  &#x2F;*auto和1fr换一下顺序就是左列自适应,右列不定宽了*&#x2F;&#125;#left &#123;    margin-right: 10px;    height: 500px;    background-color: #f00;&#125;#right &#123;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>左列自适应,右列不定宽同理(参考4.1和4.3对应代码示例)</em></p><h3 id="五、三列布局"><a href="#五、三列布局" class="headerlink" title="五、三列布局"></a>五、三列布局</h3><h4 id="5-1-两列定宽-一列自适应"><a href="#5-1-两列定宽-一列自适应" class="headerlink" title="5.1 两列定宽,一列自适应"></a>5.1 两列定宽,一列自适应</h4><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d1ea53c5~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用float-margin实现-1"><a href="#1-使用float-margin实现-1" class="headerlink" title="(1)使用float+margin实现"></a>(1)使用float+margin实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    min-width: 310px; &#x2F;*100+10+200,防止宽度不够,子元素换行*&#x2F;&#125;#left &#123;    margin-right: 10px;  &#x2F;*#left和#center间隔*&#x2F;    float: left;    width: 100px;    height: 500px;    background-color: #f00;&#125;#center&#123;    float: left;    width: 200px;    height: 500px;    background-color: #eeff2b;&#125;#right &#123;    margin-left: 320px;  &#x2F;*等于#left和#center的宽度之和加上间隔,多出来的就是#right和#center的间隔*&#x2F;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-使用float-overflow实现-1"><a href="#2-使用float-overflow实现-1" class="headerlink" title="(2)使用float+overflow实现"></a>(2)使用float+overflow实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent&#123;    min-width: 320px; &#x2F;*100+10+200+20,防止宽度不够,子元素换行*&#x2F;&#125;#left &#123;    margin-right: 10px; &#x2F;*间隔*&#x2F;    float: left;    width: 100px;    height: 500px;    background-color: #f00;&#125;#center&#123;    margin-right: 10px; &#x2F;*在此定义和#right的间隔*&#x2F;    float: left;    width: 200px;    height: 500px;    background-color: #eeff2b;&#125;#right &#123;    overflow: hidden;  &#x2F;*触发bfc*&#x2F;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用bfc达到自适应效果</li><li>缺点：浮动脱离文档流，需要手动清除浮动，否则会产生高度塌陷；不支持ie6</li></ul><h5 id="3-使用table实现-1"><a href="#3-使用table实现-1" class="headerlink" title="(3)使用table实现"></a>(3)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 100%;     height: 520px; &#x2F;*抵消上下间距10*2的高度影响*&#x2F;    margin: -10px 0;  &#x2F;*抵消上下边间距10的位置影响*&#x2F;    display: table;    &#x2F;*左右两边间距大了一点,子元素改用padding设置盒子间距就没有这个问题*&#x2F;    border-spacing: 10px;  &#x2F;*关键!!!设置间距*&#x2F;&#125;#left &#123;    display: table-cell;    width: 100px;    background-color: #f00;&#125;#center &#123;    display: table-cell;    width: 200px;    background-color: #eeff2b;&#125;#right &#123;    display: table-cell;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解，无需关注定宽的宽度，利用单元格自动分配达到自适应效果</li><li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li></ul><h5 id="4-使用flex实现"><a href="#4-使用flex实现" class="headerlink" title="(4)使用flex实现"></a>(4)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: flex;&#125;#left &#123;    margin-right: 10px;  &#x2F;*间距*&#x2F;    width: 100px;    background-color: #f00;&#125;#center &#123;    margin-right: 10px;  &#x2F;*间距*&#x2F;    width: 200px;    background-color: #eeff2b;&#125;#right &#123;    flex: 1;  &#x2F;*均分#parent剩余的部分达到自适应*&#x2F;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-使用Grid实现"><a href="#5-使用Grid实现" class="headerlink" title="(5)使用Grid实现"></a>(5)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列自适应&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: grid;    grid-template-columns: 100px 200px auto; &#x2F;*设置3列,固定第一第二列的宽度,第三列auto或者1fr*&#x2F;&#125;#left &#123;    margin-right: 10px;  &#x2F;*间距*&#x2F;    background-color: #f00;&#125;#center &#123;    margin-right: 10px;  &#x2F;*间距*&#x2F;    background-color: #eeff2b;&#125;#right &#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-两侧定宽-中间自适应"><a href="#5-2-两侧定宽-中间自适应" class="headerlink" title="5.2 两侧定宽,中间自适应"></a>5.2 两侧定宽,中间自适应</h4><h5 id="5-2-1-双飞翼布局方法"><a href="#5-2-1-双飞翼布局方法" class="headerlink" title="5.2.1 双飞翼布局方法"></a>5.2.1 双飞翼布局方法</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136d1cc24f8~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;&lt;!--中间栏需要放在前面--&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;        &lt;div id&#x3D;&quot;center_inbox&quot;&gt;中间自适应&lt;&#x2F;div&gt;        &lt;hr&gt;  &lt;!--方便观察原理--&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#header &#123;    height: 60px;    background-color: #ccc;&#125;#left &#123;    float: left;    width: 100px;    height: 500px;    margin-left: -100%; &#x2F;*调整#left的位置,值等于自身宽度*&#x2F;    background-color: #f00;    opacity: 0.5;&#125;#center &#123;    height: 500px;    float: left;    width: 100%;    background-color: #eeff2b;&#125;#center_inbox&#123;    height: 480px;    border: 1px solid #000;    margin: 0 220px 0 120px;  &#x2F;*关键!!!左右边界等于左右盒子的宽度,多出来的为盒子间隔*&#x2F;&#125;#right &#123;    float: left;    width: 200px;    height: 500px;    margin-left: -200px;  &#x2F;*使right到指定的位置,值等于自身宽度*&#x2F;    background-color: #0f0;    opacity: 0.5;&#125;#footer &#123;    clear: both;  &#x2F;*注意清除浮动!!*&#x2F;    height: 60px;    background-color: #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-2-2-圣杯布局方法"><a href="#5-2-2-圣杯布局方法" class="headerlink" title="5.2.2 圣杯布局方法"></a>5.2.2 圣杯布局方法</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136f3b3a4aa~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;!--#center需要放在前面--&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应        &lt;hr&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#header&#123;    height: 60px;    background-color: #ccc;&#125;#parent &#123;    box-sizing: border-box;    height: 500px;    padding: 0 215px 0 115px;  &#x2F;*为了使#center摆正,左右padding分别等于左右盒子的宽,可以结合左右盒子相对定位的left调整间距*&#x2F;&#125;#left &#123;    margin-left: -100%;  &#x2F;*使#left上去一行*&#x2F;    position: relative;    left: -115px;  &#x2F;*相对定位调整#left的位置,正值大于或等于自身宽度*&#x2F;    float: left;    width: 100px;    height: 500px;    background-color: #f00;    opacity: 0.5;&#125;#center &#123;    float: left;    width: 100%;  &#x2F;*由于#parent的padding,达到自适应的目的*&#x2F;    height: 500px;    box-sizing: border-box;    border: 1px solid #000;    background-color: #eeff2b;&#125;#right &#123;    position: relative;    left: 215px; &#x2F;*相对定位调整#right的位置,大于或等于自身宽度*&#x2F;    width: 200px;    height: 500px;    margin-left: -200px;  &#x2F;*使#right上去一行*&#x2F;    float: left;    background-color: #0f0;    opacity: 0.5;&#125;#footer&#123;    height: 60px;    background-color: #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-2-3-使用Grid实现"><a href="#5-2-3-使用Grid实现" class="headerlink" title="5.2.3 使用Grid实现"></a>5.2.3 使用Grid实现</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136ee8a6109~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;    &lt;!--#center需要放在前面--&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应        &lt;hr&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: grid;    grid-template-columns: 100px auto 200px; &#x2F;*设定3列*&#x2F;    grid-template-rows: 60px auto 60px; &#x2F;*设定3行*&#x2F;    &#x2F;*设置网格区域分布*&#x2F;    grid-template-areas:         &quot;header header header&quot;         &quot;leftside main rightside&quot;         &quot;footer footer footer&quot;;&#125;#header &#123;    grid-area: header; &#x2F;*指定在哪个网格区域*&#x2F;    background-color: #ccc;&#125;#left &#123;    grid-area: leftside;    background-color: #f00;    opacity: 0.5;&#125;#center &#123;    grid-area: main; &#x2F;*指定在哪个网格区域*&#x2F;    margin: 0 15px; &#x2F;*设置间隔*&#x2F;    border: 1px solid #000;    background-color: #eeff2b;&#125;#right &#123;    grid-area: rightside; &#x2F;*指定在哪个网格区域*&#x2F;    background-color: #0f0;    opacity: 0.5;&#125;#footer &#123;    grid-area: footer; &#x2F;*指定在哪个网格区域*&#x2F;    background-color: #ccc;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-2-4-其他方法"><a href="#5-2-4-其他方法" class="headerlink" title="5.2.4 其他方法"></a>5.2.4 其他方法</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136f71b55c0~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用table实现"><a href="#1-使用table实现" class="headerlink" title="(1)使用table实现"></a>(1)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 100%;    height: 500px;    display: table;&#125;#left &#123;    display: table-cell;    width: 100px;    background-color: #f00;&#125;#center &#123;    display: table-cell;    background-color: #eeff2b;&#125;#right &#123;    display: table-cell;    width: 200px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简洁，容易理解；</li><li>缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-</li></ul><h5 id="2-使用flex实现-1"><a href="#2-使用flex实现-1" class="headerlink" title="(2)使用flex实现"></a>(2)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: flex;&#125;#left &#123;    width: 100px;    background-color: #f00;&#125;#center &#123;    flex: 1;  &#x2F;*均分#parent剩余的部分*&#x2F;    background-color: #eeff2b;&#125;#right &#123;    width: 200px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用position实现"><a href="#3-使用position实现" class="headerlink" title="(3)使用position实现"></a>(3)使用position实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;左列定宽&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;center&quot;&gt;中间自适应&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;右列定宽&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    position: relative; &#x2F;*子绝父相*&#x2F;&#125;#left &#123;    position: absolute;    top: 0;    left: 0;    width: 100px;    height: 500px;    background-color: #f00;&#125;#center &#123;    height: 500px;    margin-left: 100px; &#x2F;*大于等于#left的宽度,或者给#parent添加同样大小的padding-left*&#x2F;    margin-right: 200px;  &#x2F;*大于等于#right的宽度,或者给#parent添加同样大小的padding-right*&#x2F;    background-color: #eeff2b;&#125;#right &#123;    position: absolute;    top: 0;    right: 0;    width: 200px;    height: 500px;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：容易理解，兼容性比较好</li><li>缺点：需手动计算宽度确定边距；脱离文档流；代码繁多</li></ul><h3 id="六、多列布局"><a href="#六、多列布局" class="headerlink" title="六、多列布局"></a>六、多列布局</h3><h4 id="6-1-等宽布局"><a href="#6-1-等宽布局" class="headerlink" title="6.1 等宽布局"></a>6.1 等宽布局</h4><h5 id="6-1-1-四列等宽"><a href="#6-1-1-四列等宽" class="headerlink" title="6.1.1 四列等宽"></a>6.1.1 四列等宽</h5><h5 id="1-使用float实现"><a href="#1-使用float实现" class="headerlink" title="(1)使用float实现"></a>(1)使用float实现</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136f835236f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    margin-left: -20px; &#x2F;*使整体内容看起来居中,抵消padding-left的影响*&#x2F;&#125;.column&#123;    padding-left: 20px;  &#x2F;*盒子的边距*&#x2F;    width: 25%;    float: left;    box-sizing: border-box;    border: 1px solid #000;    background-clip: content-box; &#x2F;*背景色从内容开始绘制,方便观察*&#x2F;    height: 500px;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解；兼容性较好</li><li>缺点：需要手动清除浮动，否则会产生高度塌陷</li></ul><h5 id="2-使用table实现"><a href="#2-使用table实现" class="headerlink" title="(2)使用table实现"></a>(2)使用table实现</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a136ffc5df62~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 540px;  &#x2F;*抵消上下边20*2间距的高度影响*&#x2F;    display: table;    margin: -20px 0;  &#x2F;*抵消上下边20*2间距的位置影响*&#x2F;    &#x2F;*两边离页面间距较大,改用子元素设置padding来当成间隔就不会有这样的问题*&#x2F;    border-spacing: 20px;  &#x2F;*设置间距*&#x2F;&#125;.column&#123;    display: table-cell;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解；无需关注宽度，单元格自动等分</li><li>缺点：margin失效；设置间隔比较麻烦；不支持ie8-</li></ul><h5 id="3-使用flex实现"><a href="#3-使用flex实现" class="headerlink" title="(3)使用flex实现"></a>(3)使用flex实现</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a137025dbc4c~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    margin-left: -15px;  &#x2F;*使内容看起来居中*&#x2F;    height: 500px;    display: flex;&#125;.column&#123;    flex: 1; &#x2F;*一起平分#parent*&#x2F;    margin-left: 15px; &#x2F;*设置间距*&#x2F;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="多列等宽"><a href="#多列等宽" class="headerlink" title="多列等宽"></a>多列等宽</h5><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a137120f99b7~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用float实现-1"><a href="#1-使用float实现-1" class="headerlink" title="(1)使用float实现"></a>(1)使用float实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;&#125;.column&#123;    float: left;  &#x2F;*添加浮动*&#x2F;    width: 16.66666666666667%;  &#x2F;*100÷列数,得出百分比*&#x2F;    height: 500px;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解；兼容性较好</li><li>缺点：需要手动清除浮动，否则会产生高度塌陷</li></ul><h5 id="2-使用table实现-1"><a href="#2-使用table实现-1" class="headerlink" title="(2)使用table实现"></a>(2)使用table实现</h5><p>html代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 100%;    height: 500px;    display: table;&#125;.column&#123;    display: table-cell; &#x2F;*无需关注列数,单元格自动平分*&#x2F;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简单，容易理解；无需关注宽度。单元格自动等分</li><li>缺点：margin失效；设置间隔比较麻烦；不兼容ie8-</li></ul><h5 id="3-使用flex实现-1"><a href="#3-使用flex实现-1" class="headerlink" title="(3)使用flex实现"></a>(3)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: flex;&#125;.column&#123;    flex: 1;  &#x2F;*无需关注列数,一起平分#parent*&#x2F;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-使用Grid实现"><a href="#4-使用Grid实现" class="headerlink" title="(4)使用Grid实现"></a>(4)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;1 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;2 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;3 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;4 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;5 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;column&quot;&gt;6 &lt;p&gt;我是文字我是文字我输文字我是文字我是文字&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    height: 500px;    display: grid;    grid-template-columns: repeat(6,1fr);  &#x2F;*6就是列数*&#x2F;&#125;.column&#123;&#125;.column:nth-child(odd)&#123;    background-color: #f00;&#125;.column:nth-child(even)&#123;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-九宫格布局"><a href="#6-2-九宫格布局" class="headerlink" title="6.2 九宫格布局"></a>6.2 九宫格布局</h4><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1371229c1cb~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用table实现-1"><a href="#1-使用table实现-1" class="headerlink" title="(1)使用table实现"></a>(1)使用table实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 1200px;    height: 500px;    margin: 0 auto;    display: table;&#125;.row &#123;    display: table-row;&#125;.item &#123;    border: 1px solid #000;    display: table-cell;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：代码简洁，容易理解；</li><li>缺点：margin失效，采用border-spacing表格两边的间隔无法消除；不支持ie8-</li></ul><h5 id="2-使用flex实现-2"><a href="#2-使用flex实现-2" class="headerlink" title="(2)使用flex实现"></a>(2)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;row&quot;&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 1200px;    height: 500px;    margin: 0 auto;    display: flex;    flex-direction: column;&#125;.row &#123;    display: flex;    flex: 1;&#125;.item &#123;    flex: 1;    border: 1px solid #000;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用Grid实现-1"><a href="#3-使用Grid实现-1" class="headerlink" title="(3)使用Grid实现"></a>(3)使用Grid实现</h5><p><em>CSS Grid非常强大,可以实现各种各样的三维布局,可查阅本文结尾的阅读推荐</em></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;1&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;2&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;3&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;4&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;5&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;6&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;7&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;8&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;item&quot;&gt;9&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">#parent &#123;    width: 1200px;    height: 500px;    margin: 0 auto;    display: grid;    grid-template-columns: repeat(3, 1fr); &#x2F;*等同于1fr 1fr 1fr,此为重复的合并写法*&#x2F;    grid-template-rows: repeat(3, 1fr);  &#x2F;*等同于1fr 1fr 1fr,此为重复的合并写法*&#x2F;&#125;.item &#123;    border: 1px solid #000;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-栅格系统"><a href="#6-3-栅格系统" class="headerlink" title="6.3 栅格系统"></a>6.3 栅格系统</h4><p>优缺点：</p><ul><li>优点：代码简洁，容易理解；提高页面内容的流动性，能适应多种设备；</li></ul><h5 id="1-用Less生成"><a href="#1-用Less生成" class="headerlink" title="(1)用Less生成"></a>(1)用Less生成</h5><pre class="line-numbers language-none"><code class="language-none">&#x2F;*生成栅格系统*&#x2F;@media screen and (max-width: 768px)&#123;  .generate-columns(12);     &#x2F;*此处设置生成列数*&#x2F;  .generate-columns(@n, @i: 1) when (@i &lt;&#x3D; @n) &#123;    .column-xs-@&#123;i&#125; &#123;      width: (@i * 100% &#x2F; @n);    &#125;    .generate-columns(@n, (@i+1));  &#125;&#125;@media screen and (min-width: 768px)&#123;  .generate-columns(12);    &#x2F;*此处设置生成列数*&#x2F;  .generate-columns(@n, @i: 1) when (@i &lt;&#x3D; @n) &#123;    .column-sm-@&#123;i&#125; &#123;      width: (@i * 100% &#x2F; @n);    &#125;    .generate-columns(@n, (@i+1));  &#125;&#125;div[class^&#x3D;&quot;column-xs-&quot;]&#123;float: left;&#125;div[class^&#x3D;&quot;column-sm-&quot;]&#123;float: left;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后的CSS代码:</p><pre class="line-numbers language-none"><code class="language-none">@media screen and (max-width: 768px) &#123;  .column-xs-1 &#123;  width: 8.33333333%;  &#125;  .column-xs-2 &#123;  width: 16.66666667%;  &#125;  .column-xs-3 &#123;  width: 25%;  &#125;  .column-xs-4 &#123;  width: 33.33333333%;  &#125;  .column-xs-5 &#123;  width: 41.66666667%;  &#125;  .column-xs-6 &#123;  width: 50%;  &#125;  .column-xs-7 &#123;  width: 58.33333333%;  &#125;  .column-xs-8 &#123;  width: 66.66666667%;  &#125;  .column-xs-9 &#123;  width: 75%;  &#125;  .column-xs-10 &#123;  width: 83.33333333%;  &#125;  .column-xs-11 &#123;  width: 91.66666667%;  &#125;  .column-xs-12 &#123;  width: 100%;  &#125;&#125;@media screen and (min-width: 768px) &#123;  .column-sm-1 &#123;  width: 8.33333333%;  &#125;  .column-sm-2 &#123;  width: 16.66666667%;  &#125;  .column-sm-3 &#123;  width: 25%;  &#125;  .column-sm-4 &#123;  width: 33.33333333%;  &#125;  .column-sm-5 &#123;  width: 41.66666667%;  &#125;  .column-sm-6 &#123;  width: 50%;  &#125;  .column-sm-7 &#123;  width: 58.33333333%;  &#125;  .column-sm-8 &#123;  width: 66.66666667%;  &#125;  .column-sm-9 &#123;  width: 75%;  &#125;  .column-sm-10 &#123;  width: 83.33333333%;  &#125;  .column-sm-11 &#123;  width: 91.66666667%;  &#125;    .column-sm-12 &#123;  width: 100%;  &#125;&#125;div[class^&#x3D;&quot;column-xs-&quot;]&#123;float: left;&#125;div[class^&#x3D;&quot;column-sm-&quot;]&#123;float: left;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、全屏布局"><a href="#七、全屏布局" class="headerlink" title="七、全屏布局"></a>七、全屏布局</h3><p>效果图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a13716f2d8c3~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><h5 id="1-使用绝对定位实现"><a href="#1-使用绝对定位实现" class="headerlink" title="(1)使用绝对定位实现"></a>(1)使用绝对定位实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">html, body, #parent &#123;height: 100%;overflow: hidden;&#125;#parent &gt; div &#123;    border: 1px solid #000;&#125;#top &#123;    position: absolute;    top: 0;    left: 0;    right: 0;    height: 100px;&#125;#left &#123;    position: absolute;    top: 100px;  &#x2F;*值大于等于#top的高度*&#x2F;    left: 0;    bottom: 50px;  &#x2F;*值大于等于#bottom的高度*&#x2F;    width: 200px;&#125;#right &#123;    position: absolute;    overflow: auto;    left: 200px;  &#x2F;*值大于等于#left的宽度*&#x2F;    right: 0;    top: 100px;  &#x2F;*值大于等于#top的高度*&#x2F;    bottom: 50px;  &#x2F;*值大于等于#bottom的高度*&#x2F;&#125;#bottom &#123;    position: absolute;    left: 0;    right: 0;    bottom: 0;    height: 50px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优缺点：</p><ul><li>优点：容易理解</li><li>缺点：代码繁多；需要计算好各个盒子的宽高；</li></ul><h5 id="2-使用flex实现-3"><a href="#2-使用flex实现-3" class="headerlink" title="(2)使用flex实现"></a>(2)使用flex实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;middle&quot;&gt;        &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;        &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">*&#123;    margin: 0;    padding: 0;&#125;html,body,#parent&#123;    height:100%;&#125;#parent &#123;    display: flex;    flex-direction: column;&#125;#top &#123;    height: 100px;&#125;#bottom &#123;    height: 50px;&#125;#middle &#123;    flex: 1;    display: flex;&#125;#left &#123;    width: 200px;&#125;#right &#123;    flex: 1;    overflow: auto;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-使用Grid实现-2"><a href="#3-使用Grid实现-2" class="headerlink" title="(3)使用Grid实现"></a>(3)使用Grid实现</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div id&#x3D;&quot;parent&quot;&gt;    &lt;div id&#x3D;&quot;top&quot;&gt;top&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;    &lt;div id&#x3D;&quot;bottom&quot;&gt;bottom&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">*&#123;    margin: 0;    padding: 0;&#125;html, body, #parent &#123;    height: 100%;&#125;#parent &#123;    width: 100%;    height: 100%;    display: grid;    &#x2F;*分成2列,第一列宽度200px,第二列1fr平分剩余的部分,此处换成auto也行*&#x2F;    grid-template-columns: 200px 1fr;      &#x2F;*分成3行,第一行高度100px,第二行auto为自适应,此处换成1fr也行,第3行高度为50px*&#x2F;    grid-template-rows: 100px auto 50px;     &#x2F;*定义网格区域分布*&#x2F;    grid-template-areas:        &quot;header header&quot;        &quot;aside main&quot;        &quot;footer footer&quot;;&#125;#parent&gt;div&#123;    border: 1px solid #000;&#125;#top&#123;    grid-area: header;  &#x2F;*指定在哪个网格区域*&#x2F;&#125;#left&#123;    grid-area: aside;  &#x2F;*指定在哪个网格区域*&#x2F;&#125;#right&#123;    grid-area: main;  &#x2F;*指定在哪个网格区域*&#x2F;&#125;#bottom&#123;    grid-area: footer;  &#x2F;*指定在哪个网格区域*&#x2F;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、网站实例布局分析："><a href="#八、网站实例布局分析：" class="headerlink" title="八、网站实例布局分析："></a>八、网站实例布局分析：</h3><p>由于方法众多,分析的时候想到哪种用哪种了，只要IE9和谷歌上表现一致，我就不一一测试其他浏览器了，如果有什么问题或意见，请留言！</p><h4 id="8-1-小米官网"><a href="#8-1-小米官网" class="headerlink" title="8.1 小米官网"></a>8.1 小米官网</h4><p><a href="https://www.mi.com/">https://www.mi.com/</a></p><h5 id="8-1-1-兼容IE9-的方法"><a href="#8-1-1-兼容IE9-的方法" class="headerlink" title="8.1.1 兼容IE9+的方法"></a>8.1.1 兼容IE9+的方法</h5><h5 id="1-页面整体"><a href="#1-页面整体" class="headerlink" title="(1)页面整体"></a>(1)页面整体</h5><p>整个页面我们可以分成顶、上、中、下、底五个结构,如图所示:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a137243cef07~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div class&#x3D;&quot;header&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;top&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;center&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;bottom&quot;&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;footer&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">*&#123;  &#x2F;*为了方便,就这样清空默认样式了*&#x2F;    margin: 0;    padding: 0;    box-sizing: border-box;    list-style: none;&#125;body&#123;    background-color: #f5f5f5;&#125;.header&#123;    margin-bottom: 20px;    height: 40px;    background-color: #333;&#125;.top&#123;    height: 1210px;    background-color: #fff;&#125;.center&#123;    width: 1226px;    margin: 0 auto;    margin-bottom: 60px;    height: 1791px;    background-color: #fff;&#125;.bottom&#123;    height: 274px;    background-color: #fff;&#125;.footer&#123;    margin: 0 auto;    width: 1226px;    height: 166px;    border: 1px solid #000;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-局部——header"><a href="#2-局部——header" class="headerlink" title="(2)局部——header"></a>(2)局部——header</h5><p>header部分首先是一个水平居中的内容，内容盒子可以分成左右两个部分，如图所示：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1372efcf139~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;header&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;header-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;header-rigth&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码：</p><pre class="line-numbers language-none"><code class="language-none">.container&#123;  &#x2F;*后面会继续用到*&#x2F;    width: 1226px;    height: 100%;    margin: 0 auto;    border: 1px solid #f00;&#125;.header-left&#123;    width: 380px;    height: 100%;    float: left;    background-color: #0f0;&#125;.header-rigth&#123;    width: 260px;    height: 100%;    float: right;    background-color: #0f0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-局部——top"><a href="#3-局部——top" class="headerlink" title="(3)局部——top"></a>(3)局部——top</h5><p>top部分先有一个水平居中的内容，再就是内容由上到下可以分成四个部分，然后每个部分再细分……说不下去了，直接上图：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1373121044d~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;top&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;top-nav&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-slider&quot;&gt;            &lt;div class&#x3D;&quot;slider-navbar&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-recommend&quot;&gt;            &lt;div class&#x3D;&quot;recommend-left&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;recommend-right&quot;&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-flashsale&quot;&gt;            &lt;div class&#x3D;&quot;flashsale-title&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;flashsale-content&quot;&gt;                &lt;div class&#x3D;&quot;content-timer&quot;&gt;&lt;&#x2F;div&gt;                &lt;ul class&#x3D;&quot;content-shops&quot;&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码：</p><pre class="line-numbers language-none"><code class="language-none">.top &#123;    height: 1210px;    background-color: #fff;&#125;.top-nav &#123;    height: 100px;    background-color: #f00;&#125;.top-slider &#123;    margin-bottom: 14px;    position: relative;    height: 460px;    background-color: #00f;&#125;.slider-navbar &#123;    position: absolute;    top: 0;    left: 0;    width: 234px;    height: 100%;    background-color: black;    opacity: .5;&#125;.top-recommend &#123;    margin-bottom: 26px;    height: 170px;    background-color: #0f0;&#125;.recommend-left &#123;    float: left;    height: 100%;    width: 234px;    background-color: skyblue;&#125;.recommend-right &#123;    float: right;    width: 978px;    height: 100%;    border: 1px solid #000;&#125;.recommend-right &gt; ul &#123;    height: 100%;&#125;.recommend-right &gt; ul li &#123;    float: left;    width: 316px;    height: 100%;    background-color: deepskyblue;&#125;.recommend-right &gt; ul li + li &#123;    margin-left: 14px;&#125;.top-flashsale &#123;    height: 438px;    background-color: #ff4455;&#125;.flashsale-title &#123;    height: 58px;    background-color: purple;&#125;.flashsale-content &#123;    border: 1px solid #000;    padding-bottom: 40px;    height: 380px;&#125;.content-timer &#123;    margin-right: 14px;    float: left;    width: 234px;    height: 100%;    background-color: #fff;&#125;.content-shops &#123;    overflow: hidden;    height: 100%;    background-color: #6effb1;&#125;.content-shops &gt; li &#123;    float: left;    width: 234px;    height: 100%;    background-color: #fff;&#125;.content-shops &gt; li+li &#123;    margin-left: 12.5px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-局部——center"><a href="#4-局部——center" class="headerlink" title="(4)局部——center"></a>(4)局部——center</h5><p>center部分都是一些单元格展示,有很多类似的模块,就挑几个来实现了，直接看图吧：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a13734239fca~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1373825a330~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a137421eddba~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;center&quot;&gt;    &lt;div class&#x3D;&quot;center-phone&quot;&gt;        &lt;div class&#x3D;&quot;phone-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content&quot;&gt;            &lt;div class&#x3D;&quot;phone-left&quot;&gt;&lt;&#x2F;div&gt;            &lt;ul class&#x3D;&quot;phone-right&quot;&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-household&quot;&gt;        &lt;div class&#x3D;&quot;household-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;household-content&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;                &lt;p&gt;&lt;&#x2F;p&gt;                &lt;p&gt;&lt;&#x2F;p&gt;            &lt;&#x2F;li&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-video&quot;&gt;        &lt;div class&#x3D;&quot;video-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;ul class&#x3D;&quot;video-content&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码：</p><pre class="line-numbers language-none"><code class="language-none">.center &#123;    margin: 0 auto;    margin-bottom: 60px;    padding-top: 60px;    width: 1226px;    height: 1791px;    background-color: #fff;&#125;.center-phone&#123;    margin-bottom: 8px;    height: 686px;    background-color: yellow;&#125;.phone-title&#123;    height: 58px;    background-color: black;&#125;.phone-content&#123;    height: 628px;    background-color: pink;&#125;.phone-left&#123;    margin-right: 14px;    float: left;    width: 234px;    height: 100%;    background-color: darkseagreen;&#125;.phone-right&#123;    overflow: hidden;    height: 100%;    background-color: #ccc;&#125;.phone-right&gt;li&#123;    margin-bottom: 28px;    padding-left: 14px;    float: left;    width: 25%;    height: 300px;    border: 1px solid #000;    background-color: #f00;    background-clip: content-box;&#125;.phone-right&gt;li:nth-child(1),.phone-right&gt;li:nth-child(5)&#123;    margin-left: 0;&#125;.center-household&#123;    margin-bottom: 8px;    height: 686px;    background-color: yellow;&#125;.household-title&#123;    height: 58px;    background-color: black;&#125;.household-content&#123;    height: 614px;&#125;.household-content&gt;li&#123;    position: relative;    margin-left: 14px;    margin-bottom: 28px;    float: left;    width: 234px;    height: 300px;    background-color: #d7d7d7;&#125;.household-content&gt;li:nth-child(1),.household-content&gt;li:nth-child(6)&#123;    margin-left: 0;&#125;.household-content&gt;li:last-child p:first-child&#123;    position: absolute;    top: 0;    left: 0;    right: 0;    height: 143px;    border: 1px solid #000;&#125;.household-content&gt;li:last-child p:last-child&#123;    position: absolute;    bottom: 0;    left: 0;    right: 0;    height: 143px;    border: 1px solid #000;&#125;.center-video&#123;    height: 343px;    background-color: pink;&#125;.video-title&#123;    height: 58px;    background-color: black;&#125;.video-content&#123;    height: 285px;&#125;.video-content&gt;li&#123;    float: left;    width: 296px;    height: 100%;    border: 1px solid #000;&#125;.video-content&gt;li+li&#123;    margin-left: 14px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-局部——bottom"><a href="#5-局部——bottom" class="headerlink" title="(5)局部——bottom"></a>(5)局部——bottom</h5><p>bottom部分首先是一个水平居中的内容,然后内容可以划分为上下两部分,每个部分都是浮动的li,如图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a1374b14d7d6~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;bottom&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;bottom-service&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;bottom-links&quot;&gt;            &lt;div class&#x3D;&quot;links-left&quot;&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-right&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">.bottom &#123;    height: 274px;    background-color: #fff;&#125;.bottom-service&#123;    height: 80px;    background-color: seagreen;&#125;.bottom-service&gt;ul&#123;    height: 100%;&#125;.bottom-service&gt;ul li&#123;    position: relative;    padding: 0 50px;    float: left;    width: 20%;    height: 100%;    background-color: goldenrod;    background-clip: content-box;&#125;.bottom-service&gt;ul li+li::before&#123;    position: absolute;    top: 28px;    left: 0;    content: &#39;&#39;;    width: 1px;    height: 24px;    background-color: #999;&#125;.bottom-links&#123;    height: 192px;    background-color: #8545e0;&#125;.links-left&#123;    float: left;    width: 960px;    height: 100%;    background-color: yellow;&#125;.links-left&gt;ul&#123;    height: 100%;&#125;.links-left&gt;ul li&#123;    padding-right: 60px;    float: left;    width: 16.666666666666667%;    height: 100%;    border: 1px solid #000;    background-color: #ff0000;    background-clip: content-box;&#125;.links-right&#123;    float: right;    width: 252px;    height: 100%;    background-color: yellow;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-局部——footer"><a href="#6-局部——footer" class="headerlink" title="(6)局部——footer"></a>(6)局部——footer</h5><p>footer划分如图:</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/3/9/1620a13756dfa54f~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.awebp" alt="image.png"></p><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;footer&quot;&gt;    &lt;div class&#x3D;&quot;footer-info&quot;&gt;        &lt;div class&#x3D;&quot;info-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;info-right&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;footer-slogan&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">.footer &#123;    margin: 0 auto;    padding: 30px 0;    width: 1226px;    height: 166px;    border: 1px solid #000;&#125;.footer-info&#123;    height: 57px;    background-color: #6effb1;&#125;.info-left&#123;    float: left;    width: 630px;    height: 100%;    border: 1px solid #000;&#125;.info-right&#123;    float: right;    width: 436px;    height: 100%;    border: 1px solid #000;&#125;.footer-slogan&#123;    margin-top: 30px;    height: 19px;    background-color: #8545e0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-全部代码-优化后"><a href="#7-全部代码-优化后" class="headerlink" title="(7)全部代码(优化后)"></a>(7)全部代码(优化后)</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div class&#x3D;&quot;header&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;header-left fl&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;header-rigth fr&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;top&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;top-nav&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-slider&quot;&gt;            &lt;div class&#x3D;&quot;slider-navbar&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-recommend&quot;&gt;            &lt;div class&#x3D;&quot;recommend-left fl&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;recommend-right fr&quot;&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-flashsale&quot;&gt;            &lt;div class&#x3D;&quot;flashsale-title common-title&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;flashsale-content&quot;&gt;                &lt;div class&#x3D;&quot;content-timer fl&quot;&gt;&lt;&#x2F;div&gt;                &lt;ul class&#x3D;&quot;content-shops&quot;&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;center&quot;&gt;    &lt;div class&#x3D;&quot;center-phone module-box&quot;&gt;        &lt;div class&#x3D;&quot;phone-title common-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content&quot;&gt;            &lt;div class&#x3D;&quot;phone-left fl&quot;&gt;&lt;&#x2F;div&gt;            &lt;ul class&#x3D;&quot;phone-right&quot;&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-household module-box&quot;&gt;        &lt;div class&#x3D;&quot;household-title common-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;household-content&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;                &lt;p&gt;&lt;&#x2F;p&gt;                &lt;p&gt;&lt;&#x2F;p&gt;            &lt;&#x2F;li&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-video&quot;&gt;        &lt;div class&#x3D;&quot;video-title common-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;ul class&#x3D;&quot;video-content&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;bottom&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;bottom-service&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;bottom-links&quot;&gt;            &lt;div class&#x3D;&quot;links-left fl&quot;&gt;                &lt;ul&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                    &lt;li&gt;&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-right fr&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;footer&quot;&gt;    &lt;div class&#x3D;&quot;footer-info&quot;&gt;        &lt;div class&#x3D;&quot;info-left fl&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;info-right fr&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;footer-slogan&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*-------------------抽取公共样式-----------------*&#x2F;* &#123; &#x2F;*为了方便,就这样清空默认样式了*&#x2F;    margin: 0;    padding: 0;    box-sizing: border-box;    list-style: none;&#125;body &#123;    background-color: #f5f5f5;&#125;.container &#123;  &#x2F;*水平居中的内容盒子*&#x2F;    width: 1226px;    height: 100%;    margin: 0 auto;    border: 1px solid #f00;&#125;.common-title &#123;    height: 58px;    background-color: #000;&#125;.fl &#123;float: left;&#125;.fr &#123;float: right;&#125;.recommend-right,.flashsale-content,.phone-right &gt; li,.household-content &gt; li:last-child &gt; p,.video-content &gt; li,.links-left &gt; ul li,.footer,.info-left,.info-right &#123;border: 1px solid #000;&#125;  &#x2F;*添加边框样式只是为了方便观察,不是布局必须,可删*&#x2F;&#x2F;*-----header部分-----*&#x2F;.header &#123;    margin-bottom: 20px;    height: 40px;    background-color: #333;&#125;.header-left &#123;    width: 380px;    height: 100%;    background-color: #0f0;&#125;.header-rigth &#123;    width: 260px;    height: 100%;    background-color: #0f0;&#125;&#x2F;*--------top部分--------*&#x2F;.top &#123;    &#x2F;*height: 1210px;*&#x2F;    background-color: #fff;&#125;.top-nav &#123;    height: 100px;    background-color: #f00;&#125;.top-slider &#123;    margin-bottom: 14px;    position: relative; &#x2F;*父相*&#x2F;    height: 460px;    background-color: #00f;&#125;.slider-navbar &#123;    position: absolute; &#x2F;*子绝*&#x2F;    top: 0;    left: 0;    width: 234px;    height: 100%;    background-color: black;    opacity: .5;&#125;.top-recommend &#123;    margin-bottom: 26px;    height: 170px;    background-color: #0f0;&#125;.recommend-left &#123;    height: 100%;    width: 234px;    background-color: skyblue;&#125;.recommend-right &#123;    width: 978px;    height: 100%;&#125;.recommend-right &gt; ul &#123;height: 100%;&#125;.recommend-right &gt; ul li &#123;    float: left; &#x2F;*三列等宽,浮动布局*&#x2F;    width: 316px;    height: 100%;    background-color: deepskyblue;&#125;.recommend-right &gt; ul li + li &#123; margin-left: 14px;&#125;  &#x2F;*设置浮动间隔*&#x2F;.top-flashsale &#123;    height: 438px;    background-color: #ff4455;&#125;.flashsale-title &#123;&#125;.flashsale-content &#123;    padding-bottom: 40px;    height: 380px;&#125;.content-timer &#123;    margin-right: 14px;    width: 234px;    height: 100%;    background-color: #fff;&#125;.content-shops &#123;    overflow: hidden; &#x2F;*触发bfc,以达到自适应*&#x2F;    height: 100%;    background-color: #6effb1;&#125;.content-shops &gt; li &#123;    float: left; &#x2F;*四列等宽,浮动布局*&#x2F;    width: 234px;    height: 100%;    background-color: #fff;&#125;.content-shops &gt; li + li &#123;margin-left: 12.5px;&#125;  &#x2F;*设置浮动间隔*&#x2F;&#x2F;*--------center部分--------*&#x2F;.module-box &#123;  &#x2F;*类似的模块*&#x2F;    margin-bottom: 8px;    height: 686px;&#125;.center &#123;    margin: 0 auto;    margin-bottom: 60px;    padding-top: 60px;    width: 1226px;    &#x2F;*height: 1791px;*&#x2F;    background-color: #fff;&#125;.center-phone &#123;background-color: yellow;&#125;.phone-title &#123;&#125;.phone-content &#123;    height: 628px;    background-color: pink;&#125;.phone-left &#123;    width: 234px;    height: 100%;    background-color: darkseagreen;&#125;.phone-right &#123;    overflow: hidden; &#x2F;*触发bfc以达到自适应*&#x2F;    height: 100%;    background-color: #ccc;&#125;.phone-right &gt; li &#123;    margin-bottom: 28px; &#x2F;*设置下边距*&#x2F;    padding-left: 14px; &#x2F;*用padding模拟盒子间隔*&#x2F;    float: left; &#x2F;*四列等宽,浮动布局*&#x2F;    width: 25%;    height: 300px;    background-color: #f00;    background-clip: content-box; &#x2F;*背景色从content开始绘起*&#x2F;&#125;.center-household &#123;background-color: yellow;&#125;.household-title &#123;&#125;.household-content &#123;height: 614px;&#125;.household-content &gt; li &#123;    position: relative; &#x2F;*父相*&#x2F;    margin-left: 14px; &#x2F;*设置浮动间隔*&#x2F;    margin-bottom: 28px; &#x2F;*设置下边距*&#x2F;    float: left; &#x2F;*五列等宽,浮动布局*&#x2F;    width: 234px;    height: 300px;    background-color: #d7d7d7;&#125;.household-content &gt; li:nth-child(1),.household-content &gt; li:nth-child(6) &#123;margin-left: 0; &#125;  &#x2F;*消除每行第一个的间隔*&#x2F;.household-content &gt; li:last-child p:first-child &#123;    position: absolute; &#x2F;*子绝*&#x2F;    top: 0;    left: 0;    right: 0;    height: 143px;&#125;.household-content &gt; li:last-child p:last-child &#123;    position: absolute; &#x2F;*子绝*&#x2F;    bottom: 0;    left: 0;    right: 0;    height: 143px;&#125;.center-video &#123;    height: 343px;    background-color: pink;&#125;.video-title &#123;&#125;.video-content &#123;height: 285px;&#125;.video-content &gt; li &#123;    float: left; &#x2F;*四列等宽,浮动布局*&#x2F;    width: 296px;    height: 100%;&#125;.video-content &gt; li + li &#123;margin-left: 14px; &#125;   &#x2F;*设定浮动间隔*&#x2F;&#x2F;*--------bottom部分--------*&#x2F;.bottom &#123;    &#x2F;*height: 274px;*&#x2F;    background-color: #fff;&#125;.bottom-service &#123;    height: 80px;    background-color: seagreen;&#125;.bottom-service &gt; ul &#123;height: 100%;&#125;.bottom-service &gt; ul li &#123;    position: relative; &#x2F;*父相*&#x2F;    padding: 0 50px; &#x2F;*用padding模拟盒子间隔*&#x2F;    float: left; &#x2F;*五列等宽,浮动布局*&#x2F;    width: 20%;    height: 100%;    background-color: goldenrod;    background-clip: content-box; &#x2F;*背景色从content开始绘起*&#x2F;&#125;.bottom-service &gt; ul li + li::before &#123; &#x2F;*用伪元素模拟分割线*&#x2F;    position: absolute; &#x2F;*子绝*&#x2F;    top: 28px;    left: 0;    content: &#39;&#39;; &#x2F;*伪元素必须有content*&#x2F;    width: 1px;    height: 24px;    background-color: #999;&#125;.bottom-links &#123;    height: 192px;    background-color: #8545e0;&#125;.links-left &#123;    width: 960px;    height: 100%;    background-color: yellow;&#125;.links-left &gt; ul &#123;height: 100%;&#125;.links-left &gt; ul li &#123;    padding-right: 60px;    float: left; &#x2F;*六列等宽,浮动布局*&#x2F;    width: 16.666666666666667%;    height: 100%;    background-color: #ff0000;    background-clip: content-box; &#x2F;*背景色从content开始绘起*&#x2F;&#125;.links-right &#123;    width: 252px;    height: 100%;    background-color: yellow;&#125;&#x2F;*--------footer部分---------*&#x2F;.footer &#123;    margin: 0 auto;    padding: 30px 0;    width: 1226px;    height: 166px;&#125;.footer-info &#123;    height: 57px;    background-color: #6effb1;&#125;.info-left &#123;    width: 630px;    height: 100%;&#125;.info-right &#123;    width: 436px;    height: 100%;&#125;.footer-slogan &#123;    margin-top: 30px;    height: 19px;    background-color: #8545e0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是优化后的代码了，由于在下才疏学浅，所用方法不敢保证是最简单的，优化也肯定不是最优的，仅仅是的我的一种思路而已，各位参考参考就好。</p><h5 id="8-1-2-Flexbox-Grid搭配用法-未来…"><a href="#8-1-2-Flexbox-Grid搭配用法-未来…" class="headerlink" title="8.1.2 Flexbox+Grid搭配用法(未来…)"></a>8.1.2 Flexbox+Grid搭配用法(未来…)</h5><p>html代码:</p><pre class="line-numbers language-none"><code class="language-none">&lt;body&gt;&lt;div class&#x3D;&quot;header&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;header-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;header-rigth&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;top&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;top-nav&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-slider&quot;&gt;            &lt;div class&#x3D;&quot;slider-navbar&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-recommend-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-recommend-right&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;                &lt;li&gt;&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-flashsale-title&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;top-flashsale-timer&quot;&gt;&lt;&#x2F;div&gt;        &lt;ul class&#x3D;&quot;top-flashsale-shops&quot;&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;            &lt;li&gt;&lt;&#x2F;li&gt;        &lt;&#x2F;ul&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;center&quot;&gt;    &lt;div class&#x3D;&quot;center-phone-title&quot;&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-phone-content&quot;&gt;        &lt;div class&#x3D;&quot;phone-content-item1&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item2&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item3&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item4&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item5&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item6&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item7&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item8&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;phone-content-item9&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-household-title&quot;&gt;&lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-household-content&quot;&gt;        &lt;div class&#x3D;&quot;row&quot;&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;row&quot;&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;household-content-item&quot;&gt;                &lt;p&gt;&lt;&#x2F;p&gt;                &lt;p&gt;&lt;&#x2F;p&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;center-video-title&quot;&gt;&lt;&#x2F;div&gt;    &lt;ul class&#x3D;&quot;center-video-content&quot;&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;        &lt;li&gt;&lt;&#x2F;li&gt;    &lt;&#x2F;ul&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;bottom&quot;&gt;    &lt;div class&#x3D;&quot;container&quot;&gt;        &lt;div class&#x3D;&quot;bottom-service&quot;&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;service-item&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;bottom-links-left&quot;&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;links-left-item&quot;&gt;&lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;bottom-links-right&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;footer&quot;&gt;    &lt;div class&#x3D;&quot;footer-info&quot;&gt;        &lt;div class&#x3D;&quot;info-left&quot;&gt;&lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;info-right&quot;&gt;&lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;footer-slogan&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>css代码:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;*-------------------抽取公共样式-----------------*&#x2F;* &#123; &#x2F;*为了方便,就这样清空默认样式了*&#x2F;    margin: 0;    padding: 0;    list-style: none;&#125;body &#123;    background-color: #f5f5f5;    display: grid;    &#x2F;*整体布局 设置网格列,设置网格行,再设定网格区域*&#x2F;    grid-template-columns: 1fr 1226px 1fr;    grid-template-rows: 40px 20px auto auto 274px 166px;    grid-template-areas:        &quot;header header header&quot;        &quot;. . .&quot;         &quot;top top top&quot;        &quot;. center .&quot;        &quot;bottom bottom bottom&quot;        &quot;. footer .&quot;;&#125;.container &#123; &#x2F;*水平居中的内容盒子*&#x2F;    width: 1226px;    height: 100%;    margin: 0 auto;    border: 1px solid #f00;&#125;.top-recommend-right,.top-flashsale-timer,.top-flashsale-shops li,.center-phone-content &gt; div,.center-household-content .row,.household-content-item:last-of-type p,.center-video-content li,.service-item,.links-left-item,.info-left,.info-right,.info-right &#123;border: 1px solid #000;&#125;  &#x2F;*添加边框样式只是为了方便观察,不是布局必须,可删*&#x2F;&#x2F;*-----header部分-----*&#x2F;.header &#123;    grid-area: header; &#x2F;*指定网格区域*&#x2F;    background-color: #333;&#125;.header .container &#123;    display: flex;    justify-content: space-between;&#125;.header-left &#123;    width: 380px;    background-color: #0f0;&#125;.header-rigth &#123;    width: 260px;    background-color: #0f0;&#125;&#x2F;*--------top部分--------*&#x2F;.top &#123;    grid-area: top; &#x2F;*指定网格区域*&#x2F;    background-color: #fff;&#125;.top .container &#123;    display: grid;    &#x2F;*top部分布局 设置网格行,设置网格列,再设定网格区域*&#x2F;    grid-template-rows: 100px 460px 14px 170px 26px 58px 340px 40px;    grid-template-columns: auto 14px 978px;    grid-template-areas:        &quot;top-nav top-nav top-nav&quot;        &quot;top-slider top-slider top-slider&quot;        &quot;. . .&quot;        &quot;recommend-left . recommend-right&quot;        &quot;. . .&quot;        &quot;flashsale-title flashsale-title flashsale-title&quot;        &quot;flashsale-timer . flashsale-shops&quot;        &quot;. . .&quot;;&#125;.top-nav &#123;    grid-area: top-nav;    background-color: #f00;&#125;.top-slider &#123;    position: relative;    grid-area: top-slider;    background-color: #00f;&#125;.top-slider .slider-navbar &#123;    position: absolute;    top: 0;    left: 0;    bottom: 0;    width: 234px;    background-color: black;    opacity: .5;&#125;.top-recommend-left &#123;    grid-area: recommend-left;    background-color: skyblue;&#125;.top-recommend-right &#123;grid-area: recommend-right;&#125;.top-recommend-right &gt; ul &#123;    display: flex;    justify-content: space-between;    height: 100%;&#125;.top-recommend-right li &#123;    width: 316px;    background-color: deepskyblue;&#125;.top-flashsale-title &#123;    grid-area: flashsale-title;    background-color: #000;&#125;.top-flashsale-timer &#123;    grid-area: flashsale-timer;    background-color: #fff;&#125;.top-flashsale-shops &#123;    display: flex;    justify-content: space-between;    grid-area: flashsale-shops;    background-color: #6effb1;&#125;.top-flashsale-shops li &#123;width: 234px;&#125;&#x2F;*--------center部分--------*&#x2F;.center &#123;    margin-bottom: 60px;  &#x2F;*边距可以在网格分区的时候考虑进去,把边距设成一行或一列,不要放内容就好了*&#x2F;    padding-top: 60px;    grid-area: center; &#x2F;*指定网格区域*&#x2F;    display: flex;    flex-direction: column;    background-color: #fff;&#125;.center-phone-title &#123;    height: 58px;    background-color: black;&#125;.center-phone-content &#123;    margin-bottom: 8px;    display: grid;    &#x2F;*这里用flex分格更好,代码更少更简洁*&#x2F;    grid-template-columns: repeat(5, 1fr);    grid-template-rows: repeat(2, 1fr);    grid-template-areas:        &quot;big1 normal2 normal3 normal4 normal5&quot;        &quot;big1 normal6 normal7 normal8 normal9&quot;;    grid-gap: 14px; &#x2F;*网格间隔*&#x2F;    height: 628px;    background-color: pink;&#125;.phone-content-item1 &#123;grid-area: big1;&#125;.phone-content-item2 &#123;grid-area: normal2;&#125;.phone-content-item3 &#123;grid-area: normal3;&#125;.phone-content-item4 &#123;grid-area: normal4;&#125;.phone-content-item5 &#123;grid-area: normal5;&#125;.phone-content-item6 &#123;grid-area: normal6;&#125;.phone-content-item7 &#123;grid-area: normal7;&#125;.phone-content-item8 &#123;grid-area: normal8;&#125;.phone-content-item9 &#123;grid-area: normal9;&#125;.center-household-title &#123;    height: 58px;    background-color: black;&#125;.center-household-content &#123;    margin-bottom: 8px;    display: flex;    flex-direction: column;    height: 614px;    background-color: pink;&#125;.center-household-content .row &#123;    display: flex;    justify-content: space-between;    flex: 1;&#125;.row .household-content-item &#123;    display: flex;    flex-direction: column;    justify-content: space-between;    width: 234px;    background-color: #fff;&#125;.household-content-item:last-of-type p &#123;height: 143px;&#125;.center-video-title &#123;    height: 58px;    background-color: black;&#125;.center-video-content &#123;    display: flex;    justify-content: space-between;    height: 285px;    background-color: pink;&#125;.center-video-content li &#123;width: 296px;&#125;&#x2F;*--------bottom部分--------*&#x2F;.bottom &#123;    grid-area: bottom; &#x2F;*指定网格区域*&#x2F;    background-color: #fff;&#125;.bottom .container &#123;    display: grid;    grid-template-columns: auto 252px;    grid-template-rows: 80px auto;    grid-template-areas: &quot;service service&quot; &quot;links-left links-right&quot;;&#125;.container .bottom-service &#123;    display: flex;    grid-area: service;    background-color: seagreen;&#125;.service-item &#123;flex: 1;&#125;.container .bottom-links-left &#123;    display: flex;    grid-area: links-left;    background-color: yellow;&#125;.links-left-item &#123;flex: 1;&#125;.container .bottom-links-right &#123;    grid-area: links-right;    background-color: yellowgreen;&#125;&#x2F;*--------footer部分---------*&#x2F;.footer &#123;    padding: 30px 0;    grid-area: footer; &#x2F;*指定网格区域*&#x2F;&#125;.footer-info &#123;    display: flex;    justify-content: space-between;    height: 57px;    background-color: #6effb1;&#125;.info-left &#123;width: 630px;&#125;.info-right &#123;width: 436px;&#125;.footer-slogan &#123;    margin-top: 30px;    height: 19px;    background-color: #8545e0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、其他补充："><a href="#九、其他补充：" class="headerlink" title="九、其他补充："></a>九、其他补充：</h3><h4 id="9-1-移动端viewport"><a href="#9-1-移动端viewport" class="headerlink" title="9.1 移动端viewport"></a>9.1 移动端viewport</h4><h5 id="设置viewport："><a href="#设置viewport：" class="headerlink" title="设置viewport："></a>设置viewport：</h5><pre class="line-numbers language-none"><code class="language-none">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;0&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="阅读推荐："><a href="#阅读推荐：" class="headerlink" title="阅读推荐："></a>阅读推荐：</h5><p>解读 viewport—网页自适应移动 app 神器</p><p><a href="https://juejin.cn/post/6844903473096441869">https://juejin.cn/post/6844903473096441869</a></p><h4 id="9-2-媒体查询"><a href="#9-2-媒体查询" class="headerlink" title="9.2 媒体查询"></a>9.2 媒体查询</h4><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h5><pre class="line-numbers language-none"><code class="language-none">@media (max-width: 767px) &#123; ...css代码... &#125;@media (min-width: 768px) and (max-width: 991px) &#123; ...css代码... &#125;@media (min-width: 992px) and (max-width: 1199px) &#123; ...css代码... &#125;@media (min-width: 1200px) &#123; ...css代码... &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="阅读推荐"><a href="#阅读推荐" class="headerlink" title="阅读推荐:"></a>阅读推荐:</h5><p>MDN文档介绍</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries</a></p><p>随方逐圆 – 全面理解 CSS 媒体查询</p><p><a href="https://juejin.cn/post/6844903486258216967">https://juejin.cn/post/6844903486258216967</a></p><h4 id="9-3-REM"><a href="#9-3-REM" class="headerlink" title="9.3 REM"></a>9.3 REM</h4><h5 id="阅读推荐-1"><a href="#阅读推荐-1" class="headerlink" title="阅读推荐:"></a>阅读推荐:</h5><p>Rem布局的原理解析</p><p><a href="http://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/">http://yanhaijing.com/css/2017/09/29/principle-of-rem-layout/</a></p><p>rem是如何实现自适应布局的？</p><p><a href="http://caibaojian.com/web-app-rem.html">http://caibaojian.com/web-app-rem.html</a></p><h4 id="9-4-Flexbox"><a href="#9-4-Flexbox" class="headerlink" title="9.4 Flexbox"></a>9.4 Flexbox</h4><h5 id="阅读推荐-2"><a href="#阅读推荐-2" class="headerlink" title="阅读推荐"></a>阅读推荐</h5><p>理解Flexbox：你需要知道的一切</p><p><a href="https://www.w3cplus.com/css3/understanding-flexbox-everything-you-need-to-know.html">https://www.w3cplus.com/css3/understanding-flexbox-everything-you-need-to-know.html</a></p><p>深入理解 flex 布局以及计算</p><p><a href="https://www.w3cplus.com/css3/flexbox-layout-and-calculation.html?from=groupmessage">https://www.w3cplus.com/css3/flexbox-layout-and-calculation.html?from=groupmessage</a></p><h4 id="9-5-CSS-Grid"><a href="#9-5-CSS-Grid" class="headerlink" title="9.5 CSS Grid"></a>9.5 CSS Grid</h4><h5 id="阅读推荐-3"><a href="#阅读推荐-3" class="headerlink" title="阅读推荐"></a>阅读推荐</h5><p>grid布局学习指南</p><p><a href="http://blog.jirengu.com/?p=990">http://blog.jirengu.com/?p=990</a></p><p>grid规范草稿</p><p><a href="https://drafts.csswg.org/css-grid/">https://drafts.csswg.org/css-grid/</a></p><h3 id="End：感谢"><a href="#End：感谢" class="headerlink" title="End：感谢"></a>End：感谢</h3>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 学习资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础，linux常用命令大全</title>
      <link href="/2023/12/10/linux-ji-chu-linux-chang-yong-ming-ling-da-quan/"/>
      <url>/2023/12/10/linux-ji-chu-linux-chang-yong-ming-ling-da-quan/</url>
      
        <content type="html"><![CDATA[<h1 id="linux基础，linux常用命令大全"><a href="#linux基础，linux常用命令大全" class="headerlink" title="linux基础，linux常用命令大全"></a>linux基础，linux常用命令大全</h1><p>收集几篇linux基础，常用命令，基本用法</p><p>原文标题：<a href="https://juejin.cn/post/6844903801283952653">前端linux基础，这一篇就够了</a><br>作者：孟祥_成都</p><h2 id="1-Linux安装"><a href="#1-Linux安装" class="headerlink" title="1. Linux安装"></a>1. Linux安装</h2><h3 id="因为图太多了，转载一篇从虚拟机vmware配置到centos7详细安装教程"><a href="#因为图太多了，转载一篇从虚拟机vmware配置到centos7详细安装教程" class="headerlink" title="因为图太多了，转载一篇从虚拟机vmware配置到centos7详细安装教程"></a>因为图太多了，转载一篇<a href="https://www/.cnblogs.com/wcwen1990/p/7630545.html">从虚拟机vmware配置到centos7详细安装教程</a></h3><h2 id="2-linux常用命令"><a href="#2-linux常用命令" class="headerlink" title="2.linux常用命令"></a>2.linux常用命令</h2><h3 id="2-1-常见目录"><a href="#2-1-常见目录" class="headerlink" title="2.1 常见目录"></a>2.1 常见目录</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>&#x2F;bin</td><td>存放二进制可执行文件(ls,cat,mkdir等)，常用命令一般都在这里。</td></tr><tr><td>&#x2F;etc</td><td>存放系统管理和配置文件</td></tr><tr><td>&#x2F;home</td><td>存放所有用户文件的根目录，是用户主目录的基点，比如用户user的主目录就是&#x2F;home&#x2F;user，可以用~user表示</td></tr><tr><td>&#x2F;usr</td><td>用于存放系统应用程序，比较重要的目录&#x2F;usr&#x2F;local 本地系统管理员软件安装目录（安装系统级的应用）。这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录。&#x2F;usr&#x2F;x11r6 存放x window的目录&#x2F;usr&#x2F;bin 众多的应用程序&#x2F;usr&#x2F;sbin 超级用户的一些管理程序&#x2F;usr&#x2F;doc linux文档&#x2F;usr&#x2F;include linux下开发和编译应用程序所需要的头文件&#x2F;usr&#x2F;lib 常用的动态链接库和软件包的配置文件&#x2F;usr&#x2F;man 帮助文档&#x2F;usr&#x2F;src 源代码，linux内核的源代码就放在&#x2F;usr&#x2F;src&#x2F;linux里&#x2F;usr&#x2F;local&#x2F;bin 本地增加的命令&#x2F;usr&#x2F;local&#x2F;lib 本地增加的库</td></tr><tr><td>&#x2F;opt</td><td>额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把tomcat等都安装到这里。</td></tr><tr><td>&#x2F;proc</td><td>虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息。</td></tr><tr><td>&#x2F;root</td><td>超级用户（系统管理员）的主目录（特权阶级^o^）</td></tr><tr><td>&#x2F;sbin</td><td>存放二进制可执行文件，只有root才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如ifconfig等。</td></tr><tr><td>&#x2F;dev</td><td>用于存放设备文件。</td></tr><tr><td>&#x2F;mnt</td><td>系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统。</td></tr><tr><td>&#x2F;boot</td><td>存放用于系统引导时使用的各种文件</td></tr><tr><td>&#x2F;lib</td><td>存放跟文件系统中的程序运行所需要的共享库及内核模块。共享库又叫动态链接共享库，作用类似windows里的.dll文件，存放了根文件系统程序运行所需的共享文件。</td></tr><tr><td>&#x2F;tmp</td><td>用于存放各种临时文件，是公用的临时文件存储点。</td></tr><tr><td>&#x2F;var</td><td>用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等。</td></tr><tr><td>&#x2F;lost+found</td><td>这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里</td></tr></tbody></table><h3 id="2-2-命令基本格式"><a href="#2-2-命令基本格式" class="headerlink" title="2.2 命令基本格式"></a>2.2 命令基本格式</h3><h4 id="2-2-1-命令提示符"><a href="#2-2-1-命令提示符" class="headerlink" title="2.2.1 命令提示符"></a>2.2.1 命令提示符</h4><pre class="line-numbers language-none"><code class="language-none">[root@xiaoming ~]#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>root 当前登录用户</li><li>localhost 主机名</li><li>~ 当前工作目录,默认是当前用户的家目录，root就是&#x2F;root,普通用户是 &#x2F;home&#x2F;用户名</li><li>提示符 超级用户是 #,普通用户是$</li></ul><h4 id="2-2-2-命令格式"><a href="#2-2-2-命令格式" class="headerlink" title="2.2.2 命令格式"></a>2.2.2 命令格式</h4><ul><li>命令 [选项] [参数]</li><li>当有多个选项时，可以写在一起</li><li>一般参数有简化和完整写法两种 <code>-a</code> 与 <code>--all</code>等效</li></ul><h4 id="2-2-3-ls"><a href="#2-2-3-ls" class="headerlink" title="2.2.3 ls"></a>2.2.3 ls</h4><ul><li><p>查询目录中的内容</p></li><li><p>ls [选项] [文件或者目录]</p></li><li><p>选项</p><ul><li>-a 显示所有文件，包括隐藏文件</li><li>-l 显示详细信息</li><li>-d 查看目录本身的属性而非子文件 ls &#x2F;etc&#x2F;</li><li>-h 人性化的方式显示文件大小</li><li>-i 显示inode,也就是i节点，每个节点都有ID号</li></ul></li><li><p>默认当前目录下的文件列表</p></li></ul><h5 id="l"><a href="#l" class="headerlink" title="-l"></a>-l</h5><p>显示详细信息</p><pre class="line-numbers language-none"><code class="language-none">drwxr-xr-x .  1 root  root   800 Sep 16 00:19 logs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>drwxr-xr-x</th><th>.</th><th>1</th><th>root</th><th>root</th><th>800</th><th>Sep 16 00:19</th><th>logs</th></tr></thead><tbody><tr><td>文件类型和权限</td><td>ACL权限</td><td>硬链接引用计数</td><td>所有者</td><td>所属组</td><td>文件大小</td><td>最后修改时间</td><td>文件名</td></tr></tbody></table><h5 id="文件类型和权限"><a href="#文件类型和权限" class="headerlink" title="文件类型和权限"></a>文件类型和权限</h5><pre class="line-numbers language-none"><code class="language-none">-rw-r--r--<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>文件类型 - 文件、d 目录、l 软链接文件</li><li>u(所有者)、g(所属组)、o(其他人)</li><li>r(read) 读取、w(write) 写入、x(execute) 执行</li></ul><h3 id="2-3-文件处理命令"><a href="#2-3-文件处理命令" class="headerlink" title="2.3 文件处理命令"></a>2.3 文件处理命令</h3><h4 id="2-3-1-mkdir"><a href="#2-3-1-mkdir" class="headerlink" title="2.3.1 mkdir"></a>2.3.1 mkdir</h4><ul><li><p>建立目录 make directory</p></li><li><p>mkdir -p [目录名]</p><ul><li>-p 递归创建</li></ul></li></ul><h4 id="2-3-2-cd"><a href="#2-3-2-cd" class="headerlink" title="2.3.2 cd"></a>2.3.2 cd</h4><ul><li><p>切换所在目录 change directory</p></li><li><p>cd [目录]</p><ul><li>~ 家目录</li><li>家目录</li><li><ul><li>上次目录</li></ul></li><li>. 当前目录</li><li>.. 上级目录</li></ul></li><li><p>相对路径是参照当前所在目录</p></li><li><p>绝对路径是从根目录开始</p></li><li><p>按TAB键可以补全命令和目录</p></li></ul><h4 id="2-3-3-pwd"><a href="#2-3-3-pwd" class="headerlink" title="2.3.3 pwd"></a>2.3.3 pwd</h4><ul><li>显示当前目录 pwd</li></ul><h4 id="2-3-4-rmdir"><a href="#2-3-4-rmdir" class="headerlink" title="2.3.4 rmdir"></a>2.3.4 rmdir</h4><ul><li>删除目录 remove empty directory</li><li>rmdir [目录名]</li></ul><h4 id="2-3-5-rm"><a href="#2-3-5-rm" class="headerlink" title="2.3.5 rm"></a>2.3.5 rm</h4><ul><li><p>删除文件或者目录 remove</p></li><li><p>rm [文件或者目录]</p><ul><li>-r 删除目录</li><li>-f 强制删除</li></ul></li><li><p>rm -rf 文件或者目录] 递归强制删除所有目录</p></li></ul><h4 id="2-3-6-cp"><a href="#2-3-6-cp" class="headerlink" title="2.3.6 cp"></a>2.3.6 cp</h4><ul><li><p>copy 复制命令</p></li><li><p>copy [源文件或者目录] [目标文件]</p><ul><li>-r 复制目录,默认是复制文件</li><li>-p 连带文件属性复制</li><li>-d 若源文件是链接文件，则复制连接属性</li><li>-a 相当于 -rpd</li></ul></li></ul><h4 id="2-3-7-mv"><a href="#2-3-7-mv" class="headerlink" title="2.3.7 mv"></a>2.3.7 mv</h4><ul><li>移动文件或者改名 move</li><li>mv [源文件或者目录] [目标文件]</li></ul><h4 id="2-3-8-ln"><a href="#2-3-8-ln" class="headerlink" title="2.3.8 ln"></a>2.3.8 ln</h4><ul><li>链接命令,生成链接文件 <code>link</code></li></ul><h5 id="2-3-8-1-硬链接特征"><a href="#2-3-8-1-硬链接特征" class="headerlink" title="2.3.8.1 硬链接特征"></a>2.3.8.1 硬链接特征</h5><ul><li>拥有相同的i节点和存储block块，可以看作是同一个文件</li><li>可以通过i节点访问</li><li>不能跨分区</li><li>不能针对目录使用</li><li>一般不使用</li></ul><h5 id="2-3-8-2-软链接特征"><a href="#2-3-8-2-软链接特征" class="headerlink" title="2.3.8.2 软链接特征"></a>2.3.8.2 软链接特征</h5><ul><li><p>ln -s [源文件] [目标文件]</p><ul><li>-s 创建软链接</li></ul></li><li><p>类似Windows快捷方式</p></li><li><p>软链接拥有自己的i节点和Block块，但是数据块中只保存源文件的文件名和i节点号，并没有实际的文件数据</p></li><li><p>lrwxrwxrwx l 软链接 软链接的文件权限都是 777</p></li><li><p>修改任意一个文件，另一个都会改变</p></li><li><p>删除源文件，软链接不能使用</p></li><li><p>软链接源文件必须写绝对路径</p></li></ul><h3 id="2-4-文件搜索命令"><a href="#2-4-文件搜索命令" class="headerlink" title="2.4 文件搜索命令"></a>2.4 文件搜索命令</h3><h4 id="2-4-1-locate"><a href="#2-4-1-locate" class="headerlink" title="2.4.1 locate"></a>2.4.1 locate</h4><ul><li><p>在后台数据库中按文件名搜索，速度比较快</p></li><li><p>数据保存在<code>/var/lib/mlocate</code>后台数据库，每天更新一次</p></li><li><p>可以<code>updatedb</code>命令立刻更新数据库</p></li><li><p>只能搜索文件名</p></li><li><p><code>/etc/updatedb.conf</code> 建立索引的配置文件</p><ul><li>PRUNE_BIND_MOUNTS &#x3D; “yes” 全部生效，开启搜索限制</li><li>PRUNEFS 不搜索的文件系统</li><li>PRUNENAMES 忽略的文件类型</li><li>PRUNEPATHS 忽略的路径 &#x2F;tmp</li></ul></li></ul><h4 id="2-4-2-whereis"><a href="#2-4-2-whereis" class="headerlink" title="2.4.2 whereis"></a>2.4.2 whereis</h4><ul><li><p>搜索命令所在路径以及帮助文档所在位置</p></li><li><p>whereis 命令名 <code>whereis ls</code></p><ul><li>-b 只查找可执行文件</li><li>-m 只查找帮助文件</li></ul></li></ul><h4 id="2-4-3-which"><a href="#2-4-3-which" class="headerlink" title="2.4.3 which"></a>2.4.3 which</h4><ul><li>可以看到别名 <code>which ls</code></li><li>能看到的都是外部安装的命令</li><li>无法查看Shell自带的命令，如 <code>which cd</code></li></ul><h4 id="2-4-4-环境变量"><a href="#2-4-4-环境变量" class="headerlink" title="2.4.4 环境变量"></a>2.4.4 环境变量</h4><p><code>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code></p><ul><li>定义的是系统搜索命令的路径</li><li>echo $PATH</li></ul><h4 id="2-4-5-find"><a href="#2-4-5-find" class="headerlink" title="2.4.5 find"></a>2.4.5 find</h4><ul><li>文件搜索命令</li><li>find [搜索范围] [搜索条件]</li></ul><h5 id="2-4-5-1-按名称搜索"><a href="#2-4-5-1-按名称搜索" class="headerlink" title="2.4.5.1 按名称搜索"></a>2.4.5.1 按名称搜索</h5><ul><li><p>避免大范围的搜索，会非常消耗系统资源</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -name aaa.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h5 id="2-4-5-2-通配符"><a href="#2-4-5-2-通配符" class="headerlink" title="2.4.5.2 通配符"></a>2.4.5.2 通配符</h5><ul><li><p>find是在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符匹配，通配符是完全匹配</p></li><li><p>通配符</p><ul><li><code>*</code> 匹配任意内容</li><li><code>?</code> 匹配任意一个字符</li><li><code>[]</code> 匹配任意一个中括号内的字符</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">find . -name &quot;ab[cdef]&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-5-3-i"><a href="#2-4-5-3-i" class="headerlink" title="2.4.5.3 -i"></a>2.4.5.3 -i</h5><p>不区分大小写</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -iname A.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-5-4-user"><a href="#2-4-5-4-user" class="headerlink" title="2.4.5.4 -user"></a>2.4.5.4 -user</h5><p>按所有者进行搜索</p><pre class="line-numbers language-none"><code class="language-none">find &#x2F;root -user rootfind &#x2F;root -nouser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-4-5-5-按时间搜索"><a href="#2-4-5-5-按时间搜索" class="headerlink" title="2.4.5.5 按时间搜索"></a>2.4.5.5 按时间搜索</h5><pre class="line-numbers language-none"><code class="language-none">find &#x2F;nginx&#x2F;access.log -mtime +5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>atime</td><td>文件访问时间</td></tr><tr><td>ctime</td><td>改变文件属性</td></tr><tr><td>mtime</td><td>修改文件内容</td></tr></tbody></table><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-5</td><td>5天内修改的文件</td></tr><tr><td>5</td><td>5天前当前修改的文件</td></tr><tr><td>+5</td><td>5天前修改的文件</td></tr></tbody></table><h5 id="2-4-5-6-按大小搜索"><a href="#2-4-5-6-按大小搜索" class="headerlink" title="2.4.5.6 按大小搜索"></a>2.4.5.6 按大小搜索</h5><ul><li>k小写,M大写</li></ul><pre class="line-numbers language-none"><code class="language-none">find . -size 100k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-8k</td><td>小于8K</td></tr><tr><td>8k</td><td>等于8K</td></tr><tr><td>+8k</td><td>大于8K</td></tr><tr><td>+8M</td><td>小于8M</td></tr></tbody></table><h5 id="2-4-5-7-按i节点搜索"><a href="#2-4-5-7-按i节点搜索" class="headerlink" title="2.4.5.7 按i节点搜索"></a>2.4.5.7 按i节点搜索</h5><pre class="line-numbers language-none"><code class="language-none">find . -inum 123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-4-5-8-综合应用"><a href="#2-4-5-8-综合应用" class="headerlink" title="2.4.5.8 综合应用"></a>2.4.5.8 综合应用</h5><pre class="line-numbers language-none"><code class="language-none">find &#x2F;tmp -size +10k -a -size -20k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查找&#x2F;etc目录下，大于10KB并且小于20KB的文件</li><li>-a and 逻辑与，两个条件都满足</li><li>-o or 逻辑或，两个条件满足一个就可以</li></ul><pre class="line-numbers language-none"><code class="language-none">find &#x2F;tmp -size +10k -a -size -20k -exec ls -lh &#123;&#125; \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>exec 对上个命令的结果进行操作</li></ul><h5 id="2-4-5-9-grep"><a href="#2-4-5-9-grep" class="headerlink" title="2.4.5.9 grep"></a>2.4.5.9 grep</h5><ul><li><p>在文件当中匹配符合条件的字符串</p></li><li><p>grep “10” access.log</p><ul><li><code>-i</code> 忽略大小写</li><li><code>-v</code> 排除指定字符串</li></ul></li><li><p>find命令，在系统当中搜索符合条件的文件名，如果需要匹配，使用通配符匹配，通配符是完全匹配</p></li><li><p>grep命令 在文件当中搜索符合条件的字符串，如果需要匹配，使用正则表达式进行匹配，正则表达式时包含匹配</p></li></ul><h3 id="2-5-帮助命令"><a href="#2-5-帮助命令" class="headerlink" title="2.5 帮助命令"></a>2.5 帮助命令</h3><h4 id="2-5-1-基本用法"><a href="#2-5-1-基本用法" class="headerlink" title="2.5.1 基本用法"></a>2.5.1 基本用法</h4><ul><li>man 命令 获取指定命令的帮助</li><li><code>man ls</code> 查看ls的帮助</li></ul><pre class="line-numbers language-none"><code class="language-none">man -f lswhatis lsman 1 lsman 1p ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-5-2-关键字搜索"><a href="#2-5-2-关键字搜索" class="headerlink" title="2.5.2 关键字搜索"></a>2.5.2 关键字搜索</h4><pre class="line-numbers language-none"><code class="language-none">- man -k passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-5-3-shell-内部帮助"><a href="#2-5-3-shell-内部帮助" class="headerlink" title="2.5.3 shell 内部帮助"></a>2.5.3 shell 内部帮助</h4><ul><li><p><code>whereis</code>找到就是外部，找不到就是内部</p><pre class="line-numbers language-none"><code class="language-none">help cd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-6-压缩与解压缩命令"><a href="#2-6-压缩与解压缩命令" class="headerlink" title="2.6 压缩与解压缩命令"></a>2.6 压缩与解压缩命令</h3><p><code>.zip</code> <code>.gz</code> <code>.bz2</code> <code>.tar.gz</code> <code>.tar.bz2</code></p><h4 id="2-6-1-zip格式"><a href="#2-6-1-zip格式" class="headerlink" title="2.6.1 zip格式"></a>2.6.1 zip格式</h4><ul><li><p>压缩文件 zip 压缩文件名 源文件</p></li><li><p>压缩目录 zip -r 压缩文件名 源目录</p></li><li><p>解压 unzip 压缩文件名</p><pre class="line-numbers language-none"><code class="language-none">mkdir booktouch book&#x2F;1.txttouch book&#x2F;2.txtzip -r book.zip bookunzip book.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-6-2-gzip"><a href="#2-6-2-gzip" class="headerlink" title="2.6.2 gzip"></a>2.6.2 gzip</h4><table><thead><tr><th>命令</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>gzip 源文件</td><td>gzip a.txt</td><td>压缩为.gz格式的压缩文件，源文件会消失</td></tr><tr><td>gzip -c 源文件 &gt; 压缩文件</td><td>gzip -c yum.txt &gt; yum.txt.gz</td><td>压缩为.gz格式的压缩文件，源文件不会消失</td></tr><tr><td>gzip -r 目录</td><td>gzip -r xx</td><td>压缩目录下的所有子文件，但是不压缩目录</td></tr><tr><td>gzip -d 压缩文件名</td><td>gzip -d yum.txt.gz</td><td>解压缩文件,不保留压缩包</td></tr><tr><td>gunzip 压缩文件</td><td>gunzip yum.txt.gz</td><td>解压缩文件,不保留压缩包</td></tr></tbody></table><ul><li>压缩是压缩目录下的文件</li></ul><h4 id="2-6-3-bz2格式压缩"><a href="#2-6-3-bz2格式压缩" class="headerlink" title="2.6.3 .bz2格式压缩"></a>2.6.3 .bz2格式压缩</h4><table><thead><tr><th>命令</th><th>示例</th><th>含义</th></tr></thead><tbody><tr><td>bzip2 源文件</td><td>bzip2 1.txt</td><td>压缩为.bz2格式的文件，不保留源文件</td></tr><tr><td>bzip2 -k 源文件</td><td>zip2 -k 1.txt</td><td>压缩为.bz2格式的文件，保留源文件</td></tr><tr><td>bzip2 -d 压缩文件名</td><td>bzip2 -d 1.txt.bz2</td><td>解压压缩包</td></tr><tr><td>bunzip2 压缩文件名</td><td>bunzip2 1.txt.bz2</td><td>解压压缩包</td></tr></tbody></table><ul><li>bzip2 不能压缩目录</li></ul><h4 id="2-6-4-tar"><a href="#2-6-4-tar" class="headerlink" title="2.6.4 tar"></a>2.6.4 tar</h4><ul><li><p>打包命令</p></li><li><p>tar -cvf 打包文件名 源文件</p><ul><li>-c 打包</li><li>-v 显示过程</li><li>-f 指定打包后的文件名</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">tar -cvf book.tar bookgzip book.tarbzip2 book.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>x 解打包</p><pre class="line-numbers language-none"><code class="language-none">tar -xvf book.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="2-6-4-压缩格式"><a href="#2-6-4-压缩格式" class="headerlink" title="2.6.4 压缩格式"></a>2.6.4 压缩格式</h4><p><strong>压缩</strong></p><blockquote><p>tar –cvf jpg.tar *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成tar.jpg<br>tar –czf jpg.tar.gz *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<br>tar –cjf jpg.tar.bz2 *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<br>tar –cZf jpg.tar.Z *.jpg &#x2F;&#x2F;将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z<br>rar a jpg.rar *.jpg &#x2F;&#x2F;rar格式的压缩，需要先下载rar for linux<br>zip jpg.zip *.jpg &#x2F;&#x2F;zip格式的压缩，需要先下载zip for linux</p></blockquote><p><strong>解压</strong></p><blockquote><p>tar –xvf file.tar &#x2F;&#x2F;解压 tar包<br>tar -xzvf file.tar.gz &#x2F;&#x2F;解压tar.gz<br>tar -xjvf file.tar.bz2 &#x2F;&#x2F;解压 tar.bz2<br>tar –xZvf file.tar.Z &#x2F;&#x2F;解压tar.Z<br>unrar e file.rar &#x2F;&#x2F;解压rar<br>unzip file.zip &#x2F;&#x2F;解压zip </p></blockquote><h3 id="2-7-关机和重启命令"><a href="#2-7-关机和重启命令" class="headerlink" title="2.7 关机和重启命令"></a>2.7 关机和重启命令</h3><h4 id="2-7-1-shutdown"><a href="#2-7-1-shutdown" class="headerlink" title="2.7.1 shutdown"></a>2.7.1 shutdown</h4><p>shutdown 关机命令</p><ul><li><p>-c 取消前一个关机命令</p></li><li><p>-h 关机</p></li><li><p>-r 重启</p><pre class="line-numbers language-none"><code class="language-none">shutdown -r 06:00shutdown -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="2-7-2-init"><a href="#2-7-2-init" class="headerlink" title="2.7.2 init"></a>2.7.2 init</h4><p>关机</p><pre class="line-numbers language-none"><code class="language-none">init 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启</p><pre class="line-numbers language-none"><code class="language-none">init 6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>系统的运行级别</p><ul><li>0 关机</li><li>1 但用户</li><li>2 不 完全多用户，不包含NFS服务</li><li>3 完全多用户</li><li>4 未分配</li><li>5 图形界面</li><li>6 重启</li></ul><h4 id="2-7-3-logout"><a href="#2-7-3-logout" class="headerlink" title="2.7.3 logout"></a>2.7.3 logout</h4><p>退出登录</p><pre class="line-numbers language-none"><code class="language-none">logout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-9-查看登录用户信息"><a href="#2-9-查看登录用户信息" class="headerlink" title="2.9 查看登录用户信息"></a>2.9 查看登录用户信息</h3><h4 id="2-9-1-w"><a href="#2-9-1-w" class="headerlink" title="2.9.1 w"></a>2.9.1 w</h4><p>查看登录用户信息</p><ul><li>USER 登录的用户名</li><li>TTY 登录的终端 tty1 本地终端 pts&#x2F;0远程终端</li><li>FROM 登录的IP</li><li>LOGIN 登录时间</li><li>IDLE 用户闲置时间</li><li>JCPU 该终端所有进程占用的时间</li><li>PCPU 当前进程所占用的时间</li><li>WHAT 正在执行的命令</li></ul><h4 id="2-9-2-who"><a href="#2-9-2-who" class="headerlink" title="2.9.2 who"></a>2.9.2 who</h4><p>查看登录用户信息</p><ul><li>USER 登录的用户名</li><li>TTY 登录的终端 tty1 本地终端 pts&#x2F;0远程终端</li><li>LOGIN 登录时间（登录的IP）</li></ul><h4 id="2-9-3-last"><a href="#2-9-3-last" class="headerlink" title="2.9.3 last"></a>2.9.3 last</h4><p>查看当前登录和过去登录的用户信息 默认读取 <code>/var/log/wtmp</code> 文件</p><ul><li>用户名</li><li>登录终端</li><li>登录IP</li><li>登录时间</li><li>退出时间(在线时间)</li></ul><h4 id="2-9-4-lastlog"><a href="#2-9-4-lastlog" class="headerlink" title="2.9.4 lastlog"></a>2.9.4 lastlog</h4><p>查看所有用户的最后一次登录时间</p><ul><li>用户名</li><li>登录终端</li><li>登录IP</li><li>最后一次登录时间</li></ul><h2 id="3-shell"><a href="#3-shell" class="headerlink" title="3. shell"></a>3. shell</h2><ul><li>shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序</li><li>用户可以用Shell来启动、挂起、停止或者编写一些程序</li><li>Shell还是一个功能相当强大的编程语言，易编写，易调试，灵活性较强。</li><li>Shell是解释执行的脚本语言，在Shell中可以直接调用Linux系统命令。</li></ul><h3 id="3-1-查看支持的shell"><a href="#3-1-查看支持的shell" class="headerlink" title="3.1 查看支持的shell"></a>3.1 查看支持的shell</h3><ul><li>&#x2F;etc&#x2F;shells</li></ul><h3 id="3-2-echo"><a href="#3-2-echo" class="headerlink" title="3.2 echo"></a>3.2 echo</h3><ul><li>输出命令</li><li>--e 支持反斜线控制的字符转换</li></ul><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td>\a</td><td>输出警告音</td></tr><tr><td>\b</td><td>退格键，也就是向左删除键</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车键</td></tr><tr><td>\t</td><td>制表符，也就是Tab键</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\onnn</td><td>按照八进制ASCII码表输出字符，其中0为数字零，nnn是三位八进制数</td></tr><tr><td>\xhh</td><td>按照十六进制ASCII码表输出字符，其中hh是两位十六进制数</td></tr></tbody></table><h3 id="3-3-编写执行shell"><a href="#3-3-编写执行shell" class="headerlink" title="3.3 编写执行shell"></a>3.3 编写执行shell</h3><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;bashecho -e &quot;\e[1;34m hello world \e[0m&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>赋予执行权限，直接运行</p><pre class="line-numbers language-none"><code class="language-none">chmod 755 hello.sh.&#x2F;hello.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过Bash调用执行脚本</p><pre class="line-numbers language-none"><code class="language-none">bash hello.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-4-别名"><a href="#3-4-别名" class="headerlink" title="3.4 别名"></a>3.4 别名</h3><ul><li>命令别名 &#x3D;&#x3D; 小名</li><li>临时生效</li><li>alias</li><li>alias rm&#x3D;”rm -i”</li><li>写入环境变量配置文件 vi ~&#x2F;.bashrc</li><li>source ~&#x2F;.bashrc</li><li>unalias 别名 删除别名</li></ul><h3 id="3-5-命令的生效顺序"><a href="#3-5-命令的生效顺序" class="headerlink" title="3.5 命令的生效顺序"></a>3.5 命令的生效顺序</h3><ul><li>绝对路径或者相对路径</li><li>别名</li><li>bash内部命令</li><li>按照$PATH环境变量定义的目录查找顺序找到的第一个命令</li></ul><h3 id="3-6-命令快捷键"><a href="#3-6-命令快捷键" class="headerlink" title="3.6 命令快捷键"></a>3.6 命令快捷键</h3><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>ctrl+c</td><td>强制终止当前命令</td></tr><tr><td>ctrl+l</td><td>清屏</td></tr><tr><td>ctrl+a</td><td>光标移动到命令行首</td></tr><tr><td>ctrl+e</td><td>光标移动到命令行尾</td></tr><tr><td>ctrl+u</td><td>从光标所在的位置删除到行首</td></tr><tr><td>ctrl+z</td><td>把命令放入后台</td></tr><tr><td>ctrl+r</td><td>在历史命令中搜索</td></tr></tbody></table><h3 id="3-7-历史命令"><a href="#3-7-历史命令" class="headerlink" title="3.7 历史命令"></a>3.7 历史命令</h3><ul><li><p>history [选项] [历史命令保存文件]</p></li><li><p>选项</p><ul><li>-c 清空历史命令</li><li>-w 把缓存中的历史命令写入历史命令保存文件 ~&#x2F;.bash_history</li></ul></li><li><p>默认保存1000条 &#x2F;etc&#x2F;profile HISSIZE&#x3D;10000</p></li></ul><h3 id="3-8-调用"><a href="#3-8-调用" class="headerlink" title="3.8 调用"></a>3.8 调用</h3><ul><li>使用上下箭头调用以前的历史命令</li><li>使用 !n 重复执行第n条历史命令</li><li>使用 !! 重复执行上一条命令</li><li>使用 !字符 重复执行最后一条以该字符串开头的命令</li></ul><h3 id="3-9-管道符号"><a href="#3-9-管道符号" class="headerlink" title="3.9 管道符号"></a>3.9 管道符号</h3><h4 id="3-9-1-多命令顺序执行"><a href="#3-9-1-多命令顺序执行" class="headerlink" title="3.9.1 多命令顺序执行"></a>3.9.1 多命令顺序执行</h4><p>(1) ; 分号，没有任何逻辑关系的连接符。当多个命令用分号连接时，各命令之间的执行成功与否彼此没有任何影响，都会一条一条执行下去。</p><p>(2) || 逻辑或，当用此连接符连接多个命令时，前面的命令执行成功，则后面的命令不会执行。前面的命令执行失败，后面的命令才会执行。</p><p>(3) &amp;&amp; 逻辑与，当用此连接符连接多个命令时，前面的命令执行成功，才会执行后面的命令，前面的命令执行失败，后面的命令不会执行，与 || 正好相反。</p><p>(4) | 管道符，当用此连接符连接多个命令时，前面命令执行的正确输出，会交给后面的命令继续处理。若前面的命令执行失败，则会报错，若后面的命令无法处理前面命令的输出，也会报错。</p><pre class="line-numbers language-none"><code class="language-none">- date;ls;date;ls- ls &amp;&amp; echo yes || echo no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-9-2-管道符号"><a href="#3-9-2-管道符号" class="headerlink" title="3.9.2 管道符号"></a>3.9.2 管道符号</h4><ul><li><p>命令1的正确输出会作为命令2的操作对象</p></li><li><p>命令1|命令2</p><pre class="line-numbers language-none"><code class="language-none">ls &#x2F;etc&#x2F; | morenetstat -an | grep ESTABLISHED | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-9-3-通配符"><a href="#3-9-3-通配符" class="headerlink" title="3.9.3 通配符"></a>3.9.3 通配符</h4><p>匹配文件名和目录名 |通配符|作用| |:—-|:—-| |?|匹配一个任意字符| |*|匹配0个或任意字符，也就是可以匹配任意内容| |[]|匹配中括号中任意一个字符| |[-]|匹配中括号中任意一个字符,-代表范围| |[^]|匹配不是中括号中的一个字符|</p><h4 id="3-9-4-其它符号"><a href="#3-9-4-其它符号" class="headerlink" title="3.9.4 其它符号"></a>3.9.4 其它符号</h4><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>‘’</td><td>单引号。在单引号中所有的特殊符号，如$和`都没有特殊含义</td></tr><tr><td>“”</td><td>双引号，在双引号里特殊符号都没有特殊含义，但是 $ ` \ 例外，拥有调用变量值，引用命令和转义的含义</td></tr><tr><td>&#96;&#96;</td><td>反引号，扩起来的是系统命令</td></tr><tr><td>$()</td><td>和反引号一样</td></tr><tr><td>#</td><td>在shell脚本中，#开头的行代表注释</td></tr><tr><td>$</td><td>用于调用变量的值</td></tr><tr><td>\</td><td>转义符号</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">-  a&#x3D;&#96;ls&#96;-  b&#x3D;$(ls)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="4-vi编辑器"><a href="#4-vi编辑器" class="headerlink" title="4. vi编辑器"></a>4. vi编辑器</h2><ul><li>VI visual interface</li><li>可视化接口</li><li>类似与windows中的记事本</li><li>vim支持多级撤销</li><li>跨平台</li><li>语法高亮</li><li>支持图形界面</li></ul><h3 id="4-1-操作模式"><a href="#4-1-操作模式" class="headerlink" title="4.1 操作模式"></a>4.1 操作模式</h3><ul><li>:w 保存</li><li>:q 退出</li><li>:! 强制保存</li><li>:ls 列出所有的文件</li><li>:n 下一个</li><li>:N 上一个</li><li>:15 跳转到指定行</li><li>&#x2F;xxx 从光标位置开始向后搜索 xxx 字符串</li><li>?xxx 从光标位置开始向前搜索</li></ul><h2 id="5-用户和用户组"><a href="#5-用户和用户组" class="headerlink" title="5. 用户和用户组"></a>5. 用户和用户组</h2><ul><li>使用操作系统的人都是用户</li><li>用户组是具有相同系统权限的一组用户</li></ul><h3 id="5-1-用户组"><a href="#5-1-用户组" class="headerlink" title="5.1 用户组"></a>5.1 用户组</h3><h4 id="5-1-1-etc-group"><a href="#5-1-1-etc-group" class="headerlink" title="5.1.1 &#x2F;etc&#x2F;group"></a>5.1.1 &#x2F;etc&#x2F;group</h4><ul><li>&#x2F;etc&#x2F;group 存储当前系统中所有用户组信息</li><li>group:x:123:abc,def</li><li>组名称:组密码占位符:组编号:组中用户名列表</li><li>root 组编号为0</li><li>1-499系统预留的编号 预留给安装的软件和服务的</li><li>用户手动创建的用户组从500开始</li><li>组密码占位符都是x</li></ul><h4 id="5-1-2-etc-gshadow"><a href="#5-1-2-etc-gshadow" class="headerlink" title="5.1.2 &#x2F;etc&#x2F;gshadow"></a>5.1.2 &#x2F;etc&#x2F;gshadow</h4><ul><li>存放当前系统中用户组的密码信息</li><li>和group中的记录一一对应</li><li>Group: * : :abc</li><li>组名称 组密码 组管理者 组中用户名</li></ul><h4 id="5-1-3-etc-passwd"><a href="#5-1-3-etc-passwd" class="headerlink" title="5.1.3 &#x2F;etc&#x2F;passwd"></a>5.1.3 &#x2F;etc&#x2F;passwd</h4><ul><li>存储当前系统中所有用户的信息</li><li>user:x:123:456:xxxxx:&#x2F;home&#x2F;user:&#x2F;bin&#x2F;bash</li><li>用户名:密码占位符:用户编号: 用户注释信息:用户主目录:shell类型</li></ul><h4 id="5-1-4-etc-shadow"><a href="#5-1-4-etc-shadow" class="headerlink" title="5.1.4 &#x2F;etc&#x2F;shadow"></a>5.1.4 &#x2F;etc&#x2F;shadow</h4><ul><li>存放当前系统中所有用户的密码信息</li><li>user:xxx:::::::</li><li>用户名:密码:</li></ul><h2 id="6-用户操作"><a href="#6-用户操作" class="headerlink" title="6. 用户操作"></a>6. 用户操作</h2><p>添加组</p><pre class="line-numbers language-none"><code class="language-none">groupadd student<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改组名称</p><pre class="line-numbers language-none"><code class="language-none">groupmod -n stu student <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改组编号</p><pre class="line-numbers language-none"><code class="language-none">groupmod -g 111 stu <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加分组并指定编号</p><pre class="line-numbers language-none"><code class="language-none">groupadd -g 222 teacher <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除分组</p><pre class="line-numbers language-none"><code class="language-none">groupdel 222 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加分组</p><pre class="line-numbers language-none"><code class="language-none">groupadd teacher <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为用户指定所属组</p><pre class="line-numbers language-none"><code class="language-none">useradd -g teacher zhangsan <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为用户指定所属组</p><pre class="line-numbers language-none"><code class="language-none">useradd -g teacher lisi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为用户指定工作目录</p><pre class="line-numbers language-none"><code class="language-none">useradd -d &#x2F;home&#x2F;zhangsan zhangsan <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定注释</p><pre class="line-numbers language-none"><code class="language-none">usermod -c iamateacher zhangsan <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户名</p><pre class="line-numbers language-none"><code class="language-none">usermod -l zhangsan zhangsan2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>指定文件夹</p><pre class="line-numbers language-none"><code class="language-none">usermod -d &#x2F;home&#x2F;zhangsan2 zhangsan2 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户所属组</p><pre class="line-numbers language-none"><code class="language-none">usermod -g stu zhangsan2 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除用户</p><pre class="line-numbers language-none"><code class="language-none">userdel zhangsan2 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除所属文件夹</p><pre class="line-numbers language-none"><code class="language-none">userdel -r lisi <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="7-用户命令"><a href="#7-用户命令" class="headerlink" title="7. 用户命令"></a>7. 用户命令</h2><p>显示登录的用户名</p><pre class="line-numbers language-none"><code class="language-none">whoami<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示指定用户信息，包括用户编号，用户名 主要组的编号及名称，附属组列表</p><pre class="line-numbers language-none"><code class="language-none">id zhangsan  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示zhangsan用户所在的所有组</p><pre class="line-numbers language-none"><code class="language-none">groups zhangsan <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显示用户详细资料</p><pre class="line-numbers language-none"><code class="language-none">finger zhangsan  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-附录"><a href="#8-附录" class="headerlink" title="8. 附录"></a>8. 附录</h2><h3 id="8-1-系统启动"><a href="#8-1-系统启动" class="headerlink" title="8.1 系统启动"></a>8.1 系统启动</h3><h4 id="8-1-1-BIOS"><a href="#8-1-1-BIOS" class="headerlink" title="8.1.1 BIOS"></a>8.1.1 BIOS</h4><ul><li>计算机通电后，第一件事就是读取刷入ROM芯片的开机程序，这个程序叫做(Basic Input&#x2F;Output System)</li></ul><h4 id="8-1-2-硬件自检"><a href="#8-1-2-硬件自检" class="headerlink" title="8.1.2 硬件自检"></a>8.1.2 硬件自检</h4><ul><li>BIOS程序首先检查，计算机硬件能否满足运行的基本条件，这叫做”硬件自检”（Power-On Self-Test)</li><li>如果硬件出现问题，主板会发出不同含义的蜂鸣，启动中止。如果没有问题，屏幕就会显示出CPU、内存、硬盘等信息。</li></ul><h4 id="8-1-3-启动顺序"><a href="#8-1-3-启动顺序" class="headerlink" title="8.1.3 启动顺序"></a>8.1.3 启动顺序</h4><ul><li>硬件自检完成后，BIOS把控制权转交给下一阶段的启动程序。</li><li>这时，BIOS需要知道，”下一阶段的启动程序”具体存放在哪一个设备</li><li>BIOS需要有一个外部储存设备的排序，排在前面的设备就是优先转交控制权的设备。这种排序叫做”启动顺序”（Boot Sequence）</li><li>BIOS按照”启动顺序”，把控制权转交给排在第一位的储存设备。</li><li>这时，计算机读取该设备的第一个扇区，也就是读取最前面的512个字节。如果这512个字节的最后两个字节是0x55和0xAA，表明这个设备可以用于启动；如果不是，表明设备不能用于启动，控制权于是被转交给”启动顺序”中的下一个设备。</li><li>这最前面的512个字节，就叫做”主引导记录”（Master boot record，缩写为MBR）</li></ul><h4 id="8-1-4-主引导记录的结构"><a href="#8-1-4-主引导记录的结构" class="headerlink" title="8.1.4 主引导记录的结构"></a>8.1.4 主引导记录的结构</h4><ul><li><p>“主引导记录”只有512个字节，放不了太多东西。它的主要作用是，告诉计算机到硬盘的哪一个位置去找操作系统。</p><ul><li>（1） 第1-446字节：是用来记录系统的启动信息的,调用操作系统的机器码</li><li>（2） 第447-510字节(64个字节)：分区表（Partition table），分区表的作用，是将硬盘分成若干个区</li><li>（3） 第511-512字节：主引导记录签名（0x55和0xAA）</li></ul></li></ul><h4 id="8-1-5-分区表"><a href="#8-1-5-分区表" class="headerlink" title="8.1.5 分区表"></a>8.1.5 分区表</h4><ul><li><p>磁盘分区是使用分区编辑器在磁盘上划分几个逻辑部分</p></li><li><p>磁盘一旦划分成多个分区，不同类的目录与文件可以存储进不同的分区内</p></li><li><p>“主引导记录”因此必须知道将控制权转交给哪个区</p></li><li><p>分区表的长度只有64个字节，里面又分成四项，每项16个字节。所以，一个硬盘最多只能分四个一级分区，又叫做”主分区”</p><ul><li>（1） 第1个字节：如果为0x80，就表示该主分区是激活分区，控制权要转交给这个分区。四个主分区里面只能有一个是激活的。</li><li>（2） 第2-4个字节：主分区第一个扇区的物理位置（柱面、磁头、扇区号等等）。</li><li>（3） 第5个字节：主分区类型，比如FAT32、NTFS等。</li><li>（4） 第6-8个字节：主分区最后一个扇区的物理位置。</li><li>（5） 第9-12字节：该主分区第一个扇区的逻辑地址。</li><li>（6） 第13-16字节：主分区的扇区总数。</li></ul></li></ul><h4 id="8-1-6-硬盘启动"><a href="#8-1-6-硬盘启动" class="headerlink" title="8.1.6 硬盘启动"></a>8.1.6 硬盘启动</h4><ul><li>计算机的控制权就要转交给硬盘的某个分区了</li><li>四个主分区里面，只有一个是激活的。计算机会读取激活分区的第一个扇区，叫做”卷引导记录”（Volume boot record，缩写为VBR）</li></ul><h4 id="8-1-7-操作系统"><a href="#8-1-7-操作系统" class="headerlink" title="8.1.7 操作系统"></a>8.1.7 操作系统</h4><ul><li>控制权转交给操作系统后，操作系统的内核首先被载入内存。</li><li>以Linux系统为例，先载入<code>/boot</code>目录下面的<code>kernel</code>。内核加载成功后，第一个运行的程序是<code>/sbin/init</code>。它根据配置文件（Debian系统是&#x2F;etc&#x2F;initab）产生init进程。这是Linux启动后的第一个进程，pid进程编号为1，其他进程都是它的后代</li><li>然后，<code>init</code>线程加载系统的各个模块，比如窗口程序和网络程序，直至执行<code>/bin/login</code>程序，跳出登录界面，等待用户输入用户名和密码。</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现鼠标悬停后卡片上升并出现亮光特效</title>
      <link href="/2023/12/09/ma-hai-wu-ya-css-shi-xian-shu-biao-xuan-ting-hou-qia-pian-shang-sheng-bing-chu-xian-liang-guang-te-xiao/"/>
      <url>/2023/12/09/ma-hai-wu-ya-css-shi-xian-shu-biao-xuan-ting-hou-qia-pian-shang-sheng-bing-chu-xian-liang-guang-te-xiao/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><h3 id="码海无涯-CSS实现鼠标悬停后卡片上升并出现亮光特效"><a href="#码海无涯-CSS实现鼠标悬停后卡片上升并出现亮光特效" class="headerlink" title="码海无涯-CSS实现鼠标悬停后卡片上升并出现亮光特效"></a>码海无涯-CSS实现鼠标悬停后卡片上升并出现亮光特效</h3><P>网上看到一个HTML代码，是鼠标悬停后卡片上升并出现亮光<br>突发奇想改造了一下，左上角加了一个字，右下角也加了一个字<br>令其能在鼠标悬停时，出现一个字<br>看不懂的初学者，可以把<br>.box1:transform: skew(-30deg) 和 .box的overflow: hidden<br>注释掉，看看是怎么运作的<br><br>知识点归纳：<br><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token function">scaleX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">skewY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">skewX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">translateX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">translateY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>scaleX() (水平缩放)：控制元素水平方向的缩放。如果值为 1，则不进行水平缩放；如果大于 1，则放大；如果在 0 和 1 之间，则缩小。<br>skewY() (垂直倾斜)：控制元素在垂直方向上的倾斜。<br>skewX() (水平倾斜)：控制元素在水平方向上的倾斜。<br>scaleY() (垂直缩放)：控制元素垂直方向的缩放。如果值为 1，则不进行垂直缩放；如果大于 1，则放大；如果在 0 和 1 之间，则缩小。<br>translateX() (水平平移)：控制元素在水平方向上的平移量。<br>translateY() (垂直平移)：控制元素在垂直方向上的平移量。<br>即在不变换的情况下是matrix(1, 0, 0, 1, 0, 0)<br></P></p><table class="reference" style="border: 0px; margin: 4px 0px; padding: 0px; border-collapse: collapse; width: 824.125px; color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, Arial, sans-serif; font-size: 11.25px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;">    <tbody style="border: 0px; margin: 0px; padding: 0px;">        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <th style="border: 1px solid rgb(85, 85, 85); margin: 0px; padding: 3px; font-size: 14px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left; width: 199.198px;">            函数</th>            <th style="border: 1px solid rgb(85, 85, 85); margin: 0px; padding: 3px; font-size: 14px; color: rgb(255, 255, 255); background-color: rgb(85, 85, 85); vertical-align: top; text-align: left;">            描述</th>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            matrix(<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>,<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 转换，使用六个值的矩阵。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            translate(<i>x</i>,<i>y</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 转换，沿着 X 和 Y 轴移动元素。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            translateX(<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 转换，沿着 X 轴移动元素。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            translateY(<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 转换，沿着 Y 轴移动元素。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            scale(<i>x</i>,<i>y</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 缩放转换，改变元素的宽度和高度。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            scaleX(<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 缩放转换，改变元素的宽度。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            scaleY(<i>n</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 缩放转换，改变元素的高度。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            rotate(<i>angle</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 旋转，在参数中规定角度。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            skew(<i>x-angle</i>,<i>y-angle</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 倾斜转换，沿着 X 和 Y 轴。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(246, 244, 240);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            skewX(<i>angle</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 倾斜转换，沿着 X 轴。</td>        </tr>        <tr style="border: 0px; margin: 0px; padding: 0px; background-color: rgb(255, 255, 255);">            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; min-width: 24px; line-height: 2em; vertical-align: top;">            skewY(<i>angle</i>)</td>            <td style="border: 1px solid rgb(212, 212, 212); margin: 0px; padding: 7px 5px; font-size: 14px; line-height: 2em; min-width: 24px; vertical-align: top;">            定义 2D 倾斜转换，沿着 Y 轴。</td>        </tr></table><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/Ma-hai-wu-ya/a2.gif" alt="截图" title="代码效果示例"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.box</span> <span class="token punctuation">&#123;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #000<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 100px auto<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all .1s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box1</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -110%<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>130deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> .5<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>-30deg<span class="token punctuation">)</span>             <span class="token comment">/* skew(x-angle,y-angle)定义沿着 X 和 Y 轴的 2D 倾斜转换。                包含两个参数值，分别表示X轴和Y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜。               transform的值有20多个，如：translate，scale，rotate，skew，perspective，matrix            */</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box:hover .box1</span> <span class="token punctuation">&#123;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 110%<span class="token punctuation">;</span> <span class="token comment">/* 离父盒子左边，1.1倍box1的宽的距离 */</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all .1s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-20px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Hover往上提升20px 坐标原点是左下角，Y轴与笛卡尔坐标正负相反 */</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 26px 40px -24px <span class="token function">rgb</span><span class="token punctuation">(</span>0 36 100 / 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box3</span> <span class="token punctuation">&#123;</span>            <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">margin-top</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 23px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 矫正文字因box1扭曲带来的变形*/</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.box4</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token comment">/* 绝对定位固定在底边 */</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span>30deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* 矫正文字因box1扭曲带来的变形*/</span>            <span class="token property">margin-left</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 28px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>战<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>战<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 码海无涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>码海无涯--实现一个“欺骗式”的图片滚动(js)</title>
      <link href="/2023/12/09/ma-hai-wu-ya-shi-xian-yi-ge-qi-pian-shi-de-tu-pian-gun-dong-js/"/>
      <url>/2023/12/09/ma-hai-wu-ya-shi-xian-yi-ge-qi-pian-shi-de-tu-pian-gun-dong-js/</url>
      
        <content type="html"><![CDATA[<h3 id="码海无涯系列，写给自己的注释"><a href="#码海无涯系列，写给自己的注释" class="headerlink" title="码海无涯系列，写给自己的注释"></a>码海无涯系列，写给自己的注释</h3><h3 id="码海无涯–实现一个“欺骗式”的图片滚动-js"><a href="#码海无涯–实现一个“欺骗式”的图片滚动-js" class="headerlink" title="码海无涯–实现一个“欺骗式”的图片滚动(js)"></a>码海无涯–实现一个“欺骗式”的图片滚动(js)</h3><hr><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/Ma-hai-wu-ya/a1.gif" alt="截图" title="代码效果示例"></p><hr><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">#demo</span> <span class="token punctuation">&#123;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token comment">/* 实际使用时，要改为hidden，以隐藏滚动条*/</span>            <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px dashed #ccc<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token selector">#indemo</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 900%<span class="token punctuation">;</span><span class="token comment">/* 这个很重要，要把它设置的大一点，否则你可以试试*/</span><span class="token punctuation">&#125;</span><span class="token selector">#demo1,#demo2</span> <span class="token punctuation">&#123;</span><span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">&#125;</span><span class="token selector">#demo2</span> <span class="token punctuation">&#123;</span><span class="token property">margin-left</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">img</span> <span class="token punctuation">&#123;</span><span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property">border</span><span class="token punctuation">:</span> 3px double #000<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token property">padding</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.img1</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.img2</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #cf2828<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.img3</span> <span class="token punctuation">&#123;</span><span class="token property">background-color</span><span class="token punctuation">:</span> #916060<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>indemo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>_blank</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://google.com</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img1<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://via.placeholder.com/150</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>_blank</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://google.com</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img2<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://via.placeholder.com/150</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>_blank</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://google.com</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img3<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>https://via.placeholder.com/150</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> speed <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">//时间为20ms</span><span class="token keyword">var</span> tab <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tab1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> tab2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tab2<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> tab1<span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span> <span class="token comment">// 偷懒，复制demo的html语句给demo2</span><span class="token keyword">function</span> <span class="token function">Marquee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tab2<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span> tab<span class="token punctuation">.</span>scrollLeft <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 当 tab2.offsetWidth - tab.scrollLeft &lt;= 0</span><span class="token comment">// offsetWidth 即不包括外边距（margin）的宽</span><span class="token comment">// scrollLeft  即滚动条到元素左边的距离</span><span class="token comment">// tab2.offsetWidth - tab.scrollLeft 即demo2（后面放图片的容器）总宽减去demo离左边的值</span><span class="token comment">// tab2.offsetWidth 表示滚动容器中内容的总宽度，即 demo2 的宽度。</span><span class="token comment">// tab.scrollLeft 表示滚动容器的当前水平滚动位置。</span><span class="token comment">// tab2.offsetWidth 是固定不变的(即 demo2 的宽)</span><span class="token comment">// tab.scrollLeft 其最大值则为demo2 的宽(因为demo的大小是里面的内容撑起来的, 可能会大点)</span><span class="token comment">// 当tab.scrollLeft达到最大值时(即等于大于demo2的宽)，意味着内容滚动到最左边，此时相减则 tab2.offsetWidth - tab.scrollLeft &lt;= 0</span><span class="token comment">// 所以，tab2.offsetWidth - tab.scrollLeft 表示内容的末尾距离滚动容器左侧的距离。当这个距离小于等于 0 时，说明滚动已经到达了末尾，此时我们希望将滚动位置重新设置为初始位置，实现循环滚动的效果。</span><span class="token comment">// 具体来说，如果 tab2.offsetWidth - tab.scrollLeft 小于等于 0，表示内容已经完全滚动出了可视区域，此时我们将 tab.scrollLeft 重置为 0，重新从左侧开始滚动，形成循环。否则，我们继续将 tab.scrollLeft 增加，实现滚动效果。</span><span class="token comment">// 这样的设置可以确保滚动不会无限制地继续，而是在内容末尾处重新开始，从而实现了无缝循环滚动。</span><span class="token comment">// if (tab2.offsetWidth - tab.scrollLeft &lt;= 0)这样的写法令人困惑，不如直接使用tab.scrollLeft >= tab2.offsetWidth</span>tab<span class="token punctuation">.</span>scrollLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 滚动到末尾时重置为0，实现循环效果</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>tab<span class="token punctuation">.</span>scrollLeft<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// tab.scrollLeft++; 表示将 tab 元素的水平滚动位置向右移动一个像素。这行代码是在检测到内容未完全滚动出可视区域时执行的，即 tab2.offsetWidth - tab.scrollLeft 大于 0 的情况。</span><span class="token comment">// 通过递增 tab.scrollLeft，实现了内容向左滚动的效果。整个代码的逻辑是不断地在 setInterval 定时器中执行 Marquee 函数，而 Marquee 函数中根据滚动位置和内容宽度的关系来判断是继续向右滚动还是重新回到最左侧开始滚动，从而实现了水平滚动的效果。</span><span class="token comment">// 总体来说，tab.scrollLeft++; 表示不断向右滚动一个像素，以实现水平滚动效果。</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> MyMar <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>Marquee<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用JS的setInterval内置定时函数，执行Marquee，按照指定的时间间隔（以毫秒为单位）来触发，本例为20ms（传入的参数为：Marquee, speed）</span>tab<span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>MyMar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鼠标移入时清除定时器，暂停滚动</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>tab<span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>MyMar <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>Marquee<span class="token punctuation">,</span> speed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 鼠标移出时重新启动定时器，恢复滚动</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 初始调用一次Marquee函数，启动滚动</span><span class="token function">Marquee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
            <tag> 码海无涯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40张图入门Linux</title>
      <link href="/2023/11/25/40-zhang-tu-ru-men-linux/"/>
      <url>/2023/11/25/40-zhang-tu-ru-men-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="40张图入门Linux"><a href="#40张图入门Linux" class="headerlink" title="40张图入门Linux"></a>40张图入门Linux</h3><p><em>原文链接: <a href="https://juejin.cn/post/6844904198761349134">https://juejin.cn/post/6844904198761349134</a></em><br><em>原作者: 前端点线面</em></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/1.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/2.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/3.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/4.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/5.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/6.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/7.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/8.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/9.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/10.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/11.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/12.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/13.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/14.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/15.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/16.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/17.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/18.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/19.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/20.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/21.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/22.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/23.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/24.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/25.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/26.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/27.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/28.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/29.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/30.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/31.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/32.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/33.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/34.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/35.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/36.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/37.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/38.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/39.png" alt="截图" title="40张图入门linux之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/40-pics-to-entry-linux/40.png" alt="截图" title="40张图入门linux之一"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx和Apache安装与基础部署</title>
      <link href="/2023/11/25/nginx-he-apache-an-zhuang-yu-ji-chu-bu-shu/"/>
      <url>/2023/11/25/nginx-he-apache-an-zhuang-yu-ji-chu-bu-shu/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx和Apache安装与基础部署"><a href="#Nginx和Apache安装与基础部署" class="headerlink" title="Nginx和Apache安装与基础部署"></a>Nginx和Apache安装与基础部署</h3><h5 id="一：安装"><a href="#一：安装" class="headerlink" title="一：安装"></a>一：安装</h5><p>安装方式有多种，每种方式的繁琐程度不同</p><p>使用系统包管理器安装 使用源码编译安装 其中，使用系统包管理器安装如沐春风，使用源码编译安装味同嚼蜡。所以我只说用系统包管理器安装</p><h6 id="1、使用系统包管理器安装"><a href="#1、使用系统包管理器安装" class="headerlink" title="1、使用系统包管理器安装"></a>1、使用系统包管理器安装</h6><p>CentOS系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> epel-releaseyum <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Ubuntu系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看版本以确定是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动 nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="2、一些默认路径"><a href="#2、一些默认路径" class="headerlink" title="2、一些默认路径"></a>2、一些默认路径</h6><p>Nginx的网站文件存放在&#x2F;etc&#x2F;nginx&#x2F;sites-available目录下， 默认的静态网页文件夹是&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html目录 配置文件通常位于&#x2F;etc&#x2F;nginx目录下。具体的文件名可能是nginx.conf 查看Nginx的错误日志，通常位于 &#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log</p><h6 id="3、设置html文件夹权限"><a href="#3、设置html文件夹权限" class="headerlink" title="3、设置html文件夹权限"></a>3、设置html文件夹权限</h6><p>直接用sftp上传文件到linux的html文件下 ，会报权限拒绝</p><p>可以先给html赋777权限，然后重启Linux</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 赋777权限<span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /usr/share/nginx/html// 重启<span class="token function">sudo</span> <span class="token function">service</span> nginx reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>卸载nginx(purge参数是指删除删除安装包)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token parameter variable">--purge</span> remove nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="二：配置"><a href="#二：配置" class="headerlink" title="二：配置"></a>二：配置</h5><h6 id="1、隐藏某级路径"><a href="#1、隐藏某级路径" class="headerlink" title="1、隐藏某级路径"></a>1、隐藏某级路径</h6><p>如果你想将静态网页放在nginx的html的dist文件夹下，并希望在URL的某个端口号后不需要写dist就可以打开页面，你可以尝试使用rewrite规则来实现。如果你希望在不同的端口号上对应不同的文件夹，可以在nginx的配置文件中添加多个server块，每个块指定不同的端口号和对应的文件夹路径。以下是一个示例配置：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">8080</span></span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">root</span> /path/to/nginx/html/dist1</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">index</span> index.html</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">8081</span></span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">root</span> /path/to/nginx/html/dist2</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">index</span> index.html</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中的$uri是指匹配的正则路径，后面的index.html则是使用的文件（即访问$uri时，实际需要访问的文件）</p><h6 id="2、设置post请求代理"><a href="#2、设置post请求代理" class="headerlink" title="2、设置post请求代理"></a>2、设置post请求代理</h6><p>要在Nginx中配置静态网页的POST请求代理，你可以使用proxy_pass指令来将POST请求反向代理到另一个服务器或应用程序。其实就是在上面配置的server模块中，再加一个location。</p><p>以下是一个示例配置：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">server_name</span> example.com</span><span class="token punctuation">;</span>  <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">root</span> /path/to/your/static/files</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ =404</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token directive"><span class="token keyword">location</span> /api</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^/api(.*)$ <span class="token variable">$1</span> break</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_pass</span> http://backend_server</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面示例中，在location &#x2F;api块中添加了一个rewrite指令。这个指令会把请求URL中的&#x2F;api前缀去掉，并把剩余部分作为反向代理的路径。</p><p>这样，如果你的静态网站中的POST请求以&#x2F;api开头，Nginx将会代理这些请求至后端服务器，并将响应返回给客户端。URL中的&#x2F;api前缀将被移除，后端服务器收到的请求将是不带前缀的形式。</p><p>代理转发后的效果如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 浏览器看到的请求http:&#x2F;&#x2F;39.104.22.73&#x2F;api&#x2F;getarticlenum&#x2F;foreend&#x2F;&#x2F; 代理后实际的请求；http:&#x2F;&#x2F;39.104.22.73:8888&#x2F;getarticlenum&#x2F;foreend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运维 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>76张脑图学习JS</title>
      <link href="/2023/11/22/76-zhang-nao-tu-xue-xi-js/"/>
      <url>/2023/11/22/76-zhang-nao-tu-xue-xi-js/</url>
      
        <content type="html"><![CDATA[<h3 id="76张脑图学习JS"><a href="#76张脑图学习JS" class="headerlink" title="76张脑图学习JS"></a>76张脑图学习JS</h3><p><em>原文链接: <a href="https://juejin.cn/post/6844904166192578567">https://juejin.cn/post/6844904166192578567</a></em><br><em>原作者: 金色小芝麻</em></p><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/1.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/2.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/3.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/4.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/5.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/6.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/7.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/8.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/9.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/10.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/11.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/12.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/13.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/14.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/15.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/16.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/17.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/18.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/19.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/20.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/21.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/22.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/23.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/24.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/25.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/26.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/27.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/28.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/29.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/30.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/31.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/32.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/33.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/34.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/35.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/36.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/37.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/38.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/39.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/40.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/41.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/42.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/43.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/44.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/45.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/46.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/47.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/48.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/49.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/50.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/51.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/52.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/53.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/54.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/55.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/56.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/57.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/58.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/59.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/60.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/61.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/62.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/63.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/64.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/65.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/66.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/67.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/68.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/69.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/70.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/71.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/72.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/73.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/74.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/75.png" alt="截图" title="76张脑图之一"><br><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/76-mind-pics/76.png" alt="截图" title="76张脑图之一"></p>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式入门</title>
      <link href="/2023/11/14/zheng-ze-biao-da-shi-ru-men/"/>
      <url>/2023/11/14/zheng-ze-biao-da-shi-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="两篇优秀的正则文章"><a href="#两篇优秀的正则文章" class="headerlink" title="两篇优秀的正则文章"></a>两篇优秀的正则文章<br></h3><h4 id="正则表达式入门"><a href="#正则表达式入门" class="headerlink" title="正则表达式入门"></a>正则表达式入门</h4><p><a href="#A2">第二篇:JS正则表达式完整教程（略长）</a><br><br><br>原文：<a target="_blank" href="https://taoshu.in/hello-regexp.html">涛叔</a><br><br><br>正则表达式说白了就是一堆约定俗成的匹配规则。如果从微观入手，你会发现有背不完的规则；如果从宏观入手，你会发现万变不离其宗。所以我们将从宏观到微观依次说起，依次为大家总结三大宏观规则、两大微观规则，再附带一部分高级内容。基本可以通过一篇文章让大家理解正则表达式的主要用法。</p><p>先说三大宏观规则。</p><p>宏观规则<br>我们用大写字母表示抽象的正则规则，主要讨论正则之间的关系，忽略具体的内容</p><p>交集规则<br>如果有两个正则表达式E和F，那么EF也是一个正则，表示同时匹配E和F的内容。这跟编程中的逻辑与是一个意思，跟集合中的交集也是一个意思。你也可以连接任意多个正则，比如EFGH。</p><p>并集规则<br>如果有两个正则表达式E和F，那么E|F也是一个正则，表示匹配E或者匹配F。这跟编程中的逻辑或是一个意思，跟集合中的并集也是一个意思。 你可以使用|连接任意多个正则表达式，比如E|F|G|H。</p><p>如果你要连接非常多的正则，那就得写非常多的竖线，看起来非常乱。所以人们还约定了一种简化记法[EFGH]。也就是你写成[EFGH]跟写成E|F|G|H效果是一样，但前者更简短，更清晰。</p><p>补集规则<br>编程有与或非，集合有交并补。正则表达式有没有类似逻辑非或者集合中的补集呢？有，但记法比较复杂。如果你要排除匹配E和F的内容，需要写成[^EF]。</p><p>我们已经知道[EF]可以匹配那些匹配E或者匹配F的内空，在前加上一个^表示取反。因为取了反，原来的逻辑或关系变成了逻辑与（具体请参见德摩根定律）。所以[^EF]匹配那些不能匹配E而且不能匹配F的内容。</p><p>以上交并补规则单个看都不复杂，但它们可以任意组合，用起来就有点复杂。</p><p>比如A|BC|[^D]E表示匹配A或者同时匹配B和C或者不能匹配D但要匹配E的三种内容。这么长的规则只用A|BC|[^D]E就能准确表达，没有任何歧义，这就是正则的魅力。</p><p>这里有一个问题。A|BC|[^D]E表示A、BC和[^D]E的并集，还是表示A|BC跟[^D]E并集，还是表示A跟BC|[^D]E的并集呢？这就涉及到结合优先级的问题了。</p><p>正确的答案是第一种，被|分割的部分是平级的。如果你想表示A|BC跟[^D]E的并集，那你需要写成(A|BC)|[^D]E。对了，遇事不决加括号！</p><p>在前面的讨论中，ABCDE都是抽像的正则，我们并不关心具体的规则内容。而对应的交、并补规则对所有正则都管用。现在我们开始讨论两大微观规则。</p><p>微观规则<br>单字符规则<br>所谓单字符就是一次匹配一个字符，但字符的取值可能是五花八门。</p><p>一个字母a, 一个数字1都是正则，分别匹配包含a和包含1的内容。</p><p>如果我们想匹配数字1234，那么根据交集规则，我们写成1234就可以了。</p><p>如果我们想匹配所有可能出现的数字，则可以根据并集规则写成0|1|2|3|4|5|6|7|8|9。是不有点长。我们可以简化成[0123456789]。一下子少了很多坚线。</p><p>慢着，如果想匹配所有可能出现的小写字母呢？难不成要写成[abc此处省略20个字母xyz]？太长了😂</p><p>正则表达式为此提供了一种更加简化方法——连字符，可以使用减号-表示连续出现的字符，只需写出头尾。所以我们可以把[0123456789]进一步简化成[0-9]，把[abc…xyz]简化成[a-z]。</p><p>如果要匹配所有字母，不区分大小写，可以写成[a-zA-Z]，如果还想顺手匹配所有数字，可以写成[a-zA-Z0-9]。</p><p>因为[0-9]很常用，大家又进一步简化成了\d（对应单词 digit）。并非所有的正则引擎都支持这个\d，有的默认不支持，需要开启 perl 兼容的正则引擎才行。</p><p>因为[a-zA-Z]也很常用，大家就把它简化成\a（对应单词 alpha）。</p><p>同样的，如果想匹配大小写字母、数字和下划线（也就是所有单词字符），可以写成[a-zA-Z0-9_]。也是因为太常用，大家将其简化为\w（对应单词 word）。</p><p>如果想匹配一些空白字符，可以写成[ \t\r\n\v\f]，这个正则会匹配空格、水平制表符、回车、换行、 垂直制表符和 Page break 记。这里用到了跟 c 语言 printf 函数一样的转义字符。同样因为使用广泛，被简化为\s（对应单词 space）。</p><p>我们说过，正则支持取反操作。[0-9]表示匹配所有数字，那[^0-9]就表示匹配所有非数字字符。因为使用广泛，人们将其简写成\D。大家注意，[0-9]简写成\d（小写字母），对应的[^0-9]简写成\D（大写字母）。以此类推，\a取反是\A、\w取反是\W、\s取反是\S。一下子都记住了吧。</p><p>有了连字符和并集规则，理论上我们可以匹配所有字符。但是 Unicode 有上百万字符，难道我们都要写到方括号里吗？不能够。</p><p>我们可以利用取反操作。只要排除少量不常用字符，就可以匹配剩下的大多数字符了。但排除哪个呢？最终人们决定排除\n。为什么呢？因为一般而言，正则都是逐行匹配的，一次匹配一行内容，不会遇到换行符。最终可以用[^\n]表示匹配所有字符。同样因为太常用，这一写法被简化成句点.。 也就是说在正则表达式中，一个.可以匹配\n以外的所有字符。</p><p>最后需要额外说一下字符反斜杠\。我们前面提到的\d、\w都使用反斜杠进行转义。如果要匹配\就得写成\。因为好多语言的字符串也是使用反斜杠进行转义（比如用\n表示换行），所以你会在代码中看到像”\\“这样的写法。如果你是初学者，一定会这样的鬼画符吓到。其实很简单。 第一个反斜杠用于转义第二个反斜杠，表示一个反斜杠字符；第三个转义第四个。第一个和第三个反斜杠是给语言编译器用的。如果你用printf之类的函数将这段打印到标准输出，你会看到\，又是两个反斜杠。 这次转义是给正则引擎用的，用于表示匹配\这个字符。</p><p>那么多斜杠确实容易出错。好多语言都提供所谓 raw 字符串，这种字符串不支持转义功能，也就不需要写额外的反斜杠。比如在 go 语言中”\\“可以写成\&#96;（注意两侧的&#96;&#96;）是不是清爽多了🤪。</p><p>以上基本上就是单字符规则的所有内容。下面我们继续讨论第二条，多字符规则。</p><p>多字符规则<br>如果想匹配两位数字，可以利用交集规则，写成\d\d，此正则会先匹配一个数字再匹配一个数字，最终匹配的是两位数字。如果想匹配三位数字，需要写成\d\d\d，四位数字写成\d\d\d\d。</p><p>那如果想匹配一位或者两位数字或者三位数字或者四位数字（也就是四位以内的数字），需要写成</p><p>\d|\d\d|\d\d\d|\d\d\d\d<br>有点长，但是 it works！如果想匹配所有的八位以内的数字呢？那就得写很长很长了。为此，人们又想了个简化的办法。这次引入了大括号{}。</p><p>刚才的正则是可以简化成\d{1,4}，展开就是\d|\d\d|\d\d\d|\d\d\d\d。大括号中第一个数字表示最短匹配的次数，第二个数字表示最长匹配的次数。</p><p>如果想匹配八位以内的数字，就可以写成\d{1,8}，是不是很简洁呢？</p><p>如果只想匹配一个八位数，则可以写成\d{8,8}。重复写两个8好像有点多余，还是简化成\d{8}吧。</p><p>那能不能匹配任意长度的数字呢？ 理论上应该写成\d{1,∞}，只是这个∞不好写，干脆省略，写成\d{1,}算了。所以\d{1,}表示可以匹配一位、两位、一直到任意长度的数字。也就是说{1,}表示前面的匹配内容至少出现一次。因为这个至少出现一次也是特别常用，人们又进一步将其简化成+，最终我们的正则变成了\d+，优雅的不行。</p><p>那能不能实现匹配出现零次这种语义呢？ 可以，只要将大括号内第一个数字写成0就行。所以a{0,}可以匹配a、aa……aaaa……等各种情况。也就是说{0,}表示前面的匹配的内容出现多次或者不出现。 同样十分常用，被人们简化成了<em>。所以原来的正则可以简化成a</em>。</p><p>最后就是{0,1}这种情况了，显然表示出现零次或者一次。 不用说，懒人们将其简化成了?。所以ab?只能匹配a和ab两种情况。</p><p>看到这里，你基本已经理解了正则的常用功能。如果还不确定，就返回去再读几遍。最后我们引申出一些高级内容。</p><p>高级内容<br>先说一下贪心。</p><p>贪心<br>给定一段html </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>this is a title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>this is content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们想匹配h1标签的内容，我们可以写成<br><code>&lt;h1&gt;.*&lt;/h1&gt;</code><br>这里写了两遍h1。 显然，不想重复。我看到&#x2F;h1后面有一个&gt;，我能不能将正则改成</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>呢？</p><p>大家可以自己试一下。正则引擎会一直匹配到</p>里面的&gt;。这是为什么呢？因为正则表达式默认使用贪心模式，一次性匹配尽可能长的内容。所以在找到&#x2F;h1后面的&gt;之后还会继续向前找。</p><p>那有办法修正这种行为吗？有，使用?。你可以将正则改为</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样引擎就会在第一次遇到&gt;的地方停下来。这里的?跟之前说的「出现零次或一次」可不是一个意思哈。跟在*后面表示非贪心模式。其实也是为了避免引入太多的特殊符号，所以复用了?，这一定程度上会给初学者带来困扰。没办法，大家只能克服了。</p><p>再说一下引用。</p><p>引用<br>给定一段 html<br><code>&lt;h1&gt;this is a title&lt;/h1&gt;&lt;h1&gt;this is content&lt;/h2&gt;</code><br>这里第二个h1没有闭合，结束标签写成了h2。如果只想匹配正常结束的h1，那可以写成<br><code>&lt;(h1)&gt;.*&lt;/\1&gt;</code></p><p>这里有两点。第一，前面的h1两边加了括号。第二，在结尾的地方使用了\1来引用前面加括号的内容。 正则引擎会为每个括号分配一个编号（从1开始记数），并记录括号的内容，大家可以使用+数字的方式来引用。这样的正则等价于<br><code>&lt;h1&gt;.*&lt;/h1&gt;</code></p><p>咋一看也没什么大不了的。但如果要匹配很多成对标签的话，引用的优势就体现出来了。例如<br><code>&lt;(h1|p|artice|div)&gt;.*?&lt;/\1&gt;</code><br>可以匹配h1、p、article和div四种闭合标签。</p><p>最后说一下环视。</p><p>环视<br>环视说起来有点抽像 。例子不太好举，这里我引用 stack over flow 的一篇回答内容。</p><p>比如我们有字符串foobarbarfoo。下面我将用大写字母表示想要匹配的内容。为了跟英语原文对应，我们规定当前字符右边为前（未处理），左边为后（已处理）。</p><p>如果只想匹配第一个出现的bar，也就是fooBARbarfoo。肯定不能只写成bar，因为第二个bar也会匹配到。我们希望正则引擎在每碰到一个bar的时候继续向前（右）看看还有没有bar，如果还有则说明不是第一个。所以，需要写成bar(?&#x3D;bar)。 括号里以?开头，&#x3D;表示检查是否出现， 因为是继续向前（右）看，所以叫做前向肯定环视（Look ahead positive）。</p><p>如果想匹配第二个bar也就是foobarBARfoo，则需要写成bar(?!bar)。也就是说查到bar只后还要继续向前（右）看，没有bar才算匹配到。因为是没有，所以叫前向否定环视（Look ahead negative）。</p><p>我还可以通过向后（左）看的办法来解决类似的问题。</p><p>如果想匹配第一个bar,也就是fooBARbarfoo，我们可以写成(?&lt;&#x3D;foo)bar，这是告诉正则引擎在找到bar之后还要回顾一下有没有遇到foo，只有碰到才算匹配成功。因为需向后（左）确定匹配成功，所以叫后向肯定环视（Look behind positive）。</p><p>如果想匹配第二个bar，也就是foobarBARfoo，我们可以写成(?&lt;!foo)bar，这是让引擎在找到bar之后回顾一下有没有遇到过foo，没有碰到才算匹配成功。因为需要向后（左）确定匹配不成功，所以叫后向否定环视（Look behind negative）。</p><p>我们稍微回顾一下。所有的环视都需要用括号括起来，以?开始。匹配之后继续向前（右）检查叫前叫前向环视，如果需要确保另一模式也匹配，叫肯定环视，用&#x3D;，否则是否定环视，用!；匹配之后继续向后（左）检查叫后向环视，为了跟前向有所区别，所以在?之后加了一个&lt;，为大家指明方向，肯定和否标记则跟前向一样。</p><p>理解了环视，我们还可以做一些更有意思的事情。</p><p>第一个，可以匹配单词的边界。一个单词两边都有空格。单词的左边界是一个虚拟的位置，它右边的字符肯定是匹配\w，它左边的内容肯定匹配\W。我们可以要求正则引擎同时向前看和向后看。所以可以写成(?&lt;&#x3D;\W)(?&#x3D;\w)。这里两个括号之间是空的，表示只匹配位置，不消耗内容。同样的，右边的边界也是个虚拟位置，它左边的字符肯定是匹配\w，它右边的字符肯定匹配\W的位置，所以可以写成(?&lt;&#x3D;\w)(?&#x3D;\W)。把这两个正则使用并集规则合到一起就是(?&lt;&#x3D;\W)(?&#x3D;\w)|(?&lt;&#x3D;\w)(?&#x3D;\W)，就可以匹配单词的左右边界。同样因为常用，人们把它简化成了\b。</p><p>也就是说\b匹配单词边界。正则\bbar只会匹配字符串foo bar中的bar，而不会匹配foobar中的bar。</p><p>第二个，可以匹配一行的开始和结束。一行的开始，顾名思义，就是第一个字符之前的位置，在它之前没有字符，在它之后是任意字符，所以我们可以写成(?&lt;!.)(?&#x3D;.)。对于一行的结束，我们可以如法炮制，写成(?&lt;&#x3D;.)(?!.)。同样因为常用，此二者被分别简化成了^和$。</p><p>因为一行的开始跟结束非常特殊，正则引擎可以直接标记，根本用不到环视这样的大招。 我将它们放到一起讲只是为了逻辑上的统一。</p><p>小结<br>差不多该搁笔了。所谓言有尽而意无穷。我们讲重构、讲抽象，说到底就是要站在更高的视角看问题，要有全局意识，要有大局观。学习正则就是一个很好的例子，如果不从整体上去认识它，就会陷入死记硬背各种模式境地，费时费力容易出错不说，最关键的是会消磨你的学习热情。所以，我们在埋头学习的时候一定要时常浮出水面透透气，多思考、多总结，这样才能事半功倍。与君共勉💯</p><h4 id="JS正则表达式完整教程（略长）"><a href="#JS正则表达式完整教程（略长）" class="headerlink" title="JS正则表达式完整教程（略长）"></a><span id="A2">JS正则表达式完整教程（略长）</span></h4><br>原文：<a target="_blank" href="https://juejin.cn/post/6844903487155732494">老姚</a>字数：245,907 阅读44分钟<br><p>注：本文已经整理成电子书：《JavaScript正则迷你书》</p><p>引言<br>亲爱的读者朋友，如果你点开了这篇文章，说明你对正则很感兴趣。</p><p>想必你也了解正则的重要性，在我看来正则表达式是衡量程序员水平的一个侧面标准。</p><p>关于正则表达式的教程，网上也有很多，相信你也看了一些。</p><p>与之不同的是，本文的目的是希望所有认真读完的童鞋们，都有实质性的提高。</p><p>本文内容共有七章，用JavaScript语言完整地讨论了正则表达式的方方面面。</p><p>如果觉得文章某块儿没有说明白清楚，欢迎留言，能力范围之内，老姚必做详细解答。</p><p>具体章节如下：</p><p>引言<br>第一章 正则表达式字符匹配攻略<br>第二章 正则表达式位置匹配攻略<br>第三章 正则表达式括号的作用<br>第四章 正则表达式回溯法原理<br>第五章 正则表达式的拆分<br>第六章 正则表达式的构建<br>第七章 正则表达式编程<br>后记<br>下面简单地说说每一章都讨论了什么？</p><p>正则是匹配模式，要么匹配字符，要么匹配位置。</p><p>第1章和第2章以这个角度去讲解了正则的基础。</p><p>在正则中可以使用括号捕获数据，要么在API中进行分组引用，要么在正则里进行反向引用。</p><p>这是第3章的主题，讲解了正则中括号的作用。</p><p>学习正则表达式，是需要了解其匹配原理的。</p><p>第4章，讲解了正则了正则表达式的回溯法原理。另外在第6章里，也讲解了正则的表达式的整体工作原理。</p><p>不仅能看懂别人的正则，还要自己会写正则。</p><p>第5章，是从读的角度，去拆分一个正则表达式，而第6章是从写的角度，去构建一个正则表达式。</p><p>学习正则，是为了在真实世界里应用的。</p><p>第7章讲解了正则的用法，和相关API需要注意的地方。</p><p>如何阅读本文？</p><p>我的建议是阅读两遍。第一遍，不求甚解地快速阅读一遍。阅读过程中遇到的问题不妨记录下来，也许阅读完毕后就能解决很多。然后有时间的话，再带着问题去精读第二遍。</p><p>深呼吸，开始我们的正则表达式旅程吧。我在终点等你。</p><p>第一章 正则表达式字符匹配攻略<br>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><p>然而关于正则如何匹配字符的学习，大部分人都觉得这块比较杂乱。</p><p>毕竟元字符太多了，看起来没有系统性，不好记。本章就解决这个问题。</p><p>内容包括：</p><p>两种模糊匹配<br>字符组<br>量词<br>分支结构<br> 案例分析<br>1 两种模糊匹配<br>如果正则只有精确匹配是没多大意义的，比如&#x2F;hello&#x2F;，也只能匹配字符串中的”hello”这个子串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正则表达式之所以强大，是因为其能实现模糊匹配。</p><p>而模糊匹配，有两个方向上的“模糊”：横向模糊和纵向模糊。</p><p>1.1 横向模糊匹配</p><p>横向模糊指的是，一个正则可匹配的字符串的长度不是固定的，可以是多种情况的。</p><p>其实现的方式是使用量词。譬如{m,n}，表示连续出现最少m次，最多n次。</p><p>比如&#x2F;ab{2,5}c&#x2F;表示匹配这样一个字符串：第一个字符是“a”，接下来是2到5个字符“b”，最后是字符“c”。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab&#123;2,5&#125;c</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc abbc abbbc abbbbc abbbbbc abbbbbbc"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["abbc", "abbbc", "abbbbc", "abbbbbc"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：案例中用的正则是&#x2F;ab{2,5}c&#x2F;g，后面多了g，它是正则的一个修饰符。表示全局匹配，即在目标字符串中按顺序找到满足匹配模式的所有子串，强调的是“所有”，而不只是“第一个”。g是单词global的首字母。</p><p>1.2 纵向模糊匹配</p><p>纵向模糊指的是，一个正则匹配的字符串，具体到某一位字符时，它可以不是某个确定的字符，可以有多种可能。</p><p>其实现的方式是使用字符组。譬如[abc]，表示该字符是可以字符“a”、“b”、“c”中的任何一个。</p><p>比如&#x2F;a[123]b&#x2F;可以匹配如下三种字符串：”a1b”、”a2b”、”a3b”。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a[123]b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"a0b a1b a2b a3b a4b"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["a1b", "a2b", "a3b"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是本章讲的主体内容，只要掌握横向和纵向模糊匹配，就能解决很大部分正则匹配问题。</p><p>接下来的内容就是展开说了，如果对此都比较熟悉的话，可以跳过，直接看本章案例那节。</p><ol start="2"><li>字符组<br>需要强调的是，虽叫字符组（字符类），但只是其中一个字符。例如[abc]，表示匹配一个字符，它可以是“a”、“b”、“c”之一。</li></ol><p>2.1 范围表示法</p><p>如果字符组里的字符特别多的话，怎么办？可以使用范围表示法。</p><p>比如[123456abcdefGHIJKLM]，可以写成[1-6a-fG-M]。用连字符-来省略和简写。</p><p>因为连字符有特殊用途，那么要匹配“a”、“-”、“z”这三者中任意一个字符，该怎么做呢？</p><p>不能写成[a-z]，因为其表示小写字符中的任何一个字符。</p><p>可以写成如下的方式：[-az]或[az-]或[a-z]。即要么放在开头，要么放在结尾，要么转义。总之不会让引擎认为是范围表示法就行了。</p><p>2.2 排除字符组</p><p>纵向模糊匹配，还有一种情形就是，某位字符可以是任何东西，但就不能是”a”、”b”、”c”。</p><p>此时就是排除字符组（反义字符组）的概念。例如[^abc]，表示是一个除”a”、”b”、”c”之外的任意一个字符。字符组的第一位放^（脱字符），表示求反的概念。</p><p>当然，也有相应的范围表示法。</p><p>2.3 常见的简写形式</p><p>有了字符组的概念后，一些常见的符号我们也就理解了。因为它们都是系统自带的简写形式。</p><p>\d就是[0-9]。表示是一位数字。记忆方式：其英文是digit（数字）。</p><p>\D就是[^0-9]。表示除数字外的任意字符。</p><p>\w就是[0-9a-zA-Z_]。表示数字、大小写字母和下划线。记忆方式：w是word的简写，也称单词字符。</p><p>\W是[^0-9a-zA-Z_]。非单词字符。</p><p>\s是[ \t\v\n\r\f]。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页符。记忆方式：s是space character的首字母。</p><p>\S是[^ \t\v\n\r\f]。 非空白符。</p><p>.就是[^\n\r\u2028\u2029]。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符除外。记忆方式：想想省略号…中的每个点，都可以理解成占位符，表示任何类似的东西。</p><p>如果要匹配任意字符怎么办？可以使用[\d\D]、[\w\W]、[\s\S]和[^]中任何的一个。</p><ol start="3"><li>量词<br>量词也称重复。掌握{m,n}的准确含义后，只需要记住一些简写形式。</li></ol><p>3.1 简写形式</p><p>{m,} 表示至少出现m次。</p><p>{m} 等价于{m,m}，表示出现m次。</p><p>? 等价于{0,1}，表示出现或者不出现。记忆方式：问号的意思表示，有吗？</p><ul><li>等价于{1,}，表示出现至少一次。记忆方式：加号是追加的意思，得先有一个，然后才考虑追加。</li></ul><ul><li>等价于{0,}，表示出现任意次，有可能不出现。记忆方式：看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</li></ul><p>3.2 贪婪匹配和惰性匹配</p><p>看如下的例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;2,5&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123 1234 12345 123456"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["123", "1234", "12345", "12345"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中正则&#x2F;\d{2,5}&#x2F;，表示数字连续出现2到5次。会匹配2位、3位、4位、5位连续数字。</p><p>但是其是贪婪的，它会尽可能多的匹配。你能给我6个，我就要5个。你能给我3个，我就3要个。反正只要在能力范围内，越多越好。</p><p>我们知道有时贪婪不是一件好事（请看文章最后一个例子）。而惰性匹配，就是尽可能少的匹配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;2,5&#125;?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123 1234 12345 123456"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["12", "12", "34", "12", "34", "12", "34", "56"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中&#x2F;\d{2,5}?&#x2F;表示，虽然2到5次都行，当2个就够的时候，就不在往下尝试了。</p><p>通过在量词后面加个问号就能实现惰性匹配，因此所有惰性匹配情形如下：</p><p>{m,n}?<br>{m,}?<br>??<br>+?<br>*?<br>对惰性匹配的记忆方式是：量词后面加个问号，问一问你知足了吗，你很贪婪吗？</p><ol start="4"><li>多选分支<br>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一。</li></ol><p>具体形式如下：(p1|p2|p3)，其中p1、p2和p3是子模式，用|（管道符）分隔，表示其中任何之一。</p><p>例如要匹配”good”和”nice”可以使用&#x2F;good|nice&#x2F;。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|nice</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"good idea, nice try."</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["good", "nice"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但有个事实我们应该注意，比如我用&#x2F;good|goodbye&#x2F;，去匹配”goodbye”字符串时，结果是”good”：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">good|goodbye</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"goodbye"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["good"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>而把正则改成&#x2F;goodbye|good&#x2F;，结果是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">goodbye|good</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"goodbye"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["goodbye"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说，分支结构也是惰性的，即当前面的匹配上了，后面的就不再尝试了。</p><ol start="5"><li>案例分析<br>匹配字符，无非就是字符组、量词和分支结构的组合使用罢了。</li></ol><p>下面找几个例子演练一下（其中，每个正则并不是只有唯一写法）：</p><p>5.1 匹配16进制颜色值</p><p>要求匹配：</p><p>#ffbbad</p><p>#Fc01DF</p><p>#FFF</p><p>#ffE</p><p>分析：</p><p>表示一个16进制字符，可以用字符组[0-9a-fA-F]。</p><p>其中字符可以出现3或6次，需要是用量词和分支结构。</p><p>使用分支结构时，需要注意顺序。</p><p>正则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"#ffbbad #Fc01DF #FFF #ffE"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["#ffbbad", "#Fc01DF", "#FFF", "#ffE"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5.2 匹配时间</p><p>以24小时制为例。</p><p>要求匹配：</p><p>23:59</p><p>02:07</p><p>分析：</p><p>共4位数字，第一位数字可以为[0-2]。</p><p>当第1位为2时，第2位可以为[0-3]，其他情况时，第2位为[0-9]。</p><p>第3位数字为[0-5]，第4位为[0-9]</p><p>正则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([01][0-9]|[2][0-3]):[0-5][0-9]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"23:59"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"02:07"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果也要求匹配7:9，也就是说时分前面的0可以省略。</p><p>此时正则变成：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(0?[0-9]|1[0-9]|[2][0-3]):(0?[0-9]|[1-5][0-9])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"23:59"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"02:07"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"7:9"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.3 匹配日期</p><p>比如yyyy-mm-dd格式为例。</p><p>要求匹配：</p><p>2017-06-10<br>分析：</p><p>年，四位数字即可，可用[0-9]{4}。</p><p>月，共12个月，分两种情况01、02、……、09和10、11、12，可用(0[1-9]|1[0-2])。</p><p>日，最大31天，可用(0[1-9]|[12][0-9]|3[01])。</p><p>正则如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"2017-06-10"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.4 window操作系统文件路径</p><p>要求匹配：</p><p>F:\study\javascript\regex\regular expression.pdf</p><p>F:\study\javascript\regex\</p><p>F:\study\javascript</p><p>F:\</p><p>分析：</p><p>整体模式是: 盘符:\文件夹\文件夹\文件夹\</p><p>其中匹配F:\，需要使用[a-zA-Z]:\，其中盘符不区分大小写，注意\字符需要转义。</p><p>文件名或者文件夹名，不能包含一些特殊字符，此时我们需要排除字符组[^\:<em>&lt;&gt;|”?\r\n&#x2F;]来表示合法字符。另外不能为空名，至少有一个字符，也就是要使用量词+。因此匹配“文件夹\”，可用[^\:</em>&lt;&gt;|”?\r\n&#x2F;]+\。</p><p>另外“文件夹\”，可以出现任意次。也就是([^\:*&lt;&gt;|”?\r\n&#x2F;]+\)*。其中括号提供子表达式。</p><p>路径的最后一部分可以是“文件夹”，没有\，因此需要添加([^\:*&lt;&gt;|”?\r\n&#x2F;]+)?。</p><p>最后拼接成了一个看起来比较复杂的正则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]:\\([^\\:*&lt;>|"?\r\n/]+\\)*([^\\:*&lt;>|"?\r\n/]+)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript\\regex\\regular expression.pdf"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript\\regex\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\study\\javascript"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"F:\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，JS中字符串表示\时，也要转义。</p><p>5.5 匹配id</p><p>要求从</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提取出id&#x3D;”container”。</p><p>可能最开始想到的正则是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=".*"</span><span class="token regex-delimiter">/</span></span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => id="container" class="main"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为.是通配符，本身就匹配双引号的，而量词*又是贪婪的，当遇到container后面双引号时，不会停下来，会继续匹配，直到遇到最后一个双引号为止。</p><p>解决之道，可以使用惰性匹配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id=".*?"</span><span class="token regex-delimiter">/</span></span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => id="container"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然，这样也会有个问题。效率比较低，因为其匹配原理会涉及到“回溯”这个概念（这里也只是顺便提一下，第四章会详细说明）。可以优化如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">id="[^"]*"</span><span class="token regex-delimiter">/</span></span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="main">&lt;/div>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => id="container"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第1章 小结<br>字符匹配相关的案例，挺多的，不一而足。</p><p>掌握字符组和量词就能解决大部分常见的情形，也就是说，当你会了这二者，JS正则算是入门了。</p><p>第二章 正则表达式位置匹配攻略<br>正则表达式是匹配模式，要么匹配字符，要么匹配位置。请记住这句话。</p><p>然而大部分人学习正则时，对于匹配位置的重视程度没有那么高。</p><p>本章讲讲正则匹配位置的总总。</p><p>内容包括：</p><p>什么是位置？<br>如何匹配位置？<br>位置的特性<br>几个应用实例分析</p><ol><li><p>什么是位置呢？<br>位置是相邻字符之间的位置。比如，下图中箭头所指的地方：</p></li><li><p>如何匹配位置呢？<br>在ES5中，共有6个锚字符：</p></li></ol><p>^ $ \b \B (?&#x3D;p) (?!p)<br>2.1 ^和$</p><p>^（脱字符）匹配开头，在多行匹配中匹配行开头。</p><p>$（美元符号）匹配结尾，在多行匹配中匹配行结尾。</p><p>比如我们把字符串的开头和结尾用”#”替换（位置可以替换成字符的！）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "#hello#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多行匹配模式时，二者是行的概念，这个需要我们的注意：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"I\nlove\njavascript"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^|$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*#I##love##javascript#*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 \b和\B</p><p>\b是单词边界，具体就是\w和\W之间的位置，也包括\w和^之间的位置，也包括\w和$之间的位置。</p><p>比如一个文件名是”[JS] Lesson_01.mp4”中的\b，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "[#JS#] #Lesson_01#.#mp4#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为什么是这样呢？这需要仔细看看。</p><p>首先，我们知道，\w是字符组[0-9a-zA-Z_]的简写形式，即\w是字母数字或者下划线的中任何一个字符。而\W是排除字符组[^0-9a-zA-Z_]的简写形式，即\W是\w以外的任何一个字符。</p><p>此时我们可以看看”[#JS#] #Lesson_01#.#mp4#”中的每一个”#”，是怎么来的。</p><p>第一个”#”，两边是”[“与”J”，是\W和\w之间的位置。<br>第二个”#”，两边是”S”与”]”，也就是\w和\W之间的位置。<br>第三个”#”，两边是空格与”L”，也就是\W和\w之间的位置。<br>第四个”#”，两边是”1”与”.”，也就是\w和\W之间的位置。<br>第五个”#”，两边是”.”与”m”，也就是\W和\w之间的位置。<br>第六个”#”，其对应的位置是结尾，但其前面的字符”4”是\w，即\w和$之间的位置。<br>知道了\b的概念后，那么\B也就相对好理解了。</p><p>\B就是\b的反面的意思，非单词边界。例如在字符串中所有位置中，扣掉\b，剩下的都是\B的。</p><p>具体说来就是\w与\w、\W与\W、^与\W，\W与$之间的位置。</p><p>比如上面的例子，把所有\B替换成”#”：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"[JS] Lesson_01.mp4"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\B</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "#[J#S]# L#e#s#s#o#n#_#0#1.m#p#4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.3 (?&#x3D;p)和(?!p)</p><p>(?&#x3D;p)，其中p是一个子模式，即p前面的位置。</p><p>比如(?&#x3D;l)，表示’l’字符前面的位置，例如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=l)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "he#l#lo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而(?!p)就是(?&#x3D;p)的反面意思，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!l)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "#h#ell#o#"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>二者的学名分别是positive lookahead和negative lookahead。</p><p>中文翻译分别是正向先行断言和负向先行断言。</p><p>ES6中，还支持positive lookbehind和negative lookbehind。</p><p>具体是(?&lt;&#x3D;p)和(?&lt;!p)。</p><p>也有书上把这四个东西，翻译成环视，即看看右边或看看左边。</p><p>但一般书上，没有很好强调这四者是个位置。</p><p>比如(?&#x3D;p)，一般都理解成：要求接下来的字符与p匹配，但不能包括p的那些字符。</p><p>而在本人看来(?&#x3D;p)就与^一样好理解，就是p前面的那个位置。</p><ol start="3"><li>位置的特性<br>对于位置的理解，我们可以理解成空字符””。</li></ol><p>比如”hello”字符串等价于如下的形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"h"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"e"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"l"</span> <span class="token operator">+</span> <span class="token string">"o"</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也等价于：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"hello"</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此，把&#x2F;^hello$&#x2F;写成&#x2F;^^hello?$&#x2F;，是没有任何问题的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^^hello?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>甚至可以写成更复杂的:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=he)^^he(?=\w)llo$\b\b$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也就是说字符之间的位置，可以写成多个。</p><p>把位置理解空字符，是对位置非常有效的理解方式。</p><ol start="4"><li>相关案例<br>4.1 不匹配任何东西的正则</li></ol><p>让你写个正则不匹配任何东西</p><p>easy，&#x2F;.^&#x2F;</p><p>因为此正则要求只有一个字符，但该字符后面是开头。</p><p>4.2 数字的千位分隔符表示法</p><p>比如把”12345678”，变成”12,345,678”。</p><p>可见是需要把相应的位置替换成”,”。</p><p>思路是什么呢？</p><p>4.2.1 弄出最后一个逗号</p><p>使用(?&#x3D;\d{3}$)就可以做到：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=\d&#123;3&#125;$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "12345,678"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.2.2 弄出所有的逗号</p><p>因为逗号出现的位置，要求后面3个数字一组，也就是\d{3}至少出现一次。</p><p>此时可以使用量词+：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=(\d&#123;3&#125;)+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "12,345,678"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.2.3 匹配其余案例</p><p>写完正则后，要多验证几个案例，此时我们会发现问题：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=(\d&#123;3&#125;)+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ",123,456,789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为上面的正则，仅仅表示把从结尾向前数，一但是3的倍数，就把其前面的位置替换成逗号。因此才会出现这个问题。</p><p>怎么解决呢？我们要求匹配的到这个位置不能是开头。</p><p>我们知道匹配开头可以使用^，但要求这个位置不是开头怎么办？</p><p>easy，(?!^)，你想到了吗？测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"12345678"</span><span class="token punctuation">,</span>string2 <span class="token operator">=</span> <span class="token string">"123456789"</span><span class="token punctuation">;</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^)(?=(\d&#123;3&#125;)+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "12,345,678"</span>result <span class="token operator">=</span> string2<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "123,456,789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.2.4 支持其他形式</p><p>如果要把”12345678 123456789”替换成”12,345,678 123,456,789”。</p><p>此时我们需要修改正则，把里面的开头^和结尾$，替换成\b：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345678 123456789"</span><span class="token punctuation">,</span>reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!\b)(?=(\d&#123;3&#125;)+\b)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "12,345,678 123,456,789"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中(?!\b)怎么理解呢？</p><p>要求当前是一个位置，但不是\b前面的位置，其实(?!\b)说的就是\B。</p><p>因此最终正则变成了：&#x2F;\B(?&#x3D;(\d{3})+\b)&#x2F;g。</p><p>4.3 验证密码问题</p><p>密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p><p>此题，如果写成多个正则来判断，比较容易。但要写成一个正则就比较困难。</p><p>那么，我们就来挑战一下。看看我们对位置的理解是否深刻。</p><p>4.3.1 简化</p><p>不考虑“但必须至少包括2种字符”这一条件。我们可以容易写出：</p><p>var reg &#x3D; &#x2F;^[0-9A-Za-z]{6,12}$&#x2F;;<br>4.3.2 判断是否包含有某一种字符</p><p>假设，要求的必须包含数字，怎么办？此时我们可以使用(?&#x3D;.*[0-9])来做。</p><p>因此正则变成：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.3.3 同时包含具体两种字符</p><p>比如同时包含数字和小写字母，可以用(?&#x3D;.<em>[0-9])(?&#x3D;.</em>[a-z])来做。</p><p>因此正则变成：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=.*[0-9])(?=.*[a-z])^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.3.4 解答</p><p>我们可以把原题变成下列几种情况之一：</p><p>同时包含数字和小写字母<br>同时包含数字和大写字母<br>同时包含小写字母和大写字母<br>同时包含数字、小写字母和大写字母<br>以上的4种情况是或的关系（实际上，可以不用第4条）。</p><p>最终答案是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">((?=.*[0-9])(?=.*[a-z])|(?=.*[0-9])(?=.*[A-Z])|(?=.*[a-z])(?=.*[A-Z]))^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是小写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFGH"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是大写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab23C"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 不足6位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 大写字母和数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 三者都有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.3.5 解惑</p><p>上面的正则看起来比较复杂，只要理解了第二步，其余就全部理解了。</p><p>&#x2F;(?&#x3D;.*[0-9])^[0-9A-Za-z]{6,12}$&#x2F;</p><p>对于这个正则，我们只需要弄明白(?&#x3D;.*[0-9])^即可。</p><p>分开来看就是(?&#x3D;.*[0-9])和^。</p><p>表示开头前面还有个位置（当然也是开头，即同一个位置，想想之前的空字符类比）。</p><p>(?&#x3D;.<em>[0-9])表示该位置后面的字符匹配.</em>[0-9]，即，有任何多个任意字符，后面再跟个数字。</p><p>翻译成大白话，就是接下来的字符，必须包含个数字。</p><p>4.3.6 另外一种解法</p><p>“至少包含两种字符”的意思就是说，不能全部都是数字，也不能全部都是小写字母，也不能全部都是大写字母。</p><p>那么要求“不能全部都是数字”，怎么做呢？(?!p)出马！</p><p>对应的正则是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>三种“都不能”呢？</p><p>最终答案是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?!^[0-9]&#123;6,12&#125;$)(?!^[a-z]&#123;6,12&#125;$)(?!^[A-Z]&#123;6,12&#125;$)^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"1234567"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdef"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是小写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFGH"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 全是大写字母</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ab23C"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false 不足6位</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ABCDEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 大写字母和数字</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abcdEF234"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true 三者都有</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二章小结<br>位置匹配相关的案例，挺多的，不一而足。</p><p>掌握匹配位置的这6个锚字符，给我们解决正则问题一个新工具。</p><p>第三章 正则表达式括号的作用<br>不管哪门语言中都有括号。正则表达式也是一门语言，而括号的存在使这门语言更为强大。</p><p>对括号的使用是否得心应手，是衡量对正则的掌握水平的一个侧面标准。</p><p>括号的作用，其实三言两语就能说明白，括号提供了分组，便于我们引用它。</p><p>引用某个分组，会有两种情形：在JavaScript里引用它，在正则表达式里引用它。</p><p>本章内容虽相对简单，但我也要写长点。</p><p>内容包括：</p><p>分组和分支结构<br>捕获分组<br>反向引用<br>非捕获分组<br>相关案例</p><ol><li>分组和分支结构<br>这二者是括号最直觉的作用，也是最原始的功能。</li></ol><p>1.1 分组</p><p>我们知道&#x2F;a+&#x2F;匹配连续出现的“a”，而要匹配连续出现的“ab”时，需要使用&#x2F;(ab)+&#x2F;。</p><p>其中括号是提供分组功能，使量词+作用于“ab”这个整体，测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["abab", "ab", "ababab"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1.2 分支结构</p><p>而在多选分支结构(p1|p2)中，此处括号的作用也是不言而喻的，提供了子表达式的所有可能。</p><p>比如，要匹配如下的字符串：</p><p>I love JavaScript</p><p>I love Regular Expression</p><p>可以使用正则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^I love (JavaScript|Regular Expression)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"I love JavaScript"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"I love Regular Expression"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果去掉正则中的括号，即&#x2F;^I love JavaScript|Regular Expression$&#x2F;，匹配字符串是”I love JavaScript”和”Regular Expression”，当然这不是我们想要的。</p><ol start="2"><li>引用分组<br>这是括号一个重要的作用，有了它，我们就可以进行数据提取，以及更强大的替换操作。</li></ol><p>而要使用它带来的好处，必须配合使用实现环境的API。</p><p>以日期为例。假设格式是yyyy-mm-dd的，我们可以先写一个简单的正则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再修改成括号版的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么要使用这个正则呢？</p><p>2.1 提取数据</p><p>比如提取出年、月、日，可以这么做：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>match返回的一个数组，第一个元素是整体匹配结果，然后是各个分组（括号里）匹配的内容，然后是匹配下标，最后是输入的文本。（注意：如果正则是否有修饰符g，match返回的数组格式是不一样的）。</p><p>另外也可以使用正则对象的exec方法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["2017-06-12", "2017", "06", "12", index: 0, input: "2017-06-12"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时，也可以使用构造函数的全局属性$1至$9来获取：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正则操作即可，例如</span><span class="token comment">//regex.exec(string);</span><span class="token comment">//string.match(regex);</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "2017"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "06"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "12"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 替换</p><p>比如，想把yyyy-mm-dd格式，替换成mm&#x2F;dd&#x2F;yyyy怎么做？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">"$2/$3/$1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "06/12/2017"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中replace中的，第二个参数里用$1、$2、$3指代相应的分组。等价于如下的形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> RegExp<span class="token punctuation">.</span>$2 <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$3 <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "06/12/2017"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也等价于：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> month <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> year<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "06/12/2017"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>反向引用<br>除了使用相应API来引用分组，也可以在正则本身里引用分组。但只能引用之前出现的分组，即反向引用。</li></ol><p>还是以日期为例。</p><p>比如要写一个正则支持匹配如下三种格式：</p><p>2016-06-12</p><p>2016&#x2F;06&#x2F;12</p><p>2016.06.12</p><p>最先可能想到的正则是:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;(-|\/|\.)\d&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"2017/06/12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"2017.06.12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">"2016-06/12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中&#x2F;和.需要转义。虽然匹配了要求的情况，但也匹配”2016-06&#x2F;12”这样的数据。</p><p>假设我们想要求分割符前后一致怎么办？此时需要使用反向引用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;(-|\/|\.)\d&#123;2&#125;\1\d&#123;2&#125;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"2017-06-12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"2017/06/12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"2017.06.12"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string4 <span class="token operator">=</span> <span class="token string">"2016-06/12"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string4<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意里面的\1，表示的引用之前的那个分组(-|/|.)。不管它匹配到什么（比如-），\1都匹配那个同样的具体某个字符。</p><p>我们知道了\1的含义后，那么\2和\3的概念也就理解了，即分别指代第二个和第三个分组。</p><p>看到这里，此时，恐怕你会有三个问题。</p><p>3.1 括号嵌套怎么办？</p><p>以左括号（开括号）为准。比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((\d)(\d(\d)))\1\2\3\4$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"1231231233"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$1 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$3 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$4 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看看这个正则匹配模式：</p><p>第一个字符是数字，比如说1，<br>第二个字符是数字，比如说2，<br>第三个字符是数字，比如说3，<br>接下来的是\1，是第一个分组内容，那么看第一个开括号对应的分组是什么，是123，<br>接下来的是\2，找到第2个开括号，对应的分组，匹配的内容是1，<br>接下来的是\3，找到第3个开括号，对应的分组，匹配的内容是23，<br>最后的是\4，找到第3个开括号，对应的分组，匹配的内容是3。<br>这个问题，估计仔细看一下，就该明白了。</p><p>3.2 \10表示什么呢？</p><p>另外一个疑问可能是，即\10是表示第10个分组，还是\1和0呢？</p><p>答案是前者，虽然一个正则里出现\10比较罕见。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(1)(2)(3)(4)(5)(6)(7)(8)(9)(#) \10+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"123456789# ######"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.3 引用不存在的分组会怎样？</p><p>因为反向引用，是引用前面的分组，但我们在正则里引用了不存在的分组时，此时正则不会报错，只是匹配反向引用的字符本身。例如\2，就匹配”\2”。注意”\2”表示对”2”进行了转意。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\1\2\3\4\5\6\7\8\9</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"\1\2\3\4\5\6\7\8\9"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"\1\2\3\4\5\6\7\8\9"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>chrome浏览器打印的结果：</p><ol start="4"><li>非捕获分组<br>之前文中出现的分组，都会捕获它们匹配到的数据，以便后续引用，因此也称他们是捕获型分组。</li></ol><p>如果只想要括号最原始的功能，但不会引用它，即，既不在API里引用，也不在正则里反向引用。此时可以使用非捕获分组(?:p)，例如本文第一个例子可以修改为：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:ab)+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"ababa abbb ababab"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ["abab", "ab", "ababab"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>相关案例<br>至此括号的作用已经讲完了，总结一句话，就是提供了可供我们使用的分组，如何用就看我们的了。</li></ol><p>5.1 字符串trim方法模拟</p><p>trim方法是去掉字符串的开头和结尾的空白符。有两种思路去做。</p><p>第一种，匹配到开头和结尾的空白符，然后替换成空字符。如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\s+|\s+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">"  foobar   "</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "foobar"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种，匹配整个字符串，然后用引用来提取出相应的数据：</p><p>function trim(str) {<br>    return str.replace(&#x2F;^\s*(.<em>?)\s</em>$&#x2F;g, “$1”);<br>}<br>console.log( trim(“  foobar   “) );<br>&#x2F;&#x2F; &#x3D;&gt; “foobar”<br>这里使用了惰性匹配*?，不然也会匹配最后一个空格之前的所有空格的。</p><p>当然，前者效率高。</p><p>5.2 将每个单词的首字母转换为大写</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">titleize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^|\s)\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">titleize</span><span class="token punctuation">(</span><span class="token string">'my name is epeli'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "My Name Is Epeli"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路是找到每个单词的首字母，当然这里不使用非捕获匹配也是可以的。</p><p>5.3 驼峰化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">camelize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\s]+(.)?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c <span class="token operator">?</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">camelize</span><span class="token punctuation">(</span><span class="token string">'-moz-transform'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "MozTransform"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中分组(.)表示首字母。单词的界定是，前面的字符可以是多个连字符、下划线以及空白符。正则后面的?的目的，是为了应对str尾部的字符可能不是单词字符，比如str是’-moz-transform    ‘。</p><p>5.4 中划线化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dasherize</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'-$1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[-_\s]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">dasherize</span><span class="token punctuation">(</span><span class="token string">'MozTransform'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "-moz-transform"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驼峰化的逆过程。</p><p>5.5 html转义和反转义</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将HTML特殊字符转换成等值的实体</span><span class="token keyword">function</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> escapeChars <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">'¢'</span> <span class="token operator">:</span> <span class="token string">'cent'</span><span class="token punctuation">,</span>  <span class="token string-property property">'£'</span> <span class="token operator">:</span> <span class="token string">'pound'</span><span class="token punctuation">,</span>  <span class="token string-property property">'¥'</span> <span class="token operator">:</span> <span class="token string">'yen'</span><span class="token punctuation">,</span>  <span class="token string-property property">'€'</span><span class="token operator">:</span> <span class="token string">'euro'</span><span class="token punctuation">,</span>  <span class="token string-property property">'©'</span> <span class="token operator">:</span><span class="token string">'copy'</span><span class="token punctuation">,</span>  <span class="token string-property property">'®'</span> <span class="token operator">:</span> <span class="token string">'reg'</span><span class="token punctuation">,</span>  <span class="token string-property property">'&lt;'</span> <span class="token operator">:</span> <span class="token string">'lt'</span><span class="token punctuation">,</span>  <span class="token string-property property">'>'</span> <span class="token operator">:</span> <span class="token string">'gt'</span><span class="token punctuation">,</span>  <span class="token string-property property">'"'</span> <span class="token operator">:</span> <span class="token string">'quot'</span><span class="token punctuation">,</span>  <span class="token string-property property">'&amp;'</span> <span class="token operator">:</span> <span class="token string">'amp'</span><span class="token punctuation">,</span>  <span class="token string-property property">'\''</span> <span class="token operator">:</span> <span class="token string">'#39'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'['</span> <span class="token operator">+</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>escapeChars<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">'&amp;'</span> <span class="token operator">+</span> escapeChars<span class="token punctuation">[</span>match<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">';'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token string">'&lt;div>Blah blah blah&lt;/div>'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中使用了用构造函数生成的正则，然后替换相应的格式就行了，这个跟本章没多大关系。</p><p>倒是它的逆过程，使用了括号，以便提供引用，也很简单，如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 实体字符转换为等值的HTML。</span><span class="token keyword">function</span> <span class="token function">unescapeHTML</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> htmlEntities <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">nbsp</span><span class="token operator">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>  <span class="token literal-property property">cent</span><span class="token operator">:</span> <span class="token string">'¢'</span><span class="token punctuation">,</span>  <span class="token literal-property property">pound</span><span class="token operator">:</span> <span class="token string">'£'</span><span class="token punctuation">,</span>  <span class="token literal-property property">yen</span><span class="token operator">:</span> <span class="token string">'¥'</span><span class="token punctuation">,</span>  <span class="token literal-property property">euro</span><span class="token operator">:</span> <span class="token string">'€'</span><span class="token punctuation">,</span>  <span class="token literal-property property">copy</span><span class="token operator">:</span> <span class="token string">'©'</span><span class="token punctuation">,</span>  <span class="token literal-property property">reg</span><span class="token operator">:</span> <span class="token string">'®'</span><span class="token punctuation">,</span>  <span class="token literal-property property">lt</span><span class="token operator">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span>  <span class="token literal-property property">gt</span><span class="token operator">:</span> <span class="token string">'>'</span><span class="token punctuation">,</span>  <span class="token literal-property property">quot</span><span class="token operator">:</span> <span class="token string">'"'</span><span class="token punctuation">,</span>  <span class="token literal-property property">amp</span><span class="token operator">:</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span>  <span class="token literal-property property">apos</span><span class="token operator">:</span> <span class="token string">'\''</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\&amp;([^;]+);</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> htmlEntities<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> htmlEntities<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> match<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">unescapeHTML</span><span class="token punctuation">(</span><span class="token string">'&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "&lt;div>Blah blah blah&lt;/div>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过key获取相应的分组引用，然后作为对象的键。</p><p>5.6 匹配成对标签</p><p>要求匹配：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>regular expression<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>laoyao bye bye<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不匹配：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>wrong!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>匹配一个开标签，可以使用正则&lt;[^&gt;]+&gt;，</p><p>匹配一个闭标签，可以使用&lt;/[^&gt;]+&gt;，</p><p>但是要求匹配成对标签，那就需要使用反向引用，如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;([^>]+)>[\d\D]*&lt;\/\1></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string1 <span class="token operator">=</span> <span class="token string">"&lt;title>regular expression&lt;/title>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"&lt;p>laoyao bye bye&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string3 <span class="token operator">=</span> <span class="token string">"&lt;title>wrong!&lt;/p>"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string3<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中开标签&lt;[^&gt;]+&gt;改成&lt;([^&gt;]+)&gt;，使用括号的目的是为了后面使用反向引用，而提供分组。闭标签使用了反向引用，&lt;/\1&gt;。</p><p>另外[\d\D]的意思是，这个字符是数字或者不是数字，因此，也就是匹配任意字符的意思。</p><p>第三章小结<br>正则中使用括号的例子那可是太多了，不一而足。</p><p>重点理解括号可以提供分组，我们可以提取数据，应该就可以了。</p><p>例子中的代码，基本没做多少分析，相信你都能看懂的。</p><p>第4章 正则表达式回溯法原理<br>学习正则表达式，是需要懂点儿匹配原理的。</p><p>而研究匹配原理时，有两个字出现的频率比较高：“回溯”。</p><p>听起来挺高大上，确实还有很多人对此不明不白的。</p><p>因此，本章就简单扼要地说清楚回溯到底是什么东西。</p><p>内容包括：</p><p>没有回溯的匹配<br>有回溯的匹配<br>常见的回溯形式</p><ol><li>没有回溯的匹配<br>假设我们的正则是&#x2F;ab{1,3}c&#x2F;，其可视化形式是：</li></ol><p>而当目标字符串是”abbbc”时，就没有所谓的“回溯”。其匹配过程是：</p><p>其中子表达式b{1,3}表示“b”字符连续出现1到3次。</p><ol start="2"><li>有回溯的匹配<br>如果目标字符串是”abbc”，中间就有回溯。</li></ol><p>图中第5步有红颜色，表示匹配不成功。此时b{1,3}已经匹配到了2个字符“b”，准备尝试第三个时，结果发现接下来的字符是“c”。那么就认为b{1,3}就已经匹配完毕。然后状态又回到之前的状态（即第6步，与第4步一样），最后再用子表达式c，去匹配字符“c”。当然，此时整个表达式匹配成功了。</p><p>图中的第6步，就是“回溯”。</p><p>你可能对此没有感觉，这里我们再举一个例子。正则是：</p><p>目标字符串是”abbbc”，匹配过程是：</p><p>其中第7步和第10步是回溯。第7步与第4步一样，此时b{1,3}匹配了两个”b”，而第10步与第3步一样，此时b{1,3}只匹配了一个”b”，这也是b{1,3}的最终匹配结果。</p><p>这里再看一个清晰的回溯，正则是：</p><p>目标字符串是：”acd”ef，匹配过程是：</p><p>图中省略了尝试匹配双引号失败的过程。可以看出.*是非常影响效率的。</p><p>为了减少一些不必要的回溯，可以把正则修改为&#x2F;“[^”]*”&#x2F;。</p><ol start="3"><li>常见的回溯形式<br>正则表达式匹配字符串的这种方式，有个学名，叫回溯法。</li></ol><p>回溯法也称试探法，它的基本思想是：从问题的某一种状态（初始状态）出发，搜索从这种状态出发所能达到的所有“状态”，当一条路走到“尽头”的时候（不能再前进），再后退一步或若干步，从另一种可能“状态”出发，继续搜索，直到所有的“路径”（状态）都试探过。这种不断“前进”、不断“回溯”寻找解的方法，就称作“回溯法”。（copy于百度百科）。</p><p>本质上就是深度优先搜索算法。其中退到之前的某一步这一过程，我们称为“回溯”。从上面的描述过程中，可以看出，路走不通时，就会发生“回溯”。即，尝试匹配失败时，接下来的一步通常就是回溯。</p><p>道理，我们是懂了。那么JS中正则表达式会产生回溯的地方都有哪些呢？</p><p>3.1 贪婪量词</p><p>之前的例子都是贪婪量词相关的。比如b{1,3}，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝试。首先会尝试”bbb”，然后再看整个正则是否能匹配。不能匹配时，吐出一个”b”，即在”bb”的基础上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢？只能说明匹配失败了。</p><p>虽然局部匹配是贪婪的，但也要满足整体能正确匹配。否则，皮之不存，毛将焉附？</p><p>此时我们不禁会问，如果当多个贪婪量词挨着存在，并相互有冲突时，此时会是怎样？</p><p>答案是，先下手为强！因为深度优先搜索。测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,3&#125;)(\d&#123;1,3&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["12345", "123", "45", index: 0, input: "12345"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，前面的\d{1,3}匹配的是”123”，后面的\d{1,3}匹配的是”45”。</p><p>3.2 惰性量词</p><p>惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"12345"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d&#123;1,3&#125;?)(\d&#123;1,3&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["1234", "1", "234", index: 0, input: "12345"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中\d{1,3}?只匹配到一个字符”1”，而后面的\d{1,3}匹配了”234”。</p><p>虽然惰性量词不贪，但也会有回溯的现象。比如正则是：</p><p>目标字符串是”12345”，匹配过程是：</p><p>知道你不贪、很知足，但是为了整体匹配成，没办法，也只能给你多塞点了。因此最后\d{1,3}?匹配的字符是”12”，是两个数字，而不是一个。</p><p>3.3 分支结构</p><p>我们知道分支也是惰性的，比如&#x2F;can|candy&#x2F;，去匹配字符串”candy”，得到的结果是”can”，因为分支会一个一个尝试，如果前面的满足了，后面就不会再试验了。</p><p>分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分支。这种尝试也可以看成一种回溯。</p><p>比如正则：</p><p>目标字符串是”candy”，匹配过程：</p><p>上面第5步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是一种回溯的。</p><p>第四章小结<br>其实回溯法，很容易掌握的。</p><p>简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了；要么最后都试完后，发现整体匹配不成功。</p><p>贪婪量词“试”的策略是：买衣服砍价。价钱太高了，便宜点，不行，再便宜点。<br>惰性量词“试”的策略是：卖东西加价。给少了，再多给点行不，还有点少啊，再给点。<br>分支结构“试”的策略是：货比三家。这家不行，换一家吧，还不行，再换。<br>既然有回溯的过程，那么匹配效率肯定低一些。相对谁呢？相对那些DFA引擎。</p><p>而JS的正则引擎是NFA，NFA是“非确定型有限自动机”的简写。</p><p>大部分语言中的正则都是NFA，为啥它这么流行呢？</p><p>答：你别看我匹配慢，但是我编译快啊，而且我还有趣哦。</p><p>第5章 正则表达式的拆分<br>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p><p>不仅要求自己能解决问题，还要看懂别人的解决方案。代码是这样，正则表达式也是这样。</p><p>正则这门语言跟其他语言有一点不同，它通常就是一大堆字符，而没有所谓“语句”的概念。</p><p>如何能正确地把一大串正则拆分成一块一块的，成为了破解“天书”的关键。</p><p>本章就解决这一问题，内容包括：</p><p>结构和操作符<br>注意要点<br>案例分析</p><ol><li>结构和操作符<br>编程语言一般都有操作符。只要有操作符，就会出现一个问题。当一大堆操作在一起时，先操作谁，又后操作谁呢？为了不产生歧义，就需要语言本身定义好操作顺序，即所谓的优先级。</li></ol><p>而在正则表达式中，操作符都体现在结构中，即由特殊字符和普通字符所代表的一个个特殊整体。</p><p>JS正则表达式中，都有哪些结构呢？</p><p>字符字面量、字符组、量词、锚字符、分组、选择分支、反向引用。<br>具体含义简要回顾如下（如懂，可以略去不看）：</p><p>字面量，匹配一个具体字符，包括不用转义的和需要转义的。比如a匹配字符”a”，又比如\n匹配换行符，又比如.匹配小数点。</p><p>字符组，匹配一个字符，可以是多种可能之一，比如[0-9]，表示匹配一个数字。也有\d的简写形式。另外还有反义字符组，表示可以是除了特定字符之外任何一个字符，比如[^0-9]，表示一个非数字字符，也有\D的简写形式。</p><p>量词，表示一个字符连续出现，比如a{1,3}表示“a”字符连续出现3次。另外还有常见的简写形式，比如a+表示“a”字符连续出现至少一次。</p><p>锚点，匹配一个位置，而不是字符。比如^匹配字符串的开头，又比如\b匹配单词边界，又比如(?&#x3D;\d)表示数字前面的位置。</p><p>分组，用括号表示一个整体，比如(ab)+，表示”ab”两个字符连续出现多次，也可以使用非捕获分组(?:ab)+。</p><p>分支，多个子表达式多选一，比如abc|bcd，表达式匹配”abc”或者”bcd”字符子串。</p><p>反向引用，比如\2，表示引用第2个分组。</p><p>其中涉及到的操作符有：</p><p>1.转义符 <br>2.括号和方括号 (…)、(?:…)、(?&#x3D;…)、(?!…)、[…]<br>3.量词限定符 {m}、{m,n}、{m,}、?、*、+<br>4.位置和序列 ^ 、$、 \元字符、 一般字符<br>5. 管道符（竖杠）|<br>上面操作符的优先级从上至下，由高到低。</p><p>这里，我们来分析一个正则：</p><p>&#x2F;ab?(c|de*)+|fg&#x2F;</p><p>由于括号的存在，所以，(c|de*)是一个整体结构。<br>在(c|de*)中，注意其中的量词<em>，因此e</em>是一个整体结构。<br>又因为分支结构“|”优先级最低，因此c是一个整体、而de<em>是另一个整体。<br>同理，整个正则分成了 a、b?、(…)+、f、g。而由于分支的原因，又可以分成ab?(c|de</em>)+和fg这两部分。<br>希望你没被我绕晕，上面的分析可用其可视化形式描述如下：</p><ol start="2"><li>注意要点<br>关于结构和操作符，还是有几点需要强调：</li></ol><p>2.1 匹配字符串整体问题</p><p>因为是要匹配整个字符串，我们经常会在正则前后中加上锚字符^和$。</p><p>比如要匹配目标字符串”abc”或者”bcd”时，如果一不小心，就会写成&#x2F;^abc|bcd$&#x2F;。</p><p>而位置字符和字符序列优先级要比竖杠高，故其匹配的结构是：</p><p>应该修改成:</p><p>2.2 量词连缀问题</p><p>假设，要匹配这样的字符串：</p><ol><li><p>每个字符为a、b、c任选其一</p></li><li><p>字符串的长度是3的倍数</p></li></ol><p>此时正则不能想当然地写成&#x2F;^[abc]{3}+$&#x2F;，这样会报错，说+前面没什么可重复的：</p><p>此时要修改成：</p><p>2.3 元字符转义问题</p><p>所谓元字符，就是正则中有特殊含义的字符。</p><p>所有结构里，用到的元字符总结如下：</p><p>^ $ . * + ? | \ &#x2F; ( ) [ ] { } &#x3D; ! : - ,<br>当匹配上面的字符本身时，可以一律转义：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]&#123;&#125;=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\^\$\.\*\+\?\|\\\/\[\]\&#123;\&#125;\=\!\:\-\,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中string中的\字符也要转义的。</p><p>另外，在string中，也可以把每个字符转义，当然，转义后的结果仍是本身：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]&#123;&#125;=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> string2 <span class="token operator">=</span> <span class="token string">"\^\$\.\*\+\?\|\\\/\[\]\&#123;\&#125;\=\!\:\-\,"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string <span class="token operator">==</span> string2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在的问题是，是不是每个字符都需要转义呢？否，看情况。</p><p>2.3.1 字符组中的元字符</p><p>跟字符组相关的元字符有[]、^、-。因此在会引起歧义的地方进行转义。例如开头的^必须转义，不然会把整个字符组，看成反义字符组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"^$.*+?|\\/[]&#123;&#125;=!:-,"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\^$.*+?|\\/\[\]&#123;&#125;=!:\-,]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["^", "$", ".", "*", "+", "?", "|", "\", "/", "[", "]", "&#123;", "&#125;", "=", "!", ":", "-", ","]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.3.2 匹配“[abc]”和“{3,5}”</p><p>我们知道[abc]，是个字符组。如果要匹配字符串”[abc]”时，该怎么办？</p><p>可以写成&#x2F;[abc]&#x2F;，也可以写成&#x2F;[abc]&#x2F;，测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"[abc]"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\[abc]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "[abc]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>只需要在第一个方括号转义即可，因为后面的方括号构不成字符组，正则不会引发歧义，自然不需要转义。</p><p>同理，要匹配字符串”{3,5}”，只需要把正则写成&#x2F;{3,5}&#x2F;即可。</p><p>另外，我们知道量词有简写形式{m,}，却没有{,n}的情况。虽然后者不构成量词的形式，但此时并不会报错。当然，匹配的字符串也是”{,n}”，测试如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"&#123;,3&#125;"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&#123;,3&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => "&#123;,3&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.3.3 其余情况</p><p>比如&#x3D; ! : - ,等符号，只要不在特殊结构中，也不需要转义。</p><p>但是，括号需要前后都转义的，如&#x2F;(123)&#x2F;。</p><p>至于剩下的^ $ . * + ? | \ &#x2F;等字符，只要不在字符组内，都需要转义的。</p><ol start="3"><li>案例分析<br>接下来分析两个例子，一个简单的，一个复杂的。</li></ol><p>3.1 身份证</p><p>正则表达式是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;15&#125;|\d&#123;17&#125;[\dxX])$</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为竖杠“|”,的优先级最低，所以正则分成了两部分\d{15}和\d{17}[\dxX]。</p><p>\d{15}表示15位连续数字。<br>\d{17}[\dxX]表示17位连续数字，最后一位可以是数字可以大小写字母”x”。<br>可视化如下：</p><p>3.2 IPV4地址</p><p>正则表达式是：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((0&#123;0,2&#125;\d|0?\d&#123;2&#125;|1\d&#123;2&#125;|2[0-4]\d|25[0-5])\.)&#123;3&#125;(0&#123;0,2&#125;\d|0?\d&#123;2&#125;|1\d&#123;2&#125;|2[0-4]\d|25[0-5])$</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个正则，看起来非常吓人。但是熟悉优先级后，会立马得出如下的结构：</p><p>((…).){3}(…)</p><p>上面的两个(…)是一样的结构。表示匹配的是3位数字。因此整个结构是</p><p>3位数.3位数.3位数.3位数<br>然后再来分析(…)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span>\d<span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token number">1</span>\d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span>\d<span class="token operator">|</span><span class="token number">0</span><span class="token operator">?</span>\d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token number">1</span>\d<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token operator">|</span><span class="token number">2</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>\d<span class="token operator">|</span><span class="token number">25</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它是一个多选结构，分成5个部分：</p><p>0{0,2}\d，匹配一位数，包括0补齐的。比如，9、09、009；<br>0?\d{2}，匹配两位数，包括0补齐的，也包括一位数；<br>1\d{2}，匹配100到199;<br>2[0-4]\d，匹配200-249；<br>25[0-5]，匹配250-255。<br>最后来看一下其可视化形式：</p><p>第五章小结<br>掌握正则表达式中的优先级后，再看任何正则应该都有信心分析下去了。</p><p>至于例子，不一而足，没有写太多。</p><p>这里稍微总结一下，竖杠的优先级最低，即最后运算。</p><p>只要知道这一点，就能读懂大部分正则。</p><p>另外关于元字符转义问题，当自己不确定与否时，尽管去转义，总之是不会错的。</p><p>第6章 正则表达式的构建<br>对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。</p><p>不仅要看懂别人的解决方案，也要能独立地解决问题。代码是这样，正则表达式也是这样。</p><p>与“读”相比，“写”往往更为重要，这个道理是不言而喻的。</p><p>对正则的运用，首重就是：如何针对问题，构建一个合适的正则表达式？</p><p>本章就解决该问题，内容包括：</p><p>平衡法则<br>构建正则前提<br>准确性<br> 效率</p><ol><li>平衡法则<br>构建正则有一点非常重要，需要做到下面几点的平衡：</li></ol><p>匹配预期的字符串<br>不匹配非预期的字符串<br>可读性和可维护性<br>效率<br>2. 构建正则前提<br>2.1 是否能使用正则</p><p>正则太强大了，以至于我们随便遇到一个操作字符串问题时，都会下意识地去想，用正则该怎么做。但我们始终要提醒自己，正则虽然强大，但不是万能的，很多看似很简单的事情，还是做不到的。</p><p>比如匹配这样的字符串：1010010001….</p><p>虽然很有规律，但是只靠正则就是无能为力。</p><p>2.2 是否有必要使用正则</p><p>要认识到正则的局限，不要去研究根本无法完成的任务。同时，也不能走入另一个极端：无所不用正则。能用字符串API解决的简单问题，就不该正则出马。</p><p>比如，从日期中提取出年月日，虽然可以使用正则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-07-01"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017-07-01", "2017", "07", "01", index: 0, input: "2017-07-01"]</span>其实，可以使用字符串的split方法来做，即可：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-07-01"</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "07", "01"]</span>比如，判断是否有问号，虽然可以使用：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"?id=xx&amp;act=search"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\?</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 0</span>其实，可以使用字符串的indexOf方法：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"?id=xx&amp;act=search"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 0</span>比如获取子串，虽然可以使用正则：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"JavaScript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.&#123;4&#125;(.+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => Script</span>其实，可以直接使用字符串的substring或substr方法来做：<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"JavaScript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => Script</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.3 是否有必要构建一个复杂的正则</p><p>比如密码匹配问题，要求密码长度6-12位，由数字、小写字符和大写字母组成，但必须至少包括2种字符。</p><p>在第2章里，我们写出了正则是：</p><p>&#x2F;(?!^[0-9]{6,12}$)(?!^[a-z]{6,12}$)(?!^[A-Z]{6,12}$)^[0-9A-Za-z]{6,12}$&#x2F;</p><p>其实可以使用多个小正则来做：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9A-Za-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> regex3 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[A-Z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> regex4 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z]&#123;6,12&#125;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>regex1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex2<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex3<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex4<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>准确性<br>所谓准确性，就是能匹配预期的目标，并且不匹配非预期的目标。</li></ol><p>这里提到了“预期”二字，那么我们就需要知道目标的组成规则。</p><p>不然没法界定什么样的目标字符串是符合预期的，什么样的又不是符合预期的。</p><p>下面将举例说明，当目标字符串构成比较复杂时，该如何构建正则，并考虑到哪些平衡。</p><p>3.1 匹配固定电话</p><p>比如要匹配如下格式的固定电话号码：</p><p>055188888888</p><p>0551-88888888</p><p>(0551)88888888</p><p>第一步，了解各部分的模式规则。</p><p>上面的电话，总体上分为区号和号码两部分（不考虑分机号和+86的情形）。</p><p>区号是0开头的3到4位数字，对应的正则是：0\d{2,3}</p><p>号码是非0开头的7到8位数字，对应的正则是：[1-9]\d{6,7}</p><p>因此，匹配055188888888的正则是：<code>/^0\d&#123;2,3&#125;[1-9]\d&#123;6,7&#125;$/</code></p><p>匹配0551-88888888的正则是：<code>/^0\d&#123;2,3&#125;-[1-9]\d&#123;6,7&#125;$/</code></p><p>匹配(0551)88888888的正则是：<code>/^\(0\d&#123;2,3&#125;\)[1-9]\d&#123;6,7&#125;$/</code></p><p>第二步，明确形式关系。</p><p>这三者情形是或的关系，可以构建分支：</p><p><code>/^0\d&#123;2,3&#125;[1-9]\d&#123;6,7&#125;$|^0\d&#123;2,3&#125;-[1-9]\d&#123;6,7&#125;$|^\(0\d&#123;2,3&#125;\)[1-9]\d&#123;6,7&#125;$/</code></p><p>提取公共部分：</p><p><code>/^(0\d&#123;2,3&#125;|0\d&#123;2,3&#125;-|\(0\d&#123;2,3&#125;\))[1-9]\d&#123;6,7&#125;$/</code></p><p>进一步简写：</p><p><code>/^(0\d&#123;2,3&#125;-?|\(0\d&#123;2,3&#125;\))[1-9]\d&#123;6,7&#125;$/</code></p><p>其可视化形式：</p><p>上面的正则构建过程略显罗嗦，但是这样做，能保证正则是准确的。</p><p>上述三种情形是或的关系，这一点很重要，不然很容易按字符是否出现的情形把正则写成：</p><p>&#x2F;^(?0\d{2,3})?-?[1-9]\d{6,7}$&#x2F;</p><p>虽然也能匹配上述目标字符串，但也会匹配(0551-88888888这样的字符串。当然，这不是我们想要的。</p><p>其实这个正则也不是完美的，因为现实中，并不是每个3位数和4位数都是一个真实的区号。</p><p>这就是一个平衡取舍问题，一般够用就行。</p><p>3.2 匹配浮点数</p><p>要求匹配如下的格式：</p><p>1.23、+1.23、-1.23</p><p>10、+10、-10</p><p>.2、+.2、-.2</p><p>可以看出正则分为三部分。</p><p>符号部分：[+-]</p><p>整数部分：\d+</p><p>小数部分：.\d+</p><p>上述三个部分，并不是全部都出现。如果此时很容易写出如下的正则：</p><p><code>/^[+-]?(\d+)?(\.\d+)?$/</code></p><p>此正则看似没问题，但这个正则也会匹配空字符””。</p><p>因为目标字符串的形式关系不是要求每部分都是可选的。</p><p>要匹配1.23、+1.23、-1.23，可以用&#x2F;^[+-]?\d+.\d+$&#x2F;</p><p>要匹配10、+10、-10，可以用&#x2F;^[+-]?\d+$&#x2F;</p><p>要匹配.2、+.2、-.2，可以用&#x2F;^[+-]?.\d+$&#x2F;</p><p>因此整个正则是这三者的或的关系，提取公众部分后是：</p><p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p><p>其可视化形式是：</p><p>如果要求不匹配+.2和-.2，此时正则变成：</p><p>当然，<br><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code><br>也不是完美的，我们也是做了些取舍，比如：</p><p>它也会匹配012这样以0开头的整数。如果要求不匹配的话，需要修改整数部分的正则。<br>一般进行验证操作之前，都要经过trim和判空。那样的话，也许那个错误正则也就够用了。<br>也可以进一步改写成：&#x2F;^[+-]?(\d+)?(.)?\d+$&#x2F;，这样我们就需要考虑可读性和可维护性了。<br>4. 效率<br>保证了准确性后，才需要是否要考虑要优化。大多数情形是不需要优化的，除非运行的非常慢。什么情形正则表达式运行才慢呢？我们需要考察正则表达式的运行过程（原理）。</p><p>正则表达式的运行分为如下的阶段：</p><p>编译<br>设定起始位置<br>尝试匹配<br>匹配失败的话，从下一位开始继续第3步<br>最终结果：匹配成功或失败<br>下面以代码为例，来看看这几个阶段都做了什么：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>lastIndex<span class="token punctuation">,</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"123abc34def"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 0 ["123", index: 0, input: "123abc34def"]</span><span class="token comment">// => 3 ["34", index: 6, input: "123abc34def"]</span><span class="token comment">// => 8 null</span><span class="token comment">// => 0 ["123", index: 0, input: "123abc34def"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体分析如下：</p><p><code>var regex = /\d+/g;</code><br>当生成一个正则时，引擎会对其进行编译。报错与否出现这这个阶段。</p><p><code>regex.exec(&quot;123abc34def&quot;)</code><br>当尝试匹配时，需要确定从哪一位置开始匹配。一般情形都是字符串的开头，即第0位。</p><p>但当使用test和exec方法，且正则有g时，起始位置是从正则对象的lastIndex属性开始。</p><p>因此第一次exec是从第0位开始，而第二次是从3开始的。</p><p>设定好起始位置后，就开始尝试匹配了。</p><p>比如第一次exec，从0开始，去尝试匹配，并且成功地匹配到3个数字。此时结束时的下标是2，因此下一次的起始位置是3。</p><p>而第二次，起始下标是3，但第3个字符是“a”，并不是数字。但此时并不会直接报匹配失败，而是移动到下一位置，即从第4位开始继续尝试匹配，但该字符是b，也不是数字。再移动到下一位，是c仍不行，再移动一位是数字3，此时匹配到了两位数字34。此时，下一次匹配的位置是d的位置，即第8位。</p><p>第三次，是从第8位开始匹配，直到试到最后一位，也没发现匹配的，因此匹配失败，返回null。同时设置lastIndex为0，即，如要再尝试匹配的话，需从头开始。</p><p>从上面可以看出，匹配会出现效率问题，主要出现在上面的第3阶段和第4阶段。</p><p>因此，主要优化手法也是针对这两阶段的。</p><p>4.1 使用具体型字符组来代替通配符，来消除回溯</p><p>而在第三阶段，最大的问题就是回溯。</p><p>例如，匹配双引用号之间的字符。如，匹配字符串123”abc”456中的”abc”。</p><p>如果正则用的是：&#x2F;“.*”&#x2F;，，会在第3阶段产生4次回溯（粉色表示.*匹配的内容）：</p><p>如果正则用的是：&#x2F;“.<em>?”&#x2F;，会产生2次回溯（粉色表示.</em>?匹配的内容）：</p><p>因为回溯的存在，需要引擎保存多种可能中未尝试过的状态，以便后续回溯时使用。注定要占用一定的内存。</p><p>此时要使用具体化的字符组，来代替通配符.，以便消除不必要的字符，此时使用正则&#x2F;“[^”]*”&#x2F;，即可。</p><p>4.2 使用非捕获型分组</p><p>因为括号的作用之一是，可以捕获分组和分支里的数据。那么就需要内存来保存它们。</p><p>当我们不需要使用分组引用和反向引用时，此时可以使用非捕获分组。例如：</p><p><code>/^[+-]?(\d+\.\d+|\d+|\.\d+)$/</code></p><p>可以修改成：</p><p><code>/^[+-]?(?:\d+\.\d+|\d+|\.\d+)$/</code></p><p>4.3 独立出确定字符</p><p>例如&#x2F;a+&#x2F;，可以修改成&#x2F;aa*&#x2F;。</p><p>因为后者能比前者多确定了字符a。这样会在第四步中，加快判断是否匹配失败，进而加快移位的速度。</p><p>4.4 提取分支公共部分</p><p>比如&#x2F;^abc|^def&#x2F;，修改成&#x2F;^(?:abc|def)&#x2F;。</p><p>又比如&#x2F;this|that&#x2F;，修改成&#x2F;th(?:is|at)&#x2F;。</p><p>这样做，可以减少匹配过程中可消除的重复。</p><p>4.5 减少分支的数量，缩小它们的范围</p><p>&#x2F;red|read&#x2F;，可以修改成&#x2F;rea?d&#x2F;。此时分支和量词产生的回溯的成本是不一样的。但这样优化后，可读性会降低的。</p><p>第六章小结<br>本章涉及的内容并不多。</p><p>一般情况下，针对某问题能写出一个满足需求的正则，基本上就可以了。</p><p>至于准确性和效率方面的追求，纯属看个人要求了。我觉得够用就行了。</p><p>关于准确性，本章关心的是最常用的解决思路：</p><p>针对每种情形，分别写出正则，然用分支把他们合并在一起，再提取分支公共部分，就能得到准确的正则。</p><p>至于优化，本章没有为了凑数，去写一大堆。了解了匹配原理，常见的优化手法也就这么几种。</p><p>第七章 正则表达式编程<br>什么叫知识，能指导我们实践的东西才叫知识。</p><p>学习一样东西，如果不能使用，最多只能算作纸上谈兵。正则表达式的学习，也不例外。</p><p>掌握了正则表达式的语法后，下一步，也是关键的一步，就是在真实世界中使用它。</p><p>那么如何使用正则表达式呢？有哪些关键的点呢？本章就解决这个问题。</p><p>内容包括：</p><p>正则表达式的四种操作<br>相关API注意要点<br>真实案例</p><ol><li>正则表达式的四种操作<br>正则表达式是匹配模式，不管如何使用正则表达式，万变不离其宗，都需要先“匹配”。</li></ol><p>有了匹配这一基本操作后，才有其他的操作：验证、切分、提取、替换。</p><p>进行任何相关操作，也需要宿主引擎相关API的配合使用。当然，在JS中，相关API也不多。</p><p>1.1 验证</p><p>验证是正则表达式最直接的应用，比如表单验证。</p><p>在说验证之前，先要说清楚匹配是什么概念。</p><p>所谓匹配，就是看目标字符串里是否有满足匹配的子串。因此，“匹配”的本质就是“查找”。</p><p>有没有匹配，是不是匹配上，判断是否的操作，即称为“验证”。</p><p>这里举一个例子，来看看如何使用相关API进行验证操作的。</p><p>比如，判断一个字符串中是否有数字。</p><p>使用search</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token operator">~</span>string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span>使用test<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span>使用match<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span>使用exec<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，最常用的是test。</p><p>1.2 切分</p><p>匹配上了，我们就可以进行一些操作，比如切分。</p><p>所谓“切分”，就是把目标字符串，切成一段一段的。在JS中使用的是split。</p><p>比如，目标字符串是”html,css,javascript”，按逗号来切分：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["html", "css", "javascript"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>又比如，如下的日期格式：</p><p>2017&#x2F;06&#x2F;26</p><p>2017.06.26</p><p>2017-06-26</p><p>可以使用split“切出”年月日：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\D</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017/06/26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017.06.26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "06", "26"]</span><span class="token comment">// => ["2017", "06", "26"]</span><span class="token comment">// => ["2017", "06", "26"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.3 提取</p><p>虽然整体匹配上了，但有时需要提取部分匹配的数据。</p><p>此时正则通常要使用分组引用（分组捕获）功能，还需要配合使用相关API。</p><p>这里，还是以日期为例，提取出年月日。注意下面正则中的括号：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">match<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span>exec<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =>["2017-06-26", "2017", "06", "26", index: 0, input: "2017-06-26"]</span>test<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$3 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "2017" "06" "26"</span>search<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$1<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$2<span class="token punctuation">,</span> RegExp<span class="token punctuation">.</span>$3 <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "2017" "06" "26"</span>replace<span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\d&#123;4&#125;)\D(\d&#123;2&#125;)\D(\d&#123;2&#125;)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-26"</span><span class="token punctuation">;</span><span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>date<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "06", "26"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，最常用的是match。</p><p>1.4 替换</p><p>找，往往不是目的，通常下一步是为了替换。在JS中，使用replace进行替换。</p><p>比如把日期格式，从yyyy-mm-dd替换成yyyy&#x2F;mm&#x2F;dd：</p><p>var string &#x3D; “2017-06-26”;<br>var today &#x3D; new Date( string.replace(&#x2F;-&#x2F;g, “&#x2F;“) );<br>console.log( today );<br>&#x2F;&#x2F; &#x3D;&gt; Mon Jun 26 2017 00:00:00 GMT+0800 (中国标准时间)<br>这里只是简单地应用了一下replace。但，replace方法是强大的，是需要重点掌握的。</p><ol start="2"><li>相关API注意要点<br>从上面可以看出用于正则操作的方法，共有6个，字符串实例4个，正则实例2个：</li></ol><p>String#search</p><p>String#split</p><p>String#match</p><p>String#replace</p><p>RegExp#test</p><p>RegExp#exec</p><p>本文不打算详细地讲解它们的方方面面细节，具体可以参考《JavaScript权威指南》的第三部分。本文重点列出一些容易忽视的地方，以飨读者。</p><p>2.1 search和match的参数问题</p><p>我们知道字符串实例的那4个方法参数都支持正则和字符串。</p><p>但search和match，会把字符串转换为正则的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 0</span><span class="token comment">//需要修改成下列形式之一</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 4</span><span class="token comment">// => 4</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2", index: 0, input: "2017.06.27"]</span><span class="token comment">//需要修改成下列形式之一</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => [".", index: 4, input: "2017.06.27"]</span><span class="token comment">// => [".", index: 4, input: "2017.06.27"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "06", "27"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "2017/06.27"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.2 match返回结果的格式问题</p><p>match返回结果的格式，与正则对象是否有修饰符g有关。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex1 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(\d+)\b</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(\d+)\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex1<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "2017", index: 0, input: "2017.06.27"]</span><span class="token comment">// => ["2017", "06", "27"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有g，返回的是标准匹配格式，即，数组的第一个元素是整体匹配的内容，接下来是分组捕获的内容，然后是整体匹配的第一个下标，最后是输入的目标字符串。</p><p>有g，返回的是所有匹配的内容。</p><p>当没有匹配时，不管有无g，都返回null。</p><p>2.3 exec比match更强大</p><p>当正则没有g时，使用match返回的信息比较多。但是有g后，就没有关键的信息index了。</p><p>而exec方法就能解决这个问题，它能接着上一次匹配后继续匹配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(\d+)\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex2<span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017", "2017", index: 0, input: "2017.06.27"]</span><span class="token comment">// => 4</span><span class="token comment">// => ["06", "06", index: 5, input: "2017.06.27"]</span><span class="token comment">// => 7</span><span class="token comment">// => ["27", "27", index: 8, input: "2017.06.27"]</span><span class="token comment">// => 10</span><span class="token comment">// => null</span><span class="token comment">// => 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中正则实例lastIndex属性，表示下一次匹配开始的位置。</p><p>比如第一次匹配了“2017”，开始下标是0，共4个字符，因此这次匹配结束的位置是3，下一次开始匹配的位置是4。</p><p>从上述代码看出，在使用exec时，经常需要配合使用while循环：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017.06.27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex2 <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\b(\d+)\b</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> result<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> result <span class="token operator">=</span> regex2<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> result<span class="token punctuation">,</span> regex2<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// => ["2017", "2017", index: 0, input: "2017.06.27"] 4</span><span class="token comment">// => ["06", "06", index: 5, input: "2017.06.27"] 7</span><span class="token comment">// => ["27", "27", index: 8, input: "2017.06.27"] 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.4 修饰符g，对exex和test的影响</p><p>上面提到了正则实例的lastIndex属性，表示尝试匹配时，从字符串的lastIndex位开始去匹配。</p><p>字符串的四个方法，每次匹配时，都是从0开始的，即lastIndex属性始终不变。</p><p>而正则实例的两个方法exec、test，当正则是全局匹配时，每一次匹配完成后，都会修改lastIndex。下面让我们以test为例，看看你是否会迷糊：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ababc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true 1</span><span class="token comment">// => true 3</span><span class="token comment">// => false 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面代码中的第三次调用test，因为这一次尝试匹配，开始从下标lastIndex即3位置处开始查找，自然就找不到了。</p><p>如果没有g，自然都是从字符串第0个字符处开始尝试匹配：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"aba"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"ababc"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> regex<span class="token punctuation">.</span>lastIndex <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true 0</span><span class="token comment">// => true 0</span><span class="token comment">// => true 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.5 test整体匹配时需要使用^和$</p><p>这个相对容易理解，因为test是看目标字符串中是否有子串匹配正则，即有部分匹配即可。</p><p>如果，要整体匹配，正则前后需要添加开头和结尾：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">123</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a123b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^123$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"a123b"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^123$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.6 split相关注意事项</p><p>split方法看起来不起眼，但要注意的地方有两个的。</p><p>第一，它可以有第二个参数，表示结果数组的最大长度：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">,</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =>["html", "css"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二，正则使用分组时，结果数组中是包含分隔符的：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"html,css,javascript"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(,)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// =>["html", ",", "css", ",", "javascript"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.7 replace是很强大的</p><p>《JavaScript权威指南》认为exec是这6个API中最强大的，而我始终认为replace才是最强大的。因为它也能拿到该拿到的信息，然后可以假借替换之名，做些其他事情。</p><p>总体来说replace有两种使用形式，这是因为它的第二个参数，可以是字符串，也可以是函数。</p><p>当第二个参数是字符串时，如下的字符有特殊的含义：</p><p>$1,$2,…,$99 匹配第1~99个分组里捕获的文本<br>$&amp; 匹配到的子串文本<br>$&#96; 匹配到的子串的左边文本<br>$’ 匹配到的子串的右边文本<br>? 美元符号<br>例如，把”2,3,5”，变成”5&#x3D;2+3”：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2,3,5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+),(\d+),(\d+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$3=$1+$2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "5=2+3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>又例如，把”2,3,5”，变成”222,333,555”:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2,3,5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"$&amp;$&amp;$&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "222,333,555"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再例如，把”2+3&#x3D;5”，变成”2+3&#x3D;2+3&#x3D;5&#x3D;5”:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">"2+3=5"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">=</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">"$&amp;$`$&amp;$'$&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "2+3=2+3=5=5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当第二个参数是函数时，我们需要注意该回调函数的参数具体是什么：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"1234 2345 3456"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\d)\d&#123;2&#125;(\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> index<span class="token punctuation">,</span> input</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span>match<span class="token punctuation">,</span> $1<span class="token punctuation">,</span> $2<span class="token punctuation">,</span> index<span class="token punctuation">,</span> input<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["1234", "1", "4", 0, "1234 2345 3456"]</span><span class="token comment">// => ["2345", "2", "5", 5, "1234 2345 3456"]</span><span class="token comment">// => ["3456", "3", "6", 10, "1234 2345 3456"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时我们可以看到replace拿到的信息，并不比exec少。</p><p>2.8 使用构造函数需要注意的问题</p><p>一般不推荐使用构造函数生成正则，而应该优先使用字面量。因为用构造函数会多写很多\。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"2017-06-27 2017.06.27 2017/06/27"</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;4&#125;(-|\.|\/)\d&#123;2&#125;\1\d&#123;2&#125;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017-06-27", "2017.06.27", "2017/06/27"]</span>regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\d&#123;4&#125;(-|\\.|\\/)\\d&#123;2&#125;\\1\\d&#123;2&#125;"</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => ["2017-06-27", "2017.06.27", "2017/06/27"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.9 修饰符</p><p>ES5中修饰符，共3个：</p><p>g 全局匹配，即找到所有匹配的，单词是global</p><p>i 忽略字母大小写，单词ingoreCase</p><p>m 多行匹配，只影响^和$，二者变成行的概念，即行开头和行结尾。单词是multiline</p><p>当然正则对象也有相应的只读属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">img</span></span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>global <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>ignoreCase <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span>multiline <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.10 source属性</p><p>正则实例对象属性，除了global、ingnoreCase、multiline、lastIndex属性之外，还有一个source属性。</p><p>它什么时候有用呢？</p><p>比如，在构建动态的正则表达式时，可以通过查看该属性，来确认构建出的正则到底是什么：</p><pre class="line-numbers language-none"><code class="language-none">var className &#x3D; &quot;high&quot;;var regex &#x3D; new RegExp(&quot;(^|\\s)&quot; + className + &quot;(\\s|$)&quot;);console.log( regex.source )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&#x2F;&#x2F; &#x3D;&gt; (^|\s)high(\s|$) 即字符串”(^|\s)high(\s|$)”<br>2.11 构造函数属性</p><p>构造函数的静态属性基于所执行的最近一次正则操作而变化。除了是$1,…,$9之外，还有几个不太常用的属性（有兼容性问题）：</p><p>RegExp.input 最近一次目标字符串，简写成RegExp[“$_”]<br>RegExp.lastMatch 最近一次匹配的文本，简写成RegExp[“$&amp;”]<br>RegExp.lastParen 最近一次捕获的文本，简写成RegExp[“$+”]<br>RegExp.leftContext 目标字符串中lastMatch之前的文本，简写成RegExp[“$&#96;”]<br>RegExp.rightContext 目标字符串中lastMatch之后的文本，简写成RegExp[“$’”]<br>测试代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([abc])(\d)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">"a1b2c3d4e5"</span><span class="token punctuation">;</span>string<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>input <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$_"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "a1b2c3d4e5"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>lastMatch <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$&amp;"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "c3"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>lastParen <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$+"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "3"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>leftContext <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$`"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "a1b2"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>rightContext <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">[</span><span class="token string">"$'"</span><span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "d4e5"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>真实案例<br>3.1 使用构造函数生成正则表达式</li></ol><p>我们知道要优先使用字面量来创建正则，但有时正则表达式的主体是不确定的，此时可以使用构造函数来创建。模拟getElementsByClassName方法，就是很能说明该问题的一个例子。</p><p>这里getElementsByClassName函数的实现思路是：</p><p>比如要获取className为”high”的dom元素；<br>首先生成一个正则：&#x2F;(^|\s)high(\s|$)&#x2F;；<br>然后再用其逐一验证页面上的所有dom元素的类名，拿到满足匹配的元素即可。<br>代码如下(可以直接复制到本地查看运行效果)：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"high"</span><span class="token operator">></span><span class="token number">1111</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"high"</span><span class="token operator">></span><span class="token number">2222</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token number">3333</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">function</span> <span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token parameter">className</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"(^|\\s)"</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"(\\s|$)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> element <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> highs <span class="token operator">=</span> <span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'high'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>highs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>item<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.2 使用字符串保存数据</p><p>一般情况下，我们都愿意使用数组来保存数据。但我看到有的框架中，使用的却是字符串。</p><p>使用时，仍需要把字符串切分成数组。虽然不一定用到正则，但总感觉酷酷的，这里分享如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token string">"Boolean|Number|String|Function|Array|Date|RegExp|Object|Error"</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>utils<span class="token punctuation">[</span><span class="token string">"is"</span> <span class="token operator">+</span> item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"[object "</span> <span class="token operator">+</span> item <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> utils<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.3 if语句中使用正则替代&amp;&amp;</p><p>比如，模拟ready函数，即加载完毕后再执行回调（不兼容ie的）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> readyRE <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">complete|loaded|interactive</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>readyRE<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"加载完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.4 使用强大的replace</p><p>因为replace方法比较强大，有时用它根本不是为了替换，只是拿其匹配到的信息来做文章。</p><p>这里以查询字符串（querystring）压缩技术为例，注意下面replace方法中，回调函数根本没有返回任何东西。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> keys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([^=&amp;]+)=([^&amp;]*)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">full<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">?</span> keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> keys<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token function">compress</span><span class="token punctuation">(</span><span class="token string">"a=1&amp;b=2&amp;a=3&amp;b=4"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => "a=1,3&amp;b=2,4"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.5 综合运用</p><p>最后这里再做个简单实用的正则测试器。</p><p>具体效果如下：</p><p>代码，直接贴了，相信你能看得懂：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>section<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"err"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"regex"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入正则表达式"</span><span class="token operator">></span><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入测试文本"</span><span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"run"</span><span class="token operator">></span>测试一下<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"result"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>section<span class="token punctuation">&#123;</span><span class="token literal-property property">display</span><span class="token operator">:</span>flex<span class="token punctuation">;</span>flex<span class="token operator">-</span>direction<span class="token operator">:</span>column<span class="token punctuation">;</span>justify<span class="token operator">-</span>content<span class="token operator">:</span>space<span class="token operator">-</span>around<span class="token punctuation">;</span><span class="token literal-property property">height</span><span class="token operator">:</span>300px<span class="token punctuation">;</span><span class="token literal-property property">padding</span><span class="token operator">:</span><span class="token number">0</span> 200px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>section <span class="token operator">*</span><span class="token punctuation">&#123;</span>min<span class="token operator">-</span>height<span class="token operator">:</span>30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#err <span class="token punctuation">&#123;</span><span class="token literal-property property">color</span><span class="token operator">:</span>red<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>#result<span class="token punctuation">&#123;</span>line<span class="token operator">-</span>height<span class="token operator">:</span>30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>info <span class="token punctuation">&#123;</span><span class="token literal-property property">background</span><span class="token operator">:</span>#00c5ff<span class="token punctuation">;</span><span class="token literal-property property">padding</span><span class="token operator">:</span>2px<span class="token punctuation">;</span><span class="token literal-property property">margin</span><span class="token operator">:</span>2px<span class="token punctuation">;</span><span class="token literal-property property">display</span><span class="token operator">:</span>inline<span class="token operator">-</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取相应dom元素</span><span class="token keyword">var</span> regexInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"regex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> textInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> runBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> errBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> resultBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定点击事件</span>runBtn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 清除错误和结果</span>errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">// 获取正则和文本</span><span class="token keyword">var</span> text <span class="token operator">=</span> textInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">var</span> regex <span class="token operator">=</span> regexInput<span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入正则表达式"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"请输入测试文本"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>regex <span class="token operator">=</span> <span class="token function">createRegex</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>regex<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token keyword">var</span> result<span class="token punctuation">,</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 没有修饰符g的话，会死循环</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">.</span>global<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>results<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>regex<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"匹配到0个结果"</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 倒序是有必要的</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> results<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> result <span class="token operator">=</span> results<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> match <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> prefix <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> suffix <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>index <span class="token operator">+</span> match<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>text <span class="token operator">=</span> prefix <span class="token operator">+</span> <span class="token string">'&lt;span class="info">'</span><span class="token operator">+</span> match<span class="token operator">+</span> <span class="token string">'&lt;/span>'</span><span class="token operator">+</span> suffix<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>resultBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"匹配到"</span> <span class="token operator">+</span> results<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">"个结果:&lt;br>"</span> <span class="token operator">+</span> text<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 生成正则表达式，核心函数</span><span class="token keyword">function</span> <span class="token function">createRegex</span><span class="token punctuation">(</span><span class="token parameter">regex</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>regex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>regex <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>regex<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> flags <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>regex <span class="token operator">=</span> regex<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> regex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>errBox<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"无效的正则表达式"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第七章小结<br>相关API的注意点，本章基本上算是一网打尽了。</p><p>至于文中的例子，都是点睛之笔，没有详细解析。如有理解不透的，建议自己敲一敲。</p><p>后记<br>其实本文首发于：正则表达式系列总结 - 知乎专栏</p><p>原文是一个系列。一直等到老姚成为掘金的专栏作者，经过仔细考虑，在掘金平台没有采用系列形式，而是合成为了一篇文章。这样既便于读者阅读，最起码能一气呵成地阅读。同时也便于作者统一回复留言。</p><p>文章要结束了，最后还要有几点说明。</p><ol><li>需要注意的地方<br>本文主要讨论的是JavaScript的正则表达式，更精确地说是ES5的正则表达式。</li></ol><p>JavaScript的正则表达式引擎是传统型NFA的，因此本系列的讨论是适合任何一门正则引擎是传统型NFA的编程语言。当然，市面上大部分语言的正则引擎都是这种的。而JS里正则涉及到的所有语法要点，是这种引擎支持的核心子集。也就是说，要学正则表达式，不妨以JS正则为出发点。</p><ol start="2"><li>参考资料<br>当然本文不是无本之末。主要参考的是几本书籍。</li></ol><p>以下书籍中核心章节都认真阅读过，甚至阅读多遍。</p><p>《JavaScript权威指南》，看完本系列，再去看书中的第10章，你就知道了什么叫字字珠玑。</p><p>《精通正则表达式》，权威且比较杂乱，我阅读的第一本正则表达式书籍。</p><p>《正则表达式必知必会》，这是我看的第二本正则，看完后，确定自己算是入门了。</p><p>《正则指引》，《精通正则表达式》的译者写的，相对清晰。</p><p>《正则表达式入门》，我看的是英文版的，对于已经入门的我，基本没多少收获了。</p><p>《正则表达式经典实例》，除了第3章，比较杂外，也有收获，以实例为主导的一本书。</p><p>《JavaScript Regular Expressions》，为数不多转讲JS正则的。页数不多，也有收获。</p><p>《高性能JavaScript 》第5章，我看的是英文版的。第5章，讲了回溯和优化。</p><p>《JavaScript忍者秘籍》第7章，大概讲了一下正则的用法，几个例子还不错。</p><p>《JavaScript高级程序设计》第5.4节，比较简短的介绍。</p><p>使用的工具：</p><p>Regulex，一款可视化工具<br>ProcessOn - 免费在线作图，实时协作<br>LICEcap – 灵活好用，GIF 屏幕录制工具</p><ol start="3"><li>个人感悟<br>要多写文章的</li></ol><p>首先，我十分感谢读者。读者能在信息泛滥的网络里，点击我的文章进来瞧两眼，这都是对其注意力的消费。更何况，还有很多童鞋都认真读了，甚至给我挑毛病，这都是对我的帮助。不知有多少童鞋是从头读到这里的，不妨留言打卡，让我知道你是用心的读者，而并非简简单单地收藏一下，然后就再也不曾看过了。</p><p>说到要写文章，其目的是以教为学。看似为了教，其实是为了学。能教会别人才算自己真正学会了，最起码形成了文字，通过了自己的语言逻辑这一关。如果还能有人指出你的错误认知，那样收获就更大了，何乐而不为呢？</p><p>很多书中都提到类似的观点，例如《知道做到》《好好学习》《与时间做朋友》《暗时间》等。</p><p>以教为学的其他手段</p><p>当然，以教为学的手段还有很多，比如翻译一本书。我私下已经翻译了好几本（窃喜^_^）。</p><p>可以从薄点的书籍开始，比如100页左右的。基本上使用有道就可以了，也不用要求自己一词一句的翻译，能用自己的话说明白就行了。说到这里，不得不提起，我们的阮一峰大神，在我看来，他就是成功地应用这种模式的。看完外文的文章，理解明白了，用自己的话说一说，再形成自己的简练风格。</p><p>恐怕你可能说自己的英文水平不够，没信心尝试。相信我，熟悉了常用词汇（比如literal翻译成字面量）后，配合有道翻译，薄点的书，一天翻译一章是没问题的。当然前提是你懂相关领域，不然是没办法意译的。</p><p>最后一种以教为学的手段是，写一本书。写文章是基础，文章多了，自然而言就可以写成一本书。当然，写书强调的是整体架构，所以文章最好成体系。</p><p>你看看那些国内专业书籍的作者，一般都事先翻译过几本书的。最起码在前端领域，我就看到了好几位是这么干的。翻译明白了，学会了，用自己的角度去弄出一本书还是相对很容易的。</p><p>虽然，本人并未曾写过书，但上述方法，我始终相信是可行的。</p><p>最后，我们该想到，陆游诗人对前端界做出的最大贡献是：</p><p>纸上得来终觉浅，绝知此事要躬行。</p><p>本文完。</p><p>可以收藏PDF版本：<a href="https://github.com/qdlaoyao/js-regex-mini-book">JavaScript正则迷你书</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20种css3按钮hover悬停特效</title>
      <link href="/2023/10/20/20-chong-css3-an-niu-hover-xuan-ting-te-xiao/"/>
      <url>/2023/10/20/20-chong-css3-an-niu-hover-xuan-ting-te-xiao/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS-20种css3按钮hover悬停特效-来自网络"><a href="#CSS-20种css3按钮hover悬停特效-来自网络" class="headerlink" title="CSS 20种css3按钮hover悬停特效(来自网络)"></a>CSS 20种css3按钮hover悬停特效(来自网络)</h3><hr><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/3.gif" alt="截图" title="代码效果示例"></p><hr><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> Verdana<span class="token punctuation">,</span> Geneva<span class="token punctuation">,</span> Tahoma<span class="token punctuation">,</span> sans-serif        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid</span> <span class="token punctuation">&#123;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #b89467<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>            <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fit<span class="token punctuation">,</span> <span class="token function">minmax</span><span class="token punctuation">(</span>220px<span class="token punctuation">,</span> 1fr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">gap</span><span class="token punctuation">:</span> 10px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 220px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field h1</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 2px 20px 10px 6px<span class="token punctuation">;</span>            <span class="token property">align-self</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #7c7000<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #0586b1<span class="token punctuation">;</span>            <span class="token property">border-bottom-right-radius</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field button</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>            <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 155px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> unset<span class="token punctuation">;</span>            <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>9px<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field button:focus</span> <span class="token punctuation">&#123;</span>            <span class="token property">outline</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but1</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> orange<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px darkgreen solid<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but1:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>orange<span class="token punctuation">,</span> red<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 10px 1px #97d189<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but2</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #00f<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">hue-rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition-property</span><span class="token punctuation">:</span> filter<span class="token punctuation">,</span> letter-spacing<span class="token punctuation">,</span> box-shadow<span class="token punctuation">,</span> border-radius<span class="token punctuation">;</span>            <span class="token property">transition-duration</span><span class="token punctuation">:</span> 5s<span class="token punctuation">,</span> 1s<span class="token punctuation">,</span> 1s<span class="token punctuation">,</span> 2s<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> groove 2px green        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but2:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">hue-rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 10px 0 white<span class="token punctuation">,</span> 0px 2px 20px 0 #4f7507<span class="token punctuation">,</span> 0px 3px 30px 0 #ff0505<span class="token punctuation">,</span> 0px 4px 40px 0 white<span class="token punctuation">,</span> 0px 5px 300px 0 #1b0202        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.301<span class="token punctuation">)</span> 20%<span class="token punctuation">,</span> black<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span> 1px solid        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3::before,        div.grid div.field .but3::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> white        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> darkslateblue<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 25px<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 1000px 10px <span class="token function">rgba</span><span class="token punctuation">(</span>220<span class="token punctuation">,</span> 245<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.986<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but3:hover:after,        div.grid div.field .but3:hover:before</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>105<span class="token punctuation">,</span> 105<span class="token punctuation">,</span> 105<span class="token punctuation">,</span> 0.082<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.932<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but4:hover:before,        div.grid div.field .but4:hover:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 2.3px solid green<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.0455<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but5:hover:before,        div.grid div.field .but5:hover:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but6</span> <span class="token punctuation">&#123;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 3px orangered solid<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #0f251a        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but6::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -3px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 3px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but6::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> -3px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 3px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but6:hover:after,        div.grid div.field .but6:hover:before</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 119px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but7</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-15deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>10px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid Olive<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #dd0c97        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but7:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>10px<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-15deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> -7px 7px 1px 1px <span class="token function">rgba</span><span class="token punctuation">(</span>221<span class="token punctuation">,</span> 12<span class="token punctuation">,</span> 151<span class="token punctuation">,</span> 0.623<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but8</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to top<span class="token punctuation">,</span> #423e3e 50%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.068<span class="token punctuation">)</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">-webkit-box-reflect</span><span class="token punctuation">:</span> below 1px <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.219<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.005<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">-moz-box-reflect</span><span class="token punctuation">:</span> below 1px <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.219<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.005<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">-o-box-reflect</span><span class="token punctuation">:</span> below 1px <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.219<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.005<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but8:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom<span class="token punctuation">,</span> #423e3e 50%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.068<span class="token punctuation">)</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 100px 5px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.349<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #0fa<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 4px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but8::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>45deg<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>241<span class="token punctuation">,</span> 241<span class="token punctuation">,</span> 241<span class="token punctuation">,</span> 0.266<span class="token punctuation">)</span><span class="token punctuation">,</span> transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but8:hover::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #0a5fbf<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #440101<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> greenyellow 1px solid        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9::after,        div.grid div.field .but9::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 65%<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> greenyellow        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -120px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -120px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9:hover::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -20px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9:hover::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -20px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but9:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #141401<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> white 1px solid        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10</span> <span class="token punctuation">&#123;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>94<span class="token punctuation">,</span> 57<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 0.986<span class="token punctuation">)</span> 1px solid<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> #a0a0a0 -28px -63px 21px -50px inset<span class="token punctuation">,</span> #fff -49px 72px 19px -50px inset<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>94<span class="token punctuation">,</span> 78<span class="token punctuation">,</span> 78<span class="token punctuation">,</span> 0.89<span class="token punctuation">)</span> -48px 65px 7px -50px inset<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.89<span class="token punctuation">)</span> -63px -80px 0 -50px inset<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>254<span class="token punctuation">,</span> 254<span class="token punctuation">,</span> 254<span class="token punctuation">,</span> 0.47<span class="token punctuation">)</span> 61px 75px 0 -49px inset        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -1px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 1px <span class="token function">rgba</span><span class="token punctuation">(</span>94<span class="token punctuation">,</span> 57<span class="token punctuation">,</span> 3<span class="token punctuation">,</span> 0.986<span class="token punctuation">)</span> solid<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> black        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.137<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10:hover:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">'âœ”'</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -40px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10:hover:before</span> <span class="token punctuation">&#123;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>75deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but10:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-10px<span class="token punctuation">,</span> 9px<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> inherit        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>50% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 100% 50%<span class="token punctuation">,</span> 85% 100%<span class="token punctuation">,</span> 50% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #00e71f        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>15% 0<span class="token punctuation">,</span> 50% 0<span class="token punctuation">,</span> 50% 100%<span class="token punctuation">,</span> 15% 100%<span class="token punctuation">,</span> 0% 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #523c01        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span:nth-child(1):hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #523c01<span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>15% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 100% 50%<span class="token punctuation">,</span> 85% 100%<span class="token punctuation">,</span> 15% 100%<span class="token punctuation">,</span> 0 50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but11 span:nth-child(2):hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #00e71f<span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>15% 0<span class="token punctuation">,</span> 85% 0<span class="token punctuation">,</span> 100% 50%<span class="token punctuation">,</span> 85% 100%<span class="token punctuation">,</span> 15% 100%<span class="token punctuation">,</span> 0 50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but12</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>128<span class="token punctuation">,</span> 128<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.103<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but12 svg,        div.grid div.field .but12 svg rect</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">fill</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but12 svg rect</span> <span class="token punctuation">&#123;</span>            <span class="token property">stroke</span><span class="token punctuation">:</span> #f00<span class="token punctuation">;</span>            <span class="token property">stroke-width</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 155 40<span class="token punctuation">;</span>            <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> 195        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but12:hover svg rect</span> <span class="token punctuation">&#123;</span>            <span class="token property">stroke</span><span class="token punctuation">:</span> lightseagreen<span class="token punctuation">;</span>            <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 40 155<span class="token punctuation">;</span>            <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> -155        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #ffff<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13 svg</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13 svg ellipse</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">fill</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s <span class="token function">cubic-bezier</span><span class="token punctuation">(</span>0.24<span class="token punctuation">,</span> 0.32<span class="token punctuation">,</span> 0.51<span class="token punctuation">,</span> 1.43<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">stroke-width</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>            <span class="token property">stroke</span><span class="token punctuation">:</span> #00cbe6<span class="token punctuation">;</span>            <span class="token property">fill</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>64<span class="token punctuation">,</span> 224<span class="token punctuation">,</span> 208<span class="token punctuation">,</span> 0.096<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 77 50<span class="token punctuation">;</span>            <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> 127        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13:hover svg ellipse</span> <span class="token punctuation">&#123;</span>            <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 550 127<span class="token punctuation">;</span>            <span class="token property">stroke-dashoffset</span><span class="token punctuation">:</span> 127        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but13:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #00ff0d<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #2a2b03<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px #000 solid        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span:nth-child(3)</span> <span class="token punctuation">&#123;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14 span:nth-child(4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14:hover span</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 85%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 96%<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px #000 ridge        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but14:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 6px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> sp1 3s linear alternate-reverse infinite        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> sp1</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">left</span><span class="token punctuation">:</span> -100%            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">left</span><span class="token punctuation">:</span> 100%            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> sp2 3s linear alternate-reverse infinite        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> sp2</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">right</span><span class="token punctuation">:</span> -100%            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">right</span><span class="token punctuation">:</span> 100%            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15 span:nth-child(3)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -40px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> sp3 3s linear alternate-reverse infinite        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> sp3</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">top</span><span class="token punctuation">:</span> -100%            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">top</span><span class="token punctuation">:</span> 100%            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15 span:nth-child(4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> -40px<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> sp4 3s linear alternate-reverse infinite        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> sp4</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">bottom</span><span class="token punctuation">:</span> -100%            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">bottom</span><span class="token punctuation">:</span> 100%            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but15:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> gold<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 100px 3px gold        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> aqua<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> darkbLue<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:before,        div.grid div.field .but16:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 20%<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #000        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:before</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -10%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -10%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:focus</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #030338<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> 1s        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but16:focus span</span> <span class="token punctuation">&#123;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewX</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.637<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skewY</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #3a0303<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -5px<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> 6<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -10px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to left<span class="token punctuation">,</span> transparent<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">,</span> transparent<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but17:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> maroon<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> mediumblue        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">,</span> transparent 33.33%<span class="token punctuation">,</span> #009688 33.33%<span class="token punctuation">,</span> #009688 66.667%<span class="token punctuation">,</span> transparent 66.66%<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>45deg<span class="token punctuation">,</span> transparent 33.33%<span class="token punctuation">,</span> #009688 33.33%<span class="token punctuation">,</span> #009688 66.667%<span class="token punctuation">,</span> transparent 66.66%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> 20px 40px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> -10px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span:nth-child(3)</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> -25px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18 span:nth-child(4)</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -25px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but18:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 2px 20px #009688 inset<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> white        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> 10px 5px        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19 span:nth-child(1)</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #2b2a289c 50%<span class="token punctuation">,</span> #65616891 50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19 span:nth-child(2)</span> <span class="token punctuation">&#123;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #65616891 50%<span class="token punctuation">,</span> #2b2a289c 50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 15%<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 2px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> white        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but19:hover:after</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 60%<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 1px 10px 1px #522f03 inset        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> -1<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> 2px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.945<span class="token punctuation">)</span> solid<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 2px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.9<span class="token punctuation">)</span> solid<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> -2px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> .5s<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 2px solid orangered<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 21px<span class="token punctuation">;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> transparent        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20:hover::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 95%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20:hover::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 100%        <span class="token punctuation">&#125;</span>        <span class="token selector">div.grid div.field .but20:hover</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>177<span class="token punctuation">,</span> 37<span class="token punctuation">,</span> 13<span class="token punctuation">,</span> 0.788<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 5px        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>grid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>1.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>2.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>3.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>4.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>5.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>6.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>7.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>8.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>9.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>10.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>11.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>BUTTON<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>BUTTON<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>12.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rect</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rect</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>13.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but13<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ellipse</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>77<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>73<span class="token punctuation">"</span></span> <span class="token attr-name">ry</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>48<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ellipse</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>14.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but14<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>15.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but15<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>16.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but16<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>17.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but17<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>18.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>19.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but19<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>20.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>but20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 打字效果和JS监听元素即将进入视口后再加载</title>
      <link href="/2023/10/15/css-da-zi-xiao-guo-he-js-jian-ting-yuan-su-ji-jiang-jin-ru-shi-kou-hou-zai-jia-zai/"/>
      <url>/2023/10/15/css-da-zi-xiao-guo-he-js-jian-ting-yuan-su-ji-jiang-jin-ru-shi-kou-hou-zai-jia-zai/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS-打字效果和JS监听动画元素即将进入视口后再加载"><a href="#CSS-打字效果和JS监听动画元素即将进入视口后再加载" class="headerlink" title="CSS 打字效果和JS监听动画元素即将进入视口后再加载"></a>CSS 打字效果和JS监听动画元素即将进入视口后再加载</h3><hr><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/2.gif" alt="截图" title="代码效果示例"></p><p>  主要是JS监听动画元素即将进入视口后再加载</p><hr><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-Hans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format-detection<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>telephone=no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">.ooo</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 14em<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 1.25em<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 3px solid transparent<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> 楷体<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> Monaco<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>            <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.typing</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 14em<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 1.25em<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 3px solid transparent<span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> typing 3s forwards <span class="token function">steps</span><span class="token punctuation">(</span>26<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">,</span> blink-caret .75s forwards step-end<span class="token punctuation">;</span>            <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> 楷体<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> Monaco<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>            <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.ooo</span> <span class="token punctuation">&#123;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 14em<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 1.25em<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> 3px solid transparent<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> 楷体<span class="token punctuation">,</span> Consolas<span class="token punctuation">,</span> Monaco<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>            <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* 打印效果 */</span>        <span class="token atrule"><span class="token rule">@keyframes</span> typing</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">to</span> <span class="token punctuation">&#123;</span>                <span class="token property">width</span><span class="token punctuation">:</span> 14em<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* 光标闪啊闪 */</span>        <span class="token atrule"><span class="token rule">@keyframes</span> blink-caret</span> <span class="token punctuation">&#123;</span>            <span class="token selector">from,            to</span> <span class="token punctuation">&#123;</span>                <span class="token property">border-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>                <span class="token property">border-color</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.dazi</span> <span class="token punctuation">&#123;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> 3px solid #000<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #000<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>            <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 0.02em<span class="token punctuation">;</span>            <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>            <span class="token property">text-shadow</span><span class="token punctuation">:</span> 0 0 10px blue<span class="token punctuation">;</span>            <span class="token property">user-select</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.007em<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> shake 2.5s .2s linear forwards<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1 span</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>10% 0%<span class="token punctuation">,</span> 44% 0%<span class="token punctuation">,</span> 70% 100%<span class="token punctuation">,</span> 55% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1::before,        .kuyun h1::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1::before</span> <span class="token punctuation">&#123;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> crack1 2.5s linear forwards<span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>0% 0%<span class="token punctuation">,</span> 10% 0%<span class="token punctuation">,</span> 55% 100%<span class="token punctuation">,</span> 0% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.kuyun h1::after</span> <span class="token punctuation">&#123;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> crack2 2.5s linear forwards<span class="token punctuation">;</span>            <span class="token property">clip-path</span><span class="token punctuation">:</span> <span class="token function">polygon</span><span class="token punctuation">(</span>44% 0%<span class="token punctuation">,</span> 100% 0%<span class="token punctuation">,</span> 100% 100%<span class="token punctuation">,</span> 70% 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> shake</span> <span class="token punctuation">&#123;</span>            <span class="token selector">5%,            15%,            25%,            35%,            55%,            65%,            75%,            95%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.018em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0.018em<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">10%,            30%,            40%,            50%,            70%,            80%,            90%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.01em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-0.018em<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">20%,            60%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.03em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-0.018em<span class="token punctuation">,</span> 0.018em<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">45%,            85%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.03em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0.018em<span class="token punctuation">,</span> -0.018em<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">blur</span><span class="token punctuation">(</span>0.007em<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-0.5deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> crack1</span> <span class="token punctuation">&#123;</span>            <span class="token selector">0%,            95%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-51%<span class="token punctuation">,</span> -48%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token atrule"><span class="token rule">@keyframes</span> crack2</span> <span class="token punctuation">&#123;</span>            <span class="token selector">0%,            95%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-49%<span class="token punctuation">,</span> -53%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dazi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>typing ooo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>还是打飞机烤红薯的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 使用HTML5的新属性：数据属性：data-， --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1x1m<span class="token punctuation">"</span></span> <span class="token attr-name">data-animation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>kuyun<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>waiting-for-add<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">data-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>还是打飞机烤红薯的<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>还是打飞机烤红薯的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 处理typing动画暂停5s</span>        <span class="token keyword">var</span> scrollTip <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.typing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scrollTip<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'typing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scrollTip<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'animationend'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            scrollTip<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'typing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                scrollTip<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'typing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">// 开始进入视口的动画</span>        <span class="token comment">// 当元素进入视图时触发的回调函数</span>        <span class="token keyword">const</span> <span class="token function-variable function">handleIntersection</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">entries<span class="token punctuation">,</span> observer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">entry</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> animationClassName <span class="token operator">=</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-animation'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    entry<span class="token punctuation">.</span>target<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>animationClassName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加对应的动画</span>                    observer<span class="token punctuation">.</span><span class="token function">unobserve</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 元素一旦进入视图并开始动画，停止观察它</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 配置Intersection Observer</span>        <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>         <span class="token comment">// 使用视口作为根</span>            <span class="token literal-property property">rootMargin</span><span class="token operator">:</span> <span class="token string">'0px'</span><span class="token punctuation">,</span>  <span class="token comment">// 无边距</span>            <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">0.1</span>      <span class="token comment">// 当元素至少有10%可见时触发</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>handleIntersection<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 观察所有希望在进入视图时开始动画的元素</span>        <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.waiting-for-add'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS无限TAB栏切换，点击按钮自动居中</title>
      <link href="/2023/10/14/js-wu-xian-tab-lan-qie-huan-dian-ji-an-niu-zi-dong-ju-zhong/"/>
      <url>/2023/10/14/js-wu-xian-tab-lan-qie-huan-dian-ji-an-niu-zi-dong-ju-zhong/</url>
      
        <content type="html"><![CDATA[<h3 id="JS无限TAB栏切换，点击按钮自动居中"><a href="#JS无限TAB栏切换，点击按钮自动居中" class="headerlink" title="JS无限TAB栏切换，点击按钮自动居中"></a>JS无限TAB栏切换，点击按钮自动居中</h3><hr><p><img src="https://raw.githubusercontent.com/5soros/blogs-photos/main/1.gif" alt="截图" title="代码效果示例"></p><hr><p>遇到一个案例，需要TAB有点击滚动的效果，并且切换显示对应的文字，</p><p>在网上搜了一圈，没发现很合适的，要不就是需要给tab和content加唯一ID（麻烦）</p><p>所以有了这个代码。</p><hr><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">*</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">a</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #dcc833<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">li</span> <span class="token punctuation">&#123;</span>            <span class="token property">list-style-type</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.for9xOnly</span> <span class="token punctuation">&#123;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 8px 0<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#top7412</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #f2f2f2<span class="token punctuation">;</span>            <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>            <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>            <span class="token property">scroll-behavior</span><span class="token punctuation">:</span> smooth<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#top7412 li</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 18%<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> #bf9663<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> color 0.2s<span class="token punctuation">,</span> text-shadow 0.2s<span class="token punctuation">;</span>            <span class="token property">transition-timing-function</span><span class="token punctuation">:</span> ease-out<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>            <span class="token property">text-shadow</span><span class="token punctuation">:</span>                0 0 1px <span class="token function">rgba</span><span class="token punctuation">(</span>254<span class="token punctuation">,</span> 252<span class="token punctuation">,</span> 124<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 3px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 217<span class="token punctuation">,</span> 54<span class="token punctuation">,</span> 0.7<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 5px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 14px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 17px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 0 20px <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 1<span class="token punctuation">)</span><span class="token punctuation">,</span>                0 5px 25px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.9<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.wobble</span> <span class="token punctuation">&#123;</span>            <span class="token property">animation</span><span class="token punctuation">:</span> bounceIn .75s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#top7412 li.current9888</span> <span class="token punctuation">&#123;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #c0392b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651</span> <span class="token punctuation">&#123;</span>            <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>            <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651 li</span> <span class="token punctuation">&#123;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> 5px 15px<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> 800<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651 li p</span> <span class="token punctuation">&#123;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> 1px solid #dcc833<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651 li.current9888</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">.container::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token selector">.container</span><span class="token punctuation">&#123;</span>            <span class="token property">scrollbar-width</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">-ms-overflow-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>            <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                                <span class="token selector">.result123</span> <span class="token punctuation">&#123;</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> 5px 0<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>            <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>0deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>222<span class="token punctuation">,</span> 199<span class="token punctuation">,</span> 7<span class="token punctuation">,</span> 0.33<span class="token punctuation">)</span> 0%<span class="token punctuation">,</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">)</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset 0px 0px 0px 1px #ffffff<span class="token punctuation">,</span> 0 2px 3px <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token selector">#bottom4651 li span</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> #c0392b<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>for9xOnly<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top7412<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>current9888<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bottom4651<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>current9888<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>result123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token comment">// 获取id=top7412</span>        <span class="token keyword">var</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#top7412"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取id=top7412的宽</span>        <span class="token keyword">var</span> containerW <span class="token operator">=</span> container<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">;</span>        <span class="token comment">// 获取id=top7412的所有li，该变量为数组</span>        <span class="token keyword">var</span> navList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'top7412'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取id=bottom4651的所有li，该变量为数组</span>        <span class="token keyword">var</span> contents <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'bottom4651'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 函数名handleClick，参数event</span>        <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 删除 所有li的属性--class</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> navList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                navList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 设定触发事件的元素的 class 属性的值</span>            event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current9888 wobble"</span><span class="token punctuation">;</span>            <span class="token comment">// 获取触发事件的元素的 index 属性的值 （即bottom4651下的li的index值）</span>            <span class="token keyword">var</span> num <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历删除所有contents的类名（即bottom4651下的li的index值）</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> contents<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                contents<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 设定触发事件的元素的 class 属性的值。总结：排他算法</span>            contents<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"current9888"</span><span class="token punctuation">;</span>            <span class="token comment">// 获取到当前点击元素的 offsetLeft  - 包裹盒子 offsetWidth 的一半 + 当前点击元素 offsetWidth 的一半</span>            <span class="token comment">// event.target.offsetLeft获取到当前点击元素的 offsetLeft（即该元素左上角到父元素左边的距离）</span>            <span class="token comment">// containerW / 2 包裹盒子 offsetWidth 的一半</span>            <span class="token comment">// event.target.offsetWidth / 2 当前点击元素 offsetWidth 的一半</span>            <span class="token comment">// 这三个值相互加减，会产生什么效果？假设父盒子宽为800px，</span>            <span class="token comment">// 此时的当前点击元素位于最右边，假设其offsetLeft为750px（显示了该盒子的一半，其他部分被隐藏），</span>            <span class="token comment">// 其宽为100px，其一半的宽则为50px，750-400+50=300，则向左滚动300px，</span>                        <span class="token keyword">var</span> scrollLeftNum <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>offsetLeft <span class="token operator">-</span> containerW <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>offsetWidth <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token comment">// 执行container的滚动条向左滚动，如按上例，则为300px，</span>            <span class="token comment">// 本例中使用 CSS将滚动条隐藏，形成点击元素元素自动向容器中间移动的效果</span>            <span class="token comment">/***            CSS如下 使用overflow-y: auto;是为了可以滚动            .container::-webkit-scrollbar display: none;            .container&#123;                scrollbar-width: none;                -ms-overflow-style: none;                overflow-y: auto;             &#125;            */</span>            <span class="token comment">// container执行滚动</span>            container<span class="token punctuation">.</span>scrollLeft <span class="token operator">=</span> scrollLeftNum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 给每个li加index，再给每个li绑定事件监听</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> navList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            navList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            navList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> handleClick<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 可想而知，每个top的li和对应的每个bottom的li的index值都是相同的，</span>        <span class="token comment">// 所以不必给li们增加额外的id也可以让它们对应显示，</span>        <span class="token comment">// 只需要在点击触发的li对应的bottom的li加一个display:block即可</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 码海无涯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
